
TDL_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08006ca0  08006ca0  00016ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007120  08007120  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007120  08007120  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007120  08007120  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200001dc  08007304  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08007304  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095be  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac6  00000000  00000000  000297c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002bd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187e9  00000000  00000000  0002c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6d1  00000000  00000000  00044f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a101  00000000  00000000  000505d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da6d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004138  00000000  00000000  000da724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c84 	.word	0x08006c84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006c84 	.word	0x08006c84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_f2iz>:
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa0:	d30f      	bcc.n	8000fc2 <__aeabi_f2iz+0x2a>
 8000fa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d90d      	bls.n	8000fc8 <__aeabi_f2iz+0x30>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	bf18      	it	ne
 8000fbe:	4240      	negne	r0, r0
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2iz+0x3a>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d105      	bne.n	8000fde <__aeabi_f2iz+0x46>
 8000fd2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd6:	bf08      	it	eq
 8000fd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4770      	bx	lr

08000fe4 <Set_Pin_Output>:
#include "ds18b20.h"

extern TIM_HandleTypeDef htim1;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2302      	movs	r3, #2
 8001008:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4619      	mov	r1, r3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 ffe7 	bl	8001fe4 <HAL_GPIO_Init>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 ffca 	bl	8001fe4 <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <delay_us>:

void delay_us (uint16_t us)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <delay_us+0x2c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800106a:	bf00      	nop
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <delay_us+0x2c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3f9      	bcc.n	800106c <delay_us+0x14>
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	200001f8 	.word	0x200001f8

08001088 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	4815      	ldr	r0, [pc, #84]	; (80010ec <DS18B20_Start+0x64>)
 8001098:	f7ff ffa4 	bl	8000fe4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <DS18B20_Start+0x64>)
 80010a4:	f001 f939 	bl	800231a <HAL_GPIO_WritePin>
	delay_us (480);   // delay according to datasheet
 80010a8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80010ac:	f7ff ffd4 	bl	8001058 <delay_us>
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80010b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <DS18B20_Start+0x64>)
 80010b6:	f7ff ffb2 	bl	800101e <Set_Pin_Input>
	delay_us (80);    // delay according to datasheet
 80010ba:	2050      	movs	r0, #80	; 0x50
 80010bc:	f7ff ffcc 	bl	8001058 <delay_us>
	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN)))
 80010c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <DS18B20_Start+0x64>)
 80010c6:	f001 f911 	bl	80022ec <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <DS18B20_Start+0x4e>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 80010d0:	2301      	movs	r3, #1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	e001      	b.n	80010da <DS18B20_Start+0x52>
	else Response = -1;
 80010d6:	23ff      	movs	r3, #255	; 0xff
 80010d8:	71fb      	strb	r3, [r7, #7]
	delay_us (400); // 480 us delay totally.
 80010da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010de:	f7ff ffbb 	bl	8001058 <delay_us>
	return Response;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40010c00 	.word	0x40010c00

080010f0 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fe:	4821      	ldr	r0, [pc, #132]	; (8001184 <DS18B20_Write+0x94>)
 8001100:	f7ff ff70 	bl	8000fe4 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e034      	b.n	8001174 <DS18B20_Write+0x84>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800110a:	79fa      	ldrb	r2, [r7, #7]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	fa42 f303 	asr.w	r3, r2, r3
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d016      	beq.n	8001148 <DS18B20_Write+0x58>
		{
			// write 1
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800111a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111e:	4819      	ldr	r0, [pc, #100]	; (8001184 <DS18B20_Write+0x94>)
 8001120:	f7ff ff60 	bl	8000fe4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <DS18B20_Write+0x94>)
 800112c:	f001 f8f5 	bl	800231a <HAL_GPIO_WritePin>
			delay_us (1);  // wait for 1 us
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff ff91 	bl	8001058 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <DS18B20_Write+0x94>)
 800113c:	f7ff ff6f 	bl	800101e <Set_Pin_Input>
			delay_us (50);  // wait for 60 us
 8001140:	2032      	movs	r0, #50	; 0x32
 8001142:	f7ff ff89 	bl	8001058 <delay_us>
 8001146:	e012      	b.n	800116e <DS18B20_Write+0x7e>
		}
		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <DS18B20_Write+0x94>)
 800114e:	f7ff ff49 	bl	8000fe4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <DS18B20_Write+0x94>)
 800115a:	f001 f8de 	bl	800231a <HAL_GPIO_WritePin>
			delay_us (50);  // wait for 60 us
 800115e:	2032      	movs	r0, #50	; 0x32
 8001160:	f7ff ff7a 	bl	8001058 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <DS18B20_Write+0x94>)
 800116a:	f7ff ff58 	bl	800101e <Set_Pin_Input>
	for (int i=0; i<8; i++)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3301      	adds	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b07      	cmp	r3, #7
 8001178:	ddc7      	ble.n	800110a <DS18B20_Write+0x1a>
		}
	}
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010c00 	.word	0x40010c00

08001188 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <DS18B20_Read+0x80>)
 8001198:	f7ff ff41 	bl	800101e <Set_Pin_Input>
	for (int i=0;i<8;i++)
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	e02a      	b.n	80011f8 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80011a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a6:	4818      	ldr	r0, [pc, #96]	; (8001208 <DS18B20_Read+0x80>)
 80011a8:	f7ff ff1c 	bl	8000fe4 <Set_Pin_Output>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, 0);  // pull the data pin LOW
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	4815      	ldr	r0, [pc, #84]	; (8001208 <DS18B20_Read+0x80>)
 80011b4:	f001 f8b1 	bl	800231a <HAL_GPIO_WritePin>
		delay_us (2);  // wait for 2 us
 80011b8:	2002      	movs	r0, #2
 80011ba:	f7ff ff4d 	bl	8001058 <delay_us>
		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <DS18B20_Read+0x80>)
 80011c4:	f7ff ff2b 	bl	800101e <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_9))  // if the pin is HIGH
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <DS18B20_Read+0x80>)
 80011ce:	f001 f88d 	bl	80022ec <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d009      	beq.n	80011ec <DS18B20_Read+0x64>
		{
			value |= 1<<i;  // read = 1
 80011d8:	2201      	movs	r2, #1
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	71fb      	strb	r3, [r7, #7]
		}
		delay_us (60);  // wait for 60 us
 80011ec:	203c      	movs	r0, #60	; 0x3c
 80011ee:	f7ff ff33 	bl	8001058 <delay_us>
	for (int i=0;i<8;i++)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	ddd1      	ble.n	80011a2 <DS18B20_Read+0x1a>
	}
	return value;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010c00 	.word	0x40010c00

0800120c <DS18B20_Temp2Float>:


float DS18B20_Temp2Float(uint16_t number)
{
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
	uint16_t aux;
	float result = 0;
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
	float signo;
	uint16_t mask = 0b1111100000000000;
 800121c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001220:	827b      	strh	r3, [r7, #18]
	// extracción del signo
	if((number & mask) > 0)
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	8a7b      	ldrh	r3, [r7, #18]
 8001226:	4013      	ands	r3, r2
 8001228:	b29b      	uxth	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <DS18B20_Temp2Float+0x28>
		signo = -1;
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <DS18B20_Temp2Float+0xec>)
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e002      	b.n	800123a <DS18B20_Temp2Float+0x2e>
	else
		signo = 1;
 8001234:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001238:	617b      	str	r3, [r7, #20]
	// calculo de la magnitud
	mask = 0b0000011111111111;
 800123a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800123e:	827b      	strh	r3, [r7, #18]
	// parte entera
	if (signo == -1)
 8001240:	492d      	ldr	r1, [pc, #180]	; (80012f8 <DS18B20_Temp2Float+0xec>)
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff fe76 	bl	8000f34 <__aeabi_fcmpeq>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00c      	beq.n	8001268 <DS18B20_Temp2Float+0x5c>
	{                     // complemento A2
		aux = ~number & mask;
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	43db      	mvns	r3, r3
 8001254:	b21a      	sxth	r2, r3
 8001256:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800125a:	4013      	ands	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	83fb      	strh	r3, [r7, #30]
		aux+=1;
 8001260:	8bfb      	ldrh	r3, [r7, #30]
 8001262:	3301      	adds	r3, #1
 8001264:	83fb      	strh	r3, [r7, #30]
 8001266:	e003      	b.n	8001270 <DS18B20_Temp2Float+0x64>
	}
	else
	{
		aux = number & mask;
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	8a7b      	ldrh	r3, [r7, #18]
 800126c:	4013      	ands	r3, r2
 800126e:	83fb      	strh	r3, [r7, #30]
	}
// parte decimal
	result = 0;
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
	mask = 0b0000000000000001;
 8001276:	2301      	movs	r3, #1
 8001278:	827b      	strh	r3, [r7, #18]
	for (int i=0;i<12;i++)
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	e02e      	b.n	80012de <DS18B20_Temp2Float+0xd2>
	{
		 if((aux & mask)>0)
 8001280:	8bfa      	ldrh	r2, [r7, #30]
 8001282:	8a7b      	ldrh	r3, [r7, #18]
 8001284:	4013      	ands	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d022      	beq.n	80012d2 <DS18B20_Temp2Float+0xc6>
			 result = result + .0625 *pow(2, i);
 800128c:	69b8      	ldr	r0, [r7, #24]
 800128e:	f7ff f97f 	bl	8000590 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff f968 	bl	800056c <__aeabi_i2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	f04f 0000 	mov.w	r0, #0
 80012a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012a8:	f004 fe0a 	bl	8005ec0 <pow>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <DS18B20_Temp2Float+0xf0>)
 80012b2:	f7ff f9c5 	bl	8000640 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f809 	bl	80002d4 <__adddf3>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc91 	bl	8000bf0 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
		 mask = mask << 1;
 80012d2:	8a7b      	ldrh	r3, [r7, #18]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	827b      	strh	r3, [r7, #18]
	for (int i=0;i<12;i++)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b0b      	cmp	r3, #11
 80012e2:	ddcd      	ble.n	8001280 <DS18B20_Temp2Float+0x74>
	}
	return (signo * result);
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7fe ff3a 	bl	8000160 <__aeabi_fmul>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bdb0      	pop	{r4, r5, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	bf800000 	.word	0xbf800000
 80012fc:	3fb00000 	.word	0x3fb00000

08001300 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800130e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001312:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8001316:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800131a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800131c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800131e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001320:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001322:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f80e 	bl	8001356 <Lcd_init>

	return lcd;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	461d      	mov	r5, r3
 800133e:	f107 0410 	add.w	r4, r7, #16
 8001342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001346:	e894 0003 	ldmia.w	r4, {r0, r1}
 800134a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bdb0      	pop	{r4, r5, r7, pc}

08001356 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7d9b      	ldrb	r3, [r3, #22]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001366:	2133      	movs	r1, #51	; 0x33
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f8bb 	bl	80014e4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800136e:	2132      	movs	r1, #50	; 0x32
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f8b7 	bl	80014e4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001376:	2128      	movs	r1, #40	; 0x28
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f8b3 	bl	80014e4 <lcd_write_command>
 800137e:	e003      	b.n	8001388 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001380:	2138      	movs	r1, #56	; 0x38
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f8ae 	bl	80014e4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001388:	2101      	movs	r1, #1
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f8aa 	bl	80014e4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001390:	210c      	movs	r1, #12
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f8a6 	bl	80014e4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001398:	2106      	movs	r1, #6
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f8a2 	bl	80014e4 <lcd_write_command>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	4906      	ldr	r1, [pc, #24]	; (80013d4 <Lcd_int+0x2c>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fb06 	bl	80039cc <siprintf>
	Lcd_string(lcd, buffer);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f852 	bl	8001470 <Lcd_string>
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	08006ca0 	.word	0x08006ca0

080013d8 <Lcd_float_lim>:

/*
 * Write a number on the current position
 */
void Lcd_float_lim(Lcd_HandleTypeDef * lcd, float number, uint8_t decimal)
{
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	4613      	mov	r3, r2
 80013e4:	71fb      	strb	r3, [r7, #7]
	int intPart = (int) number;
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f7ff fdd6 	bl	8000f98 <__aeabi_f2iz>
 80013ec:	4603      	mov	r3, r0
 80013ee:	617b      	str	r3, [r7, #20]
	Lcd_int(lcd, intPart);
 80013f0:	6979      	ldr	r1, [r7, #20]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff ffd8 	bl	80013a8 <Lcd_int>
	Lcd_string(lcd, ".");
 80013f8:	491b      	ldr	r1, [pc, #108]	; (8001468 <Lcd_float_lim+0x90>)
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 f838 	bl	8001470 <Lcd_string>
	number = number - (float)intPart;
 8001400:	6978      	ldr	r0, [r7, #20]
 8001402:	f7ff fcff 	bl	8000e04 <__aeabi_i2f>
 8001406:	4603      	mov	r3, r0
 8001408:	4619      	mov	r1, r3
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f7ff fc44 	bl	8000c98 <__aeabi_fsub>
 8001410:	4603      	mov	r3, r0
 8001412:	60bb      	str	r3, [r7, #8]
	number = number * pow(10,decimal);
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f7ff f8bb 	bl	8000590 <__aeabi_f2d>
 800141a:	4604      	mov	r4, r0
 800141c:	460d      	mov	r5, r1
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f893 	bl	800054c <__aeabi_ui2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	f04f 0000 	mov.w	r0, #0
 800142e:	490f      	ldr	r1, [pc, #60]	; (800146c <Lcd_float_lim+0x94>)
 8001430:	f004 fd46 	bl	8005ec0 <pow>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4620      	mov	r0, r4
 800143a:	4629      	mov	r1, r5
 800143c:	f7ff f900 	bl	8000640 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fbd2 	bl	8000bf0 <__aeabi_d2f>
 800144c:	4603      	mov	r3, r0
 800144e:	60bb      	str	r3, [r7, #8]
	Lcd_int(lcd, (int)number);
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f7ff fda1 	bl	8000f98 <__aeabi_f2iz>
 8001456:	4603      	mov	r3, r0
 8001458:	4619      	mov	r1, r3
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff ffa4 	bl	80013a8 <Lcd_int>
}
 8001460:	bf00      	nop
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	08006cac 	.word	0x08006cac
 800146c:	40240000 	.word	0x40240000

08001470 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e00a      	b.n	8001496 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f858 	bl	8001540 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3301      	adds	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	7bfc      	ldrb	r4, [r7, #15]
 8001498:	6838      	ldr	r0, [r7, #0]
 800149a:	f7fe fe59 	bl	8000150 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	429c      	cmp	r4, r3
 80014a2:	d3ed      	bcc.n	8001480 <Lcd_string+0x10>
	}
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}
	...

080014b0 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
 80014bc:	4613      	mov	r3, r2
 80014be:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <Lcd_cursor+0x30>)
 80014c4:	5cd2      	ldrb	r2, [r2, r3]
 80014c6:	78bb      	ldrb	r3, [r7, #2]
 80014c8:	4413      	add	r3, r2
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3b80      	subs	r3, #128	; 0x80
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f806 	bl	80014e4 <lcd_write_command>
	#endif
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	08006cec 	.word	0x08006cec

080014e4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6898      	ldr	r0, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	899b      	ldrh	r3, [r3, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	f000 ff0d 	bl	800231a <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7d9b      	ldrb	r3, [r3, #22]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d111      	bne.n	800152c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2204      	movs	r2, #4
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f842 	bl	800159c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2204      	movs	r2, #4
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f839 	bl	800159c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800152a:	e005      	b.n	8001538 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	2208      	movs	r2, #8
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f832 	bl	800159c <lcd_write>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f000 fedf 	bl	800231a <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7d9b      	ldrb	r3, [r3, #22]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d111      	bne.n	8001588 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2204      	movs	r2, #4
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f814 	bl	800159c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2204      	movs	r2, #4
 800157e:	4619      	mov	r1, r3
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f80b 	bl	800159c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001586:	e005      	b.n	8001594 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2208      	movs	r2, #8
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f804 	bl	800159c <lcd_write>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
 80015a8:	4613      	mov	r3, r2
 80015aa:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e019      	b.n	80015e6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	8819      	ldrh	r1, [r3, #0]
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	fa42 f303 	asr.w	r3, r2, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	f000 fe9d 	bl	800231a <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	3301      	adds	r3, #1
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	78bb      	ldrb	r3, [r7, #2]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3e1      	bcc.n	80015b2 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6918      	ldr	r0, [r3, #16]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	8a9b      	ldrh	r3, [r3, #20]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4619      	mov	r1, r3
 80015fa:	f000 fe8e 	bl	800231a <HAL_GPIO_WritePin>
	DELAY(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fbe8 	bl	8001dd4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6918      	ldr	r0, [r3, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	8a9b      	ldrh	r3, [r3, #20]
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	f000 fe83 	bl	800231a <HAL_GPIO_WritePin>
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b0a0      	sub	sp, #128	; 0x80
 8001620:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f000 fb75 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f8ef 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162a:	f000 f983 	bl	8001934 <MX_GPIO_Init>
  MX_TIM1_Init();
 800162e:	f000 f931 	bl	8001894 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001632:	486a      	ldr	r0, [pc, #424]	; (80017dc <main+0x1c0>)
 8001634:	f001 fad0 	bl	8002bd8 <HAL_TIM_Base_Start>
  uint8_t Presence;
  uint8_t scratchPad[8];
  float temperature;

  Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8001638:	4b69      	ldr	r3, [pc, #420]	; (80017e0 <main+0x1c4>)
 800163a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800163e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8001644:	4a67      	ldr	r2, [pc, #412]	; (80017e4 <main+0x1c8>)
 8001646:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800164a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800164e:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_1, LCD_4_BIT_MODE);
 8001652:	4638      	mov	r0, r7
 8001654:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001658:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800165c:	2300      	movs	r3, #0
 800165e:	9303      	str	r3, [sp, #12]
 8001660:	2302      	movs	r3, #2
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <main+0x1cc>)
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2340      	movs	r3, #64	; 0x40
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4b5e      	ldr	r3, [pc, #376]	; (80017e8 <main+0x1cc>)
 800166e:	f7ff fe47 	bl	8001300 <Lcd_create>
 8001672:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001676:	463d      	mov	r5, r7
 8001678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001680:	e884 0003 	stmia.w	r4, {r0, r1}
    }
  Presence = Presence; // ToDo: chequeo de errores
  HAL_Delay(10000);
#endif
  // Sensor 1:
  uint8_t aux[8]= {0x28, 0xEB, 0x42, 0x76, 0xE0, 0x01, 0x3C, 0x1A};
 8001684:	4a59      	ldr	r2, [pc, #356]	; (80017ec <main+0x1d0>)
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800168e:	e883 0003 	stmia.w	r3, {r0, r1}
  for(int i=0; i<8; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001696:	e00d      	b.n	80016b4 <main+0x98>
  {
	  sensor[0].ROM_NO[i]= aux[i];
 8001698:	f107 021c 	add.w	r2, r7, #28
 800169c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800169e:	4413      	add	r3, r2
 80016a0:	7819      	ldrb	r1, [r3, #0]
 80016a2:	4a53      	ldr	r2, [pc, #332]	; (80017f0 <main+0x1d4>)
 80016a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016a6:	4413      	add	r3, r2
 80016a8:	3304      	adds	r3, #4
 80016aa:	460a      	mov	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<8; i++)
 80016ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016b0:	3301      	adds	r3, #1
 80016b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80016b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016b6:	2b07      	cmp	r3, #7
 80016b8:	ddee      	ble.n	8001698 <main+0x7c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Iniciar conversión
	  Presence = DS18B20_Start ();
 80016ba:	f7ff fce5 	bl	8001088 <DS18B20_Start>
 80016be:	4603      	mov	r3, r0
 80016c0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	  HAL_Delay (1);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f000 fb85 	bl	8001dd4 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 80016ca:	20cc      	movs	r0, #204	; 0xcc
 80016cc:	f7ff fd10 	bl	80010f0 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 80016d0:	2044      	movs	r0, #68	; 0x44
 80016d2:	f7ff fd0d 	bl	80010f0 <DS18B20_Write>
	  HAL_Delay (800);
 80016d6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80016da:	f000 fb7b 	bl	8001dd4 <HAL_Delay>
//	  DS18B20_Write (0xCC);  // skip ROM
//	  DS18B20_Write (0xBE);  // Read Scratch-pad
//	  for(int i = 0; i<8; i++)
//		  scratchPad[i] = DS18B20_Read();

	  Presence = DS18B20_Start ();
 80016de:	f7ff fcd3 	bl	8001088 <DS18B20_Start>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	  HAL_Delay(1);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f000 fb73 	bl	8001dd4 <HAL_Delay>
	  DS18B20_Write (0x55);  // match ROM
 80016ee:	2055      	movs	r0, #85	; 0x55
 80016f0:	f7ff fcfe 	bl	80010f0 <DS18B20_Write>

	  for(int i=0;i<8;i++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80016f8:	e00a      	b.n	8001710 <main+0xf4>
		{
		  DS18B20_Write (sensor[0].ROM_NO[i]);
 80016fa:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <main+0x1d4>)
 80016fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016fe:	4413      	add	r3, r2
 8001700:	3304      	adds	r3, #4
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fcf3 	bl	80010f0 <DS18B20_Write>
	  for(int i=0;i<8;i++)
 800170a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800170c:	3301      	adds	r3, #1
 800170e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001712:	2b07      	cmp	r3, #7
 8001714:	ddf1      	ble.n	80016fa <main+0xde>
		}
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 8001716:	20be      	movs	r0, #190	; 0xbe
 8001718:	f7ff fcea 	bl	80010f0 <DS18B20_Write>
	  for(int i = 0; i<8; i++)
 800171c:	2300      	movs	r3, #0
 800171e:	667b      	str	r3, [r7, #100]	; 0x64
 8001720:	e00c      	b.n	800173c <main+0x120>
		  scratchPad[i] = DS18B20_Read();
 8001722:	f7ff fd31 	bl	8001188 <DS18B20_Read>
 8001726:	4603      	mov	r3, r0
 8001728:	4619      	mov	r1, r3
 800172a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800172e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001730:	4413      	add	r3, r2
 8001732:	460a      	mov	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i<8; i++)
 8001736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001738:	3301      	adds	r3, #1
 800173a:	667b      	str	r3, [r7, #100]	; 0x64
 800173c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800173e:	2b07      	cmp	r3, #7
 8001740:	ddef      	ble.n	8001722 <main+0x106>

	  uint16_t buffer = scratchPad[1];
 8001742:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001746:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	  buffer = (buffer << 8) + scratchPad[0];
 800174a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b29a      	uxth	r2, r3
 8001752:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001756:	b29b      	uxth	r3, r3
 8001758:	4413      	add	r3, r2
 800175a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	  temperature = DS18B20_Temp2Float(buffer);
 800175e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fd52 	bl	800120c <DS18B20_Temp2Float>
 8001768:	65f8      	str	r0, [r7, #92]	; 0x5c
	  Lcd_clear;
	  Lcd_cursor(&lcd, 0,0);
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe9c 	bl	80014b0 <Lcd_cursor>
	  Lcd_string(&lcd, "Temp Datalogger");
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	491d      	ldr	r1, [pc, #116]	; (80017f4 <main+0x1d8>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fe76 	bl	8001470 <Lcd_string>
	  Lcd_cursor(&lcd, 1,0);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	2200      	movs	r2, #0
 800178a:	2101      	movs	r1, #1
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe8f 	bl	80014b0 <Lcd_cursor>
	  Lcd_string(&lcd, "T1=");
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4918      	ldr	r1, [pc, #96]	; (80017f8 <main+0x1dc>)
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fe69 	bl	8001470 <Lcd_string>
	  Lcd_float_lim(&lcd, temperature, 1);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	2201      	movs	r2, #1
 80017a4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fe16 	bl	80013d8 <Lcd_float_lim>
	  Lcd_string(&lcd, " ");
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4912      	ldr	r1, [pc, #72]	; (80017fc <main+0x1e0>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fe5c 	bl	8001470 <Lcd_string>
	  lcd_write_data(&lcd, 210); // imprime "°"
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	21d2      	movs	r1, #210	; 0xd2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff febe 	bl	8001540 <lcd_write_data>
	  Lcd_string(&lcd, "C");
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	490d      	ldr	r1, [pc, #52]	; (8001800 <main+0x1e4>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fe50 	bl	8001470 <Lcd_string>
	  HAL_GPIO_TogglePin (GPIOC, LED_Pin);
 80017d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d4:	480b      	ldr	r0, [pc, #44]	; (8001804 <main+0x1e8>)
 80017d6:	f000 fdb8 	bl	800234a <HAL_GPIO_TogglePin>
  {
 80017da:	e76e      	b.n	80016ba <main+0x9e>
 80017dc:	200001f8 	.word	0x200001f8
 80017e0:	08006ccc 	.word	0x08006ccc
 80017e4:	08006cdc 	.word	0x08006cdc
 80017e8:	40010800 	.word	0x40010800
 80017ec:	08006ce4 	.word	0x08006ce4
 80017f0:	20000240 	.word	0x20000240
 80017f4:	08006cb0 	.word	0x08006cb0
 80017f8:	08006cc0 	.word	0x08006cc0
 80017fc:	08006cc4 	.word	0x08006cc4
 8001800:	08006cc8 	.word	0x08006cc8
 8001804:	40011000 	.word	0x40011000

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b090      	sub	sp, #64	; 0x40
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	2228      	movs	r2, #40	; 0x28
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f001 fc70 	bl	80030fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800182a:	2301      	movs	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800182e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001838:	2301      	movs	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183c:	2302      	movs	r3, #2
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001846:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fd93 	bl	800237c <HAL_RCC_OscConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800185c:	f000 f8ee 	bl	8001a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
 8001862:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001864:	2302      	movs	r3, #2
 8001866:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800186c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2102      	movs	r1, #2
 800187a:	4618      	mov	r0, r3
 800187c:	f001 f800 	bl	8002880 <HAL_RCC_ClockConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001886:	f000 f8d9 	bl	8001a3c <Error_Handler>
  }
}
 800188a:	bf00      	nop
 800188c:	3740      	adds	r7, #64	; 0x40
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	463b      	mov	r3, r7
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <MX_TIM1_Init+0x98>)
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <MX_TIM1_Init+0x9c>)
 80018b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_TIM1_Init+0x98>)
 80018b8:	2247      	movs	r2, #71	; 0x47
 80018ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_TIM1_Init+0x98>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_TIM1_Init+0x98>)
 80018c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_TIM1_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_TIM1_Init+0x98>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_TIM1_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <MX_TIM1_Init+0x98>)
 80018de:	f001 f92b 	bl	8002b38 <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018e8:	f000 f8a8 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4619      	mov	r1, r3
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <MX_TIM1_Init+0x98>)
 80018fa:	f001 f9b7 	bl	8002c6c <HAL_TIM_ConfigClockSource>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001904:	f000 f89a 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_TIM1_Init+0x98>)
 8001916:	f001 fb69 	bl	8002fec <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001920:	f000 f88c 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200001f8 	.word	0x200001f8
 8001930:	40012c00 	.word	0x40012c00

08001934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001948:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <MX_GPIO_Init+0xf8>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a37      	ldr	r2, [pc, #220]	; (8001a2c <MX_GPIO_Init+0xf8>)
 800194e:	f043 0310 	orr.w	r3, r3, #16
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <MX_GPIO_Init+0xf8>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001960:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <MX_GPIO_Init+0xf8>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a31      	ldr	r2, [pc, #196]	; (8001a2c <MX_GPIO_Init+0xf8>)
 8001966:	f043 0320 	orr.w	r3, r3, #32
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <MX_GPIO_Init+0xf8>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <MX_GPIO_Init+0xf8>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <MX_GPIO_Init+0xf8>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <MX_GPIO_Init+0xf8>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MX_GPIO_Init+0xf8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a25      	ldr	r2, [pc, #148]	; (8001a2c <MX_GPIO_Init+0xf8>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <MX_GPIO_Init+0xf8>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ae:	4820      	ldr	r0, [pc, #128]	; (8001a30 <MX_GPIO_Init+0xfc>)
 80019b0:	f000 fcb3 	bl	800231a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80019b4:	2200      	movs	r2, #0
 80019b6:	217e      	movs	r1, #126	; 0x7e
 80019b8:	481e      	ldr	r0, [pc, #120]	; (8001a34 <MX_GPIO_Init+0x100>)
 80019ba:	f000 fcae 	bl	800231a <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80019c4:	481c      	ldr	r0, [pc, #112]	; (8001a38 <MX_GPIO_Init+0x104>)
 80019c6:	f000 fca8 	bl	800231a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2302      	movs	r3, #2
 80019da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	4813      	ldr	r0, [pc, #76]	; (8001a30 <MX_GPIO_Init+0xfc>)
 80019e4:	f000 fafe 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80019e8:	237e      	movs	r3, #126	; 0x7e
 80019ea:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4619      	mov	r1, r3
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <MX_GPIO_Init+0x100>)
 8001a00:	f000 faf0 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4806      	ldr	r0, [pc, #24]	; (8001a38 <MX_GPIO_Init+0x104>)
 8001a1e:	f000 fae1 	bl	8001fe4 <HAL_GPIO_Init>

}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40010800 	.word	0x40010800
 8001a38:	40010c00 	.word	0x40010c00

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <Error_Handler+0x8>
	...

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6193      	str	r3, [r2, #24]
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_MspInit+0x5c>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_MspInit+0x60>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_MspInit+0x60>)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000

08001aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_TIM_Base_MspInit+0x34>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10b      	bne.n	8001ad6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_TIM_Base_MspInit+0x38>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_TIM_Base_MspInit+0x38>)
 8001ac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ac8:	6193      	str	r3, [r2, #24]
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_TIM_Base_MspInit+0x38>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler+0x4>

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2e:	f000 f935 	bl	8001d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  return 1;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b4e:	f001 faab 	bl	80030a8 <__errno>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2216      	movs	r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
  return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_exit>:

void _exit (int status)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffe7 	bl	8001b44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b76:	e7fe      	b.n	8001b76 <_exit+0x12>

08001b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e00a      	b.n	8001ba0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8a:	f3af 8000 	nop.w
 8001b8e:	4601      	mov	r1, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	60ba      	str	r2, [r7, #8]
 8001b96:	b2ca      	uxtb	r2, r1
 8001b98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dbf0      	blt.n	8001b8a <_read+0x12>
  }

  return len;
 8001ba8:	687b      	ldr	r3, [r7, #4]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e009      	b.n	8001bd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf1      	blt.n	8001bc4 <_write+0x12>
  }
  return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_close>:

int _close(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c10:	605a      	str	r2, [r3, #4]
  return 0;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <_isatty>:

int _isatty(int file)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
	...

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f001 fa14 	bl	80030a8 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20005000 	.word	0x20005000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	20000250 	.word	0x20000250
 8001cb4:	20000268 	.word	0x20000268

08001cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cc4:	f7ff fff8 	bl	8001cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cca:	490c      	ldr	r1, [pc, #48]	; (8001cfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ccc:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ce0:	4c09      	ldr	r4, [pc, #36]	; (8001d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cee:	f001 f9e1 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf2:	f7ff fc93 	bl	800161c <main>
  bx lr
 8001cf6:	4770      	bx	lr
  ldr r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cfc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d00:	08007128 	.word	0x08007128
  ldr r2, =_sbss
 8001d04:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d08:	20000268 	.word	0x20000268

08001d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC1_2_IRQHandler>
	...

08001d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x28>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x28>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 f92b 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	200f      	movs	r0, #15
 8001d28:	f000 f808 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff fe8c 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022000 	.word	0x40022000

08001d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_InitTick+0x54>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x58>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f935 	bl	8001fca <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00e      	b.n	8001d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d80a      	bhi.n	8001d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f000 f90b 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_InitTick+0x5c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000008 	.word	0x20000008
 8001d98:	20000004 	.word	0x20000004

08001d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_IncTick+0x1c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_IncTick+0x20>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <HAL_IncTick+0x20>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	20000254 	.word	0x20000254

08001dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_GetTick+0x10>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000254 	.word	0x20000254

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff fff0 	bl	8001dc0 <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_Delay+0x44>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffe0 	bl	8001dc0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff90 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff49 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff5e 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff90 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5f 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffb0 	bl	8001f38 <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b08b      	sub	sp, #44	; 0x2c
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff6:	e169      	b.n	80022cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	429a      	cmp	r2, r3
 8002012:	f040 8158 	bne.w	80022c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a9a      	ldr	r2, [pc, #616]	; (8002284 <HAL_GPIO_Init+0x2a0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d05e      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002020:	4a98      	ldr	r2, [pc, #608]	; (8002284 <HAL_GPIO_Init+0x2a0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d875      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002026:	4a98      	ldr	r2, [pc, #608]	; (8002288 <HAL_GPIO_Init+0x2a4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d058      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 800202c:	4a96      	ldr	r2, [pc, #600]	; (8002288 <HAL_GPIO_Init+0x2a4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d86f      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002032:	4a96      	ldr	r2, [pc, #600]	; (800228c <HAL_GPIO_Init+0x2a8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d052      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002038:	4a94      	ldr	r2, [pc, #592]	; (800228c <HAL_GPIO_Init+0x2a8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d869      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800203e:	4a94      	ldr	r2, [pc, #592]	; (8002290 <HAL_GPIO_Init+0x2ac>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d04c      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002044:	4a92      	ldr	r2, [pc, #584]	; (8002290 <HAL_GPIO_Init+0x2ac>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d863      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800204a:	4a92      	ldr	r2, [pc, #584]	; (8002294 <HAL_GPIO_Init+0x2b0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d046      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002050:	4a90      	ldr	r2, [pc, #576]	; (8002294 <HAL_GPIO_Init+0x2b0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d85d      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002056:	2b12      	cmp	r3, #18
 8002058:	d82a      	bhi.n	80020b0 <HAL_GPIO_Init+0xcc>
 800205a:	2b12      	cmp	r3, #18
 800205c:	d859      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800205e:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <HAL_GPIO_Init+0x80>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	080020df 	.word	0x080020df
 8002068:	080020b9 	.word	0x080020b9
 800206c:	080020cb 	.word	0x080020cb
 8002070:	0800210d 	.word	0x0800210d
 8002074:	08002113 	.word	0x08002113
 8002078:	08002113 	.word	0x08002113
 800207c:	08002113 	.word	0x08002113
 8002080:	08002113 	.word	0x08002113
 8002084:	08002113 	.word	0x08002113
 8002088:	08002113 	.word	0x08002113
 800208c:	08002113 	.word	0x08002113
 8002090:	08002113 	.word	0x08002113
 8002094:	08002113 	.word	0x08002113
 8002098:	08002113 	.word	0x08002113
 800209c:	08002113 	.word	0x08002113
 80020a0:	08002113 	.word	0x08002113
 80020a4:	08002113 	.word	0x08002113
 80020a8:	080020c1 	.word	0x080020c1
 80020ac:	080020d5 	.word	0x080020d5
 80020b0:	4a79      	ldr	r2, [pc, #484]	; (8002298 <HAL_GPIO_Init+0x2b4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020b6:	e02c      	b.n	8002112 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	623b      	str	r3, [r7, #32]
          break;
 80020be:	e029      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	3304      	adds	r3, #4
 80020c6:	623b      	str	r3, [r7, #32]
          break;
 80020c8:	e024      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	3308      	adds	r3, #8
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e01f      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	330c      	adds	r3, #12
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e01a      	b.n	8002114 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020e6:	2304      	movs	r3, #4
 80020e8:	623b      	str	r3, [r7, #32]
          break;
 80020ea:	e013      	b.n	8002114 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f4:	2308      	movs	r3, #8
 80020f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	611a      	str	r2, [r3, #16]
          break;
 80020fe:	e009      	b.n	8002114 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002100:	2308      	movs	r3, #8
 8002102:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	615a      	str	r2, [r3, #20]
          break;
 800210a:	e003      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
          break;
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x130>
          break;
 8002112:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2bff      	cmp	r3, #255	; 0xff
 8002118:	d801      	bhi.n	800211e <HAL_GPIO_Init+0x13a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_Init+0x13e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2bff      	cmp	r3, #255	; 0xff
 8002128:	d802      	bhi.n	8002130 <HAL_GPIO_Init+0x14c>
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x152>
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	3b08      	subs	r3, #8
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	210f      	movs	r1, #15
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	6a39      	ldr	r1, [r7, #32]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	431a      	orrs	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80b1 	beq.w	80022c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002164:	4b4d      	ldr	r3, [pc, #308]	; (800229c <HAL_GPIO_Init+0x2b8>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a4c      	ldr	r2, [pc, #304]	; (800229c <HAL_GPIO_Init+0x2b8>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b4a      	ldr	r3, [pc, #296]	; (800229c <HAL_GPIO_Init+0x2b8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800217c:	4a48      	ldr	r2, [pc, #288]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a40      	ldr	r2, [pc, #256]	; (80022a4 <HAL_GPIO_Init+0x2c0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d013      	beq.n	80021d0 <HAL_GPIO_Init+0x1ec>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <HAL_GPIO_Init+0x2c4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00d      	beq.n	80021cc <HAL_GPIO_Init+0x1e8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3e      	ldr	r2, [pc, #248]	; (80022ac <HAL_GPIO_Init+0x2c8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d007      	beq.n	80021c8 <HAL_GPIO_Init+0x1e4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3d      	ldr	r2, [pc, #244]	; (80022b0 <HAL_GPIO_Init+0x2cc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d101      	bne.n	80021c4 <HAL_GPIO_Init+0x1e0>
 80021c0:	2303      	movs	r3, #3
 80021c2:	e006      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e004      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e002      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021d0:	2300      	movs	r3, #0
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	f002 0203 	and.w	r2, r2, #3
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	4093      	lsls	r3, r2
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021e2:	492f      	ldr	r1, [pc, #188]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	492c      	ldr	r1, [pc, #176]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	43db      	mvns	r3, r3
 8002212:	4928      	ldr	r1, [pc, #160]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002214:	4013      	ands	r3, r2
 8002216:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4922      	ldr	r1, [pc, #136]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	43db      	mvns	r3, r3
 800223a:	491e      	ldr	r1, [pc, #120]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800223c:	4013      	ands	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4918      	ldr	r1, [pc, #96]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	43db      	mvns	r3, r3
 8002262:	4914      	ldr	r1, [pc, #80]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002264:	4013      	ands	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d021      	beq.n	80022b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	490e      	ldr	r1, [pc, #56]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	e021      	b.n	80022c6 <HAL_GPIO_Init+0x2e2>
 8002282:	bf00      	nop
 8002284:	10320000 	.word	0x10320000
 8002288:	10310000 	.word	0x10310000
 800228c:	10220000 	.word	0x10220000
 8002290:	10210000 	.word	0x10210000
 8002294:	10120000 	.word	0x10120000
 8002298:	10110000 	.word	0x10110000
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40010800 	.word	0x40010800
 80022a8:	40010c00 	.word	0x40010c00
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40011400 	.word	0x40011400
 80022b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_GPIO_Init+0x304>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	43db      	mvns	r3, r3
 80022c0:	4909      	ldr	r1, [pc, #36]	; (80022e8 <HAL_GPIO_Init+0x304>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	3301      	adds	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f47f ae8e 	bne.w	8001ff8 <HAL_GPIO_Init+0x14>
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	372c      	adds	r7, #44	; 0x2c
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e001      	b.n	800230e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	807b      	strh	r3, [r7, #2]
 8002326:	4613      	mov	r3, r2
 8002328:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800232a:	787b      	ldrb	r3, [r7, #1]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002330:	887a      	ldrh	r2, [r7, #2]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002336:	e003      	b.n	8002340 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	041a      	lsls	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	611a      	str	r2, [r3, #16]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800235c:	887a      	ldrh	r2, [r7, #2]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	041a      	lsls	r2, r3, #16
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43d9      	mvns	r1, r3
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	400b      	ands	r3, r1
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e272      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8087 	beq.w	80024aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d00c      	beq.n	80023c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023a8:	4b8f      	ldr	r3, [pc, #572]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d112      	bne.n	80023da <HAL_RCC_OscConfig+0x5e>
 80023b4:	4b8c      	ldr	r3, [pc, #560]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c0:	d10b      	bne.n	80023da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c2:	4b89      	ldr	r3, [pc, #548]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d06c      	beq.n	80024a8 <HAL_RCC_OscConfig+0x12c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d168      	bne.n	80024a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e24c      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x76>
 80023e4:	4b80      	ldr	r3, [pc, #512]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a7f      	ldr	r2, [pc, #508]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e02e      	b.n	8002450 <HAL_RCC_OscConfig+0xd4>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x98>
 80023fa:	4b7b      	ldr	r3, [pc, #492]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7a      	ldr	r2, [pc, #488]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b78      	ldr	r3, [pc, #480]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a77      	ldr	r2, [pc, #476]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0xd4>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0xbc>
 800241e:	4b72      	ldr	r3, [pc, #456]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a71      	ldr	r2, [pc, #452]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b6f      	ldr	r3, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6e      	ldr	r2, [pc, #440]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0xd4>
 8002438:	4b6b      	ldr	r3, [pc, #428]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a6a      	ldr	r2, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b68      	ldr	r3, [pc, #416]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a67      	ldr	r2, [pc, #412]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff fcb2 	bl	8001dc0 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff fcae 	bl	8001dc0 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e200      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b5d      	ldr	r3, [pc, #372]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0xe4>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff fc9e 	bl	8001dc0 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff fc9a 	bl	8001dc0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e1ec      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x10c>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d063      	beq.n	800257e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024b6:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024c2:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d11c      	bne.n	8002508 <HAL_RCC_OscConfig+0x18c>
 80024ce:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d116      	bne.n	8002508 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_RCC_OscConfig+0x176>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e1c0      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4939      	ldr	r1, [pc, #228]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	e03a      	b.n	800257e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002510:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fc53 	bl	8001dc0 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251e:	f7ff fc4f 	bl	8001dc0 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e1a1      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4927      	ldr	r1, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff fc32 	bl	8001dc0 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002560:	f7ff fc2e 	bl	8001dc0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e180      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d03a      	beq.n	8002600 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d019      	beq.n	80025c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002598:	f7ff fc12 	bl	8001dc0 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a0:	f7ff fc0e 	bl	8001dc0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e160      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025be:	2001      	movs	r0, #1
 80025c0:	f000 fa9c 	bl	8002afc <RCC_Delay>
 80025c4:	e01c      	b.n	8002600 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025cc:	f7ff fbf8 	bl	8001dc0 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d2:	e00f      	b.n	80025f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d4:	f7ff fbf4 	bl	8001dc0 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d908      	bls.n	80025f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e146      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	42420000 	.word	0x42420000
 80025f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f4:	4b92      	ldr	r3, [pc, #584]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e9      	bne.n	80025d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a6 	beq.w	800275a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002612:	4b8b      	ldr	r3, [pc, #556]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10d      	bne.n	800263a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a87      	ldr	r2, [pc, #540]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	61d3      	str	r3, [r2, #28]
 800262a:	4b85      	ldr	r3, [pc, #532]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b82      	ldr	r3, [pc, #520]	; (8002844 <HAL_RCC_OscConfig+0x4c8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d118      	bne.n	8002678 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002646:	4b7f      	ldr	r3, [pc, #508]	; (8002844 <HAL_RCC_OscConfig+0x4c8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7e      	ldr	r2, [pc, #504]	; (8002844 <HAL_RCC_OscConfig+0x4c8>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002652:	f7ff fbb5 	bl	8001dc0 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7ff fbb1 	bl	8001dc0 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b64      	cmp	r3, #100	; 0x64
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e103      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	4b75      	ldr	r3, [pc, #468]	; (8002844 <HAL_RCC_OscConfig+0x4c8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x312>
 8002680:	4b6f      	ldr	r3, [pc, #444]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4a6e      	ldr	r2, [pc, #440]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6213      	str	r3, [r2, #32]
 800268c:	e02d      	b.n	80026ea <HAL_RCC_OscConfig+0x36e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x334>
 8002696:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a69      	ldr	r2, [pc, #420]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6213      	str	r3, [r2, #32]
 80026a2:	4b67      	ldr	r3, [pc, #412]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a66      	ldr	r2, [pc, #408]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	6213      	str	r3, [r2, #32]
 80026ae:	e01c      	b.n	80026ea <HAL_RCC_OscConfig+0x36e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCC_OscConfig+0x356>
 80026b8:	4b61      	ldr	r3, [pc, #388]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4a60      	ldr	r2, [pc, #384]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6213      	str	r3, [r2, #32]
 80026c4:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4a5d      	ldr	r2, [pc, #372]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6213      	str	r3, [r2, #32]
 80026d0:	e00b      	b.n	80026ea <HAL_RCC_OscConfig+0x36e>
 80026d2:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a5a      	ldr	r2, [pc, #360]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	4b58      	ldr	r3, [pc, #352]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d015      	beq.n	800271e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7ff fb65 	bl	8001dc0 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7ff fb61 	bl	8001dc0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0b1      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	4b4b      	ldr	r3, [pc, #300]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ee      	beq.n	80026fa <HAL_RCC_OscConfig+0x37e>
 800271c:	e014      	b.n	8002748 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271e:	f7ff fb4f 	bl	8001dc0 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff fb4b 	bl	8001dc0 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e09b      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	4b40      	ldr	r3, [pc, #256]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ee      	bne.n	8002726 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4a3b      	ldr	r2, [pc, #236]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8087 	beq.w	8002872 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d061      	beq.n	8002834 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d146      	bne.n	8002806 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002778:	4b33      	ldr	r3, [pc, #204]	; (8002848 <HAL_RCC_OscConfig+0x4cc>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7ff fb1f 	bl	8001dc0 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002786:	f7ff fb1b 	bl	8001dc0 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e06d      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d108      	bne.n	80027c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4921      	ldr	r1, [pc, #132]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a19      	ldr	r1, [r3, #32]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	430b      	orrs	r3, r1
 80027d2:	491b      	ldr	r1, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x4cc>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7ff faef 	bl	8001dc0 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7ff faeb 	bl	8001dc0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e03d      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x46a>
 8002804:	e035      	b.n	8002872 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_RCC_OscConfig+0x4cc>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7ff fad8 	bl	8001dc0 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002814:	f7ff fad4 	bl	8001dc0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e026      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x498>
 8002832:	e01e      	b.n	8002872 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e019      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
 8002840:	40021000 	.word	0x40021000
 8002844:	40007000 	.word	0x40007000
 8002848:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x500>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	429a      	cmp	r2, r3
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000

08002880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0d0      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002894:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d910      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0207 	bic.w	r2, r3, #7
 80028aa:	4965      	ldr	r1, [pc, #404]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0b8      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028dc:	4b59      	ldr	r3, [pc, #356]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a58      	ldr	r2, [pc, #352]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f4:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a52      	ldr	r2, [pc, #328]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4b50      	ldr	r3, [pc, #320]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	494d      	ldr	r1, [pc, #308]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d040      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d115      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e07f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e073      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e06b      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295e:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f023 0203 	bic.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4936      	ldr	r1, [pc, #216]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002970:	f7ff fa26 	bl	8001dc0 <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	e00a      	b.n	800298e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002978:	f7ff fa22 	bl	8001dc0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e053      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 020c 	and.w	r2, r3, #12
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	429a      	cmp	r2, r3
 800299e:	d1eb      	bne.n	8002978 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d210      	bcs.n	80029d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 0207 	bic.w	r2, r3, #7
 80029b6:	4922      	ldr	r1, [pc, #136]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e032      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4916      	ldr	r1, [pc, #88]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	490e      	ldr	r1, [pc, #56]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a0e:	f000 f821 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002a12:	4602      	mov	r2, r0
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	490a      	ldr	r1, [pc, #40]	; (8002a48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	5ccb      	ldrb	r3, [r1, r3]
 8002a22:	fa22 f303 	lsr.w	r3, r2, r3
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <HAL_RCC_ClockConfig+0x1cc>)
 8002a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x1d0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f984 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40022000 	.word	0x40022000
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08006cf0 	.word	0x08006cf0
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	20000004 	.word	0x20000004

08002a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	2300      	movs	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d002      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x30>
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0x36>
 8002a82:	e027      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_GetSysClockFreq+0x98>)
 8002a86:	613b      	str	r3, [r7, #16]
      break;
 8002a88:	e027      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0c9b      	lsrs	r3, r3, #18
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
 8002a96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d010      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	0c5b      	lsrs	r3, r3, #17
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <HAL_RCC_GetSysClockFreq+0x98>)
 8002ab6:	fb03 f202 	mul.w	r2, r3, r2
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e004      	b.n	8002ace <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	613b      	str	r3, [r7, #16]
      break;
 8002ad2:	e002      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetSysClockFreq+0x98>)
 8002ad6:	613b      	str	r3, [r7, #16]
      break;
 8002ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ada:	693b      	ldr	r3, [r7, #16]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	007a1200 	.word	0x007a1200
 8002af0:	08006d00 	.word	0x08006d00
 8002af4:	08006d10 	.word	0x08006d10
 8002af8:	003d0900 	.word	0x003d0900

08002afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <RCC_Delay+0x34>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <RCC_Delay+0x38>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0a5b      	lsrs	r3, r3, #9
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b18:	bf00      	nop
  }
  while (Delay --);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e5a      	subs	r2, r3, #1
 8002b1e:	60fa      	str	r2, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f9      	bne.n	8002b18 <RCC_Delay+0x1c>
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	20000000 	.word	0x20000000
 8002b34:	10624dd3 	.word	0x10624dd3

08002b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e041      	b.n	8002bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe ffa4 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f000 f940 	bl	8002dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d001      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e032      	b.n	8002c56 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <HAL_TIM_Base_Start+0x88>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_TIM_Base_Start+0x48>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0a:	d009      	beq.n	8002c20 <HAL_TIM_Base_Start+0x48>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_TIM_Base_Start+0x8c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_TIM_Base_Start+0x48>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <HAL_TIM_Base_Start+0x90>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d111      	bne.n	8002c44 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d010      	beq.n	8002c54 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	e007      	b.n	8002c54 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40000800 	.word	0x40000800

08002c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_TIM_ConfigClockSource+0x1c>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0b4      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x186>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc0:	d03e      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0xd4>
 8002cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc6:	f200 8087 	bhi.w	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	f000 8086 	beq.w	8002dde <HAL_TIM_ConfigClockSource+0x172>
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd6:	d87f      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd8:	2b70      	cmp	r3, #112	; 0x70
 8002cda:	d01a      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0xa6>
 8002cdc:	2b70      	cmp	r3, #112	; 0x70
 8002cde:	d87b      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce0:	2b60      	cmp	r3, #96	; 0x60
 8002ce2:	d050      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x11a>
 8002ce4:	2b60      	cmp	r3, #96	; 0x60
 8002ce6:	d877      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce8:	2b50      	cmp	r3, #80	; 0x50
 8002cea:	d03c      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0xfa>
 8002cec:	2b50      	cmp	r3, #80	; 0x50
 8002cee:	d873      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d058      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x13a>
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d86f      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf8:	2b30      	cmp	r3, #48	; 0x30
 8002cfa:	d064      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cfc:	2b30      	cmp	r3, #48	; 0x30
 8002cfe:	d86b      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d060      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d867      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05c      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d05a      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d10:	e062      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6899      	ldr	r1, [r3, #8]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f000 f944 	bl	8002fae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	609a      	str	r2, [r3, #8]
      break;
 8002d3e:	e04f      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6899      	ldr	r1, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f000 f92d 	bl	8002fae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d62:	609a      	str	r2, [r3, #8]
      break;
 8002d64:	e03c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6859      	ldr	r1, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f000 f8a4 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2150      	movs	r1, #80	; 0x50
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f8fb 	bl	8002f7a <TIM_ITRx_SetConfig>
      break;
 8002d84:	e02c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f000 f8c2 	bl	8002f1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2160      	movs	r1, #96	; 0x60
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f8eb 	bl	8002f7a <TIM_ITRx_SetConfig>
      break;
 8002da4:	e01c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 f884 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2140      	movs	r1, #64	; 0x40
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f8db 	bl	8002f7a <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e00c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f000 f8d2 	bl	8002f7a <TIM_ITRx_SetConfig>
      break;
 8002dd6:	e003      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      break;
 8002ddc:	e000      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a29      	ldr	r2, [pc, #164]	; (8002eb4 <TIM_Base_SetConfig+0xb8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00b      	beq.n	8002e2c <TIM_Base_SetConfig+0x30>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1a:	d007      	beq.n	8002e2c <TIM_Base_SetConfig+0x30>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a26      	ldr	r2, [pc, #152]	; (8002eb8 <TIM_Base_SetConfig+0xbc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d003      	beq.n	8002e2c <TIM_Base_SetConfig+0x30>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a25      	ldr	r2, [pc, #148]	; (8002ebc <TIM_Base_SetConfig+0xc0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d108      	bne.n	8002e3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <TIM_Base_SetConfig+0xb8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00b      	beq.n	8002e5e <TIM_Base_SetConfig+0x62>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4c:	d007      	beq.n	8002e5e <TIM_Base_SetConfig+0x62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <TIM_Base_SetConfig+0xbc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d003      	beq.n	8002e5e <TIM_Base_SetConfig+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <TIM_Base_SetConfig+0xc0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d108      	bne.n	8002e70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <TIM_Base_SetConfig+0xb8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d103      	bne.n	8002ea4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	615a      	str	r2, [r3, #20]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800

08002ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f023 0201 	bic.w	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f023 030a 	bic.w	r3, r3, #10
 8002efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0210 	bic.w	r2, r3, #16
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	031b      	lsls	r3, r3, #12
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	621a      	str	r2, [r3, #32]
}
 8002f70:	bf00      	nop
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f043 0307 	orr.w	r3, r3, #7
 8002f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	609a      	str	r2, [r3, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b087      	sub	sp, #28
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	021a      	lsls	r2, r3, #8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	609a      	str	r2, [r3, #8]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003000:	2302      	movs	r3, #2
 8003002:	e046      	b.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a16      	ldr	r2, [pc, #88]	; (800309c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003050:	d009      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10c      	bne.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800306c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	4313      	orrs	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800

080030a8 <__errno>:
 80030a8:	4b01      	ldr	r3, [pc, #4]	; (80030b0 <__errno+0x8>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	2000000c 	.word	0x2000000c

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	2600      	movs	r6, #0
 80030b8:	4d0c      	ldr	r5, [pc, #48]	; (80030ec <__libc_init_array+0x38>)
 80030ba:	4c0d      	ldr	r4, [pc, #52]	; (80030f0 <__libc_init_array+0x3c>)
 80030bc:	1b64      	subs	r4, r4, r5
 80030be:	10a4      	asrs	r4, r4, #2
 80030c0:	42a6      	cmp	r6, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	f003 fdde 	bl	8006c84 <_init>
 80030c8:	2600      	movs	r6, #0
 80030ca:	4d0a      	ldr	r5, [pc, #40]	; (80030f4 <__libc_init_array+0x40>)
 80030cc:	4c0a      	ldr	r4, [pc, #40]	; (80030f8 <__libc_init_array+0x44>)
 80030ce:	1b64      	subs	r4, r4, r5
 80030d0:	10a4      	asrs	r4, r4, #2
 80030d2:	42a6      	cmp	r6, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030dc:	4798      	blx	r3
 80030de:	3601      	adds	r6, #1
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e6:	4798      	blx	r3
 80030e8:	3601      	adds	r6, #1
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	08007120 	.word	0x08007120
 80030f0:	08007120 	.word	0x08007120
 80030f4:	08007120 	.word	0x08007120
 80030f8:	08007124 	.word	0x08007124

080030fc <memset>:
 80030fc:	4603      	mov	r3, r0
 80030fe:	4402      	add	r2, r0
 8003100:	4293      	cmp	r3, r2
 8003102:	d100      	bne.n	8003106 <memset+0xa>
 8003104:	4770      	bx	lr
 8003106:	f803 1b01 	strb.w	r1, [r3], #1
 800310a:	e7f9      	b.n	8003100 <memset+0x4>

0800310c <__cvt>:
 800310c:	2b00      	cmp	r3, #0
 800310e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003112:	461f      	mov	r7, r3
 8003114:	bfbb      	ittet	lt
 8003116:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800311a:	461f      	movlt	r7, r3
 800311c:	2300      	movge	r3, #0
 800311e:	232d      	movlt	r3, #45	; 0x2d
 8003120:	b088      	sub	sp, #32
 8003122:	4614      	mov	r4, r2
 8003124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003126:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003128:	7013      	strb	r3, [r2, #0]
 800312a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800312c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003130:	f023 0820 	bic.w	r8, r3, #32
 8003134:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003138:	d005      	beq.n	8003146 <__cvt+0x3a>
 800313a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800313e:	d100      	bne.n	8003142 <__cvt+0x36>
 8003140:	3501      	adds	r5, #1
 8003142:	2302      	movs	r3, #2
 8003144:	e000      	b.n	8003148 <__cvt+0x3c>
 8003146:	2303      	movs	r3, #3
 8003148:	aa07      	add	r2, sp, #28
 800314a:	9204      	str	r2, [sp, #16]
 800314c:	aa06      	add	r2, sp, #24
 800314e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003152:	e9cd 3500 	strd	r3, r5, [sp]
 8003156:	4622      	mov	r2, r4
 8003158:	463b      	mov	r3, r7
 800315a:	f000 fce5 	bl	8003b28 <_dtoa_r>
 800315e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003162:	4606      	mov	r6, r0
 8003164:	d102      	bne.n	800316c <__cvt+0x60>
 8003166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003168:	07db      	lsls	r3, r3, #31
 800316a:	d522      	bpl.n	80031b2 <__cvt+0xa6>
 800316c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003170:	eb06 0905 	add.w	r9, r6, r5
 8003174:	d110      	bne.n	8003198 <__cvt+0x8c>
 8003176:	7833      	ldrb	r3, [r6, #0]
 8003178:	2b30      	cmp	r3, #48	; 0x30
 800317a:	d10a      	bne.n	8003192 <__cvt+0x86>
 800317c:	2200      	movs	r2, #0
 800317e:	2300      	movs	r3, #0
 8003180:	4620      	mov	r0, r4
 8003182:	4639      	mov	r1, r7
 8003184:	f7fd fcc4 	bl	8000b10 <__aeabi_dcmpeq>
 8003188:	b918      	cbnz	r0, 8003192 <__cvt+0x86>
 800318a:	f1c5 0501 	rsb	r5, r5, #1
 800318e:	f8ca 5000 	str.w	r5, [sl]
 8003192:	f8da 3000 	ldr.w	r3, [sl]
 8003196:	4499      	add	r9, r3
 8003198:	2200      	movs	r2, #0
 800319a:	2300      	movs	r3, #0
 800319c:	4620      	mov	r0, r4
 800319e:	4639      	mov	r1, r7
 80031a0:	f7fd fcb6 	bl	8000b10 <__aeabi_dcmpeq>
 80031a4:	b108      	cbz	r0, 80031aa <__cvt+0x9e>
 80031a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80031aa:	2230      	movs	r2, #48	; 0x30
 80031ac:	9b07      	ldr	r3, [sp, #28]
 80031ae:	454b      	cmp	r3, r9
 80031b0:	d307      	bcc.n	80031c2 <__cvt+0xb6>
 80031b2:	4630      	mov	r0, r6
 80031b4:	9b07      	ldr	r3, [sp, #28]
 80031b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80031b8:	1b9b      	subs	r3, r3, r6
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	b008      	add	sp, #32
 80031be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	9107      	str	r1, [sp, #28]
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e7f0      	b.n	80031ac <__cvt+0xa0>

080031ca <__exponent>:
 80031ca:	4603      	mov	r3, r0
 80031cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ce:	2900      	cmp	r1, #0
 80031d0:	f803 2b02 	strb.w	r2, [r3], #2
 80031d4:	bfb6      	itet	lt
 80031d6:	222d      	movlt	r2, #45	; 0x2d
 80031d8:	222b      	movge	r2, #43	; 0x2b
 80031da:	4249      	neglt	r1, r1
 80031dc:	2909      	cmp	r1, #9
 80031de:	7042      	strb	r2, [r0, #1]
 80031e0:	dd2b      	ble.n	800323a <__exponent+0x70>
 80031e2:	f10d 0407 	add.w	r4, sp, #7
 80031e6:	46a4      	mov	ip, r4
 80031e8:	270a      	movs	r7, #10
 80031ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80031ee:	460a      	mov	r2, r1
 80031f0:	46a6      	mov	lr, r4
 80031f2:	fb07 1516 	mls	r5, r7, r6, r1
 80031f6:	2a63      	cmp	r2, #99	; 0x63
 80031f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80031fc:	4631      	mov	r1, r6
 80031fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8003202:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003206:	dcf0      	bgt.n	80031ea <__exponent+0x20>
 8003208:	3130      	adds	r1, #48	; 0x30
 800320a:	f1ae 0502 	sub.w	r5, lr, #2
 800320e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003212:	4629      	mov	r1, r5
 8003214:	1c44      	adds	r4, r0, #1
 8003216:	4561      	cmp	r1, ip
 8003218:	d30a      	bcc.n	8003230 <__exponent+0x66>
 800321a:	f10d 0209 	add.w	r2, sp, #9
 800321e:	eba2 020e 	sub.w	r2, r2, lr
 8003222:	4565      	cmp	r5, ip
 8003224:	bf88      	it	hi
 8003226:	2200      	movhi	r2, #0
 8003228:	4413      	add	r3, r2
 800322a:	1a18      	subs	r0, r3, r0
 800322c:	b003      	add	sp, #12
 800322e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003230:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003234:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003238:	e7ed      	b.n	8003216 <__exponent+0x4c>
 800323a:	2330      	movs	r3, #48	; 0x30
 800323c:	3130      	adds	r1, #48	; 0x30
 800323e:	7083      	strb	r3, [r0, #2]
 8003240:	70c1      	strb	r1, [r0, #3]
 8003242:	1d03      	adds	r3, r0, #4
 8003244:	e7f1      	b.n	800322a <__exponent+0x60>
	...

08003248 <_printf_float>:
 8003248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324c:	b091      	sub	sp, #68	; 0x44
 800324e:	460c      	mov	r4, r1
 8003250:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003254:	4616      	mov	r6, r2
 8003256:	461f      	mov	r7, r3
 8003258:	4605      	mov	r5, r0
 800325a:	f001 fa53 	bl	8004704 <_localeconv_r>
 800325e:	6803      	ldr	r3, [r0, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	9309      	str	r3, [sp, #36]	; 0x24
 8003264:	f7fc ff74 	bl	8000150 <strlen>
 8003268:	2300      	movs	r3, #0
 800326a:	930e      	str	r3, [sp, #56]	; 0x38
 800326c:	f8d8 3000 	ldr.w	r3, [r8]
 8003270:	900a      	str	r0, [sp, #40]	; 0x28
 8003272:	3307      	adds	r3, #7
 8003274:	f023 0307 	bic.w	r3, r3, #7
 8003278:	f103 0208 	add.w	r2, r3, #8
 800327c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003280:	f8d4 b000 	ldr.w	fp, [r4]
 8003284:	f8c8 2000 	str.w	r2, [r8]
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003290:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003294:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003298:	930b      	str	r3, [sp, #44]	; 0x2c
 800329a:	f04f 32ff 	mov.w	r2, #4294967295
 800329e:	4640      	mov	r0, r8
 80032a0:	4b9c      	ldr	r3, [pc, #624]	; (8003514 <_printf_float+0x2cc>)
 80032a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032a4:	f7fd fc66 	bl	8000b74 <__aeabi_dcmpun>
 80032a8:	bb70      	cbnz	r0, 8003308 <_printf_float+0xc0>
 80032aa:	f04f 32ff 	mov.w	r2, #4294967295
 80032ae:	4640      	mov	r0, r8
 80032b0:	4b98      	ldr	r3, [pc, #608]	; (8003514 <_printf_float+0x2cc>)
 80032b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032b4:	f7fd fc40 	bl	8000b38 <__aeabi_dcmple>
 80032b8:	bb30      	cbnz	r0, 8003308 <_printf_float+0xc0>
 80032ba:	2200      	movs	r2, #0
 80032bc:	2300      	movs	r3, #0
 80032be:	4640      	mov	r0, r8
 80032c0:	4651      	mov	r1, sl
 80032c2:	f7fd fc2f 	bl	8000b24 <__aeabi_dcmplt>
 80032c6:	b110      	cbz	r0, 80032ce <_printf_float+0x86>
 80032c8:	232d      	movs	r3, #45	; 0x2d
 80032ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ce:	4b92      	ldr	r3, [pc, #584]	; (8003518 <_printf_float+0x2d0>)
 80032d0:	4892      	ldr	r0, [pc, #584]	; (800351c <_printf_float+0x2d4>)
 80032d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80032d6:	bf94      	ite	ls
 80032d8:	4698      	movls	r8, r3
 80032da:	4680      	movhi	r8, r0
 80032dc:	2303      	movs	r3, #3
 80032de:	f04f 0a00 	mov.w	sl, #0
 80032e2:	6123      	str	r3, [r4, #16]
 80032e4:	f02b 0304 	bic.w	r3, fp, #4
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	4633      	mov	r3, r6
 80032ec:	4621      	mov	r1, r4
 80032ee:	4628      	mov	r0, r5
 80032f0:	9700      	str	r7, [sp, #0]
 80032f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80032f4:	f000 f9d4 	bl	80036a0 <_printf_common>
 80032f8:	3001      	adds	r0, #1
 80032fa:	f040 8090 	bne.w	800341e <_printf_float+0x1d6>
 80032fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003302:	b011      	add	sp, #68	; 0x44
 8003304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003308:	4642      	mov	r2, r8
 800330a:	4653      	mov	r3, sl
 800330c:	4640      	mov	r0, r8
 800330e:	4651      	mov	r1, sl
 8003310:	f7fd fc30 	bl	8000b74 <__aeabi_dcmpun>
 8003314:	b148      	cbz	r0, 800332a <_printf_float+0xe2>
 8003316:	f1ba 0f00 	cmp.w	sl, #0
 800331a:	bfb8      	it	lt
 800331c:	232d      	movlt	r3, #45	; 0x2d
 800331e:	4880      	ldr	r0, [pc, #512]	; (8003520 <_printf_float+0x2d8>)
 8003320:	bfb8      	it	lt
 8003322:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003326:	4b7f      	ldr	r3, [pc, #508]	; (8003524 <_printf_float+0x2dc>)
 8003328:	e7d3      	b.n	80032d2 <_printf_float+0x8a>
 800332a:	6863      	ldr	r3, [r4, #4]
 800332c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	d142      	bne.n	80033ba <_printf_float+0x172>
 8003334:	2306      	movs	r3, #6
 8003336:	6063      	str	r3, [r4, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	9206      	str	r2, [sp, #24]
 800333c:	aa0e      	add	r2, sp, #56	; 0x38
 800333e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003342:	aa0d      	add	r2, sp, #52	; 0x34
 8003344:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003348:	9203      	str	r2, [sp, #12]
 800334a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800334e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003352:	6023      	str	r3, [r4, #0]
 8003354:	6863      	ldr	r3, [r4, #4]
 8003356:	4642      	mov	r2, r8
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	4628      	mov	r0, r5
 800335c:	4653      	mov	r3, sl
 800335e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003360:	f7ff fed4 	bl	800310c <__cvt>
 8003364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003366:	4680      	mov	r8, r0
 8003368:	2947      	cmp	r1, #71	; 0x47
 800336a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800336c:	d108      	bne.n	8003380 <_printf_float+0x138>
 800336e:	1cc8      	adds	r0, r1, #3
 8003370:	db02      	blt.n	8003378 <_printf_float+0x130>
 8003372:	6863      	ldr	r3, [r4, #4]
 8003374:	4299      	cmp	r1, r3
 8003376:	dd40      	ble.n	80033fa <_printf_float+0x1b2>
 8003378:	f1a9 0902 	sub.w	r9, r9, #2
 800337c:	fa5f f989 	uxtb.w	r9, r9
 8003380:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003384:	d81f      	bhi.n	80033c6 <_printf_float+0x17e>
 8003386:	464a      	mov	r2, r9
 8003388:	3901      	subs	r1, #1
 800338a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800338e:	910d      	str	r1, [sp, #52]	; 0x34
 8003390:	f7ff ff1b 	bl	80031ca <__exponent>
 8003394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003396:	4682      	mov	sl, r0
 8003398:	1813      	adds	r3, r2, r0
 800339a:	2a01      	cmp	r2, #1
 800339c:	6123      	str	r3, [r4, #16]
 800339e:	dc02      	bgt.n	80033a6 <_printf_float+0x15e>
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	07d2      	lsls	r2, r2, #31
 80033a4:	d501      	bpl.n	80033aa <_printf_float+0x162>
 80033a6:	3301      	adds	r3, #1
 80033a8:	6123      	str	r3, [r4, #16]
 80033aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d09b      	beq.n	80032ea <_printf_float+0xa2>
 80033b2:	232d      	movs	r3, #45	; 0x2d
 80033b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b8:	e797      	b.n	80032ea <_printf_float+0xa2>
 80033ba:	2947      	cmp	r1, #71	; 0x47
 80033bc:	d1bc      	bne.n	8003338 <_printf_float+0xf0>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ba      	bne.n	8003338 <_printf_float+0xf0>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e7b7      	b.n	8003336 <_printf_float+0xee>
 80033c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80033ca:	d118      	bne.n	80033fe <_printf_float+0x1b6>
 80033cc:	2900      	cmp	r1, #0
 80033ce:	6863      	ldr	r3, [r4, #4]
 80033d0:	dd0b      	ble.n	80033ea <_printf_float+0x1a2>
 80033d2:	6121      	str	r1, [r4, #16]
 80033d4:	b913      	cbnz	r3, 80033dc <_printf_float+0x194>
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	07d0      	lsls	r0, r2, #31
 80033da:	d502      	bpl.n	80033e2 <_printf_float+0x19a>
 80033dc:	3301      	adds	r3, #1
 80033de:	440b      	add	r3, r1
 80033e0:	6123      	str	r3, [r4, #16]
 80033e2:	f04f 0a00 	mov.w	sl, #0
 80033e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80033e8:	e7df      	b.n	80033aa <_printf_float+0x162>
 80033ea:	b913      	cbnz	r3, 80033f2 <_printf_float+0x1aa>
 80033ec:	6822      	ldr	r2, [r4, #0]
 80033ee:	07d2      	lsls	r2, r2, #31
 80033f0:	d501      	bpl.n	80033f6 <_printf_float+0x1ae>
 80033f2:	3302      	adds	r3, #2
 80033f4:	e7f4      	b.n	80033e0 <_printf_float+0x198>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e7f2      	b.n	80033e0 <_printf_float+0x198>
 80033fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80033fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003400:	4299      	cmp	r1, r3
 8003402:	db05      	blt.n	8003410 <_printf_float+0x1c8>
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	6121      	str	r1, [r4, #16]
 8003408:	07d8      	lsls	r0, r3, #31
 800340a:	d5ea      	bpl.n	80033e2 <_printf_float+0x19a>
 800340c:	1c4b      	adds	r3, r1, #1
 800340e:	e7e7      	b.n	80033e0 <_printf_float+0x198>
 8003410:	2900      	cmp	r1, #0
 8003412:	bfcc      	ite	gt
 8003414:	2201      	movgt	r2, #1
 8003416:	f1c1 0202 	rsble	r2, r1, #2
 800341a:	4413      	add	r3, r2
 800341c:	e7e0      	b.n	80033e0 <_printf_float+0x198>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	055a      	lsls	r2, r3, #21
 8003422:	d407      	bmi.n	8003434 <_printf_float+0x1ec>
 8003424:	6923      	ldr	r3, [r4, #16]
 8003426:	4642      	mov	r2, r8
 8003428:	4631      	mov	r1, r6
 800342a:	4628      	mov	r0, r5
 800342c:	47b8      	blx	r7
 800342e:	3001      	adds	r0, #1
 8003430:	d12b      	bne.n	800348a <_printf_float+0x242>
 8003432:	e764      	b.n	80032fe <_printf_float+0xb6>
 8003434:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003438:	f240 80dd 	bls.w	80035f6 <_printf_float+0x3ae>
 800343c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003440:	2200      	movs	r2, #0
 8003442:	2300      	movs	r3, #0
 8003444:	f7fd fb64 	bl	8000b10 <__aeabi_dcmpeq>
 8003448:	2800      	cmp	r0, #0
 800344a:	d033      	beq.n	80034b4 <_printf_float+0x26c>
 800344c:	2301      	movs	r3, #1
 800344e:	4631      	mov	r1, r6
 8003450:	4628      	mov	r0, r5
 8003452:	4a35      	ldr	r2, [pc, #212]	; (8003528 <_printf_float+0x2e0>)
 8003454:	47b8      	blx	r7
 8003456:	3001      	adds	r0, #1
 8003458:	f43f af51 	beq.w	80032fe <_printf_float+0xb6>
 800345c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003460:	429a      	cmp	r2, r3
 8003462:	db02      	blt.n	800346a <_printf_float+0x222>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	07d8      	lsls	r0, r3, #31
 8003468:	d50f      	bpl.n	800348a <_printf_float+0x242>
 800346a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800346e:	4631      	mov	r1, r6
 8003470:	4628      	mov	r0, r5
 8003472:	47b8      	blx	r7
 8003474:	3001      	adds	r0, #1
 8003476:	f43f af42 	beq.w	80032fe <_printf_float+0xb6>
 800347a:	f04f 0800 	mov.w	r8, #0
 800347e:	f104 091a 	add.w	r9, r4, #26
 8003482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003484:	3b01      	subs	r3, #1
 8003486:	4543      	cmp	r3, r8
 8003488:	dc09      	bgt.n	800349e <_printf_float+0x256>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	079b      	lsls	r3, r3, #30
 800348e:	f100 8102 	bmi.w	8003696 <_printf_float+0x44e>
 8003492:	68e0      	ldr	r0, [r4, #12]
 8003494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003496:	4298      	cmp	r0, r3
 8003498:	bfb8      	it	lt
 800349a:	4618      	movlt	r0, r3
 800349c:	e731      	b.n	8003302 <_printf_float+0xba>
 800349e:	2301      	movs	r3, #1
 80034a0:	464a      	mov	r2, r9
 80034a2:	4631      	mov	r1, r6
 80034a4:	4628      	mov	r0, r5
 80034a6:	47b8      	blx	r7
 80034a8:	3001      	adds	r0, #1
 80034aa:	f43f af28 	beq.w	80032fe <_printf_float+0xb6>
 80034ae:	f108 0801 	add.w	r8, r8, #1
 80034b2:	e7e6      	b.n	8003482 <_printf_float+0x23a>
 80034b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	dc38      	bgt.n	800352c <_printf_float+0x2e4>
 80034ba:	2301      	movs	r3, #1
 80034bc:	4631      	mov	r1, r6
 80034be:	4628      	mov	r0, r5
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <_printf_float+0x2e0>)
 80034c2:	47b8      	blx	r7
 80034c4:	3001      	adds	r0, #1
 80034c6:	f43f af1a 	beq.w	80032fe <_printf_float+0xb6>
 80034ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034ce:	4313      	orrs	r3, r2
 80034d0:	d102      	bne.n	80034d8 <_printf_float+0x290>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	07d9      	lsls	r1, r3, #31
 80034d6:	d5d8      	bpl.n	800348a <_printf_float+0x242>
 80034d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034dc:	4631      	mov	r1, r6
 80034de:	4628      	mov	r0, r5
 80034e0:	47b8      	blx	r7
 80034e2:	3001      	adds	r0, #1
 80034e4:	f43f af0b 	beq.w	80032fe <_printf_float+0xb6>
 80034e8:	f04f 0900 	mov.w	r9, #0
 80034ec:	f104 0a1a 	add.w	sl, r4, #26
 80034f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034f2:	425b      	negs	r3, r3
 80034f4:	454b      	cmp	r3, r9
 80034f6:	dc01      	bgt.n	80034fc <_printf_float+0x2b4>
 80034f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034fa:	e794      	b.n	8003426 <_printf_float+0x1de>
 80034fc:	2301      	movs	r3, #1
 80034fe:	4652      	mov	r2, sl
 8003500:	4631      	mov	r1, r6
 8003502:	4628      	mov	r0, r5
 8003504:	47b8      	blx	r7
 8003506:	3001      	adds	r0, #1
 8003508:	f43f aef9 	beq.w	80032fe <_printf_float+0xb6>
 800350c:	f109 0901 	add.w	r9, r9, #1
 8003510:	e7ee      	b.n	80034f0 <_printf_float+0x2a8>
 8003512:	bf00      	nop
 8003514:	7fefffff 	.word	0x7fefffff
 8003518:	08006d18 	.word	0x08006d18
 800351c:	08006d1c 	.word	0x08006d1c
 8003520:	08006d24 	.word	0x08006d24
 8003524:	08006d20 	.word	0x08006d20
 8003528:	08006d28 	.word	0x08006d28
 800352c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800352e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003530:	429a      	cmp	r2, r3
 8003532:	bfa8      	it	ge
 8003534:	461a      	movge	r2, r3
 8003536:	2a00      	cmp	r2, #0
 8003538:	4691      	mov	r9, r2
 800353a:	dc37      	bgt.n	80035ac <_printf_float+0x364>
 800353c:	f04f 0b00 	mov.w	fp, #0
 8003540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003544:	f104 021a 	add.w	r2, r4, #26
 8003548:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800354c:	ebaa 0309 	sub.w	r3, sl, r9
 8003550:	455b      	cmp	r3, fp
 8003552:	dc33      	bgt.n	80035bc <_printf_float+0x374>
 8003554:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003558:	429a      	cmp	r2, r3
 800355a:	db3b      	blt.n	80035d4 <_printf_float+0x38c>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	07da      	lsls	r2, r3, #31
 8003560:	d438      	bmi.n	80035d4 <_printf_float+0x38c>
 8003562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003564:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003566:	eba3 020a 	sub.w	r2, r3, sl
 800356a:	eba3 0901 	sub.w	r9, r3, r1
 800356e:	4591      	cmp	r9, r2
 8003570:	bfa8      	it	ge
 8003572:	4691      	movge	r9, r2
 8003574:	f1b9 0f00 	cmp.w	r9, #0
 8003578:	dc34      	bgt.n	80035e4 <_printf_float+0x39c>
 800357a:	f04f 0800 	mov.w	r8, #0
 800357e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003582:	f104 0a1a 	add.w	sl, r4, #26
 8003586:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	eba3 0309 	sub.w	r3, r3, r9
 8003590:	4543      	cmp	r3, r8
 8003592:	f77f af7a 	ble.w	800348a <_printf_float+0x242>
 8003596:	2301      	movs	r3, #1
 8003598:	4652      	mov	r2, sl
 800359a:	4631      	mov	r1, r6
 800359c:	4628      	mov	r0, r5
 800359e:	47b8      	blx	r7
 80035a0:	3001      	adds	r0, #1
 80035a2:	f43f aeac 	beq.w	80032fe <_printf_float+0xb6>
 80035a6:	f108 0801 	add.w	r8, r8, #1
 80035aa:	e7ec      	b.n	8003586 <_printf_float+0x33e>
 80035ac:	4613      	mov	r3, r2
 80035ae:	4631      	mov	r1, r6
 80035b0:	4642      	mov	r2, r8
 80035b2:	4628      	mov	r0, r5
 80035b4:	47b8      	blx	r7
 80035b6:	3001      	adds	r0, #1
 80035b8:	d1c0      	bne.n	800353c <_printf_float+0x2f4>
 80035ba:	e6a0      	b.n	80032fe <_printf_float+0xb6>
 80035bc:	2301      	movs	r3, #1
 80035be:	4631      	mov	r1, r6
 80035c0:	4628      	mov	r0, r5
 80035c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80035c4:	47b8      	blx	r7
 80035c6:	3001      	adds	r0, #1
 80035c8:	f43f ae99 	beq.w	80032fe <_printf_float+0xb6>
 80035cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80035ce:	f10b 0b01 	add.w	fp, fp, #1
 80035d2:	e7b9      	b.n	8003548 <_printf_float+0x300>
 80035d4:	4631      	mov	r1, r6
 80035d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035da:	4628      	mov	r0, r5
 80035dc:	47b8      	blx	r7
 80035de:	3001      	adds	r0, #1
 80035e0:	d1bf      	bne.n	8003562 <_printf_float+0x31a>
 80035e2:	e68c      	b.n	80032fe <_printf_float+0xb6>
 80035e4:	464b      	mov	r3, r9
 80035e6:	4631      	mov	r1, r6
 80035e8:	4628      	mov	r0, r5
 80035ea:	eb08 020a 	add.w	r2, r8, sl
 80035ee:	47b8      	blx	r7
 80035f0:	3001      	adds	r0, #1
 80035f2:	d1c2      	bne.n	800357a <_printf_float+0x332>
 80035f4:	e683      	b.n	80032fe <_printf_float+0xb6>
 80035f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035f8:	2a01      	cmp	r2, #1
 80035fa:	dc01      	bgt.n	8003600 <_printf_float+0x3b8>
 80035fc:	07db      	lsls	r3, r3, #31
 80035fe:	d537      	bpl.n	8003670 <_printf_float+0x428>
 8003600:	2301      	movs	r3, #1
 8003602:	4642      	mov	r2, r8
 8003604:	4631      	mov	r1, r6
 8003606:	4628      	mov	r0, r5
 8003608:	47b8      	blx	r7
 800360a:	3001      	adds	r0, #1
 800360c:	f43f ae77 	beq.w	80032fe <_printf_float+0xb6>
 8003610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003614:	4631      	mov	r1, r6
 8003616:	4628      	mov	r0, r5
 8003618:	47b8      	blx	r7
 800361a:	3001      	adds	r0, #1
 800361c:	f43f ae6f 	beq.w	80032fe <_printf_float+0xb6>
 8003620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003624:	2200      	movs	r2, #0
 8003626:	2300      	movs	r3, #0
 8003628:	f7fd fa72 	bl	8000b10 <__aeabi_dcmpeq>
 800362c:	b9d8      	cbnz	r0, 8003666 <_printf_float+0x41e>
 800362e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003630:	f108 0201 	add.w	r2, r8, #1
 8003634:	3b01      	subs	r3, #1
 8003636:	4631      	mov	r1, r6
 8003638:	4628      	mov	r0, r5
 800363a:	47b8      	blx	r7
 800363c:	3001      	adds	r0, #1
 800363e:	d10e      	bne.n	800365e <_printf_float+0x416>
 8003640:	e65d      	b.n	80032fe <_printf_float+0xb6>
 8003642:	2301      	movs	r3, #1
 8003644:	464a      	mov	r2, r9
 8003646:	4631      	mov	r1, r6
 8003648:	4628      	mov	r0, r5
 800364a:	47b8      	blx	r7
 800364c:	3001      	adds	r0, #1
 800364e:	f43f ae56 	beq.w	80032fe <_printf_float+0xb6>
 8003652:	f108 0801 	add.w	r8, r8, #1
 8003656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003658:	3b01      	subs	r3, #1
 800365a:	4543      	cmp	r3, r8
 800365c:	dcf1      	bgt.n	8003642 <_printf_float+0x3fa>
 800365e:	4653      	mov	r3, sl
 8003660:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003664:	e6e0      	b.n	8003428 <_printf_float+0x1e0>
 8003666:	f04f 0800 	mov.w	r8, #0
 800366a:	f104 091a 	add.w	r9, r4, #26
 800366e:	e7f2      	b.n	8003656 <_printf_float+0x40e>
 8003670:	2301      	movs	r3, #1
 8003672:	4642      	mov	r2, r8
 8003674:	e7df      	b.n	8003636 <_printf_float+0x3ee>
 8003676:	2301      	movs	r3, #1
 8003678:	464a      	mov	r2, r9
 800367a:	4631      	mov	r1, r6
 800367c:	4628      	mov	r0, r5
 800367e:	47b8      	blx	r7
 8003680:	3001      	adds	r0, #1
 8003682:	f43f ae3c 	beq.w	80032fe <_printf_float+0xb6>
 8003686:	f108 0801 	add.w	r8, r8, #1
 800368a:	68e3      	ldr	r3, [r4, #12]
 800368c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800368e:	1a5b      	subs	r3, r3, r1
 8003690:	4543      	cmp	r3, r8
 8003692:	dcf0      	bgt.n	8003676 <_printf_float+0x42e>
 8003694:	e6fd      	b.n	8003492 <_printf_float+0x24a>
 8003696:	f04f 0800 	mov.w	r8, #0
 800369a:	f104 0919 	add.w	r9, r4, #25
 800369e:	e7f4      	b.n	800368a <_printf_float+0x442>

080036a0 <_printf_common>:
 80036a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	4616      	mov	r6, r2
 80036a6:	4699      	mov	r9, r3
 80036a8:	688a      	ldr	r2, [r1, #8]
 80036aa:	690b      	ldr	r3, [r1, #16]
 80036ac:	4607      	mov	r7, r0
 80036ae:	4293      	cmp	r3, r2
 80036b0:	bfb8      	it	lt
 80036b2:	4613      	movlt	r3, r2
 80036b4:	6033      	str	r3, [r6, #0]
 80036b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ba:	460c      	mov	r4, r1
 80036bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036c0:	b10a      	cbz	r2, 80036c6 <_printf_common+0x26>
 80036c2:	3301      	adds	r3, #1
 80036c4:	6033      	str	r3, [r6, #0]
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	0699      	lsls	r1, r3, #26
 80036ca:	bf42      	ittt	mi
 80036cc:	6833      	ldrmi	r3, [r6, #0]
 80036ce:	3302      	addmi	r3, #2
 80036d0:	6033      	strmi	r3, [r6, #0]
 80036d2:	6825      	ldr	r5, [r4, #0]
 80036d4:	f015 0506 	ands.w	r5, r5, #6
 80036d8:	d106      	bne.n	80036e8 <_printf_common+0x48>
 80036da:	f104 0a19 	add.w	sl, r4, #25
 80036de:	68e3      	ldr	r3, [r4, #12]
 80036e0:	6832      	ldr	r2, [r6, #0]
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	42ab      	cmp	r3, r5
 80036e6:	dc28      	bgt.n	800373a <_printf_common+0x9a>
 80036e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036ec:	1e13      	subs	r3, r2, #0
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	bf18      	it	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	0692      	lsls	r2, r2, #26
 80036f6:	d42d      	bmi.n	8003754 <_printf_common+0xb4>
 80036f8:	4649      	mov	r1, r9
 80036fa:	4638      	mov	r0, r7
 80036fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003700:	47c0      	blx	r8
 8003702:	3001      	adds	r0, #1
 8003704:	d020      	beq.n	8003748 <_printf_common+0xa8>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	68e5      	ldr	r5, [r4, #12]
 800370a:	f003 0306 	and.w	r3, r3, #6
 800370e:	2b04      	cmp	r3, #4
 8003710:	bf18      	it	ne
 8003712:	2500      	movne	r5, #0
 8003714:	6832      	ldr	r2, [r6, #0]
 8003716:	f04f 0600 	mov.w	r6, #0
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	bf08      	it	eq
 800371e:	1aad      	subeq	r5, r5, r2
 8003720:	6922      	ldr	r2, [r4, #16]
 8003722:	bf08      	it	eq
 8003724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003728:	4293      	cmp	r3, r2
 800372a:	bfc4      	itt	gt
 800372c:	1a9b      	subgt	r3, r3, r2
 800372e:	18ed      	addgt	r5, r5, r3
 8003730:	341a      	adds	r4, #26
 8003732:	42b5      	cmp	r5, r6
 8003734:	d11a      	bne.n	800376c <_printf_common+0xcc>
 8003736:	2000      	movs	r0, #0
 8003738:	e008      	b.n	800374c <_printf_common+0xac>
 800373a:	2301      	movs	r3, #1
 800373c:	4652      	mov	r2, sl
 800373e:	4649      	mov	r1, r9
 8003740:	4638      	mov	r0, r7
 8003742:	47c0      	blx	r8
 8003744:	3001      	adds	r0, #1
 8003746:	d103      	bne.n	8003750 <_printf_common+0xb0>
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003750:	3501      	adds	r5, #1
 8003752:	e7c4      	b.n	80036de <_printf_common+0x3e>
 8003754:	2030      	movs	r0, #48	; 0x30
 8003756:	18e1      	adds	r1, r4, r3
 8003758:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003762:	4422      	add	r2, r4
 8003764:	3302      	adds	r3, #2
 8003766:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800376a:	e7c5      	b.n	80036f8 <_printf_common+0x58>
 800376c:	2301      	movs	r3, #1
 800376e:	4622      	mov	r2, r4
 8003770:	4649      	mov	r1, r9
 8003772:	4638      	mov	r0, r7
 8003774:	47c0      	blx	r8
 8003776:	3001      	adds	r0, #1
 8003778:	d0e6      	beq.n	8003748 <_printf_common+0xa8>
 800377a:	3601      	adds	r6, #1
 800377c:	e7d9      	b.n	8003732 <_printf_common+0x92>
	...

08003780 <_printf_i>:
 8003780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003784:	7e0f      	ldrb	r7, [r1, #24]
 8003786:	4691      	mov	r9, r2
 8003788:	2f78      	cmp	r7, #120	; 0x78
 800378a:	4680      	mov	r8, r0
 800378c:	460c      	mov	r4, r1
 800378e:	469a      	mov	sl, r3
 8003790:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003796:	d807      	bhi.n	80037a8 <_printf_i+0x28>
 8003798:	2f62      	cmp	r7, #98	; 0x62
 800379a:	d80a      	bhi.n	80037b2 <_printf_i+0x32>
 800379c:	2f00      	cmp	r7, #0
 800379e:	f000 80d9 	beq.w	8003954 <_printf_i+0x1d4>
 80037a2:	2f58      	cmp	r7, #88	; 0x58
 80037a4:	f000 80a4 	beq.w	80038f0 <_printf_i+0x170>
 80037a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037b0:	e03a      	b.n	8003828 <_printf_i+0xa8>
 80037b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037b6:	2b15      	cmp	r3, #21
 80037b8:	d8f6      	bhi.n	80037a8 <_printf_i+0x28>
 80037ba:	a101      	add	r1, pc, #4	; (adr r1, 80037c0 <_printf_i+0x40>)
 80037bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037c0:	08003819 	.word	0x08003819
 80037c4:	0800382d 	.word	0x0800382d
 80037c8:	080037a9 	.word	0x080037a9
 80037cc:	080037a9 	.word	0x080037a9
 80037d0:	080037a9 	.word	0x080037a9
 80037d4:	080037a9 	.word	0x080037a9
 80037d8:	0800382d 	.word	0x0800382d
 80037dc:	080037a9 	.word	0x080037a9
 80037e0:	080037a9 	.word	0x080037a9
 80037e4:	080037a9 	.word	0x080037a9
 80037e8:	080037a9 	.word	0x080037a9
 80037ec:	0800393b 	.word	0x0800393b
 80037f0:	0800385d 	.word	0x0800385d
 80037f4:	0800391d 	.word	0x0800391d
 80037f8:	080037a9 	.word	0x080037a9
 80037fc:	080037a9 	.word	0x080037a9
 8003800:	0800395d 	.word	0x0800395d
 8003804:	080037a9 	.word	0x080037a9
 8003808:	0800385d 	.word	0x0800385d
 800380c:	080037a9 	.word	0x080037a9
 8003810:	080037a9 	.word	0x080037a9
 8003814:	08003925 	.word	0x08003925
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	602a      	str	r2, [r5, #0]
 8003820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003828:	2301      	movs	r3, #1
 800382a:	e0a4      	b.n	8003976 <_printf_i+0x1f6>
 800382c:	6820      	ldr	r0, [r4, #0]
 800382e:	6829      	ldr	r1, [r5, #0]
 8003830:	0606      	lsls	r6, r0, #24
 8003832:	f101 0304 	add.w	r3, r1, #4
 8003836:	d50a      	bpl.n	800384e <_printf_i+0xce>
 8003838:	680e      	ldr	r6, [r1, #0]
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	2e00      	cmp	r6, #0
 800383e:	da03      	bge.n	8003848 <_printf_i+0xc8>
 8003840:	232d      	movs	r3, #45	; 0x2d
 8003842:	4276      	negs	r6, r6
 8003844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003848:	230a      	movs	r3, #10
 800384a:	485e      	ldr	r0, [pc, #376]	; (80039c4 <_printf_i+0x244>)
 800384c:	e019      	b.n	8003882 <_printf_i+0x102>
 800384e:	680e      	ldr	r6, [r1, #0]
 8003850:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003854:	602b      	str	r3, [r5, #0]
 8003856:	bf18      	it	ne
 8003858:	b236      	sxthne	r6, r6
 800385a:	e7ef      	b.n	800383c <_printf_i+0xbc>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	1d19      	adds	r1, r3, #4
 8003862:	6029      	str	r1, [r5, #0]
 8003864:	0601      	lsls	r1, r0, #24
 8003866:	d501      	bpl.n	800386c <_printf_i+0xec>
 8003868:	681e      	ldr	r6, [r3, #0]
 800386a:	e002      	b.n	8003872 <_printf_i+0xf2>
 800386c:	0646      	lsls	r6, r0, #25
 800386e:	d5fb      	bpl.n	8003868 <_printf_i+0xe8>
 8003870:	881e      	ldrh	r6, [r3, #0]
 8003872:	2f6f      	cmp	r7, #111	; 0x6f
 8003874:	bf0c      	ite	eq
 8003876:	2308      	moveq	r3, #8
 8003878:	230a      	movne	r3, #10
 800387a:	4852      	ldr	r0, [pc, #328]	; (80039c4 <_printf_i+0x244>)
 800387c:	2100      	movs	r1, #0
 800387e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003882:	6865      	ldr	r5, [r4, #4]
 8003884:	2d00      	cmp	r5, #0
 8003886:	bfa8      	it	ge
 8003888:	6821      	ldrge	r1, [r4, #0]
 800388a:	60a5      	str	r5, [r4, #8]
 800388c:	bfa4      	itt	ge
 800388e:	f021 0104 	bicge.w	r1, r1, #4
 8003892:	6021      	strge	r1, [r4, #0]
 8003894:	b90e      	cbnz	r6, 800389a <_printf_i+0x11a>
 8003896:	2d00      	cmp	r5, #0
 8003898:	d04d      	beq.n	8003936 <_printf_i+0x1b6>
 800389a:	4615      	mov	r5, r2
 800389c:	fbb6 f1f3 	udiv	r1, r6, r3
 80038a0:	fb03 6711 	mls	r7, r3, r1, r6
 80038a4:	5dc7      	ldrb	r7, [r0, r7]
 80038a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038aa:	4637      	mov	r7, r6
 80038ac:	42bb      	cmp	r3, r7
 80038ae:	460e      	mov	r6, r1
 80038b0:	d9f4      	bls.n	800389c <_printf_i+0x11c>
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d10b      	bne.n	80038ce <_printf_i+0x14e>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	07de      	lsls	r6, r3, #31
 80038ba:	d508      	bpl.n	80038ce <_printf_i+0x14e>
 80038bc:	6923      	ldr	r3, [r4, #16]
 80038be:	6861      	ldr	r1, [r4, #4]
 80038c0:	4299      	cmp	r1, r3
 80038c2:	bfde      	ittt	le
 80038c4:	2330      	movle	r3, #48	; 0x30
 80038c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038ce:	1b52      	subs	r2, r2, r5
 80038d0:	6122      	str	r2, [r4, #16]
 80038d2:	464b      	mov	r3, r9
 80038d4:	4621      	mov	r1, r4
 80038d6:	4640      	mov	r0, r8
 80038d8:	f8cd a000 	str.w	sl, [sp]
 80038dc:	aa03      	add	r2, sp, #12
 80038de:	f7ff fedf 	bl	80036a0 <_printf_common>
 80038e2:	3001      	adds	r0, #1
 80038e4:	d14c      	bne.n	8003980 <_printf_i+0x200>
 80038e6:	f04f 30ff 	mov.w	r0, #4294967295
 80038ea:	b004      	add	sp, #16
 80038ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f0:	4834      	ldr	r0, [pc, #208]	; (80039c4 <_printf_i+0x244>)
 80038f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038f6:	6829      	ldr	r1, [r5, #0]
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80038fe:	6029      	str	r1, [r5, #0]
 8003900:	061d      	lsls	r5, r3, #24
 8003902:	d514      	bpl.n	800392e <_printf_i+0x1ae>
 8003904:	07df      	lsls	r7, r3, #31
 8003906:	bf44      	itt	mi
 8003908:	f043 0320 	orrmi.w	r3, r3, #32
 800390c:	6023      	strmi	r3, [r4, #0]
 800390e:	b91e      	cbnz	r6, 8003918 <_printf_i+0x198>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	f023 0320 	bic.w	r3, r3, #32
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	2310      	movs	r3, #16
 800391a:	e7af      	b.n	800387c <_printf_i+0xfc>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	f043 0320 	orr.w	r3, r3, #32
 8003922:	6023      	str	r3, [r4, #0]
 8003924:	2378      	movs	r3, #120	; 0x78
 8003926:	4828      	ldr	r0, [pc, #160]	; (80039c8 <_printf_i+0x248>)
 8003928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800392c:	e7e3      	b.n	80038f6 <_printf_i+0x176>
 800392e:	0659      	lsls	r1, r3, #25
 8003930:	bf48      	it	mi
 8003932:	b2b6      	uxthmi	r6, r6
 8003934:	e7e6      	b.n	8003904 <_printf_i+0x184>
 8003936:	4615      	mov	r5, r2
 8003938:	e7bb      	b.n	80038b2 <_printf_i+0x132>
 800393a:	682b      	ldr	r3, [r5, #0]
 800393c:	6826      	ldr	r6, [r4, #0]
 800393e:	1d18      	adds	r0, r3, #4
 8003940:	6961      	ldr	r1, [r4, #20]
 8003942:	6028      	str	r0, [r5, #0]
 8003944:	0635      	lsls	r5, r6, #24
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	d501      	bpl.n	800394e <_printf_i+0x1ce>
 800394a:	6019      	str	r1, [r3, #0]
 800394c:	e002      	b.n	8003954 <_printf_i+0x1d4>
 800394e:	0670      	lsls	r0, r6, #25
 8003950:	d5fb      	bpl.n	800394a <_printf_i+0x1ca>
 8003952:	8019      	strh	r1, [r3, #0]
 8003954:	2300      	movs	r3, #0
 8003956:	4615      	mov	r5, r2
 8003958:	6123      	str	r3, [r4, #16]
 800395a:	e7ba      	b.n	80038d2 <_printf_i+0x152>
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	2100      	movs	r1, #0
 8003960:	1d1a      	adds	r2, r3, #4
 8003962:	602a      	str	r2, [r5, #0]
 8003964:	681d      	ldr	r5, [r3, #0]
 8003966:	6862      	ldr	r2, [r4, #4]
 8003968:	4628      	mov	r0, r5
 800396a:	f000 fed7 	bl	800471c <memchr>
 800396e:	b108      	cbz	r0, 8003974 <_printf_i+0x1f4>
 8003970:	1b40      	subs	r0, r0, r5
 8003972:	6060      	str	r0, [r4, #4]
 8003974:	6863      	ldr	r3, [r4, #4]
 8003976:	6123      	str	r3, [r4, #16]
 8003978:	2300      	movs	r3, #0
 800397a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800397e:	e7a8      	b.n	80038d2 <_printf_i+0x152>
 8003980:	462a      	mov	r2, r5
 8003982:	4649      	mov	r1, r9
 8003984:	4640      	mov	r0, r8
 8003986:	6923      	ldr	r3, [r4, #16]
 8003988:	47d0      	blx	sl
 800398a:	3001      	adds	r0, #1
 800398c:	d0ab      	beq.n	80038e6 <_printf_i+0x166>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	079b      	lsls	r3, r3, #30
 8003992:	d413      	bmi.n	80039bc <_printf_i+0x23c>
 8003994:	68e0      	ldr	r0, [r4, #12]
 8003996:	9b03      	ldr	r3, [sp, #12]
 8003998:	4298      	cmp	r0, r3
 800399a:	bfb8      	it	lt
 800399c:	4618      	movlt	r0, r3
 800399e:	e7a4      	b.n	80038ea <_printf_i+0x16a>
 80039a0:	2301      	movs	r3, #1
 80039a2:	4632      	mov	r2, r6
 80039a4:	4649      	mov	r1, r9
 80039a6:	4640      	mov	r0, r8
 80039a8:	47d0      	blx	sl
 80039aa:	3001      	adds	r0, #1
 80039ac:	d09b      	beq.n	80038e6 <_printf_i+0x166>
 80039ae:	3501      	adds	r5, #1
 80039b0:	68e3      	ldr	r3, [r4, #12]
 80039b2:	9903      	ldr	r1, [sp, #12]
 80039b4:	1a5b      	subs	r3, r3, r1
 80039b6:	42ab      	cmp	r3, r5
 80039b8:	dcf2      	bgt.n	80039a0 <_printf_i+0x220>
 80039ba:	e7eb      	b.n	8003994 <_printf_i+0x214>
 80039bc:	2500      	movs	r5, #0
 80039be:	f104 0619 	add.w	r6, r4, #25
 80039c2:	e7f5      	b.n	80039b0 <_printf_i+0x230>
 80039c4:	08006d2a 	.word	0x08006d2a
 80039c8:	08006d3b 	.word	0x08006d3b

080039cc <siprintf>:
 80039cc:	b40e      	push	{r1, r2, r3}
 80039ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039d2:	b500      	push	{lr}
 80039d4:	b09c      	sub	sp, #112	; 0x70
 80039d6:	ab1d      	add	r3, sp, #116	; 0x74
 80039d8:	9002      	str	r0, [sp, #8]
 80039da:	9006      	str	r0, [sp, #24]
 80039dc:	9107      	str	r1, [sp, #28]
 80039de:	9104      	str	r1, [sp, #16]
 80039e0:	4808      	ldr	r0, [pc, #32]	; (8003a04 <siprintf+0x38>)
 80039e2:	4909      	ldr	r1, [pc, #36]	; (8003a08 <siprintf+0x3c>)
 80039e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039e8:	9105      	str	r1, [sp, #20]
 80039ea:	6800      	ldr	r0, [r0, #0]
 80039ec:	a902      	add	r1, sp, #8
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	f001 fb7e 	bl	80050f0 <_svfiprintf_r>
 80039f4:	2200      	movs	r2, #0
 80039f6:	9b02      	ldr	r3, [sp, #8]
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	b01c      	add	sp, #112	; 0x70
 80039fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a00:	b003      	add	sp, #12
 8003a02:	4770      	bx	lr
 8003a04:	2000000c 	.word	0x2000000c
 8003a08:	ffff0208 	.word	0xffff0208

08003a0c <quorem>:
 8003a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a10:	6903      	ldr	r3, [r0, #16]
 8003a12:	690c      	ldr	r4, [r1, #16]
 8003a14:	4607      	mov	r7, r0
 8003a16:	42a3      	cmp	r3, r4
 8003a18:	f2c0 8082 	blt.w	8003b20 <quorem+0x114>
 8003a1c:	3c01      	subs	r4, #1
 8003a1e:	f100 0514 	add.w	r5, r0, #20
 8003a22:	f101 0814 	add.w	r8, r1, #20
 8003a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a34:	3301      	adds	r3, #1
 8003a36:	429a      	cmp	r2, r3
 8003a38:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a44:	d331      	bcc.n	8003aaa <quorem+0x9e>
 8003a46:	f04f 0e00 	mov.w	lr, #0
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	46ac      	mov	ip, r5
 8003a4e:	46f2      	mov	sl, lr
 8003a50:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a54:	b293      	uxth	r3, r2
 8003a56:	fb06 e303 	mla	r3, r6, r3, lr
 8003a5a:	0c12      	lsrs	r2, r2, #16
 8003a5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	fb06 e202 	mla	r2, r6, r2, lr
 8003a66:	ebaa 0303 	sub.w	r3, sl, r3
 8003a6a:	f8dc a000 	ldr.w	sl, [ip]
 8003a6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003a72:	fa1f fa8a 	uxth.w	sl, sl
 8003a76:	4453      	add	r3, sl
 8003a78:	f8dc a000 	ldr.w	sl, [ip]
 8003a7c:	b292      	uxth	r2, r2
 8003a7e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003a82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a8c:	4581      	cmp	r9, r0
 8003a8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003a92:	f84c 3b04 	str.w	r3, [ip], #4
 8003a96:	d2db      	bcs.n	8003a50 <quorem+0x44>
 8003a98:	f855 300b 	ldr.w	r3, [r5, fp]
 8003a9c:	b92b      	cbnz	r3, 8003aaa <quorem+0x9e>
 8003a9e:	9b01      	ldr	r3, [sp, #4]
 8003aa0:	3b04      	subs	r3, #4
 8003aa2:	429d      	cmp	r5, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	d32f      	bcc.n	8003b08 <quorem+0xfc>
 8003aa8:	613c      	str	r4, [r7, #16]
 8003aaa:	4638      	mov	r0, r7
 8003aac:	f001 f8d0 	bl	8004c50 <__mcmp>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	db25      	blt.n	8003b00 <quorem+0xf4>
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f04f 0c00 	mov.w	ip, #0
 8003aba:	3601      	adds	r6, #1
 8003abc:	f858 1b04 	ldr.w	r1, [r8], #4
 8003ac0:	f8d0 e000 	ldr.w	lr, [r0]
 8003ac4:	b28b      	uxth	r3, r1
 8003ac6:	ebac 0303 	sub.w	r3, ip, r3
 8003aca:	fa1f f28e 	uxth.w	r2, lr
 8003ace:	4413      	add	r3, r2
 8003ad0:	0c0a      	lsrs	r2, r1, #16
 8003ad2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003ad6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ae0:	45c1      	cmp	r9, r8
 8003ae2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003ae6:	f840 3b04 	str.w	r3, [r0], #4
 8003aea:	d2e7      	bcs.n	8003abc <quorem+0xb0>
 8003aec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003af0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003af4:	b922      	cbnz	r2, 8003b00 <quorem+0xf4>
 8003af6:	3b04      	subs	r3, #4
 8003af8:	429d      	cmp	r5, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	d30a      	bcc.n	8003b14 <quorem+0x108>
 8003afe:	613c      	str	r4, [r7, #16]
 8003b00:	4630      	mov	r0, r6
 8003b02:	b003      	add	sp, #12
 8003b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	3b04      	subs	r3, #4
 8003b0c:	2a00      	cmp	r2, #0
 8003b0e:	d1cb      	bne.n	8003aa8 <quorem+0x9c>
 8003b10:	3c01      	subs	r4, #1
 8003b12:	e7c6      	b.n	8003aa2 <quorem+0x96>
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	3b04      	subs	r3, #4
 8003b18:	2a00      	cmp	r2, #0
 8003b1a:	d1f0      	bne.n	8003afe <quorem+0xf2>
 8003b1c:	3c01      	subs	r4, #1
 8003b1e:	e7eb      	b.n	8003af8 <quorem+0xec>
 8003b20:	2000      	movs	r0, #0
 8003b22:	e7ee      	b.n	8003b02 <quorem+0xf6>
 8003b24:	0000      	movs	r0, r0
	...

08003b28 <_dtoa_r>:
 8003b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	461f      	mov	r7, r3
 8003b30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003b32:	b099      	sub	sp, #100	; 0x64
 8003b34:	4605      	mov	r5, r0
 8003b36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003b3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003b3e:	b974      	cbnz	r4, 8003b5e <_dtoa_r+0x36>
 8003b40:	2010      	movs	r0, #16
 8003b42:	f000 fde3 	bl	800470c <malloc>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6268      	str	r0, [r5, #36]	; 0x24
 8003b4a:	b920      	cbnz	r0, 8003b56 <_dtoa_r+0x2e>
 8003b4c:	21ea      	movs	r1, #234	; 0xea
 8003b4e:	4ba8      	ldr	r3, [pc, #672]	; (8003df0 <_dtoa_r+0x2c8>)
 8003b50:	48a8      	ldr	r0, [pc, #672]	; (8003df4 <_dtoa_r+0x2cc>)
 8003b52:	f001 fbdd 	bl	8005310 <__assert_func>
 8003b56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003b5a:	6004      	str	r4, [r0, #0]
 8003b5c:	60c4      	str	r4, [r0, #12]
 8003b5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	b151      	cbz	r1, 8003b7a <_dtoa_r+0x52>
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	2301      	movs	r3, #1
 8003b68:	4093      	lsls	r3, r2
 8003b6a:	604a      	str	r2, [r1, #4]
 8003b6c:	608b      	str	r3, [r1, #8]
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f000 fe30 	bl	80047d4 <_Bfree>
 8003b74:	2200      	movs	r2, #0
 8003b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	1e3b      	subs	r3, r7, #0
 8003b7c:	bfaf      	iteee	ge
 8003b7e:	2300      	movge	r3, #0
 8003b80:	2201      	movlt	r2, #1
 8003b82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003b86:	9305      	strlt	r3, [sp, #20]
 8003b88:	bfa8      	it	ge
 8003b8a:	f8c8 3000 	strge.w	r3, [r8]
 8003b8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003b92:	4b99      	ldr	r3, [pc, #612]	; (8003df8 <_dtoa_r+0x2d0>)
 8003b94:	bfb8      	it	lt
 8003b96:	f8c8 2000 	strlt.w	r2, [r8]
 8003b9a:	ea33 0309 	bics.w	r3, r3, r9
 8003b9e:	d119      	bne.n	8003bd4 <_dtoa_r+0xac>
 8003ba0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ba4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003bac:	4333      	orrs	r3, r6
 8003bae:	f000 857f 	beq.w	80046b0 <_dtoa_r+0xb88>
 8003bb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003bb4:	b953      	cbnz	r3, 8003bcc <_dtoa_r+0xa4>
 8003bb6:	4b91      	ldr	r3, [pc, #580]	; (8003dfc <_dtoa_r+0x2d4>)
 8003bb8:	e022      	b.n	8003c00 <_dtoa_r+0xd8>
 8003bba:	4b91      	ldr	r3, [pc, #580]	; (8003e00 <_dtoa_r+0x2d8>)
 8003bbc:	9303      	str	r3, [sp, #12]
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	9803      	ldr	r0, [sp, #12]
 8003bc6:	b019      	add	sp, #100	; 0x64
 8003bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bcc:	4b8b      	ldr	r3, [pc, #556]	; (8003dfc <_dtoa_r+0x2d4>)
 8003bce:	9303      	str	r3, [sp, #12]
 8003bd0:	3303      	adds	r3, #3
 8003bd2:	e7f5      	b.n	8003bc0 <_dtoa_r+0x98>
 8003bd4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003bd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003be0:	2200      	movs	r2, #0
 8003be2:	2300      	movs	r3, #0
 8003be4:	f7fc ff94 	bl	8000b10 <__aeabi_dcmpeq>
 8003be8:	4680      	mov	r8, r0
 8003bea:	b158      	cbz	r0, 8003c04 <_dtoa_r+0xdc>
 8003bec:	2301      	movs	r3, #1
 8003bee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8558 	beq.w	80046aa <_dtoa_r+0xb82>
 8003bfa:	4882      	ldr	r0, [pc, #520]	; (8003e04 <_dtoa_r+0x2dc>)
 8003bfc:	6018      	str	r0, [r3, #0]
 8003bfe:	1e43      	subs	r3, r0, #1
 8003c00:	9303      	str	r3, [sp, #12]
 8003c02:	e7df      	b.n	8003bc4 <_dtoa_r+0x9c>
 8003c04:	ab16      	add	r3, sp, #88	; 0x58
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	ab17      	add	r3, sp, #92	; 0x5c
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003c12:	f001 f8c5 	bl	8004da0 <__d2b>
 8003c16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003c1a:	4683      	mov	fp, r0
 8003c1c:	2c00      	cmp	r4, #0
 8003c1e:	d07f      	beq.n	8003d20 <_dtoa_r+0x1f8>
 8003c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003c32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003c36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4b72      	ldr	r3, [pc, #456]	; (8003e08 <_dtoa_r+0x2e0>)
 8003c3e:	f7fc fb47 	bl	80002d0 <__aeabi_dsub>
 8003c42:	a365      	add	r3, pc, #404	; (adr r3, 8003dd8 <_dtoa_r+0x2b0>)
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f7fc fcfa 	bl	8000640 <__aeabi_dmul>
 8003c4c:	a364      	add	r3, pc, #400	; (adr r3, 8003de0 <_dtoa_r+0x2b8>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f7fc fb3f 	bl	80002d4 <__adddf3>
 8003c56:	4606      	mov	r6, r0
 8003c58:	4620      	mov	r0, r4
 8003c5a:	460f      	mov	r7, r1
 8003c5c:	f7fc fc86 	bl	800056c <__aeabi_i2d>
 8003c60:	a361      	add	r3, pc, #388	; (adr r3, 8003de8 <_dtoa_r+0x2c0>)
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f7fc fceb 	bl	8000640 <__aeabi_dmul>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4630      	mov	r0, r6
 8003c70:	4639      	mov	r1, r7
 8003c72:	f7fc fb2f 	bl	80002d4 <__adddf3>
 8003c76:	4606      	mov	r6, r0
 8003c78:	460f      	mov	r7, r1
 8003c7a:	f7fc ff91 	bl	8000ba0 <__aeabi_d2iz>
 8003c7e:	2200      	movs	r2, #0
 8003c80:	4682      	mov	sl, r0
 8003c82:	2300      	movs	r3, #0
 8003c84:	4630      	mov	r0, r6
 8003c86:	4639      	mov	r1, r7
 8003c88:	f7fc ff4c 	bl	8000b24 <__aeabi_dcmplt>
 8003c8c:	b148      	cbz	r0, 8003ca2 <_dtoa_r+0x17a>
 8003c8e:	4650      	mov	r0, sl
 8003c90:	f7fc fc6c 	bl	800056c <__aeabi_i2d>
 8003c94:	4632      	mov	r2, r6
 8003c96:	463b      	mov	r3, r7
 8003c98:	f7fc ff3a 	bl	8000b10 <__aeabi_dcmpeq>
 8003c9c:	b908      	cbnz	r0, 8003ca2 <_dtoa_r+0x17a>
 8003c9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ca2:	f1ba 0f16 	cmp.w	sl, #22
 8003ca6:	d858      	bhi.n	8003d5a <_dtoa_r+0x232>
 8003ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cac:	4b57      	ldr	r3, [pc, #348]	; (8003e0c <_dtoa_r+0x2e4>)
 8003cae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc ff35 	bl	8000b24 <__aeabi_dcmplt>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d04f      	beq.n	8003d5e <_dtoa_r+0x236>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003cc8:	1b1c      	subs	r4, r3, r4
 8003cca:	1e63      	subs	r3, r4, #1
 8003ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8003cce:	bf49      	itett	mi
 8003cd0:	f1c4 0301 	rsbmi	r3, r4, #1
 8003cd4:	2300      	movpl	r3, #0
 8003cd6:	9306      	strmi	r3, [sp, #24]
 8003cd8:	2300      	movmi	r3, #0
 8003cda:	bf54      	ite	pl
 8003cdc:	9306      	strpl	r3, [sp, #24]
 8003cde:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003ce0:	f1ba 0f00 	cmp.w	sl, #0
 8003ce4:	db3d      	blt.n	8003d62 <_dtoa_r+0x23a>
 8003ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003cec:	4453      	add	r3, sl
 8003cee:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8003cf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cf6:	2b09      	cmp	r3, #9
 8003cf8:	f200 808c 	bhi.w	8003e14 <_dtoa_r+0x2ec>
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	bfc4      	itt	gt
 8003d00:	3b04      	subgt	r3, #4
 8003d02:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003d04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d06:	bfc8      	it	gt
 8003d08:	2400      	movgt	r4, #0
 8003d0a:	f1a3 0302 	sub.w	r3, r3, #2
 8003d0e:	bfd8      	it	le
 8003d10:	2401      	movle	r4, #1
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	f200 808a 	bhi.w	8003e2c <_dtoa_r+0x304>
 8003d18:	e8df f003 	tbb	[pc, r3]
 8003d1c:	5b4d4f2d 	.word	0x5b4d4f2d
 8003d20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003d24:	441c      	add	r4, r3
 8003d26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	bfc3      	ittte	gt
 8003d2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003d32:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003d36:	fa09 f303 	lslgt.w	r3, r9, r3
 8003d3a:	f1c3 0320 	rsble	r3, r3, #32
 8003d3e:	bfc6      	itte	gt
 8003d40:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003d44:	4318      	orrgt	r0, r3
 8003d46:	fa06 f003 	lslle.w	r0, r6, r3
 8003d4a:	f7fc fbff 	bl	800054c <__aeabi_ui2d>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003d54:	3c01      	subs	r4, #1
 8003d56:	9313      	str	r3, [sp, #76]	; 0x4c
 8003d58:	e76f      	b.n	8003c3a <_dtoa_r+0x112>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e7b2      	b.n	8003cc4 <_dtoa_r+0x19c>
 8003d5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8003d60:	e7b1      	b.n	8003cc6 <_dtoa_r+0x19e>
 8003d62:	9b06      	ldr	r3, [sp, #24]
 8003d64:	eba3 030a 	sub.w	r3, r3, sl
 8003d68:	9306      	str	r3, [sp, #24]
 8003d6a:	f1ca 0300 	rsb	r3, sl, #0
 8003d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8003d70:	2300      	movs	r3, #0
 8003d72:	930e      	str	r3, [sp, #56]	; 0x38
 8003d74:	e7be      	b.n	8003cf4 <_dtoa_r+0x1cc>
 8003d76:	2300      	movs	r3, #0
 8003d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	dc58      	bgt.n	8003e32 <_dtoa_r+0x30a>
 8003d80:	f04f 0901 	mov.w	r9, #1
 8003d84:	464b      	mov	r3, r9
 8003d86:	f8cd 9020 	str.w	r9, [sp, #32]
 8003d8a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003d8e:	2200      	movs	r2, #0
 8003d90:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003d92:	6042      	str	r2, [r0, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	f102 0614 	add.w	r6, r2, #20
 8003d9a:	429e      	cmp	r6, r3
 8003d9c:	6841      	ldr	r1, [r0, #4]
 8003d9e:	d94e      	bls.n	8003e3e <_dtoa_r+0x316>
 8003da0:	4628      	mov	r0, r5
 8003da2:	f000 fcd7 	bl	8004754 <_Balloc>
 8003da6:	9003      	str	r0, [sp, #12]
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d14c      	bne.n	8003e46 <_dtoa_r+0x31e>
 8003dac:	4602      	mov	r2, r0
 8003dae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003db2:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <_dtoa_r+0x2e8>)
 8003db4:	e6cc      	b.n	8003b50 <_dtoa_r+0x28>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e7de      	b.n	8003d78 <_dtoa_r+0x250>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003dc0:	eb0a 0903 	add.w	r9, sl, r3
 8003dc4:	f109 0301 	add.w	r3, r9, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	9308      	str	r3, [sp, #32]
 8003dcc:	bfb8      	it	lt
 8003dce:	2301      	movlt	r3, #1
 8003dd0:	e7dd      	b.n	8003d8e <_dtoa_r+0x266>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e7f2      	b.n	8003dbc <_dtoa_r+0x294>
 8003dd6:	bf00      	nop
 8003dd8:	636f4361 	.word	0x636f4361
 8003ddc:	3fd287a7 	.word	0x3fd287a7
 8003de0:	8b60c8b3 	.word	0x8b60c8b3
 8003de4:	3fc68a28 	.word	0x3fc68a28
 8003de8:	509f79fb 	.word	0x509f79fb
 8003dec:	3fd34413 	.word	0x3fd34413
 8003df0:	08006d59 	.word	0x08006d59
 8003df4:	08006d70 	.word	0x08006d70
 8003df8:	7ff00000 	.word	0x7ff00000
 8003dfc:	08006d55 	.word	0x08006d55
 8003e00:	08006d4c 	.word	0x08006d4c
 8003e04:	08006d29 	.word	0x08006d29
 8003e08:	3ff80000 	.word	0x3ff80000
 8003e0c:	08006e60 	.word	0x08006e60
 8003e10:	08006dcb 	.word	0x08006dcb
 8003e14:	2401      	movs	r4, #1
 8003e16:	2300      	movs	r3, #0
 8003e18:	940b      	str	r4, [sp, #44]	; 0x2c
 8003e1a:	9322      	str	r3, [sp, #136]	; 0x88
 8003e1c:	f04f 39ff 	mov.w	r9, #4294967295
 8003e20:	2200      	movs	r2, #0
 8003e22:	2312      	movs	r3, #18
 8003e24:	f8cd 9020 	str.w	r9, [sp, #32]
 8003e28:	9223      	str	r2, [sp, #140]	; 0x8c
 8003e2a:	e7b0      	b.n	8003d8e <_dtoa_r+0x266>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e30:	e7f4      	b.n	8003e1c <_dtoa_r+0x2f4>
 8003e32:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003e36:	464b      	mov	r3, r9
 8003e38:	f8cd 9020 	str.w	r9, [sp, #32]
 8003e3c:	e7a7      	b.n	8003d8e <_dtoa_r+0x266>
 8003e3e:	3101      	adds	r1, #1
 8003e40:	6041      	str	r1, [r0, #4]
 8003e42:	0052      	lsls	r2, r2, #1
 8003e44:	e7a7      	b.n	8003d96 <_dtoa_r+0x26e>
 8003e46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e48:	9a03      	ldr	r2, [sp, #12]
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	9b08      	ldr	r3, [sp, #32]
 8003e4e:	2b0e      	cmp	r3, #14
 8003e50:	f200 80a8 	bhi.w	8003fa4 <_dtoa_r+0x47c>
 8003e54:	2c00      	cmp	r4, #0
 8003e56:	f000 80a5 	beq.w	8003fa4 <_dtoa_r+0x47c>
 8003e5a:	f1ba 0f00 	cmp.w	sl, #0
 8003e5e:	dd34      	ble.n	8003eca <_dtoa_r+0x3a2>
 8003e60:	4a9a      	ldr	r2, [pc, #616]	; (80040cc <_dtoa_r+0x5a4>)
 8003e62:	f00a 030f 	and.w	r3, sl, #15
 8003e66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003e6a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003e6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003e76:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003e7a:	d016      	beq.n	8003eaa <_dtoa_r+0x382>
 8003e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e80:	4b93      	ldr	r3, [pc, #588]	; (80040d0 <_dtoa_r+0x5a8>)
 8003e82:	2703      	movs	r7, #3
 8003e84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e88:	f7fc fd04 	bl	8000894 <__aeabi_ddiv>
 8003e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e90:	f004 040f 	and.w	r4, r4, #15
 8003e94:	4e8e      	ldr	r6, [pc, #568]	; (80040d0 <_dtoa_r+0x5a8>)
 8003e96:	b954      	cbnz	r4, 8003eae <_dtoa_r+0x386>
 8003e98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ea0:	f7fc fcf8 	bl	8000894 <__aeabi_ddiv>
 8003ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ea8:	e029      	b.n	8003efe <_dtoa_r+0x3d6>
 8003eaa:	2702      	movs	r7, #2
 8003eac:	e7f2      	b.n	8003e94 <_dtoa_r+0x36c>
 8003eae:	07e1      	lsls	r1, r4, #31
 8003eb0:	d508      	bpl.n	8003ec4 <_dtoa_r+0x39c>
 8003eb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003eb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003eba:	f7fc fbc1 	bl	8000640 <__aeabi_dmul>
 8003ebe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ec2:	3701      	adds	r7, #1
 8003ec4:	1064      	asrs	r4, r4, #1
 8003ec6:	3608      	adds	r6, #8
 8003ec8:	e7e5      	b.n	8003e96 <_dtoa_r+0x36e>
 8003eca:	f000 80a5 	beq.w	8004018 <_dtoa_r+0x4f0>
 8003ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ed2:	f1ca 0400 	rsb	r4, sl, #0
 8003ed6:	4b7d      	ldr	r3, [pc, #500]	; (80040cc <_dtoa_r+0x5a4>)
 8003ed8:	f004 020f 	and.w	r2, r4, #15
 8003edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f7fc fbac 	bl	8000640 <__aeabi_dmul>
 8003ee8:	2702      	movs	r7, #2
 8003eea:	2300      	movs	r3, #0
 8003eec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ef0:	4e77      	ldr	r6, [pc, #476]	; (80040d0 <_dtoa_r+0x5a8>)
 8003ef2:	1124      	asrs	r4, r4, #4
 8003ef4:	2c00      	cmp	r4, #0
 8003ef6:	f040 8084 	bne.w	8004002 <_dtoa_r+0x4da>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1d2      	bne.n	8003ea4 <_dtoa_r+0x37c>
 8003efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 808b 	beq.w	800401c <_dtoa_r+0x4f4>
 8003f06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003f0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003f0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f12:	2200      	movs	r2, #0
 8003f14:	4b6f      	ldr	r3, [pc, #444]	; (80040d4 <_dtoa_r+0x5ac>)
 8003f16:	f7fc fe05 	bl	8000b24 <__aeabi_dcmplt>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d07e      	beq.n	800401c <_dtoa_r+0x4f4>
 8003f1e:	9b08      	ldr	r3, [sp, #32]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d07b      	beq.n	800401c <_dtoa_r+0x4f4>
 8003f24:	f1b9 0f00 	cmp.w	r9, #0
 8003f28:	dd38      	ble.n	8003f9c <_dtoa_r+0x474>
 8003f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f2e:	2200      	movs	r2, #0
 8003f30:	4b69      	ldr	r3, [pc, #420]	; (80040d8 <_dtoa_r+0x5b0>)
 8003f32:	f7fc fb85 	bl	8000640 <__aeabi_dmul>
 8003f36:	464c      	mov	r4, r9
 8003f38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f3c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003f40:	3701      	adds	r7, #1
 8003f42:	4638      	mov	r0, r7
 8003f44:	f7fc fb12 	bl	800056c <__aeabi_i2d>
 8003f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f4c:	f7fc fb78 	bl	8000640 <__aeabi_dmul>
 8003f50:	2200      	movs	r2, #0
 8003f52:	4b62      	ldr	r3, [pc, #392]	; (80040dc <_dtoa_r+0x5b4>)
 8003f54:	f7fc f9be 	bl	80002d4 <__adddf3>
 8003f58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003f5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f60:	9611      	str	r6, [sp, #68]	; 0x44
 8003f62:	2c00      	cmp	r4, #0
 8003f64:	d15d      	bne.n	8004022 <_dtoa_r+0x4fa>
 8003f66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4b5c      	ldr	r3, [pc, #368]	; (80040e0 <_dtoa_r+0x5b8>)
 8003f6e:	f7fc f9af 	bl	80002d0 <__aeabi_dsub>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f7a:	4633      	mov	r3, r6
 8003f7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f7e:	f7fc fdef 	bl	8000b60 <__aeabi_dcmpgt>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	f040 829c 	bne.w	80044c0 <_dtoa_r+0x998>
 8003f88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003f92:	f7fc fdc7 	bl	8000b24 <__aeabi_dcmplt>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	f040 8290 	bne.w	80044bc <_dtoa_r+0x994>
 8003f9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003fa0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003fa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f2c0 8152 	blt.w	8004250 <_dtoa_r+0x728>
 8003fac:	f1ba 0f0e 	cmp.w	sl, #14
 8003fb0:	f300 814e 	bgt.w	8004250 <_dtoa_r+0x728>
 8003fb4:	4b45      	ldr	r3, [pc, #276]	; (80040cc <_dtoa_r+0x5a4>)
 8003fb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003fba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003fc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f280 80db 	bge.w	8004180 <_dtoa_r+0x658>
 8003fca:	9b08      	ldr	r3, [sp, #32]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f300 80d7 	bgt.w	8004180 <_dtoa_r+0x658>
 8003fd2:	f040 8272 	bne.w	80044ba <_dtoa_r+0x992>
 8003fd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4b40      	ldr	r3, [pc, #256]	; (80040e0 <_dtoa_r+0x5b8>)
 8003fde:	f7fc fb2f 	bl	8000640 <__aeabi_dmul>
 8003fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fe6:	f7fc fdb1 	bl	8000b4c <__aeabi_dcmpge>
 8003fea:	9c08      	ldr	r4, [sp, #32]
 8003fec:	4626      	mov	r6, r4
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	f040 8248 	bne.w	8004484 <_dtoa_r+0x95c>
 8003ff4:	2331      	movs	r3, #49	; 0x31
 8003ff6:	9f03      	ldr	r7, [sp, #12]
 8003ff8:	f10a 0a01 	add.w	sl, sl, #1
 8003ffc:	f807 3b01 	strb.w	r3, [r7], #1
 8004000:	e244      	b.n	800448c <_dtoa_r+0x964>
 8004002:	07e2      	lsls	r2, r4, #31
 8004004:	d505      	bpl.n	8004012 <_dtoa_r+0x4ea>
 8004006:	e9d6 2300 	ldrd	r2, r3, [r6]
 800400a:	f7fc fb19 	bl	8000640 <__aeabi_dmul>
 800400e:	2301      	movs	r3, #1
 8004010:	3701      	adds	r7, #1
 8004012:	1064      	asrs	r4, r4, #1
 8004014:	3608      	adds	r6, #8
 8004016:	e76d      	b.n	8003ef4 <_dtoa_r+0x3cc>
 8004018:	2702      	movs	r7, #2
 800401a:	e770      	b.n	8003efe <_dtoa_r+0x3d6>
 800401c:	46d0      	mov	r8, sl
 800401e:	9c08      	ldr	r4, [sp, #32]
 8004020:	e78f      	b.n	8003f42 <_dtoa_r+0x41a>
 8004022:	9903      	ldr	r1, [sp, #12]
 8004024:	4b29      	ldr	r3, [pc, #164]	; (80040cc <_dtoa_r+0x5a4>)
 8004026:	4421      	add	r1, r4
 8004028:	9112      	str	r1, [sp, #72]	; 0x48
 800402a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800402c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004030:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004034:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004038:	2900      	cmp	r1, #0
 800403a:	d055      	beq.n	80040e8 <_dtoa_r+0x5c0>
 800403c:	2000      	movs	r0, #0
 800403e:	4929      	ldr	r1, [pc, #164]	; (80040e4 <_dtoa_r+0x5bc>)
 8004040:	f7fc fc28 	bl	8000894 <__aeabi_ddiv>
 8004044:	463b      	mov	r3, r7
 8004046:	4632      	mov	r2, r6
 8004048:	f7fc f942 	bl	80002d0 <__aeabi_dsub>
 800404c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004050:	9f03      	ldr	r7, [sp, #12]
 8004052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004056:	f7fc fda3 	bl	8000ba0 <__aeabi_d2iz>
 800405a:	4604      	mov	r4, r0
 800405c:	f7fc fa86 	bl	800056c <__aeabi_i2d>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004068:	f7fc f932 	bl	80002d0 <__aeabi_dsub>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	3430      	adds	r4, #48	; 0x30
 8004072:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004076:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800407a:	f807 4b01 	strb.w	r4, [r7], #1
 800407e:	f7fc fd51 	bl	8000b24 <__aeabi_dcmplt>
 8004082:	2800      	cmp	r0, #0
 8004084:	d174      	bne.n	8004170 <_dtoa_r+0x648>
 8004086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800408a:	2000      	movs	r0, #0
 800408c:	4911      	ldr	r1, [pc, #68]	; (80040d4 <_dtoa_r+0x5ac>)
 800408e:	f7fc f91f 	bl	80002d0 <__aeabi_dsub>
 8004092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004096:	f7fc fd45 	bl	8000b24 <__aeabi_dcmplt>
 800409a:	2800      	cmp	r0, #0
 800409c:	f040 80b7 	bne.w	800420e <_dtoa_r+0x6e6>
 80040a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040a2:	429f      	cmp	r7, r3
 80040a4:	f43f af7a 	beq.w	8003f9c <_dtoa_r+0x474>
 80040a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040ac:	2200      	movs	r2, #0
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <_dtoa_r+0x5b0>)
 80040b0:	f7fc fac6 	bl	8000640 <__aeabi_dmul>
 80040b4:	2200      	movs	r2, #0
 80040b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <_dtoa_r+0x5b0>)
 80040c0:	f7fc fabe 	bl	8000640 <__aeabi_dmul>
 80040c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040c8:	e7c3      	b.n	8004052 <_dtoa_r+0x52a>
 80040ca:	bf00      	nop
 80040cc:	08006e60 	.word	0x08006e60
 80040d0:	08006e38 	.word	0x08006e38
 80040d4:	3ff00000 	.word	0x3ff00000
 80040d8:	40240000 	.word	0x40240000
 80040dc:	401c0000 	.word	0x401c0000
 80040e0:	40140000 	.word	0x40140000
 80040e4:	3fe00000 	.word	0x3fe00000
 80040e8:	4630      	mov	r0, r6
 80040ea:	4639      	mov	r1, r7
 80040ec:	f7fc faa8 	bl	8000640 <__aeabi_dmul>
 80040f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040f6:	9c03      	ldr	r4, [sp, #12]
 80040f8:	9314      	str	r3, [sp, #80]	; 0x50
 80040fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040fe:	f7fc fd4f 	bl	8000ba0 <__aeabi_d2iz>
 8004102:	9015      	str	r0, [sp, #84]	; 0x54
 8004104:	f7fc fa32 	bl	800056c <__aeabi_i2d>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004110:	f7fc f8de 	bl	80002d0 <__aeabi_dsub>
 8004114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004116:	4606      	mov	r6, r0
 8004118:	3330      	adds	r3, #48	; 0x30
 800411a:	f804 3b01 	strb.w	r3, [r4], #1
 800411e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004120:	460f      	mov	r7, r1
 8004122:	429c      	cmp	r4, r3
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	d124      	bne.n	8004174 <_dtoa_r+0x64c>
 800412a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800412e:	4bb0      	ldr	r3, [pc, #704]	; (80043f0 <_dtoa_r+0x8c8>)
 8004130:	f7fc f8d0 	bl	80002d4 <__adddf3>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4630      	mov	r0, r6
 800413a:	4639      	mov	r1, r7
 800413c:	f7fc fd10 	bl	8000b60 <__aeabi_dcmpgt>
 8004140:	2800      	cmp	r0, #0
 8004142:	d163      	bne.n	800420c <_dtoa_r+0x6e4>
 8004144:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004148:	2000      	movs	r0, #0
 800414a:	49a9      	ldr	r1, [pc, #676]	; (80043f0 <_dtoa_r+0x8c8>)
 800414c:	f7fc f8c0 	bl	80002d0 <__aeabi_dsub>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4630      	mov	r0, r6
 8004156:	4639      	mov	r1, r7
 8004158:	f7fc fce4 	bl	8000b24 <__aeabi_dcmplt>
 800415c:	2800      	cmp	r0, #0
 800415e:	f43f af1d 	beq.w	8003f9c <_dtoa_r+0x474>
 8004162:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004164:	1e7b      	subs	r3, r7, #1
 8004166:	9314      	str	r3, [sp, #80]	; 0x50
 8004168:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800416c:	2b30      	cmp	r3, #48	; 0x30
 800416e:	d0f8      	beq.n	8004162 <_dtoa_r+0x63a>
 8004170:	46c2      	mov	sl, r8
 8004172:	e03b      	b.n	80041ec <_dtoa_r+0x6c4>
 8004174:	4b9f      	ldr	r3, [pc, #636]	; (80043f4 <_dtoa_r+0x8cc>)
 8004176:	f7fc fa63 	bl	8000640 <__aeabi_dmul>
 800417a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800417e:	e7bc      	b.n	80040fa <_dtoa_r+0x5d2>
 8004180:	9f03      	ldr	r7, [sp, #12]
 8004182:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800418a:	4640      	mov	r0, r8
 800418c:	4649      	mov	r1, r9
 800418e:	f7fc fb81 	bl	8000894 <__aeabi_ddiv>
 8004192:	f7fc fd05 	bl	8000ba0 <__aeabi_d2iz>
 8004196:	4604      	mov	r4, r0
 8004198:	f7fc f9e8 	bl	800056c <__aeabi_i2d>
 800419c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041a0:	f7fc fa4e 	bl	8000640 <__aeabi_dmul>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4640      	mov	r0, r8
 80041aa:	4649      	mov	r1, r9
 80041ac:	f7fc f890 	bl	80002d0 <__aeabi_dsub>
 80041b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80041b4:	f807 6b01 	strb.w	r6, [r7], #1
 80041b8:	9e03      	ldr	r6, [sp, #12]
 80041ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 80041be:	1bbe      	subs	r6, r7, r6
 80041c0:	45b4      	cmp	ip, r6
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	d136      	bne.n	8004236 <_dtoa_r+0x70e>
 80041c8:	f7fc f884 	bl	80002d4 <__adddf3>
 80041cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041d0:	4680      	mov	r8, r0
 80041d2:	4689      	mov	r9, r1
 80041d4:	f7fc fcc4 	bl	8000b60 <__aeabi_dcmpgt>
 80041d8:	bb58      	cbnz	r0, 8004232 <_dtoa_r+0x70a>
 80041da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041de:	4640      	mov	r0, r8
 80041e0:	4649      	mov	r1, r9
 80041e2:	f7fc fc95 	bl	8000b10 <__aeabi_dcmpeq>
 80041e6:	b108      	cbz	r0, 80041ec <_dtoa_r+0x6c4>
 80041e8:	07e1      	lsls	r1, r4, #31
 80041ea:	d422      	bmi.n	8004232 <_dtoa_r+0x70a>
 80041ec:	4628      	mov	r0, r5
 80041ee:	4659      	mov	r1, fp
 80041f0:	f000 faf0 	bl	80047d4 <_Bfree>
 80041f4:	2300      	movs	r3, #0
 80041f6:	703b      	strb	r3, [r7, #0]
 80041f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80041fa:	f10a 0001 	add.w	r0, sl, #1
 80041fe:	6018      	str	r0, [r3, #0]
 8004200:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004202:	2b00      	cmp	r3, #0
 8004204:	f43f acde 	beq.w	8003bc4 <_dtoa_r+0x9c>
 8004208:	601f      	str	r7, [r3, #0]
 800420a:	e4db      	b.n	8003bc4 <_dtoa_r+0x9c>
 800420c:	4627      	mov	r7, r4
 800420e:	463b      	mov	r3, r7
 8004210:	461f      	mov	r7, r3
 8004212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004216:	2a39      	cmp	r2, #57	; 0x39
 8004218:	d107      	bne.n	800422a <_dtoa_r+0x702>
 800421a:	9a03      	ldr	r2, [sp, #12]
 800421c:	429a      	cmp	r2, r3
 800421e:	d1f7      	bne.n	8004210 <_dtoa_r+0x6e8>
 8004220:	2230      	movs	r2, #48	; 0x30
 8004222:	9903      	ldr	r1, [sp, #12]
 8004224:	f108 0801 	add.w	r8, r8, #1
 8004228:	700a      	strb	r2, [r1, #0]
 800422a:	781a      	ldrb	r2, [r3, #0]
 800422c:	3201      	adds	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e79e      	b.n	8004170 <_dtoa_r+0x648>
 8004232:	46d0      	mov	r8, sl
 8004234:	e7eb      	b.n	800420e <_dtoa_r+0x6e6>
 8004236:	2200      	movs	r2, #0
 8004238:	4b6e      	ldr	r3, [pc, #440]	; (80043f4 <_dtoa_r+0x8cc>)
 800423a:	f7fc fa01 	bl	8000640 <__aeabi_dmul>
 800423e:	2200      	movs	r2, #0
 8004240:	2300      	movs	r3, #0
 8004242:	4680      	mov	r8, r0
 8004244:	4689      	mov	r9, r1
 8004246:	f7fc fc63 	bl	8000b10 <__aeabi_dcmpeq>
 800424a:	2800      	cmp	r0, #0
 800424c:	d09b      	beq.n	8004186 <_dtoa_r+0x65e>
 800424e:	e7cd      	b.n	80041ec <_dtoa_r+0x6c4>
 8004250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004252:	2a00      	cmp	r2, #0
 8004254:	f000 80d0 	beq.w	80043f8 <_dtoa_r+0x8d0>
 8004258:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800425a:	2a01      	cmp	r2, #1
 800425c:	f300 80ae 	bgt.w	80043bc <_dtoa_r+0x894>
 8004260:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004262:	2a00      	cmp	r2, #0
 8004264:	f000 80a6 	beq.w	80043b4 <_dtoa_r+0x88c>
 8004268:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800426c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800426e:	9f06      	ldr	r7, [sp, #24]
 8004270:	9a06      	ldr	r2, [sp, #24]
 8004272:	2101      	movs	r1, #1
 8004274:	441a      	add	r2, r3
 8004276:	9206      	str	r2, [sp, #24]
 8004278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800427a:	4628      	mov	r0, r5
 800427c:	441a      	add	r2, r3
 800427e:	9209      	str	r2, [sp, #36]	; 0x24
 8004280:	f000 fb5e 	bl	8004940 <__i2b>
 8004284:	4606      	mov	r6, r0
 8004286:	2f00      	cmp	r7, #0
 8004288:	dd0c      	ble.n	80042a4 <_dtoa_r+0x77c>
 800428a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	dd09      	ble.n	80042a4 <_dtoa_r+0x77c>
 8004290:	42bb      	cmp	r3, r7
 8004292:	bfa8      	it	ge
 8004294:	463b      	movge	r3, r7
 8004296:	9a06      	ldr	r2, [sp, #24]
 8004298:	1aff      	subs	r7, r7, r3
 800429a:	1ad2      	subs	r2, r2, r3
 800429c:	9206      	str	r2, [sp, #24]
 800429e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	9309      	str	r3, [sp, #36]	; 0x24
 80042a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a6:	b1f3      	cbz	r3, 80042e6 <_dtoa_r+0x7be>
 80042a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80a8 	beq.w	8004400 <_dtoa_r+0x8d8>
 80042b0:	2c00      	cmp	r4, #0
 80042b2:	dd10      	ble.n	80042d6 <_dtoa_r+0x7ae>
 80042b4:	4631      	mov	r1, r6
 80042b6:	4622      	mov	r2, r4
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 fbff 	bl	8004abc <__pow5mult>
 80042be:	465a      	mov	r2, fp
 80042c0:	4601      	mov	r1, r0
 80042c2:	4606      	mov	r6, r0
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 fb51 	bl	800496c <__multiply>
 80042ca:	4680      	mov	r8, r0
 80042cc:	4659      	mov	r1, fp
 80042ce:	4628      	mov	r0, r5
 80042d0:	f000 fa80 	bl	80047d4 <_Bfree>
 80042d4:	46c3      	mov	fp, r8
 80042d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042d8:	1b1a      	subs	r2, r3, r4
 80042da:	d004      	beq.n	80042e6 <_dtoa_r+0x7be>
 80042dc:	4659      	mov	r1, fp
 80042de:	4628      	mov	r0, r5
 80042e0:	f000 fbec 	bl	8004abc <__pow5mult>
 80042e4:	4683      	mov	fp, r0
 80042e6:	2101      	movs	r1, #1
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 fb29 	bl	8004940 <__i2b>
 80042ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042f0:	4604      	mov	r4, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f340 8086 	ble.w	8004404 <_dtoa_r+0x8dc>
 80042f8:	461a      	mov	r2, r3
 80042fa:	4601      	mov	r1, r0
 80042fc:	4628      	mov	r0, r5
 80042fe:	f000 fbdd 	bl	8004abc <__pow5mult>
 8004302:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004304:	4604      	mov	r4, r0
 8004306:	2b01      	cmp	r3, #1
 8004308:	dd7f      	ble.n	800440a <_dtoa_r+0x8e2>
 800430a:	f04f 0800 	mov.w	r8, #0
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004314:	6918      	ldr	r0, [r3, #16]
 8004316:	f000 fac5 	bl	80048a4 <__hi0bits>
 800431a:	f1c0 0020 	rsb	r0, r0, #32
 800431e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004320:	4418      	add	r0, r3
 8004322:	f010 001f 	ands.w	r0, r0, #31
 8004326:	f000 8092 	beq.w	800444e <_dtoa_r+0x926>
 800432a:	f1c0 0320 	rsb	r3, r0, #32
 800432e:	2b04      	cmp	r3, #4
 8004330:	f340 808a 	ble.w	8004448 <_dtoa_r+0x920>
 8004334:	f1c0 001c 	rsb	r0, r0, #28
 8004338:	9b06      	ldr	r3, [sp, #24]
 800433a:	4407      	add	r7, r0
 800433c:	4403      	add	r3, r0
 800433e:	9306      	str	r3, [sp, #24]
 8004340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004342:	4403      	add	r3, r0
 8004344:	9309      	str	r3, [sp, #36]	; 0x24
 8004346:	9b06      	ldr	r3, [sp, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	dd05      	ble.n	8004358 <_dtoa_r+0x830>
 800434c:	4659      	mov	r1, fp
 800434e:	461a      	mov	r2, r3
 8004350:	4628      	mov	r0, r5
 8004352:	f000 fc0d 	bl	8004b70 <__lshift>
 8004356:	4683      	mov	fp, r0
 8004358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	dd05      	ble.n	800436a <_dtoa_r+0x842>
 800435e:	4621      	mov	r1, r4
 8004360:	461a      	mov	r2, r3
 8004362:	4628      	mov	r0, r5
 8004364:	f000 fc04 	bl	8004b70 <__lshift>
 8004368:	4604      	mov	r4, r0
 800436a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d070      	beq.n	8004452 <_dtoa_r+0x92a>
 8004370:	4621      	mov	r1, r4
 8004372:	4658      	mov	r0, fp
 8004374:	f000 fc6c 	bl	8004c50 <__mcmp>
 8004378:	2800      	cmp	r0, #0
 800437a:	da6a      	bge.n	8004452 <_dtoa_r+0x92a>
 800437c:	2300      	movs	r3, #0
 800437e:	4659      	mov	r1, fp
 8004380:	220a      	movs	r2, #10
 8004382:	4628      	mov	r0, r5
 8004384:	f000 fa48 	bl	8004818 <__multadd>
 8004388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800438a:	4683      	mov	fp, r0
 800438c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8194 	beq.w	80046be <_dtoa_r+0xb96>
 8004396:	4631      	mov	r1, r6
 8004398:	2300      	movs	r3, #0
 800439a:	220a      	movs	r2, #10
 800439c:	4628      	mov	r0, r5
 800439e:	f000 fa3b 	bl	8004818 <__multadd>
 80043a2:	f1b9 0f00 	cmp.w	r9, #0
 80043a6:	4606      	mov	r6, r0
 80043a8:	f300 8093 	bgt.w	80044d2 <_dtoa_r+0x9aa>
 80043ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	dc57      	bgt.n	8004462 <_dtoa_r+0x93a>
 80043b2:	e08e      	b.n	80044d2 <_dtoa_r+0x9aa>
 80043b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80043b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80043ba:	e757      	b.n	800426c <_dtoa_r+0x744>
 80043bc:	9b08      	ldr	r3, [sp, #32]
 80043be:	1e5c      	subs	r4, r3, #1
 80043c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	bfb7      	itett	lt
 80043c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80043c8:	1b1c      	subge	r4, r3, r4
 80043ca:	1ae2      	sublt	r2, r4, r3
 80043cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80043ce:	bfbe      	ittt	lt
 80043d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80043d2:	189b      	addlt	r3, r3, r2
 80043d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80043d6:	9b08      	ldr	r3, [sp, #32]
 80043d8:	bfb8      	it	lt
 80043da:	2400      	movlt	r4, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bfbb      	ittet	lt
 80043e0:	9b06      	ldrlt	r3, [sp, #24]
 80043e2:	9a08      	ldrlt	r2, [sp, #32]
 80043e4:	9f06      	ldrge	r7, [sp, #24]
 80043e6:	1a9f      	sublt	r7, r3, r2
 80043e8:	bfac      	ite	ge
 80043ea:	9b08      	ldrge	r3, [sp, #32]
 80043ec:	2300      	movlt	r3, #0
 80043ee:	e73f      	b.n	8004270 <_dtoa_r+0x748>
 80043f0:	3fe00000 	.word	0x3fe00000
 80043f4:	40240000 	.word	0x40240000
 80043f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80043fa:	9f06      	ldr	r7, [sp, #24]
 80043fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80043fe:	e742      	b.n	8004286 <_dtoa_r+0x75e>
 8004400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004402:	e76b      	b.n	80042dc <_dtoa_r+0x7b4>
 8004404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004406:	2b01      	cmp	r3, #1
 8004408:	dc19      	bgt.n	800443e <_dtoa_r+0x916>
 800440a:	9b04      	ldr	r3, [sp, #16]
 800440c:	b9bb      	cbnz	r3, 800443e <_dtoa_r+0x916>
 800440e:	9b05      	ldr	r3, [sp, #20]
 8004410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004414:	b99b      	cbnz	r3, 800443e <_dtoa_r+0x916>
 8004416:	9b05      	ldr	r3, [sp, #20]
 8004418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800441c:	0d1b      	lsrs	r3, r3, #20
 800441e:	051b      	lsls	r3, r3, #20
 8004420:	b183      	cbz	r3, 8004444 <_dtoa_r+0x91c>
 8004422:	f04f 0801 	mov.w	r8, #1
 8004426:	9b06      	ldr	r3, [sp, #24]
 8004428:	3301      	adds	r3, #1
 800442a:	9306      	str	r3, [sp, #24]
 800442c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442e:	3301      	adds	r3, #1
 8004430:	9309      	str	r3, [sp, #36]	; 0x24
 8004432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f af6a 	bne.w	800430e <_dtoa_r+0x7e6>
 800443a:	2001      	movs	r0, #1
 800443c:	e76f      	b.n	800431e <_dtoa_r+0x7f6>
 800443e:	f04f 0800 	mov.w	r8, #0
 8004442:	e7f6      	b.n	8004432 <_dtoa_r+0x90a>
 8004444:	4698      	mov	r8, r3
 8004446:	e7f4      	b.n	8004432 <_dtoa_r+0x90a>
 8004448:	f43f af7d 	beq.w	8004346 <_dtoa_r+0x81e>
 800444c:	4618      	mov	r0, r3
 800444e:	301c      	adds	r0, #28
 8004450:	e772      	b.n	8004338 <_dtoa_r+0x810>
 8004452:	9b08      	ldr	r3, [sp, #32]
 8004454:	2b00      	cmp	r3, #0
 8004456:	dc36      	bgt.n	80044c6 <_dtoa_r+0x99e>
 8004458:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800445a:	2b02      	cmp	r3, #2
 800445c:	dd33      	ble.n	80044c6 <_dtoa_r+0x99e>
 800445e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004462:	f1b9 0f00 	cmp.w	r9, #0
 8004466:	d10d      	bne.n	8004484 <_dtoa_r+0x95c>
 8004468:	4621      	mov	r1, r4
 800446a:	464b      	mov	r3, r9
 800446c:	2205      	movs	r2, #5
 800446e:	4628      	mov	r0, r5
 8004470:	f000 f9d2 	bl	8004818 <__multadd>
 8004474:	4601      	mov	r1, r0
 8004476:	4604      	mov	r4, r0
 8004478:	4658      	mov	r0, fp
 800447a:	f000 fbe9 	bl	8004c50 <__mcmp>
 800447e:	2800      	cmp	r0, #0
 8004480:	f73f adb8 	bgt.w	8003ff4 <_dtoa_r+0x4cc>
 8004484:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004486:	9f03      	ldr	r7, [sp, #12]
 8004488:	ea6f 0a03 	mvn.w	sl, r3
 800448c:	f04f 0800 	mov.w	r8, #0
 8004490:	4621      	mov	r1, r4
 8004492:	4628      	mov	r0, r5
 8004494:	f000 f99e 	bl	80047d4 <_Bfree>
 8004498:	2e00      	cmp	r6, #0
 800449a:	f43f aea7 	beq.w	80041ec <_dtoa_r+0x6c4>
 800449e:	f1b8 0f00 	cmp.w	r8, #0
 80044a2:	d005      	beq.n	80044b0 <_dtoa_r+0x988>
 80044a4:	45b0      	cmp	r8, r6
 80044a6:	d003      	beq.n	80044b0 <_dtoa_r+0x988>
 80044a8:	4641      	mov	r1, r8
 80044aa:	4628      	mov	r0, r5
 80044ac:	f000 f992 	bl	80047d4 <_Bfree>
 80044b0:	4631      	mov	r1, r6
 80044b2:	4628      	mov	r0, r5
 80044b4:	f000 f98e 	bl	80047d4 <_Bfree>
 80044b8:	e698      	b.n	80041ec <_dtoa_r+0x6c4>
 80044ba:	2400      	movs	r4, #0
 80044bc:	4626      	mov	r6, r4
 80044be:	e7e1      	b.n	8004484 <_dtoa_r+0x95c>
 80044c0:	46c2      	mov	sl, r8
 80044c2:	4626      	mov	r6, r4
 80044c4:	e596      	b.n	8003ff4 <_dtoa_r+0x4cc>
 80044c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80fd 	beq.w	80046cc <_dtoa_r+0xba4>
 80044d2:	2f00      	cmp	r7, #0
 80044d4:	dd05      	ble.n	80044e2 <_dtoa_r+0x9ba>
 80044d6:	4631      	mov	r1, r6
 80044d8:	463a      	mov	r2, r7
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fb48 	bl	8004b70 <__lshift>
 80044e0:	4606      	mov	r6, r0
 80044e2:	f1b8 0f00 	cmp.w	r8, #0
 80044e6:	d05c      	beq.n	80045a2 <_dtoa_r+0xa7a>
 80044e8:	4628      	mov	r0, r5
 80044ea:	6871      	ldr	r1, [r6, #4]
 80044ec:	f000 f932 	bl	8004754 <_Balloc>
 80044f0:	4607      	mov	r7, r0
 80044f2:	b928      	cbnz	r0, 8004500 <_dtoa_r+0x9d8>
 80044f4:	4602      	mov	r2, r0
 80044f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80044fa:	4b7f      	ldr	r3, [pc, #508]	; (80046f8 <_dtoa_r+0xbd0>)
 80044fc:	f7ff bb28 	b.w	8003b50 <_dtoa_r+0x28>
 8004500:	6932      	ldr	r2, [r6, #16]
 8004502:	f106 010c 	add.w	r1, r6, #12
 8004506:	3202      	adds	r2, #2
 8004508:	0092      	lsls	r2, r2, #2
 800450a:	300c      	adds	r0, #12
 800450c:	f000 f914 	bl	8004738 <memcpy>
 8004510:	2201      	movs	r2, #1
 8004512:	4639      	mov	r1, r7
 8004514:	4628      	mov	r0, r5
 8004516:	f000 fb2b 	bl	8004b70 <__lshift>
 800451a:	46b0      	mov	r8, r6
 800451c:	4606      	mov	r6, r0
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	3301      	adds	r3, #1
 8004522:	9308      	str	r3, [sp, #32]
 8004524:	9b03      	ldr	r3, [sp, #12]
 8004526:	444b      	add	r3, r9
 8004528:	930a      	str	r3, [sp, #40]	; 0x28
 800452a:	9b04      	ldr	r3, [sp, #16]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	9309      	str	r3, [sp, #36]	; 0x24
 8004532:	9b08      	ldr	r3, [sp, #32]
 8004534:	4621      	mov	r1, r4
 8004536:	3b01      	subs	r3, #1
 8004538:	4658      	mov	r0, fp
 800453a:	9304      	str	r3, [sp, #16]
 800453c:	f7ff fa66 	bl	8003a0c <quorem>
 8004540:	4603      	mov	r3, r0
 8004542:	4641      	mov	r1, r8
 8004544:	3330      	adds	r3, #48	; 0x30
 8004546:	9006      	str	r0, [sp, #24]
 8004548:	4658      	mov	r0, fp
 800454a:	930b      	str	r3, [sp, #44]	; 0x2c
 800454c:	f000 fb80 	bl	8004c50 <__mcmp>
 8004550:	4632      	mov	r2, r6
 8004552:	4681      	mov	r9, r0
 8004554:	4621      	mov	r1, r4
 8004556:	4628      	mov	r0, r5
 8004558:	f000 fb96 	bl	8004c88 <__mdiff>
 800455c:	68c2      	ldr	r2, [r0, #12]
 800455e:	4607      	mov	r7, r0
 8004560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004562:	bb02      	cbnz	r2, 80045a6 <_dtoa_r+0xa7e>
 8004564:	4601      	mov	r1, r0
 8004566:	4658      	mov	r0, fp
 8004568:	f000 fb72 	bl	8004c50 <__mcmp>
 800456c:	4602      	mov	r2, r0
 800456e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004570:	4639      	mov	r1, r7
 8004572:	4628      	mov	r0, r5
 8004574:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004578:	f000 f92c 	bl	80047d4 <_Bfree>
 800457c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800457e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004580:	9f08      	ldr	r7, [sp, #32]
 8004582:	ea43 0102 	orr.w	r1, r3, r2
 8004586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004588:	430b      	orrs	r3, r1
 800458a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800458c:	d10d      	bne.n	80045aa <_dtoa_r+0xa82>
 800458e:	2b39      	cmp	r3, #57	; 0x39
 8004590:	d029      	beq.n	80045e6 <_dtoa_r+0xabe>
 8004592:	f1b9 0f00 	cmp.w	r9, #0
 8004596:	dd01      	ble.n	800459c <_dtoa_r+0xa74>
 8004598:	9b06      	ldr	r3, [sp, #24]
 800459a:	3331      	adds	r3, #49	; 0x31
 800459c:	9a04      	ldr	r2, [sp, #16]
 800459e:	7013      	strb	r3, [r2, #0]
 80045a0:	e776      	b.n	8004490 <_dtoa_r+0x968>
 80045a2:	4630      	mov	r0, r6
 80045a4:	e7b9      	b.n	800451a <_dtoa_r+0x9f2>
 80045a6:	2201      	movs	r2, #1
 80045a8:	e7e2      	b.n	8004570 <_dtoa_r+0xa48>
 80045aa:	f1b9 0f00 	cmp.w	r9, #0
 80045ae:	db06      	blt.n	80045be <_dtoa_r+0xa96>
 80045b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80045b2:	ea41 0909 	orr.w	r9, r1, r9
 80045b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045b8:	ea59 0101 	orrs.w	r1, r9, r1
 80045bc:	d120      	bne.n	8004600 <_dtoa_r+0xad8>
 80045be:	2a00      	cmp	r2, #0
 80045c0:	ddec      	ble.n	800459c <_dtoa_r+0xa74>
 80045c2:	4659      	mov	r1, fp
 80045c4:	2201      	movs	r2, #1
 80045c6:	4628      	mov	r0, r5
 80045c8:	9308      	str	r3, [sp, #32]
 80045ca:	f000 fad1 	bl	8004b70 <__lshift>
 80045ce:	4621      	mov	r1, r4
 80045d0:	4683      	mov	fp, r0
 80045d2:	f000 fb3d 	bl	8004c50 <__mcmp>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	9b08      	ldr	r3, [sp, #32]
 80045da:	dc02      	bgt.n	80045e2 <_dtoa_r+0xaba>
 80045dc:	d1de      	bne.n	800459c <_dtoa_r+0xa74>
 80045de:	07da      	lsls	r2, r3, #31
 80045e0:	d5dc      	bpl.n	800459c <_dtoa_r+0xa74>
 80045e2:	2b39      	cmp	r3, #57	; 0x39
 80045e4:	d1d8      	bne.n	8004598 <_dtoa_r+0xa70>
 80045e6:	2339      	movs	r3, #57	; 0x39
 80045e8:	9a04      	ldr	r2, [sp, #16]
 80045ea:	7013      	strb	r3, [r2, #0]
 80045ec:	463b      	mov	r3, r7
 80045ee:	461f      	mov	r7, r3
 80045f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	2a39      	cmp	r2, #57	; 0x39
 80045f8:	d050      	beq.n	800469c <_dtoa_r+0xb74>
 80045fa:	3201      	adds	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e747      	b.n	8004490 <_dtoa_r+0x968>
 8004600:	2a00      	cmp	r2, #0
 8004602:	dd03      	ble.n	800460c <_dtoa_r+0xae4>
 8004604:	2b39      	cmp	r3, #57	; 0x39
 8004606:	d0ee      	beq.n	80045e6 <_dtoa_r+0xabe>
 8004608:	3301      	adds	r3, #1
 800460a:	e7c7      	b.n	800459c <_dtoa_r+0xa74>
 800460c:	9a08      	ldr	r2, [sp, #32]
 800460e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004610:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004614:	428a      	cmp	r2, r1
 8004616:	d02a      	beq.n	800466e <_dtoa_r+0xb46>
 8004618:	4659      	mov	r1, fp
 800461a:	2300      	movs	r3, #0
 800461c:	220a      	movs	r2, #10
 800461e:	4628      	mov	r0, r5
 8004620:	f000 f8fa 	bl	8004818 <__multadd>
 8004624:	45b0      	cmp	r8, r6
 8004626:	4683      	mov	fp, r0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	f04f 020a 	mov.w	r2, #10
 8004630:	4641      	mov	r1, r8
 8004632:	4628      	mov	r0, r5
 8004634:	d107      	bne.n	8004646 <_dtoa_r+0xb1e>
 8004636:	f000 f8ef 	bl	8004818 <__multadd>
 800463a:	4680      	mov	r8, r0
 800463c:	4606      	mov	r6, r0
 800463e:	9b08      	ldr	r3, [sp, #32]
 8004640:	3301      	adds	r3, #1
 8004642:	9308      	str	r3, [sp, #32]
 8004644:	e775      	b.n	8004532 <_dtoa_r+0xa0a>
 8004646:	f000 f8e7 	bl	8004818 <__multadd>
 800464a:	4631      	mov	r1, r6
 800464c:	4680      	mov	r8, r0
 800464e:	2300      	movs	r3, #0
 8004650:	220a      	movs	r2, #10
 8004652:	4628      	mov	r0, r5
 8004654:	f000 f8e0 	bl	8004818 <__multadd>
 8004658:	4606      	mov	r6, r0
 800465a:	e7f0      	b.n	800463e <_dtoa_r+0xb16>
 800465c:	f1b9 0f00 	cmp.w	r9, #0
 8004660:	bfcc      	ite	gt
 8004662:	464f      	movgt	r7, r9
 8004664:	2701      	movle	r7, #1
 8004666:	f04f 0800 	mov.w	r8, #0
 800466a:	9a03      	ldr	r2, [sp, #12]
 800466c:	4417      	add	r7, r2
 800466e:	4659      	mov	r1, fp
 8004670:	2201      	movs	r2, #1
 8004672:	4628      	mov	r0, r5
 8004674:	9308      	str	r3, [sp, #32]
 8004676:	f000 fa7b 	bl	8004b70 <__lshift>
 800467a:	4621      	mov	r1, r4
 800467c:	4683      	mov	fp, r0
 800467e:	f000 fae7 	bl	8004c50 <__mcmp>
 8004682:	2800      	cmp	r0, #0
 8004684:	dcb2      	bgt.n	80045ec <_dtoa_r+0xac4>
 8004686:	d102      	bne.n	800468e <_dtoa_r+0xb66>
 8004688:	9b08      	ldr	r3, [sp, #32]
 800468a:	07db      	lsls	r3, r3, #31
 800468c:	d4ae      	bmi.n	80045ec <_dtoa_r+0xac4>
 800468e:	463b      	mov	r3, r7
 8004690:	461f      	mov	r7, r3
 8004692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004696:	2a30      	cmp	r2, #48	; 0x30
 8004698:	d0fa      	beq.n	8004690 <_dtoa_r+0xb68>
 800469a:	e6f9      	b.n	8004490 <_dtoa_r+0x968>
 800469c:	9a03      	ldr	r2, [sp, #12]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d1a5      	bne.n	80045ee <_dtoa_r+0xac6>
 80046a2:	2331      	movs	r3, #49	; 0x31
 80046a4:	f10a 0a01 	add.w	sl, sl, #1
 80046a8:	e779      	b.n	800459e <_dtoa_r+0xa76>
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <_dtoa_r+0xbd4>)
 80046ac:	f7ff baa8 	b.w	8003c00 <_dtoa_r+0xd8>
 80046b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f47f aa81 	bne.w	8003bba <_dtoa_r+0x92>
 80046b8:	4b11      	ldr	r3, [pc, #68]	; (8004700 <_dtoa_r+0xbd8>)
 80046ba:	f7ff baa1 	b.w	8003c00 <_dtoa_r+0xd8>
 80046be:	f1b9 0f00 	cmp.w	r9, #0
 80046c2:	dc03      	bgt.n	80046cc <_dtoa_r+0xba4>
 80046c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	f73f aecb 	bgt.w	8004462 <_dtoa_r+0x93a>
 80046cc:	9f03      	ldr	r7, [sp, #12]
 80046ce:	4621      	mov	r1, r4
 80046d0:	4658      	mov	r0, fp
 80046d2:	f7ff f99b 	bl	8003a0c <quorem>
 80046d6:	9a03      	ldr	r2, [sp, #12]
 80046d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80046dc:	f807 3b01 	strb.w	r3, [r7], #1
 80046e0:	1aba      	subs	r2, r7, r2
 80046e2:	4591      	cmp	r9, r2
 80046e4:	ddba      	ble.n	800465c <_dtoa_r+0xb34>
 80046e6:	4659      	mov	r1, fp
 80046e8:	2300      	movs	r3, #0
 80046ea:	220a      	movs	r2, #10
 80046ec:	4628      	mov	r0, r5
 80046ee:	f000 f893 	bl	8004818 <__multadd>
 80046f2:	4683      	mov	fp, r0
 80046f4:	e7eb      	b.n	80046ce <_dtoa_r+0xba6>
 80046f6:	bf00      	nop
 80046f8:	08006dcb 	.word	0x08006dcb
 80046fc:	08006d28 	.word	0x08006d28
 8004700:	08006d4c 	.word	0x08006d4c

08004704 <_localeconv_r>:
 8004704:	4800      	ldr	r0, [pc, #0]	; (8004708 <_localeconv_r+0x4>)
 8004706:	4770      	bx	lr
 8004708:	20000160 	.word	0x20000160

0800470c <malloc>:
 800470c:	4b02      	ldr	r3, [pc, #8]	; (8004718 <malloc+0xc>)
 800470e:	4601      	mov	r1, r0
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f000 bc1d 	b.w	8004f50 <_malloc_r>
 8004716:	bf00      	nop
 8004718:	2000000c 	.word	0x2000000c

0800471c <memchr>:
 800471c:	4603      	mov	r3, r0
 800471e:	b510      	push	{r4, lr}
 8004720:	b2c9      	uxtb	r1, r1
 8004722:	4402      	add	r2, r0
 8004724:	4293      	cmp	r3, r2
 8004726:	4618      	mov	r0, r3
 8004728:	d101      	bne.n	800472e <memchr+0x12>
 800472a:	2000      	movs	r0, #0
 800472c:	e003      	b.n	8004736 <memchr+0x1a>
 800472e:	7804      	ldrb	r4, [r0, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	428c      	cmp	r4, r1
 8004734:	d1f6      	bne.n	8004724 <memchr+0x8>
 8004736:	bd10      	pop	{r4, pc}

08004738 <memcpy>:
 8004738:	440a      	add	r2, r1
 800473a:	4291      	cmp	r1, r2
 800473c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004740:	d100      	bne.n	8004744 <memcpy+0xc>
 8004742:	4770      	bx	lr
 8004744:	b510      	push	{r4, lr}
 8004746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800474a:	4291      	cmp	r1, r2
 800474c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004750:	d1f9      	bne.n	8004746 <memcpy+0xe>
 8004752:	bd10      	pop	{r4, pc}

08004754 <_Balloc>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004758:	4604      	mov	r4, r0
 800475a:	460d      	mov	r5, r1
 800475c:	b976      	cbnz	r6, 800477c <_Balloc+0x28>
 800475e:	2010      	movs	r0, #16
 8004760:	f7ff ffd4 	bl	800470c <malloc>
 8004764:	4602      	mov	r2, r0
 8004766:	6260      	str	r0, [r4, #36]	; 0x24
 8004768:	b920      	cbnz	r0, 8004774 <_Balloc+0x20>
 800476a:	2166      	movs	r1, #102	; 0x66
 800476c:	4b17      	ldr	r3, [pc, #92]	; (80047cc <_Balloc+0x78>)
 800476e:	4818      	ldr	r0, [pc, #96]	; (80047d0 <_Balloc+0x7c>)
 8004770:	f000 fdce 	bl	8005310 <__assert_func>
 8004774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004778:	6006      	str	r6, [r0, #0]
 800477a:	60c6      	str	r6, [r0, #12]
 800477c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800477e:	68f3      	ldr	r3, [r6, #12]
 8004780:	b183      	cbz	r3, 80047a4 <_Balloc+0x50>
 8004782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800478a:	b9b8      	cbnz	r0, 80047bc <_Balloc+0x68>
 800478c:	2101      	movs	r1, #1
 800478e:	fa01 f605 	lsl.w	r6, r1, r5
 8004792:	1d72      	adds	r2, r6, #5
 8004794:	4620      	mov	r0, r4
 8004796:	0092      	lsls	r2, r2, #2
 8004798:	f000 fb5e 	bl	8004e58 <_calloc_r>
 800479c:	b160      	cbz	r0, 80047b8 <_Balloc+0x64>
 800479e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80047a2:	e00e      	b.n	80047c2 <_Balloc+0x6e>
 80047a4:	2221      	movs	r2, #33	; 0x21
 80047a6:	2104      	movs	r1, #4
 80047a8:	4620      	mov	r0, r4
 80047aa:	f000 fb55 	bl	8004e58 <_calloc_r>
 80047ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047b0:	60f0      	str	r0, [r6, #12]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e4      	bne.n	8004782 <_Balloc+0x2e>
 80047b8:	2000      	movs	r0, #0
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	6802      	ldr	r2, [r0, #0]
 80047be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80047c2:	2300      	movs	r3, #0
 80047c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80047c8:	e7f7      	b.n	80047ba <_Balloc+0x66>
 80047ca:	bf00      	nop
 80047cc:	08006d59 	.word	0x08006d59
 80047d0:	08006ddc 	.word	0x08006ddc

080047d4 <_Bfree>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80047d8:	4605      	mov	r5, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	b976      	cbnz	r6, 80047fc <_Bfree+0x28>
 80047de:	2010      	movs	r0, #16
 80047e0:	f7ff ff94 	bl	800470c <malloc>
 80047e4:	4602      	mov	r2, r0
 80047e6:	6268      	str	r0, [r5, #36]	; 0x24
 80047e8:	b920      	cbnz	r0, 80047f4 <_Bfree+0x20>
 80047ea:	218a      	movs	r1, #138	; 0x8a
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <_Bfree+0x3c>)
 80047ee:	4809      	ldr	r0, [pc, #36]	; (8004814 <_Bfree+0x40>)
 80047f0:	f000 fd8e 	bl	8005310 <__assert_func>
 80047f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047f8:	6006      	str	r6, [r0, #0]
 80047fa:	60c6      	str	r6, [r0, #12]
 80047fc:	b13c      	cbz	r4, 800480e <_Bfree+0x3a>
 80047fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004800:	6862      	ldr	r2, [r4, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004808:	6021      	str	r1, [r4, #0]
 800480a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	08006d59 	.word	0x08006d59
 8004814:	08006ddc 	.word	0x08006ddc

08004818 <__multadd>:
 8004818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800481c:	4607      	mov	r7, r0
 800481e:	460c      	mov	r4, r1
 8004820:	461e      	mov	r6, r3
 8004822:	2000      	movs	r0, #0
 8004824:	690d      	ldr	r5, [r1, #16]
 8004826:	f101 0c14 	add.w	ip, r1, #20
 800482a:	f8dc 3000 	ldr.w	r3, [ip]
 800482e:	3001      	adds	r0, #1
 8004830:	b299      	uxth	r1, r3
 8004832:	fb02 6101 	mla	r1, r2, r1, r6
 8004836:	0c1e      	lsrs	r6, r3, #16
 8004838:	0c0b      	lsrs	r3, r1, #16
 800483a:	fb02 3306 	mla	r3, r2, r6, r3
 800483e:	b289      	uxth	r1, r1
 8004840:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004844:	4285      	cmp	r5, r0
 8004846:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800484a:	f84c 1b04 	str.w	r1, [ip], #4
 800484e:	dcec      	bgt.n	800482a <__multadd+0x12>
 8004850:	b30e      	cbz	r6, 8004896 <__multadd+0x7e>
 8004852:	68a3      	ldr	r3, [r4, #8]
 8004854:	42ab      	cmp	r3, r5
 8004856:	dc19      	bgt.n	800488c <__multadd+0x74>
 8004858:	6861      	ldr	r1, [r4, #4]
 800485a:	4638      	mov	r0, r7
 800485c:	3101      	adds	r1, #1
 800485e:	f7ff ff79 	bl	8004754 <_Balloc>
 8004862:	4680      	mov	r8, r0
 8004864:	b928      	cbnz	r0, 8004872 <__multadd+0x5a>
 8004866:	4602      	mov	r2, r0
 8004868:	21b5      	movs	r1, #181	; 0xb5
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <__multadd+0x84>)
 800486c:	480c      	ldr	r0, [pc, #48]	; (80048a0 <__multadd+0x88>)
 800486e:	f000 fd4f 	bl	8005310 <__assert_func>
 8004872:	6922      	ldr	r2, [r4, #16]
 8004874:	f104 010c 	add.w	r1, r4, #12
 8004878:	3202      	adds	r2, #2
 800487a:	0092      	lsls	r2, r2, #2
 800487c:	300c      	adds	r0, #12
 800487e:	f7ff ff5b 	bl	8004738 <memcpy>
 8004882:	4621      	mov	r1, r4
 8004884:	4638      	mov	r0, r7
 8004886:	f7ff ffa5 	bl	80047d4 <_Bfree>
 800488a:	4644      	mov	r4, r8
 800488c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004890:	3501      	adds	r5, #1
 8004892:	615e      	str	r6, [r3, #20]
 8004894:	6125      	str	r5, [r4, #16]
 8004896:	4620      	mov	r0, r4
 8004898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800489c:	08006dcb 	.word	0x08006dcb
 80048a0:	08006ddc 	.word	0x08006ddc

080048a4 <__hi0bits>:
 80048a4:	0c02      	lsrs	r2, r0, #16
 80048a6:	0412      	lsls	r2, r2, #16
 80048a8:	4603      	mov	r3, r0
 80048aa:	b9ca      	cbnz	r2, 80048e0 <__hi0bits+0x3c>
 80048ac:	0403      	lsls	r3, r0, #16
 80048ae:	2010      	movs	r0, #16
 80048b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80048b4:	bf04      	itt	eq
 80048b6:	021b      	lsleq	r3, r3, #8
 80048b8:	3008      	addeq	r0, #8
 80048ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80048be:	bf04      	itt	eq
 80048c0:	011b      	lsleq	r3, r3, #4
 80048c2:	3004      	addeq	r0, #4
 80048c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80048c8:	bf04      	itt	eq
 80048ca:	009b      	lsleq	r3, r3, #2
 80048cc:	3002      	addeq	r0, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	db05      	blt.n	80048de <__hi0bits+0x3a>
 80048d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80048d6:	f100 0001 	add.w	r0, r0, #1
 80048da:	bf08      	it	eq
 80048dc:	2020      	moveq	r0, #32
 80048de:	4770      	bx	lr
 80048e0:	2000      	movs	r0, #0
 80048e2:	e7e5      	b.n	80048b0 <__hi0bits+0xc>

080048e4 <__lo0bits>:
 80048e4:	6803      	ldr	r3, [r0, #0]
 80048e6:	4602      	mov	r2, r0
 80048e8:	f013 0007 	ands.w	r0, r3, #7
 80048ec:	d00b      	beq.n	8004906 <__lo0bits+0x22>
 80048ee:	07d9      	lsls	r1, r3, #31
 80048f0:	d421      	bmi.n	8004936 <__lo0bits+0x52>
 80048f2:	0798      	lsls	r0, r3, #30
 80048f4:	bf49      	itett	mi
 80048f6:	085b      	lsrmi	r3, r3, #1
 80048f8:	089b      	lsrpl	r3, r3, #2
 80048fa:	2001      	movmi	r0, #1
 80048fc:	6013      	strmi	r3, [r2, #0]
 80048fe:	bf5c      	itt	pl
 8004900:	2002      	movpl	r0, #2
 8004902:	6013      	strpl	r3, [r2, #0]
 8004904:	4770      	bx	lr
 8004906:	b299      	uxth	r1, r3
 8004908:	b909      	cbnz	r1, 800490e <__lo0bits+0x2a>
 800490a:	2010      	movs	r0, #16
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	b2d9      	uxtb	r1, r3
 8004910:	b909      	cbnz	r1, 8004916 <__lo0bits+0x32>
 8004912:	3008      	adds	r0, #8
 8004914:	0a1b      	lsrs	r3, r3, #8
 8004916:	0719      	lsls	r1, r3, #28
 8004918:	bf04      	itt	eq
 800491a:	091b      	lsreq	r3, r3, #4
 800491c:	3004      	addeq	r0, #4
 800491e:	0799      	lsls	r1, r3, #30
 8004920:	bf04      	itt	eq
 8004922:	089b      	lsreq	r3, r3, #2
 8004924:	3002      	addeq	r0, #2
 8004926:	07d9      	lsls	r1, r3, #31
 8004928:	d403      	bmi.n	8004932 <__lo0bits+0x4e>
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	f100 0001 	add.w	r0, r0, #1
 8004930:	d003      	beq.n	800493a <__lo0bits+0x56>
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4770      	bx	lr
 8004936:	2000      	movs	r0, #0
 8004938:	4770      	bx	lr
 800493a:	2020      	movs	r0, #32
 800493c:	4770      	bx	lr
	...

08004940 <__i2b>:
 8004940:	b510      	push	{r4, lr}
 8004942:	460c      	mov	r4, r1
 8004944:	2101      	movs	r1, #1
 8004946:	f7ff ff05 	bl	8004754 <_Balloc>
 800494a:	4602      	mov	r2, r0
 800494c:	b928      	cbnz	r0, 800495a <__i2b+0x1a>
 800494e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004952:	4b04      	ldr	r3, [pc, #16]	; (8004964 <__i2b+0x24>)
 8004954:	4804      	ldr	r0, [pc, #16]	; (8004968 <__i2b+0x28>)
 8004956:	f000 fcdb 	bl	8005310 <__assert_func>
 800495a:	2301      	movs	r3, #1
 800495c:	6144      	str	r4, [r0, #20]
 800495e:	6103      	str	r3, [r0, #16]
 8004960:	bd10      	pop	{r4, pc}
 8004962:	bf00      	nop
 8004964:	08006dcb 	.word	0x08006dcb
 8004968:	08006ddc 	.word	0x08006ddc

0800496c <__multiply>:
 800496c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004970:	4691      	mov	r9, r2
 8004972:	690a      	ldr	r2, [r1, #16]
 8004974:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004978:	460c      	mov	r4, r1
 800497a:	429a      	cmp	r2, r3
 800497c:	bfbe      	ittt	lt
 800497e:	460b      	movlt	r3, r1
 8004980:	464c      	movlt	r4, r9
 8004982:	4699      	movlt	r9, r3
 8004984:	6927      	ldr	r7, [r4, #16]
 8004986:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800498a:	68a3      	ldr	r3, [r4, #8]
 800498c:	6861      	ldr	r1, [r4, #4]
 800498e:	eb07 060a 	add.w	r6, r7, sl
 8004992:	42b3      	cmp	r3, r6
 8004994:	b085      	sub	sp, #20
 8004996:	bfb8      	it	lt
 8004998:	3101      	addlt	r1, #1
 800499a:	f7ff fedb 	bl	8004754 <_Balloc>
 800499e:	b930      	cbnz	r0, 80049ae <__multiply+0x42>
 80049a0:	4602      	mov	r2, r0
 80049a2:	f240 115d 	movw	r1, #349	; 0x15d
 80049a6:	4b43      	ldr	r3, [pc, #268]	; (8004ab4 <__multiply+0x148>)
 80049a8:	4843      	ldr	r0, [pc, #268]	; (8004ab8 <__multiply+0x14c>)
 80049aa:	f000 fcb1 	bl	8005310 <__assert_func>
 80049ae:	f100 0514 	add.w	r5, r0, #20
 80049b2:	462b      	mov	r3, r5
 80049b4:	2200      	movs	r2, #0
 80049b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80049ba:	4543      	cmp	r3, r8
 80049bc:	d321      	bcc.n	8004a02 <__multiply+0x96>
 80049be:	f104 0314 	add.w	r3, r4, #20
 80049c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80049c6:	f109 0314 	add.w	r3, r9, #20
 80049ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80049ce:	9202      	str	r2, [sp, #8]
 80049d0:	1b3a      	subs	r2, r7, r4
 80049d2:	3a15      	subs	r2, #21
 80049d4:	f022 0203 	bic.w	r2, r2, #3
 80049d8:	3204      	adds	r2, #4
 80049da:	f104 0115 	add.w	r1, r4, #21
 80049de:	428f      	cmp	r7, r1
 80049e0:	bf38      	it	cc
 80049e2:	2204      	movcc	r2, #4
 80049e4:	9201      	str	r2, [sp, #4]
 80049e6:	9a02      	ldr	r2, [sp, #8]
 80049e8:	9303      	str	r3, [sp, #12]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d80c      	bhi.n	8004a08 <__multiply+0x9c>
 80049ee:	2e00      	cmp	r6, #0
 80049f0:	dd03      	ble.n	80049fa <__multiply+0x8e>
 80049f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d059      	beq.n	8004aae <__multiply+0x142>
 80049fa:	6106      	str	r6, [r0, #16]
 80049fc:	b005      	add	sp, #20
 80049fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a02:	f843 2b04 	str.w	r2, [r3], #4
 8004a06:	e7d8      	b.n	80049ba <__multiply+0x4e>
 8004a08:	f8b3 a000 	ldrh.w	sl, [r3]
 8004a0c:	f1ba 0f00 	cmp.w	sl, #0
 8004a10:	d023      	beq.n	8004a5a <__multiply+0xee>
 8004a12:	46a9      	mov	r9, r5
 8004a14:	f04f 0c00 	mov.w	ip, #0
 8004a18:	f104 0e14 	add.w	lr, r4, #20
 8004a1c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004a20:	f8d9 1000 	ldr.w	r1, [r9]
 8004a24:	fa1f fb82 	uxth.w	fp, r2
 8004a28:	b289      	uxth	r1, r1
 8004a2a:	fb0a 110b 	mla	r1, sl, fp, r1
 8004a2e:	4461      	add	r1, ip
 8004a30:	f8d9 c000 	ldr.w	ip, [r9]
 8004a34:	0c12      	lsrs	r2, r2, #16
 8004a36:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004a3a:	fb0a c202 	mla	r2, sl, r2, ip
 8004a3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004a42:	b289      	uxth	r1, r1
 8004a44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a48:	4577      	cmp	r7, lr
 8004a4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004a4e:	f849 1b04 	str.w	r1, [r9], #4
 8004a52:	d8e3      	bhi.n	8004a1c <__multiply+0xb0>
 8004a54:	9a01      	ldr	r2, [sp, #4]
 8004a56:	f845 c002 	str.w	ip, [r5, r2]
 8004a5a:	9a03      	ldr	r2, [sp, #12]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004a62:	f1b9 0f00 	cmp.w	r9, #0
 8004a66:	d020      	beq.n	8004aaa <__multiply+0x13e>
 8004a68:	46ae      	mov	lr, r5
 8004a6a:	f04f 0a00 	mov.w	sl, #0
 8004a6e:	6829      	ldr	r1, [r5, #0]
 8004a70:	f104 0c14 	add.w	ip, r4, #20
 8004a74:	f8bc b000 	ldrh.w	fp, [ip]
 8004a78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004a7c:	b289      	uxth	r1, r1
 8004a7e:	fb09 220b 	mla	r2, r9, fp, r2
 8004a82:	4492      	add	sl, r2
 8004a84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004a88:	f84e 1b04 	str.w	r1, [lr], #4
 8004a8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004a90:	f8be 1000 	ldrh.w	r1, [lr]
 8004a94:	0c12      	lsrs	r2, r2, #16
 8004a96:	fb09 1102 	mla	r1, r9, r2, r1
 8004a9a:	4567      	cmp	r7, ip
 8004a9c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004aa0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004aa4:	d8e6      	bhi.n	8004a74 <__multiply+0x108>
 8004aa6:	9a01      	ldr	r2, [sp, #4]
 8004aa8:	50a9      	str	r1, [r5, r2]
 8004aaa:	3504      	adds	r5, #4
 8004aac:	e79b      	b.n	80049e6 <__multiply+0x7a>
 8004aae:	3e01      	subs	r6, #1
 8004ab0:	e79d      	b.n	80049ee <__multiply+0x82>
 8004ab2:	bf00      	nop
 8004ab4:	08006dcb 	.word	0x08006dcb
 8004ab8:	08006ddc 	.word	0x08006ddc

08004abc <__pow5mult>:
 8004abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac0:	4615      	mov	r5, r2
 8004ac2:	f012 0203 	ands.w	r2, r2, #3
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	460f      	mov	r7, r1
 8004aca:	d007      	beq.n	8004adc <__pow5mult+0x20>
 8004acc:	4c25      	ldr	r4, [pc, #148]	; (8004b64 <__pow5mult+0xa8>)
 8004ace:	3a01      	subs	r2, #1
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004ad6:	f7ff fe9f 	bl	8004818 <__multadd>
 8004ada:	4607      	mov	r7, r0
 8004adc:	10ad      	asrs	r5, r5, #2
 8004ade:	d03d      	beq.n	8004b5c <__pow5mult+0xa0>
 8004ae0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004ae2:	b97c      	cbnz	r4, 8004b04 <__pow5mult+0x48>
 8004ae4:	2010      	movs	r0, #16
 8004ae6:	f7ff fe11 	bl	800470c <malloc>
 8004aea:	4602      	mov	r2, r0
 8004aec:	6270      	str	r0, [r6, #36]	; 0x24
 8004aee:	b928      	cbnz	r0, 8004afc <__pow5mult+0x40>
 8004af0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <__pow5mult+0xac>)
 8004af6:	481d      	ldr	r0, [pc, #116]	; (8004b6c <__pow5mult+0xb0>)
 8004af8:	f000 fc0a 	bl	8005310 <__assert_func>
 8004afc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b00:	6004      	str	r4, [r0, #0]
 8004b02:	60c4      	str	r4, [r0, #12]
 8004b04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004b08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b0c:	b94c      	cbnz	r4, 8004b22 <__pow5mult+0x66>
 8004b0e:	f240 2171 	movw	r1, #625	; 0x271
 8004b12:	4630      	mov	r0, r6
 8004b14:	f7ff ff14 	bl	8004940 <__i2b>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b20:	6003      	str	r3, [r0, #0]
 8004b22:	f04f 0900 	mov.w	r9, #0
 8004b26:	07eb      	lsls	r3, r5, #31
 8004b28:	d50a      	bpl.n	8004b40 <__pow5mult+0x84>
 8004b2a:	4639      	mov	r1, r7
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f7ff ff1c 	bl	800496c <__multiply>
 8004b34:	4680      	mov	r8, r0
 8004b36:	4639      	mov	r1, r7
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f7ff fe4b 	bl	80047d4 <_Bfree>
 8004b3e:	4647      	mov	r7, r8
 8004b40:	106d      	asrs	r5, r5, #1
 8004b42:	d00b      	beq.n	8004b5c <__pow5mult+0xa0>
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	b938      	cbnz	r0, 8004b58 <__pow5mult+0x9c>
 8004b48:	4622      	mov	r2, r4
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f7ff ff0d 	bl	800496c <__multiply>
 8004b52:	6020      	str	r0, [r4, #0]
 8004b54:	f8c0 9000 	str.w	r9, [r0]
 8004b58:	4604      	mov	r4, r0
 8004b5a:	e7e4      	b.n	8004b26 <__pow5mult+0x6a>
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b62:	bf00      	nop
 8004b64:	08006f28 	.word	0x08006f28
 8004b68:	08006d59 	.word	0x08006d59
 8004b6c:	08006ddc 	.word	0x08006ddc

08004b70 <__lshift>:
 8004b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	460c      	mov	r4, r1
 8004b76:	4607      	mov	r7, r0
 8004b78:	4691      	mov	r9, r2
 8004b7a:	6923      	ldr	r3, [r4, #16]
 8004b7c:	6849      	ldr	r1, [r1, #4]
 8004b7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b82:	68a3      	ldr	r3, [r4, #8]
 8004b84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b88:	f108 0601 	add.w	r6, r8, #1
 8004b8c:	42b3      	cmp	r3, r6
 8004b8e:	db0b      	blt.n	8004ba8 <__lshift+0x38>
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7ff fddf 	bl	8004754 <_Balloc>
 8004b96:	4605      	mov	r5, r0
 8004b98:	b948      	cbnz	r0, 8004bae <__lshift+0x3e>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004ba0:	4b29      	ldr	r3, [pc, #164]	; (8004c48 <__lshift+0xd8>)
 8004ba2:	482a      	ldr	r0, [pc, #168]	; (8004c4c <__lshift+0xdc>)
 8004ba4:	f000 fbb4 	bl	8005310 <__assert_func>
 8004ba8:	3101      	adds	r1, #1
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	e7ee      	b.n	8004b8c <__lshift+0x1c>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f100 0114 	add.w	r1, r0, #20
 8004bb4:	f100 0210 	add.w	r2, r0, #16
 8004bb8:	4618      	mov	r0, r3
 8004bba:	4553      	cmp	r3, sl
 8004bbc:	db37      	blt.n	8004c2e <__lshift+0xbe>
 8004bbe:	6920      	ldr	r0, [r4, #16]
 8004bc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004bc4:	f104 0314 	add.w	r3, r4, #20
 8004bc8:	f019 091f 	ands.w	r9, r9, #31
 8004bcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004bd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004bd4:	d02f      	beq.n	8004c36 <__lshift+0xc6>
 8004bd6:	468a      	mov	sl, r1
 8004bd8:	f04f 0c00 	mov.w	ip, #0
 8004bdc:	f1c9 0e20 	rsb	lr, r9, #32
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	fa02 f209 	lsl.w	r2, r2, r9
 8004be6:	ea42 020c 	orr.w	r2, r2, ip
 8004bea:	f84a 2b04 	str.w	r2, [sl], #4
 8004bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf2:	4298      	cmp	r0, r3
 8004bf4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004bf8:	d8f2      	bhi.n	8004be0 <__lshift+0x70>
 8004bfa:	1b03      	subs	r3, r0, r4
 8004bfc:	3b15      	subs	r3, #21
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	3304      	adds	r3, #4
 8004c04:	f104 0215 	add.w	r2, r4, #21
 8004c08:	4290      	cmp	r0, r2
 8004c0a:	bf38      	it	cc
 8004c0c:	2304      	movcc	r3, #4
 8004c0e:	f841 c003 	str.w	ip, [r1, r3]
 8004c12:	f1bc 0f00 	cmp.w	ip, #0
 8004c16:	d001      	beq.n	8004c1c <__lshift+0xac>
 8004c18:	f108 0602 	add.w	r6, r8, #2
 8004c1c:	3e01      	subs	r6, #1
 8004c1e:	4638      	mov	r0, r7
 8004c20:	4621      	mov	r1, r4
 8004c22:	612e      	str	r6, [r5, #16]
 8004c24:	f7ff fdd6 	bl	80047d4 <_Bfree>
 8004c28:	4628      	mov	r0, r5
 8004c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c32:	3301      	adds	r3, #1
 8004c34:	e7c1      	b.n	8004bba <__lshift+0x4a>
 8004c36:	3904      	subs	r1, #4
 8004c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c3c:	4298      	cmp	r0, r3
 8004c3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c42:	d8f9      	bhi.n	8004c38 <__lshift+0xc8>
 8004c44:	e7ea      	b.n	8004c1c <__lshift+0xac>
 8004c46:	bf00      	nop
 8004c48:	08006dcb 	.word	0x08006dcb
 8004c4c:	08006ddc 	.word	0x08006ddc

08004c50 <__mcmp>:
 8004c50:	4603      	mov	r3, r0
 8004c52:	690a      	ldr	r2, [r1, #16]
 8004c54:	6900      	ldr	r0, [r0, #16]
 8004c56:	b530      	push	{r4, r5, lr}
 8004c58:	1a80      	subs	r0, r0, r2
 8004c5a:	d10d      	bne.n	8004c78 <__mcmp+0x28>
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	3114      	adds	r1, #20
 8004c60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004c64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c70:	4295      	cmp	r5, r2
 8004c72:	d002      	beq.n	8004c7a <__mcmp+0x2a>
 8004c74:	d304      	bcc.n	8004c80 <__mcmp+0x30>
 8004c76:	2001      	movs	r0, #1
 8004c78:	bd30      	pop	{r4, r5, pc}
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	d3f4      	bcc.n	8004c68 <__mcmp+0x18>
 8004c7e:	e7fb      	b.n	8004c78 <__mcmp+0x28>
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	e7f8      	b.n	8004c78 <__mcmp+0x28>
	...

08004c88 <__mdiff>:
 8004c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	4607      	mov	r7, r0
 8004c90:	4611      	mov	r1, r2
 8004c92:	4628      	mov	r0, r5
 8004c94:	4614      	mov	r4, r2
 8004c96:	f7ff ffdb 	bl	8004c50 <__mcmp>
 8004c9a:	1e06      	subs	r6, r0, #0
 8004c9c:	d111      	bne.n	8004cc2 <__mdiff+0x3a>
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	f7ff fd57 	bl	8004754 <_Balloc>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	b928      	cbnz	r0, 8004cb6 <__mdiff+0x2e>
 8004caa:	f240 2132 	movw	r1, #562	; 0x232
 8004cae:	4b3a      	ldr	r3, [pc, #232]	; (8004d98 <__mdiff+0x110>)
 8004cb0:	483a      	ldr	r0, [pc, #232]	; (8004d9c <__mdiff+0x114>)
 8004cb2:	f000 fb2d 	bl	8005310 <__assert_func>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cc2:	bfa4      	itt	ge
 8004cc4:	4623      	movge	r3, r4
 8004cc6:	462c      	movge	r4, r5
 8004cc8:	4638      	mov	r0, r7
 8004cca:	6861      	ldr	r1, [r4, #4]
 8004ccc:	bfa6      	itte	ge
 8004cce:	461d      	movge	r5, r3
 8004cd0:	2600      	movge	r6, #0
 8004cd2:	2601      	movlt	r6, #1
 8004cd4:	f7ff fd3e 	bl	8004754 <_Balloc>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	b918      	cbnz	r0, 8004ce4 <__mdiff+0x5c>
 8004cdc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004ce0:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <__mdiff+0x110>)
 8004ce2:	e7e5      	b.n	8004cb0 <__mdiff+0x28>
 8004ce4:	f102 0814 	add.w	r8, r2, #20
 8004ce8:	46c2      	mov	sl, r8
 8004cea:	f04f 0c00 	mov.w	ip, #0
 8004cee:	6927      	ldr	r7, [r4, #16]
 8004cf0:	60c6      	str	r6, [r0, #12]
 8004cf2:	692e      	ldr	r6, [r5, #16]
 8004cf4:	f104 0014 	add.w	r0, r4, #20
 8004cf8:	f105 0914 	add.w	r9, r5, #20
 8004cfc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004d00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004d04:	3410      	adds	r4, #16
 8004d06:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004d0a:	f859 3b04 	ldr.w	r3, [r9], #4
 8004d0e:	fa1f f18b 	uxth.w	r1, fp
 8004d12:	448c      	add	ip, r1
 8004d14:	b299      	uxth	r1, r3
 8004d16:	0c1b      	lsrs	r3, r3, #16
 8004d18:	ebac 0101 	sub.w	r1, ip, r1
 8004d1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004d20:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004d24:	b289      	uxth	r1, r1
 8004d26:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004d2a:	454e      	cmp	r6, r9
 8004d2c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004d30:	f84a 3b04 	str.w	r3, [sl], #4
 8004d34:	d8e7      	bhi.n	8004d06 <__mdiff+0x7e>
 8004d36:	1b73      	subs	r3, r6, r5
 8004d38:	3b15      	subs	r3, #21
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	3515      	adds	r5, #21
 8004d40:	3304      	adds	r3, #4
 8004d42:	42ae      	cmp	r6, r5
 8004d44:	bf38      	it	cc
 8004d46:	2304      	movcc	r3, #4
 8004d48:	4418      	add	r0, r3
 8004d4a:	4443      	add	r3, r8
 8004d4c:	461e      	mov	r6, r3
 8004d4e:	4605      	mov	r5, r0
 8004d50:	4575      	cmp	r5, lr
 8004d52:	d30e      	bcc.n	8004d72 <__mdiff+0xea>
 8004d54:	f10e 0103 	add.w	r1, lr, #3
 8004d58:	1a09      	subs	r1, r1, r0
 8004d5a:	f021 0103 	bic.w	r1, r1, #3
 8004d5e:	3803      	subs	r0, #3
 8004d60:	4586      	cmp	lr, r0
 8004d62:	bf38      	it	cc
 8004d64:	2100      	movcc	r1, #0
 8004d66:	4419      	add	r1, r3
 8004d68:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004d6c:	b18b      	cbz	r3, 8004d92 <__mdiff+0x10a>
 8004d6e:	6117      	str	r7, [r2, #16]
 8004d70:	e7a4      	b.n	8004cbc <__mdiff+0x34>
 8004d72:	f855 8b04 	ldr.w	r8, [r5], #4
 8004d76:	fa1f f188 	uxth.w	r1, r8
 8004d7a:	4461      	add	r1, ip
 8004d7c:	140c      	asrs	r4, r1, #16
 8004d7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004d82:	b289      	uxth	r1, r1
 8004d84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004d88:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004d8c:	f846 1b04 	str.w	r1, [r6], #4
 8004d90:	e7de      	b.n	8004d50 <__mdiff+0xc8>
 8004d92:	3f01      	subs	r7, #1
 8004d94:	e7e8      	b.n	8004d68 <__mdiff+0xe0>
 8004d96:	bf00      	nop
 8004d98:	08006dcb 	.word	0x08006dcb
 8004d9c:	08006ddc 	.word	0x08006ddc

08004da0 <__d2b>:
 8004da0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004da4:	2101      	movs	r1, #1
 8004da6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004daa:	4690      	mov	r8, r2
 8004dac:	461d      	mov	r5, r3
 8004dae:	f7ff fcd1 	bl	8004754 <_Balloc>
 8004db2:	4604      	mov	r4, r0
 8004db4:	b930      	cbnz	r0, 8004dc4 <__d2b+0x24>
 8004db6:	4602      	mov	r2, r0
 8004db8:	f240 310a 	movw	r1, #778	; 0x30a
 8004dbc:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <__d2b+0xb0>)
 8004dbe:	4825      	ldr	r0, [pc, #148]	; (8004e54 <__d2b+0xb4>)
 8004dc0:	f000 faa6 	bl	8005310 <__assert_func>
 8004dc4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004dc8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004dcc:	bb2d      	cbnz	r5, 8004e1a <__d2b+0x7a>
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	f1b8 0300 	subs.w	r3, r8, #0
 8004dd4:	d026      	beq.n	8004e24 <__d2b+0x84>
 8004dd6:	4668      	mov	r0, sp
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	f7ff fd83 	bl	80048e4 <__lo0bits>
 8004dde:	9900      	ldr	r1, [sp, #0]
 8004de0:	b1f0      	cbz	r0, 8004e20 <__d2b+0x80>
 8004de2:	9a01      	ldr	r2, [sp, #4]
 8004de4:	f1c0 0320 	rsb	r3, r0, #32
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	430b      	orrs	r3, r1
 8004dee:	40c2      	lsrs	r2, r0
 8004df0:	6163      	str	r3, [r4, #20]
 8004df2:	9201      	str	r2, [sp, #4]
 8004df4:	9b01      	ldr	r3, [sp, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf14      	ite	ne
 8004dfa:	2102      	movne	r1, #2
 8004dfc:	2101      	moveq	r1, #1
 8004dfe:	61a3      	str	r3, [r4, #24]
 8004e00:	6121      	str	r1, [r4, #16]
 8004e02:	b1c5      	cbz	r5, 8004e36 <__d2b+0x96>
 8004e04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004e08:	4405      	add	r5, r0
 8004e0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e0e:	603d      	str	r5, [r7, #0]
 8004e10:	6030      	str	r0, [r6, #0]
 8004e12:	4620      	mov	r0, r4
 8004e14:	b002      	add	sp, #8
 8004e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1e:	e7d6      	b.n	8004dce <__d2b+0x2e>
 8004e20:	6161      	str	r1, [r4, #20]
 8004e22:	e7e7      	b.n	8004df4 <__d2b+0x54>
 8004e24:	a801      	add	r0, sp, #4
 8004e26:	f7ff fd5d 	bl	80048e4 <__lo0bits>
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	9b01      	ldr	r3, [sp, #4]
 8004e2e:	6121      	str	r1, [r4, #16]
 8004e30:	6163      	str	r3, [r4, #20]
 8004e32:	3020      	adds	r0, #32
 8004e34:	e7e5      	b.n	8004e02 <__d2b+0x62>
 8004e36:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004e3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e3e:	6038      	str	r0, [r7, #0]
 8004e40:	6918      	ldr	r0, [r3, #16]
 8004e42:	f7ff fd2f 	bl	80048a4 <__hi0bits>
 8004e46:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004e4a:	6031      	str	r1, [r6, #0]
 8004e4c:	e7e1      	b.n	8004e12 <__d2b+0x72>
 8004e4e:	bf00      	nop
 8004e50:	08006dcb 	.word	0x08006dcb
 8004e54:	08006ddc 	.word	0x08006ddc

08004e58 <_calloc_r>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	fba1 5402 	umull	r5, r4, r1, r2
 8004e5e:	b934      	cbnz	r4, 8004e6e <_calloc_r+0x16>
 8004e60:	4629      	mov	r1, r5
 8004e62:	f000 f875 	bl	8004f50 <_malloc_r>
 8004e66:	4606      	mov	r6, r0
 8004e68:	b928      	cbnz	r0, 8004e76 <_calloc_r+0x1e>
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	bd70      	pop	{r4, r5, r6, pc}
 8004e6e:	220c      	movs	r2, #12
 8004e70:	2600      	movs	r6, #0
 8004e72:	6002      	str	r2, [r0, #0]
 8004e74:	e7f9      	b.n	8004e6a <_calloc_r+0x12>
 8004e76:	462a      	mov	r2, r5
 8004e78:	4621      	mov	r1, r4
 8004e7a:	f7fe f93f 	bl	80030fc <memset>
 8004e7e:	e7f4      	b.n	8004e6a <_calloc_r+0x12>

08004e80 <_free_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4605      	mov	r5, r0
 8004e84:	2900      	cmp	r1, #0
 8004e86:	d040      	beq.n	8004f0a <_free_r+0x8a>
 8004e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e8c:	1f0c      	subs	r4, r1, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bfb8      	it	lt
 8004e92:	18e4      	addlt	r4, r4, r3
 8004e94:	f000 fa98 	bl	80053c8 <__malloc_lock>
 8004e98:	4a1c      	ldr	r2, [pc, #112]	; (8004f0c <_free_r+0x8c>)
 8004e9a:	6813      	ldr	r3, [r2, #0]
 8004e9c:	b933      	cbnz	r3, 8004eac <_free_r+0x2c>
 8004e9e:	6063      	str	r3, [r4, #4]
 8004ea0:	6014      	str	r4, [r2, #0]
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ea8:	f000 ba94 	b.w	80053d4 <__malloc_unlock>
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	d908      	bls.n	8004ec2 <_free_r+0x42>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	1821      	adds	r1, r4, r0
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	bf01      	itttt	eq
 8004eb8:	6819      	ldreq	r1, [r3, #0]
 8004eba:	685b      	ldreq	r3, [r3, #4]
 8004ebc:	1809      	addeq	r1, r1, r0
 8004ebe:	6021      	streq	r1, [r4, #0]
 8004ec0:	e7ed      	b.n	8004e9e <_free_r+0x1e>
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	b10b      	cbz	r3, 8004ecc <_free_r+0x4c>
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	d9fa      	bls.n	8004ec2 <_free_r+0x42>
 8004ecc:	6811      	ldr	r1, [r2, #0]
 8004ece:	1850      	adds	r0, r2, r1
 8004ed0:	42a0      	cmp	r0, r4
 8004ed2:	d10b      	bne.n	8004eec <_free_r+0x6c>
 8004ed4:	6820      	ldr	r0, [r4, #0]
 8004ed6:	4401      	add	r1, r0
 8004ed8:	1850      	adds	r0, r2, r1
 8004eda:	4283      	cmp	r3, r0
 8004edc:	6011      	str	r1, [r2, #0]
 8004ede:	d1e0      	bne.n	8004ea2 <_free_r+0x22>
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4401      	add	r1, r0
 8004ee6:	6011      	str	r1, [r2, #0]
 8004ee8:	6053      	str	r3, [r2, #4]
 8004eea:	e7da      	b.n	8004ea2 <_free_r+0x22>
 8004eec:	d902      	bls.n	8004ef4 <_free_r+0x74>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	e7d6      	b.n	8004ea2 <_free_r+0x22>
 8004ef4:	6820      	ldr	r0, [r4, #0]
 8004ef6:	1821      	adds	r1, r4, r0
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	bf01      	itttt	eq
 8004efc:	6819      	ldreq	r1, [r3, #0]
 8004efe:	685b      	ldreq	r3, [r3, #4]
 8004f00:	1809      	addeq	r1, r1, r0
 8004f02:	6021      	streq	r1, [r4, #0]
 8004f04:	6063      	str	r3, [r4, #4]
 8004f06:	6054      	str	r4, [r2, #4]
 8004f08:	e7cb      	b.n	8004ea2 <_free_r+0x22>
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	20000258 	.word	0x20000258

08004f10 <sbrk_aligned>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	4e0e      	ldr	r6, [pc, #56]	; (8004f4c <sbrk_aligned+0x3c>)
 8004f14:	460c      	mov	r4, r1
 8004f16:	6831      	ldr	r1, [r6, #0]
 8004f18:	4605      	mov	r5, r0
 8004f1a:	b911      	cbnz	r1, 8004f22 <sbrk_aligned+0x12>
 8004f1c:	f000 f9e8 	bl	80052f0 <_sbrk_r>
 8004f20:	6030      	str	r0, [r6, #0]
 8004f22:	4621      	mov	r1, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 f9e3 	bl	80052f0 <_sbrk_r>
 8004f2a:	1c43      	adds	r3, r0, #1
 8004f2c:	d00a      	beq.n	8004f44 <sbrk_aligned+0x34>
 8004f2e:	1cc4      	adds	r4, r0, #3
 8004f30:	f024 0403 	bic.w	r4, r4, #3
 8004f34:	42a0      	cmp	r0, r4
 8004f36:	d007      	beq.n	8004f48 <sbrk_aligned+0x38>
 8004f38:	1a21      	subs	r1, r4, r0
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 f9d8 	bl	80052f0 <_sbrk_r>
 8004f40:	3001      	adds	r0, #1
 8004f42:	d101      	bne.n	8004f48 <sbrk_aligned+0x38>
 8004f44:	f04f 34ff 	mov.w	r4, #4294967295
 8004f48:	4620      	mov	r0, r4
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	2000025c 	.word	0x2000025c

08004f50 <_malloc_r>:
 8004f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f54:	1ccd      	adds	r5, r1, #3
 8004f56:	f025 0503 	bic.w	r5, r5, #3
 8004f5a:	3508      	adds	r5, #8
 8004f5c:	2d0c      	cmp	r5, #12
 8004f5e:	bf38      	it	cc
 8004f60:	250c      	movcc	r5, #12
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	4607      	mov	r7, r0
 8004f66:	db01      	blt.n	8004f6c <_malloc_r+0x1c>
 8004f68:	42a9      	cmp	r1, r5
 8004f6a:	d905      	bls.n	8004f78 <_malloc_r+0x28>
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	2600      	movs	r6, #0
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4630      	mov	r0, r6
 8004f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f78:	4e2e      	ldr	r6, [pc, #184]	; (8005034 <_malloc_r+0xe4>)
 8004f7a:	f000 fa25 	bl	80053c8 <__malloc_lock>
 8004f7e:	6833      	ldr	r3, [r6, #0]
 8004f80:	461c      	mov	r4, r3
 8004f82:	bb34      	cbnz	r4, 8004fd2 <_malloc_r+0x82>
 8004f84:	4629      	mov	r1, r5
 8004f86:	4638      	mov	r0, r7
 8004f88:	f7ff ffc2 	bl	8004f10 <sbrk_aligned>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	4604      	mov	r4, r0
 8004f90:	d14d      	bne.n	800502e <_malloc_r+0xde>
 8004f92:	6834      	ldr	r4, [r6, #0]
 8004f94:	4626      	mov	r6, r4
 8004f96:	2e00      	cmp	r6, #0
 8004f98:	d140      	bne.n	800501c <_malloc_r+0xcc>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	eb04 0803 	add.w	r8, r4, r3
 8004fa4:	f000 f9a4 	bl	80052f0 <_sbrk_r>
 8004fa8:	4580      	cmp	r8, r0
 8004faa:	d13a      	bne.n	8005022 <_malloc_r+0xd2>
 8004fac:	6821      	ldr	r1, [r4, #0]
 8004fae:	3503      	adds	r5, #3
 8004fb0:	1a6d      	subs	r5, r5, r1
 8004fb2:	f025 0503 	bic.w	r5, r5, #3
 8004fb6:	3508      	adds	r5, #8
 8004fb8:	2d0c      	cmp	r5, #12
 8004fba:	bf38      	it	cc
 8004fbc:	250c      	movcc	r5, #12
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	f7ff ffa5 	bl	8004f10 <sbrk_aligned>
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d02b      	beq.n	8005022 <_malloc_r+0xd2>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	442b      	add	r3, r5
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	e00e      	b.n	8004ff0 <_malloc_r+0xa0>
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	1b52      	subs	r2, r2, r5
 8004fd6:	d41e      	bmi.n	8005016 <_malloc_r+0xc6>
 8004fd8:	2a0b      	cmp	r2, #11
 8004fda:	d916      	bls.n	800500a <_malloc_r+0xba>
 8004fdc:	1961      	adds	r1, r4, r5
 8004fde:	42a3      	cmp	r3, r4
 8004fe0:	6025      	str	r5, [r4, #0]
 8004fe2:	bf18      	it	ne
 8004fe4:	6059      	strne	r1, [r3, #4]
 8004fe6:	6863      	ldr	r3, [r4, #4]
 8004fe8:	bf08      	it	eq
 8004fea:	6031      	streq	r1, [r6, #0]
 8004fec:	5162      	str	r2, [r4, r5]
 8004fee:	604b      	str	r3, [r1, #4]
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f104 060b 	add.w	r6, r4, #11
 8004ff6:	f000 f9ed 	bl	80053d4 <__malloc_unlock>
 8004ffa:	f026 0607 	bic.w	r6, r6, #7
 8004ffe:	1d23      	adds	r3, r4, #4
 8005000:	1af2      	subs	r2, r6, r3
 8005002:	d0b6      	beq.n	8004f72 <_malloc_r+0x22>
 8005004:	1b9b      	subs	r3, r3, r6
 8005006:	50a3      	str	r3, [r4, r2]
 8005008:	e7b3      	b.n	8004f72 <_malloc_r+0x22>
 800500a:	6862      	ldr	r2, [r4, #4]
 800500c:	42a3      	cmp	r3, r4
 800500e:	bf0c      	ite	eq
 8005010:	6032      	streq	r2, [r6, #0]
 8005012:	605a      	strne	r2, [r3, #4]
 8005014:	e7ec      	b.n	8004ff0 <_malloc_r+0xa0>
 8005016:	4623      	mov	r3, r4
 8005018:	6864      	ldr	r4, [r4, #4]
 800501a:	e7b2      	b.n	8004f82 <_malloc_r+0x32>
 800501c:	4634      	mov	r4, r6
 800501e:	6876      	ldr	r6, [r6, #4]
 8005020:	e7b9      	b.n	8004f96 <_malloc_r+0x46>
 8005022:	230c      	movs	r3, #12
 8005024:	4638      	mov	r0, r7
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	f000 f9d4 	bl	80053d4 <__malloc_unlock>
 800502c:	e7a1      	b.n	8004f72 <_malloc_r+0x22>
 800502e:	6025      	str	r5, [r4, #0]
 8005030:	e7de      	b.n	8004ff0 <_malloc_r+0xa0>
 8005032:	bf00      	nop
 8005034:	20000258 	.word	0x20000258

08005038 <__ssputs_r>:
 8005038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800503c:	688e      	ldr	r6, [r1, #8]
 800503e:	4682      	mov	sl, r0
 8005040:	429e      	cmp	r6, r3
 8005042:	460c      	mov	r4, r1
 8005044:	4690      	mov	r8, r2
 8005046:	461f      	mov	r7, r3
 8005048:	d838      	bhi.n	80050bc <__ssputs_r+0x84>
 800504a:	898a      	ldrh	r2, [r1, #12]
 800504c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005050:	d032      	beq.n	80050b8 <__ssputs_r+0x80>
 8005052:	6825      	ldr	r5, [r4, #0]
 8005054:	6909      	ldr	r1, [r1, #16]
 8005056:	3301      	adds	r3, #1
 8005058:	eba5 0901 	sub.w	r9, r5, r1
 800505c:	6965      	ldr	r5, [r4, #20]
 800505e:	444b      	add	r3, r9
 8005060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005068:	106d      	asrs	r5, r5, #1
 800506a:	429d      	cmp	r5, r3
 800506c:	bf38      	it	cc
 800506e:	461d      	movcc	r5, r3
 8005070:	0553      	lsls	r3, r2, #21
 8005072:	d531      	bpl.n	80050d8 <__ssputs_r+0xa0>
 8005074:	4629      	mov	r1, r5
 8005076:	f7ff ff6b 	bl	8004f50 <_malloc_r>
 800507a:	4606      	mov	r6, r0
 800507c:	b950      	cbnz	r0, 8005094 <__ssputs_r+0x5c>
 800507e:	230c      	movs	r3, #12
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	f8ca 3000 	str.w	r3, [sl]
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800508e:	81a3      	strh	r3, [r4, #12]
 8005090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005094:	464a      	mov	r2, r9
 8005096:	6921      	ldr	r1, [r4, #16]
 8005098:	f7ff fb4e 	bl	8004738 <memcpy>
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a6:	81a3      	strh	r3, [r4, #12]
 80050a8:	6126      	str	r6, [r4, #16]
 80050aa:	444e      	add	r6, r9
 80050ac:	6026      	str	r6, [r4, #0]
 80050ae:	463e      	mov	r6, r7
 80050b0:	6165      	str	r5, [r4, #20]
 80050b2:	eba5 0509 	sub.w	r5, r5, r9
 80050b6:	60a5      	str	r5, [r4, #8]
 80050b8:	42be      	cmp	r6, r7
 80050ba:	d900      	bls.n	80050be <__ssputs_r+0x86>
 80050bc:	463e      	mov	r6, r7
 80050be:	4632      	mov	r2, r6
 80050c0:	4641      	mov	r1, r8
 80050c2:	6820      	ldr	r0, [r4, #0]
 80050c4:	f000 f966 	bl	8005394 <memmove>
 80050c8:	68a3      	ldr	r3, [r4, #8]
 80050ca:	2000      	movs	r0, #0
 80050cc:	1b9b      	subs	r3, r3, r6
 80050ce:	60a3      	str	r3, [r4, #8]
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	4433      	add	r3, r6
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	e7db      	b.n	8005090 <__ssputs_r+0x58>
 80050d8:	462a      	mov	r2, r5
 80050da:	f000 f981 	bl	80053e0 <_realloc_r>
 80050de:	4606      	mov	r6, r0
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d1e1      	bne.n	80050a8 <__ssputs_r+0x70>
 80050e4:	4650      	mov	r0, sl
 80050e6:	6921      	ldr	r1, [r4, #16]
 80050e8:	f7ff feca 	bl	8004e80 <_free_r>
 80050ec:	e7c7      	b.n	800507e <__ssputs_r+0x46>
	...

080050f0 <_svfiprintf_r>:
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	4698      	mov	r8, r3
 80050f6:	898b      	ldrh	r3, [r1, #12]
 80050f8:	4607      	mov	r7, r0
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	460d      	mov	r5, r1
 80050fe:	4614      	mov	r4, r2
 8005100:	b09d      	sub	sp, #116	; 0x74
 8005102:	d50e      	bpl.n	8005122 <_svfiprintf_r+0x32>
 8005104:	690b      	ldr	r3, [r1, #16]
 8005106:	b963      	cbnz	r3, 8005122 <_svfiprintf_r+0x32>
 8005108:	2140      	movs	r1, #64	; 0x40
 800510a:	f7ff ff21 	bl	8004f50 <_malloc_r>
 800510e:	6028      	str	r0, [r5, #0]
 8005110:	6128      	str	r0, [r5, #16]
 8005112:	b920      	cbnz	r0, 800511e <_svfiprintf_r+0x2e>
 8005114:	230c      	movs	r3, #12
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	e0d1      	b.n	80052c2 <_svfiprintf_r+0x1d2>
 800511e:	2340      	movs	r3, #64	; 0x40
 8005120:	616b      	str	r3, [r5, #20]
 8005122:	2300      	movs	r3, #0
 8005124:	9309      	str	r3, [sp, #36]	; 0x24
 8005126:	2320      	movs	r3, #32
 8005128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800512c:	2330      	movs	r3, #48	; 0x30
 800512e:	f04f 0901 	mov.w	r9, #1
 8005132:	f8cd 800c 	str.w	r8, [sp, #12]
 8005136:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052dc <_svfiprintf_r+0x1ec>
 800513a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800513e:	4623      	mov	r3, r4
 8005140:	469a      	mov	sl, r3
 8005142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005146:	b10a      	cbz	r2, 800514c <_svfiprintf_r+0x5c>
 8005148:	2a25      	cmp	r2, #37	; 0x25
 800514a:	d1f9      	bne.n	8005140 <_svfiprintf_r+0x50>
 800514c:	ebba 0b04 	subs.w	fp, sl, r4
 8005150:	d00b      	beq.n	800516a <_svfiprintf_r+0x7a>
 8005152:	465b      	mov	r3, fp
 8005154:	4622      	mov	r2, r4
 8005156:	4629      	mov	r1, r5
 8005158:	4638      	mov	r0, r7
 800515a:	f7ff ff6d 	bl	8005038 <__ssputs_r>
 800515e:	3001      	adds	r0, #1
 8005160:	f000 80aa 	beq.w	80052b8 <_svfiprintf_r+0x1c8>
 8005164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005166:	445a      	add	r2, fp
 8005168:	9209      	str	r2, [sp, #36]	; 0x24
 800516a:	f89a 3000 	ldrb.w	r3, [sl]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 80a2 	beq.w	80052b8 <_svfiprintf_r+0x1c8>
 8005174:	2300      	movs	r3, #0
 8005176:	f04f 32ff 	mov.w	r2, #4294967295
 800517a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800517e:	f10a 0a01 	add.w	sl, sl, #1
 8005182:	9304      	str	r3, [sp, #16]
 8005184:	9307      	str	r3, [sp, #28]
 8005186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800518a:	931a      	str	r3, [sp, #104]	; 0x68
 800518c:	4654      	mov	r4, sl
 800518e:	2205      	movs	r2, #5
 8005190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005194:	4851      	ldr	r0, [pc, #324]	; (80052dc <_svfiprintf_r+0x1ec>)
 8005196:	f7ff fac1 	bl	800471c <memchr>
 800519a:	9a04      	ldr	r2, [sp, #16]
 800519c:	b9d8      	cbnz	r0, 80051d6 <_svfiprintf_r+0xe6>
 800519e:	06d0      	lsls	r0, r2, #27
 80051a0:	bf44      	itt	mi
 80051a2:	2320      	movmi	r3, #32
 80051a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051a8:	0711      	lsls	r1, r2, #28
 80051aa:	bf44      	itt	mi
 80051ac:	232b      	movmi	r3, #43	; 0x2b
 80051ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b2:	f89a 3000 	ldrb.w	r3, [sl]
 80051b6:	2b2a      	cmp	r3, #42	; 0x2a
 80051b8:	d015      	beq.n	80051e6 <_svfiprintf_r+0xf6>
 80051ba:	4654      	mov	r4, sl
 80051bc:	2000      	movs	r0, #0
 80051be:	f04f 0c0a 	mov.w	ip, #10
 80051c2:	9a07      	ldr	r2, [sp, #28]
 80051c4:	4621      	mov	r1, r4
 80051c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ca:	3b30      	subs	r3, #48	; 0x30
 80051cc:	2b09      	cmp	r3, #9
 80051ce:	d94e      	bls.n	800526e <_svfiprintf_r+0x17e>
 80051d0:	b1b0      	cbz	r0, 8005200 <_svfiprintf_r+0x110>
 80051d2:	9207      	str	r2, [sp, #28]
 80051d4:	e014      	b.n	8005200 <_svfiprintf_r+0x110>
 80051d6:	eba0 0308 	sub.w	r3, r0, r8
 80051da:	fa09 f303 	lsl.w	r3, r9, r3
 80051de:	4313      	orrs	r3, r2
 80051e0:	46a2      	mov	sl, r4
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	e7d2      	b.n	800518c <_svfiprintf_r+0x9c>
 80051e6:	9b03      	ldr	r3, [sp, #12]
 80051e8:	1d19      	adds	r1, r3, #4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	9103      	str	r1, [sp, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bfbb      	ittet	lt
 80051f2:	425b      	neglt	r3, r3
 80051f4:	f042 0202 	orrlt.w	r2, r2, #2
 80051f8:	9307      	strge	r3, [sp, #28]
 80051fa:	9307      	strlt	r3, [sp, #28]
 80051fc:	bfb8      	it	lt
 80051fe:	9204      	strlt	r2, [sp, #16]
 8005200:	7823      	ldrb	r3, [r4, #0]
 8005202:	2b2e      	cmp	r3, #46	; 0x2e
 8005204:	d10c      	bne.n	8005220 <_svfiprintf_r+0x130>
 8005206:	7863      	ldrb	r3, [r4, #1]
 8005208:	2b2a      	cmp	r3, #42	; 0x2a
 800520a:	d135      	bne.n	8005278 <_svfiprintf_r+0x188>
 800520c:	9b03      	ldr	r3, [sp, #12]
 800520e:	3402      	adds	r4, #2
 8005210:	1d1a      	adds	r2, r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	9203      	str	r2, [sp, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfb8      	it	lt
 800521a:	f04f 33ff 	movlt.w	r3, #4294967295
 800521e:	9305      	str	r3, [sp, #20]
 8005220:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80052e0 <_svfiprintf_r+0x1f0>
 8005224:	2203      	movs	r2, #3
 8005226:	4650      	mov	r0, sl
 8005228:	7821      	ldrb	r1, [r4, #0]
 800522a:	f7ff fa77 	bl	800471c <memchr>
 800522e:	b140      	cbz	r0, 8005242 <_svfiprintf_r+0x152>
 8005230:	2340      	movs	r3, #64	; 0x40
 8005232:	eba0 000a 	sub.w	r0, r0, sl
 8005236:	fa03 f000 	lsl.w	r0, r3, r0
 800523a:	9b04      	ldr	r3, [sp, #16]
 800523c:	3401      	adds	r4, #1
 800523e:	4303      	orrs	r3, r0
 8005240:	9304      	str	r3, [sp, #16]
 8005242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005246:	2206      	movs	r2, #6
 8005248:	4826      	ldr	r0, [pc, #152]	; (80052e4 <_svfiprintf_r+0x1f4>)
 800524a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800524e:	f7ff fa65 	bl	800471c <memchr>
 8005252:	2800      	cmp	r0, #0
 8005254:	d038      	beq.n	80052c8 <_svfiprintf_r+0x1d8>
 8005256:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <_svfiprintf_r+0x1f8>)
 8005258:	bb1b      	cbnz	r3, 80052a2 <_svfiprintf_r+0x1b2>
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	3307      	adds	r3, #7
 800525e:	f023 0307 	bic.w	r3, r3, #7
 8005262:	3308      	adds	r3, #8
 8005264:	9303      	str	r3, [sp, #12]
 8005266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005268:	4433      	add	r3, r6
 800526a:	9309      	str	r3, [sp, #36]	; 0x24
 800526c:	e767      	b.n	800513e <_svfiprintf_r+0x4e>
 800526e:	460c      	mov	r4, r1
 8005270:	2001      	movs	r0, #1
 8005272:	fb0c 3202 	mla	r2, ip, r2, r3
 8005276:	e7a5      	b.n	80051c4 <_svfiprintf_r+0xd4>
 8005278:	2300      	movs	r3, #0
 800527a:	f04f 0c0a 	mov.w	ip, #10
 800527e:	4619      	mov	r1, r3
 8005280:	3401      	adds	r4, #1
 8005282:	9305      	str	r3, [sp, #20]
 8005284:	4620      	mov	r0, r4
 8005286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800528a:	3a30      	subs	r2, #48	; 0x30
 800528c:	2a09      	cmp	r2, #9
 800528e:	d903      	bls.n	8005298 <_svfiprintf_r+0x1a8>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0c5      	beq.n	8005220 <_svfiprintf_r+0x130>
 8005294:	9105      	str	r1, [sp, #20]
 8005296:	e7c3      	b.n	8005220 <_svfiprintf_r+0x130>
 8005298:	4604      	mov	r4, r0
 800529a:	2301      	movs	r3, #1
 800529c:	fb0c 2101 	mla	r1, ip, r1, r2
 80052a0:	e7f0      	b.n	8005284 <_svfiprintf_r+0x194>
 80052a2:	ab03      	add	r3, sp, #12
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	462a      	mov	r2, r5
 80052a8:	4638      	mov	r0, r7
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <_svfiprintf_r+0x1fc>)
 80052ac:	a904      	add	r1, sp, #16
 80052ae:	f7fd ffcb 	bl	8003248 <_printf_float>
 80052b2:	1c42      	adds	r2, r0, #1
 80052b4:	4606      	mov	r6, r0
 80052b6:	d1d6      	bne.n	8005266 <_svfiprintf_r+0x176>
 80052b8:	89ab      	ldrh	r3, [r5, #12]
 80052ba:	065b      	lsls	r3, r3, #25
 80052bc:	f53f af2c 	bmi.w	8005118 <_svfiprintf_r+0x28>
 80052c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052c2:	b01d      	add	sp, #116	; 0x74
 80052c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c8:	ab03      	add	r3, sp, #12
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	462a      	mov	r2, r5
 80052ce:	4638      	mov	r0, r7
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <_svfiprintf_r+0x1fc>)
 80052d2:	a904      	add	r1, sp, #16
 80052d4:	f7fe fa54 	bl	8003780 <_printf_i>
 80052d8:	e7eb      	b.n	80052b2 <_svfiprintf_r+0x1c2>
 80052da:	bf00      	nop
 80052dc:	08006f34 	.word	0x08006f34
 80052e0:	08006f3a 	.word	0x08006f3a
 80052e4:	08006f3e 	.word	0x08006f3e
 80052e8:	08003249 	.word	0x08003249
 80052ec:	08005039 	.word	0x08005039

080052f0 <_sbrk_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	2300      	movs	r3, #0
 80052f4:	4d05      	ldr	r5, [pc, #20]	; (800530c <_sbrk_r+0x1c>)
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	f7fc fca6 	bl	8001c4c <_sbrk>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_sbrk_r+0x1a>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_sbrk_r+0x1a>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	20000260 	.word	0x20000260

08005310 <__assert_func>:
 8005310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005312:	4614      	mov	r4, r2
 8005314:	461a      	mov	r2, r3
 8005316:	4b09      	ldr	r3, [pc, #36]	; (800533c <__assert_func+0x2c>)
 8005318:	4605      	mov	r5, r0
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68d8      	ldr	r0, [r3, #12]
 800531e:	b14c      	cbz	r4, 8005334 <__assert_func+0x24>
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <__assert_func+0x30>)
 8005322:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005326:	9100      	str	r1, [sp, #0]
 8005328:	462b      	mov	r3, r5
 800532a:	4906      	ldr	r1, [pc, #24]	; (8005344 <__assert_func+0x34>)
 800532c:	f000 f80e 	bl	800534c <fiprintf>
 8005330:	f000 faaa 	bl	8005888 <abort>
 8005334:	4b04      	ldr	r3, [pc, #16]	; (8005348 <__assert_func+0x38>)
 8005336:	461c      	mov	r4, r3
 8005338:	e7f3      	b.n	8005322 <__assert_func+0x12>
 800533a:	bf00      	nop
 800533c:	2000000c 	.word	0x2000000c
 8005340:	08006f45 	.word	0x08006f45
 8005344:	08006f52 	.word	0x08006f52
 8005348:	08006f80 	.word	0x08006f80

0800534c <fiprintf>:
 800534c:	b40e      	push	{r1, r2, r3}
 800534e:	b503      	push	{r0, r1, lr}
 8005350:	4601      	mov	r1, r0
 8005352:	ab03      	add	r3, sp, #12
 8005354:	4805      	ldr	r0, [pc, #20]	; (800536c <fiprintf+0x20>)
 8005356:	f853 2b04 	ldr.w	r2, [r3], #4
 800535a:	6800      	ldr	r0, [r0, #0]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	f000 f895 	bl	800548c <_vfiprintf_r>
 8005362:	b002      	add	sp, #8
 8005364:	f85d eb04 	ldr.w	lr, [sp], #4
 8005368:	b003      	add	sp, #12
 800536a:	4770      	bx	lr
 800536c:	2000000c 	.word	0x2000000c

08005370 <__ascii_mbtowc>:
 8005370:	b082      	sub	sp, #8
 8005372:	b901      	cbnz	r1, 8005376 <__ascii_mbtowc+0x6>
 8005374:	a901      	add	r1, sp, #4
 8005376:	b142      	cbz	r2, 800538a <__ascii_mbtowc+0x1a>
 8005378:	b14b      	cbz	r3, 800538e <__ascii_mbtowc+0x1e>
 800537a:	7813      	ldrb	r3, [r2, #0]
 800537c:	600b      	str	r3, [r1, #0]
 800537e:	7812      	ldrb	r2, [r2, #0]
 8005380:	1e10      	subs	r0, r2, #0
 8005382:	bf18      	it	ne
 8005384:	2001      	movne	r0, #1
 8005386:	b002      	add	sp, #8
 8005388:	4770      	bx	lr
 800538a:	4610      	mov	r0, r2
 800538c:	e7fb      	b.n	8005386 <__ascii_mbtowc+0x16>
 800538e:	f06f 0001 	mvn.w	r0, #1
 8005392:	e7f8      	b.n	8005386 <__ascii_mbtowc+0x16>

08005394 <memmove>:
 8005394:	4288      	cmp	r0, r1
 8005396:	b510      	push	{r4, lr}
 8005398:	eb01 0402 	add.w	r4, r1, r2
 800539c:	d902      	bls.n	80053a4 <memmove+0x10>
 800539e:	4284      	cmp	r4, r0
 80053a0:	4623      	mov	r3, r4
 80053a2:	d807      	bhi.n	80053b4 <memmove+0x20>
 80053a4:	1e43      	subs	r3, r0, #1
 80053a6:	42a1      	cmp	r1, r4
 80053a8:	d008      	beq.n	80053bc <memmove+0x28>
 80053aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053b2:	e7f8      	b.n	80053a6 <memmove+0x12>
 80053b4:	4601      	mov	r1, r0
 80053b6:	4402      	add	r2, r0
 80053b8:	428a      	cmp	r2, r1
 80053ba:	d100      	bne.n	80053be <memmove+0x2a>
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053c6:	e7f7      	b.n	80053b8 <memmove+0x24>

080053c8 <__malloc_lock>:
 80053c8:	4801      	ldr	r0, [pc, #4]	; (80053d0 <__malloc_lock+0x8>)
 80053ca:	f000 bc19 	b.w	8005c00 <__retarget_lock_acquire_recursive>
 80053ce:	bf00      	nop
 80053d0:	20000264 	.word	0x20000264

080053d4 <__malloc_unlock>:
 80053d4:	4801      	ldr	r0, [pc, #4]	; (80053dc <__malloc_unlock+0x8>)
 80053d6:	f000 bc14 	b.w	8005c02 <__retarget_lock_release_recursive>
 80053da:	bf00      	nop
 80053dc:	20000264 	.word	0x20000264

080053e0 <_realloc_r>:
 80053e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e4:	4680      	mov	r8, r0
 80053e6:	4614      	mov	r4, r2
 80053e8:	460e      	mov	r6, r1
 80053ea:	b921      	cbnz	r1, 80053f6 <_realloc_r+0x16>
 80053ec:	4611      	mov	r1, r2
 80053ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053f2:	f7ff bdad 	b.w	8004f50 <_malloc_r>
 80053f6:	b92a      	cbnz	r2, 8005404 <_realloc_r+0x24>
 80053f8:	f7ff fd42 	bl	8004e80 <_free_r>
 80053fc:	4625      	mov	r5, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005404:	f000 fc64 	bl	8005cd0 <_malloc_usable_size_r>
 8005408:	4284      	cmp	r4, r0
 800540a:	4607      	mov	r7, r0
 800540c:	d802      	bhi.n	8005414 <_realloc_r+0x34>
 800540e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005412:	d812      	bhi.n	800543a <_realloc_r+0x5a>
 8005414:	4621      	mov	r1, r4
 8005416:	4640      	mov	r0, r8
 8005418:	f7ff fd9a 	bl	8004f50 <_malloc_r>
 800541c:	4605      	mov	r5, r0
 800541e:	2800      	cmp	r0, #0
 8005420:	d0ed      	beq.n	80053fe <_realloc_r+0x1e>
 8005422:	42bc      	cmp	r4, r7
 8005424:	4622      	mov	r2, r4
 8005426:	4631      	mov	r1, r6
 8005428:	bf28      	it	cs
 800542a:	463a      	movcs	r2, r7
 800542c:	f7ff f984 	bl	8004738 <memcpy>
 8005430:	4631      	mov	r1, r6
 8005432:	4640      	mov	r0, r8
 8005434:	f7ff fd24 	bl	8004e80 <_free_r>
 8005438:	e7e1      	b.n	80053fe <_realloc_r+0x1e>
 800543a:	4635      	mov	r5, r6
 800543c:	e7df      	b.n	80053fe <_realloc_r+0x1e>

0800543e <__sfputc_r>:
 800543e:	6893      	ldr	r3, [r2, #8]
 8005440:	b410      	push	{r4}
 8005442:	3b01      	subs	r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	6093      	str	r3, [r2, #8]
 8005448:	da07      	bge.n	800545a <__sfputc_r+0x1c>
 800544a:	6994      	ldr	r4, [r2, #24]
 800544c:	42a3      	cmp	r3, r4
 800544e:	db01      	blt.n	8005454 <__sfputc_r+0x16>
 8005450:	290a      	cmp	r1, #10
 8005452:	d102      	bne.n	800545a <__sfputc_r+0x1c>
 8005454:	bc10      	pop	{r4}
 8005456:	f000 b949 	b.w	80056ec <__swbuf_r>
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	1c58      	adds	r0, r3, #1
 800545e:	6010      	str	r0, [r2, #0]
 8005460:	7019      	strb	r1, [r3, #0]
 8005462:	4608      	mov	r0, r1
 8005464:	bc10      	pop	{r4}
 8005466:	4770      	bx	lr

08005468 <__sfputs_r>:
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546a:	4606      	mov	r6, r0
 800546c:	460f      	mov	r7, r1
 800546e:	4614      	mov	r4, r2
 8005470:	18d5      	adds	r5, r2, r3
 8005472:	42ac      	cmp	r4, r5
 8005474:	d101      	bne.n	800547a <__sfputs_r+0x12>
 8005476:	2000      	movs	r0, #0
 8005478:	e007      	b.n	800548a <__sfputs_r+0x22>
 800547a:	463a      	mov	r2, r7
 800547c:	4630      	mov	r0, r6
 800547e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005482:	f7ff ffdc 	bl	800543e <__sfputc_r>
 8005486:	1c43      	adds	r3, r0, #1
 8005488:	d1f3      	bne.n	8005472 <__sfputs_r+0xa>
 800548a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800548c <_vfiprintf_r>:
 800548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005490:	460d      	mov	r5, r1
 8005492:	4614      	mov	r4, r2
 8005494:	4698      	mov	r8, r3
 8005496:	4606      	mov	r6, r0
 8005498:	b09d      	sub	sp, #116	; 0x74
 800549a:	b118      	cbz	r0, 80054a4 <_vfiprintf_r+0x18>
 800549c:	6983      	ldr	r3, [r0, #24]
 800549e:	b90b      	cbnz	r3, 80054a4 <_vfiprintf_r+0x18>
 80054a0:	f000 fb10 	bl	8005ac4 <__sinit>
 80054a4:	4b89      	ldr	r3, [pc, #548]	; (80056cc <_vfiprintf_r+0x240>)
 80054a6:	429d      	cmp	r5, r3
 80054a8:	d11b      	bne.n	80054e2 <_vfiprintf_r+0x56>
 80054aa:	6875      	ldr	r5, [r6, #4]
 80054ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054ae:	07d9      	lsls	r1, r3, #31
 80054b0:	d405      	bmi.n	80054be <_vfiprintf_r+0x32>
 80054b2:	89ab      	ldrh	r3, [r5, #12]
 80054b4:	059a      	lsls	r2, r3, #22
 80054b6:	d402      	bmi.n	80054be <_vfiprintf_r+0x32>
 80054b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ba:	f000 fba1 	bl	8005c00 <__retarget_lock_acquire_recursive>
 80054be:	89ab      	ldrh	r3, [r5, #12]
 80054c0:	071b      	lsls	r3, r3, #28
 80054c2:	d501      	bpl.n	80054c8 <_vfiprintf_r+0x3c>
 80054c4:	692b      	ldr	r3, [r5, #16]
 80054c6:	b9eb      	cbnz	r3, 8005504 <_vfiprintf_r+0x78>
 80054c8:	4629      	mov	r1, r5
 80054ca:	4630      	mov	r0, r6
 80054cc:	f000 f96e 	bl	80057ac <__swsetup_r>
 80054d0:	b1c0      	cbz	r0, 8005504 <_vfiprintf_r+0x78>
 80054d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054d4:	07dc      	lsls	r4, r3, #31
 80054d6:	d50e      	bpl.n	80054f6 <_vfiprintf_r+0x6a>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	b01d      	add	sp, #116	; 0x74
 80054de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e2:	4b7b      	ldr	r3, [pc, #492]	; (80056d0 <_vfiprintf_r+0x244>)
 80054e4:	429d      	cmp	r5, r3
 80054e6:	d101      	bne.n	80054ec <_vfiprintf_r+0x60>
 80054e8:	68b5      	ldr	r5, [r6, #8]
 80054ea:	e7df      	b.n	80054ac <_vfiprintf_r+0x20>
 80054ec:	4b79      	ldr	r3, [pc, #484]	; (80056d4 <_vfiprintf_r+0x248>)
 80054ee:	429d      	cmp	r5, r3
 80054f0:	bf08      	it	eq
 80054f2:	68f5      	ldreq	r5, [r6, #12]
 80054f4:	e7da      	b.n	80054ac <_vfiprintf_r+0x20>
 80054f6:	89ab      	ldrh	r3, [r5, #12]
 80054f8:	0598      	lsls	r0, r3, #22
 80054fa:	d4ed      	bmi.n	80054d8 <_vfiprintf_r+0x4c>
 80054fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054fe:	f000 fb80 	bl	8005c02 <__retarget_lock_release_recursive>
 8005502:	e7e9      	b.n	80054d8 <_vfiprintf_r+0x4c>
 8005504:	2300      	movs	r3, #0
 8005506:	9309      	str	r3, [sp, #36]	; 0x24
 8005508:	2320      	movs	r3, #32
 800550a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800550e:	2330      	movs	r3, #48	; 0x30
 8005510:	f04f 0901 	mov.w	r9, #1
 8005514:	f8cd 800c 	str.w	r8, [sp, #12]
 8005518:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80056d8 <_vfiprintf_r+0x24c>
 800551c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005520:	4623      	mov	r3, r4
 8005522:	469a      	mov	sl, r3
 8005524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005528:	b10a      	cbz	r2, 800552e <_vfiprintf_r+0xa2>
 800552a:	2a25      	cmp	r2, #37	; 0x25
 800552c:	d1f9      	bne.n	8005522 <_vfiprintf_r+0x96>
 800552e:	ebba 0b04 	subs.w	fp, sl, r4
 8005532:	d00b      	beq.n	800554c <_vfiprintf_r+0xc0>
 8005534:	465b      	mov	r3, fp
 8005536:	4622      	mov	r2, r4
 8005538:	4629      	mov	r1, r5
 800553a:	4630      	mov	r0, r6
 800553c:	f7ff ff94 	bl	8005468 <__sfputs_r>
 8005540:	3001      	adds	r0, #1
 8005542:	f000 80aa 	beq.w	800569a <_vfiprintf_r+0x20e>
 8005546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005548:	445a      	add	r2, fp
 800554a:	9209      	str	r2, [sp, #36]	; 0x24
 800554c:	f89a 3000 	ldrb.w	r3, [sl]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80a2 	beq.w	800569a <_vfiprintf_r+0x20e>
 8005556:	2300      	movs	r3, #0
 8005558:	f04f 32ff 	mov.w	r2, #4294967295
 800555c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005560:	f10a 0a01 	add.w	sl, sl, #1
 8005564:	9304      	str	r3, [sp, #16]
 8005566:	9307      	str	r3, [sp, #28]
 8005568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800556c:	931a      	str	r3, [sp, #104]	; 0x68
 800556e:	4654      	mov	r4, sl
 8005570:	2205      	movs	r2, #5
 8005572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005576:	4858      	ldr	r0, [pc, #352]	; (80056d8 <_vfiprintf_r+0x24c>)
 8005578:	f7ff f8d0 	bl	800471c <memchr>
 800557c:	9a04      	ldr	r2, [sp, #16]
 800557e:	b9d8      	cbnz	r0, 80055b8 <_vfiprintf_r+0x12c>
 8005580:	06d1      	lsls	r1, r2, #27
 8005582:	bf44      	itt	mi
 8005584:	2320      	movmi	r3, #32
 8005586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800558a:	0713      	lsls	r3, r2, #28
 800558c:	bf44      	itt	mi
 800558e:	232b      	movmi	r3, #43	; 0x2b
 8005590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005594:	f89a 3000 	ldrb.w	r3, [sl]
 8005598:	2b2a      	cmp	r3, #42	; 0x2a
 800559a:	d015      	beq.n	80055c8 <_vfiprintf_r+0x13c>
 800559c:	4654      	mov	r4, sl
 800559e:	2000      	movs	r0, #0
 80055a0:	f04f 0c0a 	mov.w	ip, #10
 80055a4:	9a07      	ldr	r2, [sp, #28]
 80055a6:	4621      	mov	r1, r4
 80055a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055ac:	3b30      	subs	r3, #48	; 0x30
 80055ae:	2b09      	cmp	r3, #9
 80055b0:	d94e      	bls.n	8005650 <_vfiprintf_r+0x1c4>
 80055b2:	b1b0      	cbz	r0, 80055e2 <_vfiprintf_r+0x156>
 80055b4:	9207      	str	r2, [sp, #28]
 80055b6:	e014      	b.n	80055e2 <_vfiprintf_r+0x156>
 80055b8:	eba0 0308 	sub.w	r3, r0, r8
 80055bc:	fa09 f303 	lsl.w	r3, r9, r3
 80055c0:	4313      	orrs	r3, r2
 80055c2:	46a2      	mov	sl, r4
 80055c4:	9304      	str	r3, [sp, #16]
 80055c6:	e7d2      	b.n	800556e <_vfiprintf_r+0xe2>
 80055c8:	9b03      	ldr	r3, [sp, #12]
 80055ca:	1d19      	adds	r1, r3, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	9103      	str	r1, [sp, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bfbb      	ittet	lt
 80055d4:	425b      	neglt	r3, r3
 80055d6:	f042 0202 	orrlt.w	r2, r2, #2
 80055da:	9307      	strge	r3, [sp, #28]
 80055dc:	9307      	strlt	r3, [sp, #28]
 80055de:	bfb8      	it	lt
 80055e0:	9204      	strlt	r2, [sp, #16]
 80055e2:	7823      	ldrb	r3, [r4, #0]
 80055e4:	2b2e      	cmp	r3, #46	; 0x2e
 80055e6:	d10c      	bne.n	8005602 <_vfiprintf_r+0x176>
 80055e8:	7863      	ldrb	r3, [r4, #1]
 80055ea:	2b2a      	cmp	r3, #42	; 0x2a
 80055ec:	d135      	bne.n	800565a <_vfiprintf_r+0x1ce>
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	3402      	adds	r4, #2
 80055f2:	1d1a      	adds	r2, r3, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	9203      	str	r2, [sp, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bfb8      	it	lt
 80055fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005600:	9305      	str	r3, [sp, #20]
 8005602:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80056dc <_vfiprintf_r+0x250>
 8005606:	2203      	movs	r2, #3
 8005608:	4650      	mov	r0, sl
 800560a:	7821      	ldrb	r1, [r4, #0]
 800560c:	f7ff f886 	bl	800471c <memchr>
 8005610:	b140      	cbz	r0, 8005624 <_vfiprintf_r+0x198>
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	eba0 000a 	sub.w	r0, r0, sl
 8005618:	fa03 f000 	lsl.w	r0, r3, r0
 800561c:	9b04      	ldr	r3, [sp, #16]
 800561e:	3401      	adds	r4, #1
 8005620:	4303      	orrs	r3, r0
 8005622:	9304      	str	r3, [sp, #16]
 8005624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005628:	2206      	movs	r2, #6
 800562a:	482d      	ldr	r0, [pc, #180]	; (80056e0 <_vfiprintf_r+0x254>)
 800562c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005630:	f7ff f874 	bl	800471c <memchr>
 8005634:	2800      	cmp	r0, #0
 8005636:	d03f      	beq.n	80056b8 <_vfiprintf_r+0x22c>
 8005638:	4b2a      	ldr	r3, [pc, #168]	; (80056e4 <_vfiprintf_r+0x258>)
 800563a:	bb1b      	cbnz	r3, 8005684 <_vfiprintf_r+0x1f8>
 800563c:	9b03      	ldr	r3, [sp, #12]
 800563e:	3307      	adds	r3, #7
 8005640:	f023 0307 	bic.w	r3, r3, #7
 8005644:	3308      	adds	r3, #8
 8005646:	9303      	str	r3, [sp, #12]
 8005648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800564a:	443b      	add	r3, r7
 800564c:	9309      	str	r3, [sp, #36]	; 0x24
 800564e:	e767      	b.n	8005520 <_vfiprintf_r+0x94>
 8005650:	460c      	mov	r4, r1
 8005652:	2001      	movs	r0, #1
 8005654:	fb0c 3202 	mla	r2, ip, r2, r3
 8005658:	e7a5      	b.n	80055a6 <_vfiprintf_r+0x11a>
 800565a:	2300      	movs	r3, #0
 800565c:	f04f 0c0a 	mov.w	ip, #10
 8005660:	4619      	mov	r1, r3
 8005662:	3401      	adds	r4, #1
 8005664:	9305      	str	r3, [sp, #20]
 8005666:	4620      	mov	r0, r4
 8005668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800566c:	3a30      	subs	r2, #48	; 0x30
 800566e:	2a09      	cmp	r2, #9
 8005670:	d903      	bls.n	800567a <_vfiprintf_r+0x1ee>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0c5      	beq.n	8005602 <_vfiprintf_r+0x176>
 8005676:	9105      	str	r1, [sp, #20]
 8005678:	e7c3      	b.n	8005602 <_vfiprintf_r+0x176>
 800567a:	4604      	mov	r4, r0
 800567c:	2301      	movs	r3, #1
 800567e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005682:	e7f0      	b.n	8005666 <_vfiprintf_r+0x1da>
 8005684:	ab03      	add	r3, sp, #12
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	462a      	mov	r2, r5
 800568a:	4630      	mov	r0, r6
 800568c:	4b16      	ldr	r3, [pc, #88]	; (80056e8 <_vfiprintf_r+0x25c>)
 800568e:	a904      	add	r1, sp, #16
 8005690:	f7fd fdda 	bl	8003248 <_printf_float>
 8005694:	4607      	mov	r7, r0
 8005696:	1c78      	adds	r0, r7, #1
 8005698:	d1d6      	bne.n	8005648 <_vfiprintf_r+0x1bc>
 800569a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800569c:	07d9      	lsls	r1, r3, #31
 800569e:	d405      	bmi.n	80056ac <_vfiprintf_r+0x220>
 80056a0:	89ab      	ldrh	r3, [r5, #12]
 80056a2:	059a      	lsls	r2, r3, #22
 80056a4:	d402      	bmi.n	80056ac <_vfiprintf_r+0x220>
 80056a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056a8:	f000 faab 	bl	8005c02 <__retarget_lock_release_recursive>
 80056ac:	89ab      	ldrh	r3, [r5, #12]
 80056ae:	065b      	lsls	r3, r3, #25
 80056b0:	f53f af12 	bmi.w	80054d8 <_vfiprintf_r+0x4c>
 80056b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056b6:	e711      	b.n	80054dc <_vfiprintf_r+0x50>
 80056b8:	ab03      	add	r3, sp, #12
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	462a      	mov	r2, r5
 80056be:	4630      	mov	r0, r6
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <_vfiprintf_r+0x25c>)
 80056c2:	a904      	add	r1, sp, #16
 80056c4:	f7fe f85c 	bl	8003780 <_printf_i>
 80056c8:	e7e4      	b.n	8005694 <_vfiprintf_r+0x208>
 80056ca:	bf00      	nop
 80056cc:	080070ac 	.word	0x080070ac
 80056d0:	080070cc 	.word	0x080070cc
 80056d4:	0800708c 	.word	0x0800708c
 80056d8:	08006f34 	.word	0x08006f34
 80056dc:	08006f3a 	.word	0x08006f3a
 80056e0:	08006f3e 	.word	0x08006f3e
 80056e4:	08003249 	.word	0x08003249
 80056e8:	08005469 	.word	0x08005469

080056ec <__swbuf_r>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	460e      	mov	r6, r1
 80056f0:	4614      	mov	r4, r2
 80056f2:	4605      	mov	r5, r0
 80056f4:	b118      	cbz	r0, 80056fe <__swbuf_r+0x12>
 80056f6:	6983      	ldr	r3, [r0, #24]
 80056f8:	b90b      	cbnz	r3, 80056fe <__swbuf_r+0x12>
 80056fa:	f000 f9e3 	bl	8005ac4 <__sinit>
 80056fe:	4b21      	ldr	r3, [pc, #132]	; (8005784 <__swbuf_r+0x98>)
 8005700:	429c      	cmp	r4, r3
 8005702:	d12b      	bne.n	800575c <__swbuf_r+0x70>
 8005704:	686c      	ldr	r4, [r5, #4]
 8005706:	69a3      	ldr	r3, [r4, #24]
 8005708:	60a3      	str	r3, [r4, #8]
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	071a      	lsls	r2, r3, #28
 800570e:	d52f      	bpl.n	8005770 <__swbuf_r+0x84>
 8005710:	6923      	ldr	r3, [r4, #16]
 8005712:	b36b      	cbz	r3, 8005770 <__swbuf_r+0x84>
 8005714:	6923      	ldr	r3, [r4, #16]
 8005716:	6820      	ldr	r0, [r4, #0]
 8005718:	b2f6      	uxtb	r6, r6
 800571a:	1ac0      	subs	r0, r0, r3
 800571c:	6963      	ldr	r3, [r4, #20]
 800571e:	4637      	mov	r7, r6
 8005720:	4283      	cmp	r3, r0
 8005722:	dc04      	bgt.n	800572e <__swbuf_r+0x42>
 8005724:	4621      	mov	r1, r4
 8005726:	4628      	mov	r0, r5
 8005728:	f000 f938 	bl	800599c <_fflush_r>
 800572c:	bb30      	cbnz	r0, 800577c <__swbuf_r+0x90>
 800572e:	68a3      	ldr	r3, [r4, #8]
 8005730:	3001      	adds	r0, #1
 8005732:	3b01      	subs	r3, #1
 8005734:	60a3      	str	r3, [r4, #8]
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	6022      	str	r2, [r4, #0]
 800573c:	701e      	strb	r6, [r3, #0]
 800573e:	6963      	ldr	r3, [r4, #20]
 8005740:	4283      	cmp	r3, r0
 8005742:	d004      	beq.n	800574e <__swbuf_r+0x62>
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	07db      	lsls	r3, r3, #31
 8005748:	d506      	bpl.n	8005758 <__swbuf_r+0x6c>
 800574a:	2e0a      	cmp	r6, #10
 800574c:	d104      	bne.n	8005758 <__swbuf_r+0x6c>
 800574e:	4621      	mov	r1, r4
 8005750:	4628      	mov	r0, r5
 8005752:	f000 f923 	bl	800599c <_fflush_r>
 8005756:	b988      	cbnz	r0, 800577c <__swbuf_r+0x90>
 8005758:	4638      	mov	r0, r7
 800575a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <__swbuf_r+0x9c>)
 800575e:	429c      	cmp	r4, r3
 8005760:	d101      	bne.n	8005766 <__swbuf_r+0x7a>
 8005762:	68ac      	ldr	r4, [r5, #8]
 8005764:	e7cf      	b.n	8005706 <__swbuf_r+0x1a>
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <__swbuf_r+0xa0>)
 8005768:	429c      	cmp	r4, r3
 800576a:	bf08      	it	eq
 800576c:	68ec      	ldreq	r4, [r5, #12]
 800576e:	e7ca      	b.n	8005706 <__swbuf_r+0x1a>
 8005770:	4621      	mov	r1, r4
 8005772:	4628      	mov	r0, r5
 8005774:	f000 f81a 	bl	80057ac <__swsetup_r>
 8005778:	2800      	cmp	r0, #0
 800577a:	d0cb      	beq.n	8005714 <__swbuf_r+0x28>
 800577c:	f04f 37ff 	mov.w	r7, #4294967295
 8005780:	e7ea      	b.n	8005758 <__swbuf_r+0x6c>
 8005782:	bf00      	nop
 8005784:	080070ac 	.word	0x080070ac
 8005788:	080070cc 	.word	0x080070cc
 800578c:	0800708c 	.word	0x0800708c

08005790 <__ascii_wctomb>:
 8005790:	4603      	mov	r3, r0
 8005792:	4608      	mov	r0, r1
 8005794:	b141      	cbz	r1, 80057a8 <__ascii_wctomb+0x18>
 8005796:	2aff      	cmp	r2, #255	; 0xff
 8005798:	d904      	bls.n	80057a4 <__ascii_wctomb+0x14>
 800579a:	228a      	movs	r2, #138	; 0x8a
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	4770      	bx	lr
 80057a4:	2001      	movs	r0, #1
 80057a6:	700a      	strb	r2, [r1, #0]
 80057a8:	4770      	bx	lr
	...

080057ac <__swsetup_r>:
 80057ac:	4b32      	ldr	r3, [pc, #200]	; (8005878 <__swsetup_r+0xcc>)
 80057ae:	b570      	push	{r4, r5, r6, lr}
 80057b0:	681d      	ldr	r5, [r3, #0]
 80057b2:	4606      	mov	r6, r0
 80057b4:	460c      	mov	r4, r1
 80057b6:	b125      	cbz	r5, 80057c2 <__swsetup_r+0x16>
 80057b8:	69ab      	ldr	r3, [r5, #24]
 80057ba:	b913      	cbnz	r3, 80057c2 <__swsetup_r+0x16>
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 f981 	bl	8005ac4 <__sinit>
 80057c2:	4b2e      	ldr	r3, [pc, #184]	; (800587c <__swsetup_r+0xd0>)
 80057c4:	429c      	cmp	r4, r3
 80057c6:	d10f      	bne.n	80057e8 <__swsetup_r+0x3c>
 80057c8:	686c      	ldr	r4, [r5, #4]
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057d0:	0719      	lsls	r1, r3, #28
 80057d2:	d42c      	bmi.n	800582e <__swsetup_r+0x82>
 80057d4:	06dd      	lsls	r5, r3, #27
 80057d6:	d411      	bmi.n	80057fc <__swsetup_r+0x50>
 80057d8:	2309      	movs	r3, #9
 80057da:	6033      	str	r3, [r6, #0]
 80057dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	e03e      	b.n	8005866 <__swsetup_r+0xba>
 80057e8:	4b25      	ldr	r3, [pc, #148]	; (8005880 <__swsetup_r+0xd4>)
 80057ea:	429c      	cmp	r4, r3
 80057ec:	d101      	bne.n	80057f2 <__swsetup_r+0x46>
 80057ee:	68ac      	ldr	r4, [r5, #8]
 80057f0:	e7eb      	b.n	80057ca <__swsetup_r+0x1e>
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <__swsetup_r+0xd8>)
 80057f4:	429c      	cmp	r4, r3
 80057f6:	bf08      	it	eq
 80057f8:	68ec      	ldreq	r4, [r5, #12]
 80057fa:	e7e6      	b.n	80057ca <__swsetup_r+0x1e>
 80057fc:	0758      	lsls	r0, r3, #29
 80057fe:	d512      	bpl.n	8005826 <__swsetup_r+0x7a>
 8005800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005802:	b141      	cbz	r1, 8005816 <__swsetup_r+0x6a>
 8005804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005808:	4299      	cmp	r1, r3
 800580a:	d002      	beq.n	8005812 <__swsetup_r+0x66>
 800580c:	4630      	mov	r0, r6
 800580e:	f7ff fb37 	bl	8004e80 <_free_r>
 8005812:	2300      	movs	r3, #0
 8005814:	6363      	str	r3, [r4, #52]	; 0x34
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800581c:	81a3      	strh	r3, [r4, #12]
 800581e:	2300      	movs	r3, #0
 8005820:	6063      	str	r3, [r4, #4]
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	f043 0308 	orr.w	r3, r3, #8
 800582c:	81a3      	strh	r3, [r4, #12]
 800582e:	6923      	ldr	r3, [r4, #16]
 8005830:	b94b      	cbnz	r3, 8005846 <__swsetup_r+0x9a>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800583c:	d003      	beq.n	8005846 <__swsetup_r+0x9a>
 800583e:	4621      	mov	r1, r4
 8005840:	4630      	mov	r0, r6
 8005842:	f000 fa05 	bl	8005c50 <__smakebuf_r>
 8005846:	89a0      	ldrh	r0, [r4, #12]
 8005848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800584c:	f010 0301 	ands.w	r3, r0, #1
 8005850:	d00a      	beq.n	8005868 <__swsetup_r+0xbc>
 8005852:	2300      	movs	r3, #0
 8005854:	60a3      	str	r3, [r4, #8]
 8005856:	6963      	ldr	r3, [r4, #20]
 8005858:	425b      	negs	r3, r3
 800585a:	61a3      	str	r3, [r4, #24]
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	b943      	cbnz	r3, 8005872 <__swsetup_r+0xc6>
 8005860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005864:	d1ba      	bne.n	80057dc <__swsetup_r+0x30>
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	0781      	lsls	r1, r0, #30
 800586a:	bf58      	it	pl
 800586c:	6963      	ldrpl	r3, [r4, #20]
 800586e:	60a3      	str	r3, [r4, #8]
 8005870:	e7f4      	b.n	800585c <__swsetup_r+0xb0>
 8005872:	2000      	movs	r0, #0
 8005874:	e7f7      	b.n	8005866 <__swsetup_r+0xba>
 8005876:	bf00      	nop
 8005878:	2000000c 	.word	0x2000000c
 800587c:	080070ac 	.word	0x080070ac
 8005880:	080070cc 	.word	0x080070cc
 8005884:	0800708c 	.word	0x0800708c

08005888 <abort>:
 8005888:	2006      	movs	r0, #6
 800588a:	b508      	push	{r3, lr}
 800588c:	f000 fa50 	bl	8005d30 <raise>
 8005890:	2001      	movs	r0, #1
 8005892:	f7fc f967 	bl	8001b64 <_exit>
	...

08005898 <__sflush_r>:
 8005898:	898a      	ldrh	r2, [r1, #12]
 800589a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589c:	4605      	mov	r5, r0
 800589e:	0710      	lsls	r0, r2, #28
 80058a0:	460c      	mov	r4, r1
 80058a2:	d457      	bmi.n	8005954 <__sflush_r+0xbc>
 80058a4:	684b      	ldr	r3, [r1, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	dc04      	bgt.n	80058b4 <__sflush_r+0x1c>
 80058aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dc01      	bgt.n	80058b4 <__sflush_r+0x1c>
 80058b0:	2000      	movs	r0, #0
 80058b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	d0fa      	beq.n	80058b0 <__sflush_r+0x18>
 80058ba:	2300      	movs	r3, #0
 80058bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058c0:	682f      	ldr	r7, [r5, #0]
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	d032      	beq.n	800592c <__sflush_r+0x94>
 80058c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	075a      	lsls	r2, r3, #29
 80058cc:	d505      	bpl.n	80058da <__sflush_r+0x42>
 80058ce:	6863      	ldr	r3, [r4, #4]
 80058d0:	1ac0      	subs	r0, r0, r3
 80058d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058d4:	b10b      	cbz	r3, 80058da <__sflush_r+0x42>
 80058d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058d8:	1ac0      	subs	r0, r0, r3
 80058da:	2300      	movs	r3, #0
 80058dc:	4602      	mov	r2, r0
 80058de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058e0:	4628      	mov	r0, r5
 80058e2:	6a21      	ldr	r1, [r4, #32]
 80058e4:	47b0      	blx	r6
 80058e6:	1c43      	adds	r3, r0, #1
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	d106      	bne.n	80058fa <__sflush_r+0x62>
 80058ec:	6829      	ldr	r1, [r5, #0]
 80058ee:	291d      	cmp	r1, #29
 80058f0:	d82c      	bhi.n	800594c <__sflush_r+0xb4>
 80058f2:	4a29      	ldr	r2, [pc, #164]	; (8005998 <__sflush_r+0x100>)
 80058f4:	40ca      	lsrs	r2, r1
 80058f6:	07d6      	lsls	r6, r2, #31
 80058f8:	d528      	bpl.n	800594c <__sflush_r+0xb4>
 80058fa:	2200      	movs	r2, #0
 80058fc:	6062      	str	r2, [r4, #4]
 80058fe:	6922      	ldr	r2, [r4, #16]
 8005900:	04d9      	lsls	r1, r3, #19
 8005902:	6022      	str	r2, [r4, #0]
 8005904:	d504      	bpl.n	8005910 <__sflush_r+0x78>
 8005906:	1c42      	adds	r2, r0, #1
 8005908:	d101      	bne.n	800590e <__sflush_r+0x76>
 800590a:	682b      	ldr	r3, [r5, #0]
 800590c:	b903      	cbnz	r3, 8005910 <__sflush_r+0x78>
 800590e:	6560      	str	r0, [r4, #84]	; 0x54
 8005910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005912:	602f      	str	r7, [r5, #0]
 8005914:	2900      	cmp	r1, #0
 8005916:	d0cb      	beq.n	80058b0 <__sflush_r+0x18>
 8005918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800591c:	4299      	cmp	r1, r3
 800591e:	d002      	beq.n	8005926 <__sflush_r+0x8e>
 8005920:	4628      	mov	r0, r5
 8005922:	f7ff faad 	bl	8004e80 <_free_r>
 8005926:	2000      	movs	r0, #0
 8005928:	6360      	str	r0, [r4, #52]	; 0x34
 800592a:	e7c2      	b.n	80058b2 <__sflush_r+0x1a>
 800592c:	6a21      	ldr	r1, [r4, #32]
 800592e:	2301      	movs	r3, #1
 8005930:	4628      	mov	r0, r5
 8005932:	47b0      	blx	r6
 8005934:	1c41      	adds	r1, r0, #1
 8005936:	d1c7      	bne.n	80058c8 <__sflush_r+0x30>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0c4      	beq.n	80058c8 <__sflush_r+0x30>
 800593e:	2b1d      	cmp	r3, #29
 8005940:	d001      	beq.n	8005946 <__sflush_r+0xae>
 8005942:	2b16      	cmp	r3, #22
 8005944:	d101      	bne.n	800594a <__sflush_r+0xb2>
 8005946:	602f      	str	r7, [r5, #0]
 8005948:	e7b2      	b.n	80058b0 <__sflush_r+0x18>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005950:	81a3      	strh	r3, [r4, #12]
 8005952:	e7ae      	b.n	80058b2 <__sflush_r+0x1a>
 8005954:	690f      	ldr	r7, [r1, #16]
 8005956:	2f00      	cmp	r7, #0
 8005958:	d0aa      	beq.n	80058b0 <__sflush_r+0x18>
 800595a:	0793      	lsls	r3, r2, #30
 800595c:	bf18      	it	ne
 800595e:	2300      	movne	r3, #0
 8005960:	680e      	ldr	r6, [r1, #0]
 8005962:	bf08      	it	eq
 8005964:	694b      	ldreq	r3, [r1, #20]
 8005966:	1bf6      	subs	r6, r6, r7
 8005968:	600f      	str	r7, [r1, #0]
 800596a:	608b      	str	r3, [r1, #8]
 800596c:	2e00      	cmp	r6, #0
 800596e:	dd9f      	ble.n	80058b0 <__sflush_r+0x18>
 8005970:	4633      	mov	r3, r6
 8005972:	463a      	mov	r2, r7
 8005974:	4628      	mov	r0, r5
 8005976:	6a21      	ldr	r1, [r4, #32]
 8005978:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800597c:	47e0      	blx	ip
 800597e:	2800      	cmp	r0, #0
 8005980:	dc06      	bgt.n	8005990 <__sflush_r+0xf8>
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	e790      	b.n	80058b2 <__sflush_r+0x1a>
 8005990:	4407      	add	r7, r0
 8005992:	1a36      	subs	r6, r6, r0
 8005994:	e7ea      	b.n	800596c <__sflush_r+0xd4>
 8005996:	bf00      	nop
 8005998:	20400001 	.word	0x20400001

0800599c <_fflush_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	690b      	ldr	r3, [r1, #16]
 80059a0:	4605      	mov	r5, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	b913      	cbnz	r3, 80059ac <_fflush_r+0x10>
 80059a6:	2500      	movs	r5, #0
 80059a8:	4628      	mov	r0, r5
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	b118      	cbz	r0, 80059b6 <_fflush_r+0x1a>
 80059ae:	6983      	ldr	r3, [r0, #24]
 80059b0:	b90b      	cbnz	r3, 80059b6 <_fflush_r+0x1a>
 80059b2:	f000 f887 	bl	8005ac4 <__sinit>
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <_fflush_r+0x6c>)
 80059b8:	429c      	cmp	r4, r3
 80059ba:	d11b      	bne.n	80059f4 <_fflush_r+0x58>
 80059bc:	686c      	ldr	r4, [r5, #4]
 80059be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0ef      	beq.n	80059a6 <_fflush_r+0xa>
 80059c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059c8:	07d0      	lsls	r0, r2, #31
 80059ca:	d404      	bmi.n	80059d6 <_fflush_r+0x3a>
 80059cc:	0599      	lsls	r1, r3, #22
 80059ce:	d402      	bmi.n	80059d6 <_fflush_r+0x3a>
 80059d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059d2:	f000 f915 	bl	8005c00 <__retarget_lock_acquire_recursive>
 80059d6:	4628      	mov	r0, r5
 80059d8:	4621      	mov	r1, r4
 80059da:	f7ff ff5d 	bl	8005898 <__sflush_r>
 80059de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059e0:	4605      	mov	r5, r0
 80059e2:	07da      	lsls	r2, r3, #31
 80059e4:	d4e0      	bmi.n	80059a8 <_fflush_r+0xc>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	059b      	lsls	r3, r3, #22
 80059ea:	d4dd      	bmi.n	80059a8 <_fflush_r+0xc>
 80059ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ee:	f000 f908 	bl	8005c02 <__retarget_lock_release_recursive>
 80059f2:	e7d9      	b.n	80059a8 <_fflush_r+0xc>
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <_fflush_r+0x70>)
 80059f6:	429c      	cmp	r4, r3
 80059f8:	d101      	bne.n	80059fe <_fflush_r+0x62>
 80059fa:	68ac      	ldr	r4, [r5, #8]
 80059fc:	e7df      	b.n	80059be <_fflush_r+0x22>
 80059fe:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <_fflush_r+0x74>)
 8005a00:	429c      	cmp	r4, r3
 8005a02:	bf08      	it	eq
 8005a04:	68ec      	ldreq	r4, [r5, #12]
 8005a06:	e7da      	b.n	80059be <_fflush_r+0x22>
 8005a08:	080070ac 	.word	0x080070ac
 8005a0c:	080070cc 	.word	0x080070cc
 8005a10:	0800708c 	.word	0x0800708c

08005a14 <std>:
 8005a14:	2300      	movs	r3, #0
 8005a16:	b510      	push	{r4, lr}
 8005a18:	4604      	mov	r4, r0
 8005a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a22:	6083      	str	r3, [r0, #8]
 8005a24:	8181      	strh	r1, [r0, #12]
 8005a26:	6643      	str	r3, [r0, #100]	; 0x64
 8005a28:	81c2      	strh	r2, [r0, #14]
 8005a2a:	6183      	str	r3, [r0, #24]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	2208      	movs	r2, #8
 8005a30:	305c      	adds	r0, #92	; 0x5c
 8005a32:	f7fd fb63 	bl	80030fc <memset>
 8005a36:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <std+0x38>)
 8005a38:	6224      	str	r4, [r4, #32]
 8005a3a:	6263      	str	r3, [r4, #36]	; 0x24
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <std+0x3c>)
 8005a3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a40:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <std+0x40>)
 8005a42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a44:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <std+0x44>)
 8005a46:	6323      	str	r3, [r4, #48]	; 0x30
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	bf00      	nop
 8005a4c:	08005d69 	.word	0x08005d69
 8005a50:	08005d8b 	.word	0x08005d8b
 8005a54:	08005dc3 	.word	0x08005dc3
 8005a58:	08005de7 	.word	0x08005de7

08005a5c <_cleanup_r>:
 8005a5c:	4901      	ldr	r1, [pc, #4]	; (8005a64 <_cleanup_r+0x8>)
 8005a5e:	f000 b8af 	b.w	8005bc0 <_fwalk_reent>
 8005a62:	bf00      	nop
 8005a64:	0800599d 	.word	0x0800599d

08005a68 <__sfmoreglue>:
 8005a68:	2268      	movs	r2, #104	; 0x68
 8005a6a:	b570      	push	{r4, r5, r6, lr}
 8005a6c:	1e4d      	subs	r5, r1, #1
 8005a6e:	4355      	muls	r5, r2
 8005a70:	460e      	mov	r6, r1
 8005a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a76:	f7ff fa6b 	bl	8004f50 <_malloc_r>
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	b140      	cbz	r0, 8005a90 <__sfmoreglue+0x28>
 8005a7e:	2100      	movs	r1, #0
 8005a80:	e9c0 1600 	strd	r1, r6, [r0]
 8005a84:	300c      	adds	r0, #12
 8005a86:	60a0      	str	r0, [r4, #8]
 8005a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a8c:	f7fd fb36 	bl	80030fc <memset>
 8005a90:	4620      	mov	r0, r4
 8005a92:	bd70      	pop	{r4, r5, r6, pc}

08005a94 <__sfp_lock_acquire>:
 8005a94:	4801      	ldr	r0, [pc, #4]	; (8005a9c <__sfp_lock_acquire+0x8>)
 8005a96:	f000 b8b3 	b.w	8005c00 <__retarget_lock_acquire_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	20000265 	.word	0x20000265

08005aa0 <__sfp_lock_release>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__sfp_lock_release+0x8>)
 8005aa2:	f000 b8ae 	b.w	8005c02 <__retarget_lock_release_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	20000265 	.word	0x20000265

08005aac <__sinit_lock_acquire>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__sinit_lock_acquire+0x8>)
 8005aae:	f000 b8a7 	b.w	8005c00 <__retarget_lock_acquire_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	20000266 	.word	0x20000266

08005ab8 <__sinit_lock_release>:
 8005ab8:	4801      	ldr	r0, [pc, #4]	; (8005ac0 <__sinit_lock_release+0x8>)
 8005aba:	f000 b8a2 	b.w	8005c02 <__retarget_lock_release_recursive>
 8005abe:	bf00      	nop
 8005ac0:	20000266 	.word	0x20000266

08005ac4 <__sinit>:
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	f7ff fff0 	bl	8005aac <__sinit_lock_acquire>
 8005acc:	69a3      	ldr	r3, [r4, #24]
 8005ace:	b11b      	cbz	r3, 8005ad8 <__sinit+0x14>
 8005ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad4:	f7ff bff0 	b.w	8005ab8 <__sinit_lock_release>
 8005ad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005adc:	6523      	str	r3, [r4, #80]	; 0x50
 8005ade:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <__sinit+0x68>)
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <__sinit+0x6c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	bf08      	it	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	4620      	mov	r0, r4
 8005aee:	bf08      	it	eq
 8005af0:	61a3      	streq	r3, [r4, #24]
 8005af2:	f000 f81f 	bl	8005b34 <__sfp>
 8005af6:	6060      	str	r0, [r4, #4]
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 f81b 	bl	8005b34 <__sfp>
 8005afe:	60a0      	str	r0, [r4, #8]
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 f817 	bl	8005b34 <__sfp>
 8005b06:	2200      	movs	r2, #0
 8005b08:	2104      	movs	r1, #4
 8005b0a:	60e0      	str	r0, [r4, #12]
 8005b0c:	6860      	ldr	r0, [r4, #4]
 8005b0e:	f7ff ff81 	bl	8005a14 <std>
 8005b12:	2201      	movs	r2, #1
 8005b14:	2109      	movs	r1, #9
 8005b16:	68a0      	ldr	r0, [r4, #8]
 8005b18:	f7ff ff7c 	bl	8005a14 <std>
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	2112      	movs	r1, #18
 8005b20:	68e0      	ldr	r0, [r4, #12]
 8005b22:	f7ff ff77 	bl	8005a14 <std>
 8005b26:	2301      	movs	r3, #1
 8005b28:	61a3      	str	r3, [r4, #24]
 8005b2a:	e7d1      	b.n	8005ad0 <__sinit+0xc>
 8005b2c:	08006d14 	.word	0x08006d14
 8005b30:	08005a5d 	.word	0x08005a5d

08005b34 <__sfp>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	4607      	mov	r7, r0
 8005b38:	f7ff ffac 	bl	8005a94 <__sfp_lock_acquire>
 8005b3c:	4b1e      	ldr	r3, [pc, #120]	; (8005bb8 <__sfp+0x84>)
 8005b3e:	681e      	ldr	r6, [r3, #0]
 8005b40:	69b3      	ldr	r3, [r6, #24]
 8005b42:	b913      	cbnz	r3, 8005b4a <__sfp+0x16>
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff ffbd 	bl	8005ac4 <__sinit>
 8005b4a:	3648      	adds	r6, #72	; 0x48
 8005b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	d503      	bpl.n	8005b5c <__sfp+0x28>
 8005b54:	6833      	ldr	r3, [r6, #0]
 8005b56:	b30b      	cbz	r3, 8005b9c <__sfp+0x68>
 8005b58:	6836      	ldr	r6, [r6, #0]
 8005b5a:	e7f7      	b.n	8005b4c <__sfp+0x18>
 8005b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b60:	b9d5      	cbnz	r5, 8005b98 <__sfp+0x64>
 8005b62:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <__sfp+0x88>)
 8005b64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b68:	60e3      	str	r3, [r4, #12]
 8005b6a:	6665      	str	r5, [r4, #100]	; 0x64
 8005b6c:	f000 f847 	bl	8005bfe <__retarget_lock_init_recursive>
 8005b70:	f7ff ff96 	bl	8005aa0 <__sfp_lock_release>
 8005b74:	2208      	movs	r2, #8
 8005b76:	4629      	mov	r1, r5
 8005b78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b80:	6025      	str	r5, [r4, #0]
 8005b82:	61a5      	str	r5, [r4, #24]
 8005b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b88:	f7fd fab8 	bl	80030fc <memset>
 8005b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b94:	4620      	mov	r0, r4
 8005b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b98:	3468      	adds	r4, #104	; 0x68
 8005b9a:	e7d9      	b.n	8005b50 <__sfp+0x1c>
 8005b9c:	2104      	movs	r1, #4
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	f7ff ff62 	bl	8005a68 <__sfmoreglue>
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	6030      	str	r0, [r6, #0]
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d1d5      	bne.n	8005b58 <__sfp+0x24>
 8005bac:	f7ff ff78 	bl	8005aa0 <__sfp_lock_release>
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	e7ee      	b.n	8005b94 <__sfp+0x60>
 8005bb6:	bf00      	nop
 8005bb8:	08006d14 	.word	0x08006d14
 8005bbc:	ffff0001 	.word	0xffff0001

08005bc0 <_fwalk_reent>:
 8005bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	4688      	mov	r8, r1
 8005bc8:	2700      	movs	r7, #0
 8005bca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bd2:	f1b9 0901 	subs.w	r9, r9, #1
 8005bd6:	d505      	bpl.n	8005be4 <_fwalk_reent+0x24>
 8005bd8:	6824      	ldr	r4, [r4, #0]
 8005bda:	2c00      	cmp	r4, #0
 8005bdc:	d1f7      	bne.n	8005bce <_fwalk_reent+0xe>
 8005bde:	4638      	mov	r0, r7
 8005be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005be4:	89ab      	ldrh	r3, [r5, #12]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d907      	bls.n	8005bfa <_fwalk_reent+0x3a>
 8005bea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	d003      	beq.n	8005bfa <_fwalk_reent+0x3a>
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	47c0      	blx	r8
 8005bf8:	4307      	orrs	r7, r0
 8005bfa:	3568      	adds	r5, #104	; 0x68
 8005bfc:	e7e9      	b.n	8005bd2 <_fwalk_reent+0x12>

08005bfe <__retarget_lock_init_recursive>:
 8005bfe:	4770      	bx	lr

08005c00 <__retarget_lock_acquire_recursive>:
 8005c00:	4770      	bx	lr

08005c02 <__retarget_lock_release_recursive>:
 8005c02:	4770      	bx	lr

08005c04 <__swhatbuf_r>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	460e      	mov	r6, r1
 8005c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0c:	4614      	mov	r4, r2
 8005c0e:	2900      	cmp	r1, #0
 8005c10:	461d      	mov	r5, r3
 8005c12:	b096      	sub	sp, #88	; 0x58
 8005c14:	da08      	bge.n	8005c28 <__swhatbuf_r+0x24>
 8005c16:	2200      	movs	r2, #0
 8005c18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	061a      	lsls	r2, r3, #24
 8005c20:	d410      	bmi.n	8005c44 <__swhatbuf_r+0x40>
 8005c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c26:	e00e      	b.n	8005c46 <__swhatbuf_r+0x42>
 8005c28:	466a      	mov	r2, sp
 8005c2a:	f000 f903 	bl	8005e34 <_fstat_r>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	dbf1      	blt.n	8005c16 <__swhatbuf_r+0x12>
 8005c32:	9a01      	ldr	r2, [sp, #4]
 8005c34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c3c:	425a      	negs	r2, r3
 8005c3e:	415a      	adcs	r2, r3
 8005c40:	602a      	str	r2, [r5, #0]
 8005c42:	e7ee      	b.n	8005c22 <__swhatbuf_r+0x1e>
 8005c44:	2340      	movs	r3, #64	; 0x40
 8005c46:	2000      	movs	r0, #0
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	b016      	add	sp, #88	; 0x58
 8005c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c50 <__smakebuf_r>:
 8005c50:	898b      	ldrh	r3, [r1, #12]
 8005c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c54:	079d      	lsls	r5, r3, #30
 8005c56:	4606      	mov	r6, r0
 8005c58:	460c      	mov	r4, r1
 8005c5a:	d507      	bpl.n	8005c6c <__smakebuf_r+0x1c>
 8005c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	6123      	str	r3, [r4, #16]
 8005c64:	2301      	movs	r3, #1
 8005c66:	6163      	str	r3, [r4, #20]
 8005c68:	b002      	add	sp, #8
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	466a      	mov	r2, sp
 8005c6e:	ab01      	add	r3, sp, #4
 8005c70:	f7ff ffc8 	bl	8005c04 <__swhatbuf_r>
 8005c74:	9900      	ldr	r1, [sp, #0]
 8005c76:	4605      	mov	r5, r0
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f7ff f969 	bl	8004f50 <_malloc_r>
 8005c7e:	b948      	cbnz	r0, 8005c94 <__smakebuf_r+0x44>
 8005c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c84:	059a      	lsls	r2, r3, #22
 8005c86:	d4ef      	bmi.n	8005c68 <__smakebuf_r+0x18>
 8005c88:	f023 0303 	bic.w	r3, r3, #3
 8005c8c:	f043 0302 	orr.w	r3, r3, #2
 8005c90:	81a3      	strh	r3, [r4, #12]
 8005c92:	e7e3      	b.n	8005c5c <__smakebuf_r+0xc>
 8005c94:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <__smakebuf_r+0x7c>)
 8005c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	6020      	str	r0, [r4, #0]
 8005c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca0:	81a3      	strh	r3, [r4, #12]
 8005ca2:	9b00      	ldr	r3, [sp, #0]
 8005ca4:	6120      	str	r0, [r4, #16]
 8005ca6:	6163      	str	r3, [r4, #20]
 8005ca8:	9b01      	ldr	r3, [sp, #4]
 8005caa:	b15b      	cbz	r3, 8005cc4 <__smakebuf_r+0x74>
 8005cac:	4630      	mov	r0, r6
 8005cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cb2:	f000 f8d1 	bl	8005e58 <_isatty_r>
 8005cb6:	b128      	cbz	r0, 8005cc4 <__smakebuf_r+0x74>
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	89a0      	ldrh	r0, [r4, #12]
 8005cc6:	4305      	orrs	r5, r0
 8005cc8:	81a5      	strh	r5, [r4, #12]
 8005cca:	e7cd      	b.n	8005c68 <__smakebuf_r+0x18>
 8005ccc:	08005a5d 	.word	0x08005a5d

08005cd0 <_malloc_usable_size_r>:
 8005cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cd4:	1f18      	subs	r0, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bfbc      	itt	lt
 8005cda:	580b      	ldrlt	r3, [r1, r0]
 8005cdc:	18c0      	addlt	r0, r0, r3
 8005cde:	4770      	bx	lr

08005ce0 <_raise_r>:
 8005ce0:	291f      	cmp	r1, #31
 8005ce2:	b538      	push	{r3, r4, r5, lr}
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	460d      	mov	r5, r1
 8005ce8:	d904      	bls.n	8005cf4 <_raise_r+0x14>
 8005cea:	2316      	movs	r3, #22
 8005cec:	6003      	str	r3, [r0, #0]
 8005cee:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005cf6:	b112      	cbz	r2, 8005cfe <_raise_r+0x1e>
 8005cf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cfc:	b94b      	cbnz	r3, 8005d12 <_raise_r+0x32>
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 f830 	bl	8005d64 <_getpid_r>
 8005d04:	462a      	mov	r2, r5
 8005d06:	4601      	mov	r1, r0
 8005d08:	4620      	mov	r0, r4
 8005d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d0e:	f000 b817 	b.w	8005d40 <_kill_r>
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d00a      	beq.n	8005d2c <_raise_r+0x4c>
 8005d16:	1c59      	adds	r1, r3, #1
 8005d18:	d103      	bne.n	8005d22 <_raise_r+0x42>
 8005d1a:	2316      	movs	r3, #22
 8005d1c:	6003      	str	r3, [r0, #0]
 8005d1e:	2001      	movs	r0, #1
 8005d20:	e7e7      	b.n	8005cf2 <_raise_r+0x12>
 8005d22:	2400      	movs	r4, #0
 8005d24:	4628      	mov	r0, r5
 8005d26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d2a:	4798      	blx	r3
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	e7e0      	b.n	8005cf2 <_raise_r+0x12>

08005d30 <raise>:
 8005d30:	4b02      	ldr	r3, [pc, #8]	; (8005d3c <raise+0xc>)
 8005d32:	4601      	mov	r1, r0
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	f7ff bfd3 	b.w	8005ce0 <_raise_r>
 8005d3a:	bf00      	nop
 8005d3c:	2000000c 	.word	0x2000000c

08005d40 <_kill_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	2300      	movs	r3, #0
 8005d44:	4d06      	ldr	r5, [pc, #24]	; (8005d60 <_kill_r+0x20>)
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	602b      	str	r3, [r5, #0]
 8005d4e:	f7fb fef9 	bl	8001b44 <_kill>
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	d102      	bne.n	8005d5c <_kill_r+0x1c>
 8005d56:	682b      	ldr	r3, [r5, #0]
 8005d58:	b103      	cbz	r3, 8005d5c <_kill_r+0x1c>
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	bd38      	pop	{r3, r4, r5, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000260 	.word	0x20000260

08005d64 <_getpid_r>:
 8005d64:	f7fb bee7 	b.w	8001b36 <_getpid>

08005d68 <__sread>:
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d70:	f000 f894 	bl	8005e9c <_read_r>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	bfab      	itete	ge
 8005d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d7c:	181b      	addge	r3, r3, r0
 8005d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d82:	bfac      	ite	ge
 8005d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d86:	81a3      	strhlt	r3, [r4, #12]
 8005d88:	bd10      	pop	{r4, pc}

08005d8a <__swrite>:
 8005d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8e:	461f      	mov	r7, r3
 8005d90:	898b      	ldrh	r3, [r1, #12]
 8005d92:	4605      	mov	r5, r0
 8005d94:	05db      	lsls	r3, r3, #23
 8005d96:	460c      	mov	r4, r1
 8005d98:	4616      	mov	r6, r2
 8005d9a:	d505      	bpl.n	8005da8 <__swrite+0x1e>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da4:	f000 f868 	bl	8005e78 <_lseek_r>
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	4632      	mov	r2, r6
 8005dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005db0:	81a3      	strh	r3, [r4, #12]
 8005db2:	4628      	mov	r0, r5
 8005db4:	463b      	mov	r3, r7
 8005db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbe:	f000 b817 	b.w	8005df0 <_write_r>

08005dc2 <__sseek>:
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dca:	f000 f855 	bl	8005e78 <_lseek_r>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	bf15      	itete	ne
 8005dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dde:	81a3      	strheq	r3, [r4, #12]
 8005de0:	bf18      	it	ne
 8005de2:	81a3      	strhne	r3, [r4, #12]
 8005de4:	bd10      	pop	{r4, pc}

08005de6 <__sclose>:
 8005de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dea:	f000 b813 	b.w	8005e14 <_close_r>
	...

08005df0 <_write_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4604      	mov	r4, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	4611      	mov	r1, r2
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4d05      	ldr	r5, [pc, #20]	; (8005e10 <_write_r+0x20>)
 8005dfc:	602a      	str	r2, [r5, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f7fb fed7 	bl	8001bb2 <_write>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d102      	bne.n	8005e0e <_write_r+0x1e>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	b103      	cbz	r3, 8005e0e <_write_r+0x1e>
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	bd38      	pop	{r3, r4, r5, pc}
 8005e10:	20000260 	.word	0x20000260

08005e14 <_close_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	2300      	movs	r3, #0
 8005e18:	4d05      	ldr	r5, [pc, #20]	; (8005e30 <_close_r+0x1c>)
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	602b      	str	r3, [r5, #0]
 8005e20:	f7fb fee3 	bl	8001bea <_close>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d102      	bne.n	8005e2e <_close_r+0x1a>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	b103      	cbz	r3, 8005e2e <_close_r+0x1a>
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	20000260 	.word	0x20000260

08005e34 <_fstat_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	2300      	movs	r3, #0
 8005e38:	4d06      	ldr	r5, [pc, #24]	; (8005e54 <_fstat_r+0x20>)
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	602b      	str	r3, [r5, #0]
 8005e42:	f7fb fedd 	bl	8001c00 <_fstat>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	d102      	bne.n	8005e50 <_fstat_r+0x1c>
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	b103      	cbz	r3, 8005e50 <_fstat_r+0x1c>
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	bd38      	pop	{r3, r4, r5, pc}
 8005e52:	bf00      	nop
 8005e54:	20000260 	.word	0x20000260

08005e58 <_isatty_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	4d05      	ldr	r5, [pc, #20]	; (8005e74 <_isatty_r+0x1c>)
 8005e5e:	4604      	mov	r4, r0
 8005e60:	4608      	mov	r0, r1
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	f7fb fedb 	bl	8001c1e <_isatty>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_isatty_r+0x1a>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_isatty_r+0x1a>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	20000260 	.word	0x20000260

08005e78 <_lseek_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	2200      	movs	r2, #0
 8005e82:	4d05      	ldr	r5, [pc, #20]	; (8005e98 <_lseek_r+0x20>)
 8005e84:	602a      	str	r2, [r5, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f7fb fed3 	bl	8001c32 <_lseek>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_lseek_r+0x1e>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_lseek_r+0x1e>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	20000260 	.word	0x20000260

08005e9c <_read_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4d05      	ldr	r5, [pc, #20]	; (8005ebc <_read_r+0x20>)
 8005ea8:	602a      	str	r2, [r5, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f7fb fe64 	bl	8001b78 <_read>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_read_r+0x1e>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_read_r+0x1e>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	20000260 	.word	0x20000260

08005ec0 <pow>:
 8005ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	461d      	mov	r5, r3
 8005ec8:	4680      	mov	r8, r0
 8005eca:	4689      	mov	r9, r1
 8005ecc:	f000 f860 	bl	8005f90 <__ieee754_pow>
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	460f      	mov	r7, r1
 8005ed6:	462b      	mov	r3, r5
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4629      	mov	r1, r5
 8005edc:	f7fa fe4a 	bl	8000b74 <__aeabi_dcmpun>
 8005ee0:	bbc8      	cbnz	r0, 8005f56 <pow+0x96>
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	4649      	mov	r1, r9
 8005eea:	f7fa fe11 	bl	8000b10 <__aeabi_dcmpeq>
 8005eee:	b1b8      	cbz	r0, 8005f20 <pow+0x60>
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	f7fa fe0a 	bl	8000b10 <__aeabi_dcmpeq>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d141      	bne.n	8005f84 <pow+0xc4>
 8005f00:	4620      	mov	r0, r4
 8005f02:	4629      	mov	r1, r5
 8005f04:	f000 fe39 	bl	8006b7a <finite>
 8005f08:	b328      	cbz	r0, 8005f56 <pow+0x96>
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4620      	mov	r0, r4
 8005f10:	4629      	mov	r1, r5
 8005f12:	f7fa fe07 	bl	8000b24 <__aeabi_dcmplt>
 8005f16:	b1f0      	cbz	r0, 8005f56 <pow+0x96>
 8005f18:	f7fd f8c6 	bl	80030a8 <__errno>
 8005f1c:	2322      	movs	r3, #34	; 0x22
 8005f1e:	e019      	b.n	8005f54 <pow+0x94>
 8005f20:	4630      	mov	r0, r6
 8005f22:	4639      	mov	r1, r7
 8005f24:	f000 fe29 	bl	8006b7a <finite>
 8005f28:	b9c8      	cbnz	r0, 8005f5e <pow+0x9e>
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	f000 fe24 	bl	8006b7a <finite>
 8005f32:	b1a0      	cbz	r0, 8005f5e <pow+0x9e>
 8005f34:	4620      	mov	r0, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	f000 fe1f 	bl	8006b7a <finite>
 8005f3c:	b178      	cbz	r0, 8005f5e <pow+0x9e>
 8005f3e:	4632      	mov	r2, r6
 8005f40:	463b      	mov	r3, r7
 8005f42:	4630      	mov	r0, r6
 8005f44:	4639      	mov	r1, r7
 8005f46:	f7fa fe15 	bl	8000b74 <__aeabi_dcmpun>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d0e4      	beq.n	8005f18 <pow+0x58>
 8005f4e:	f7fd f8ab 	bl	80030a8 <__errno>
 8005f52:	2321      	movs	r3, #33	; 0x21
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	4630      	mov	r0, r6
 8005f58:	4639      	mov	r1, r7
 8005f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2300      	movs	r3, #0
 8005f62:	4630      	mov	r0, r6
 8005f64:	4639      	mov	r1, r7
 8005f66:	f7fa fdd3 	bl	8000b10 <__aeabi_dcmpeq>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d0f3      	beq.n	8005f56 <pow+0x96>
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4649      	mov	r1, r9
 8005f72:	f000 fe02 	bl	8006b7a <finite>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	d0ed      	beq.n	8005f56 <pow+0x96>
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f000 fdfc 	bl	8006b7a <finite>
 8005f82:	e7c8      	b.n	8005f16 <pow+0x56>
 8005f84:	2600      	movs	r6, #0
 8005f86:	4f01      	ldr	r7, [pc, #4]	; (8005f8c <pow+0xcc>)
 8005f88:	e7e5      	b.n	8005f56 <pow+0x96>
 8005f8a:	bf00      	nop
 8005f8c:	3ff00000 	.word	0x3ff00000

08005f90 <__ieee754_pow>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	b093      	sub	sp, #76	; 0x4c
 8005f96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f9a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005f9e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005fa2:	4689      	mov	r9, r1
 8005fa4:	ea56 0102 	orrs.w	r1, r6, r2
 8005fa8:	4680      	mov	r8, r0
 8005faa:	d111      	bne.n	8005fd0 <__ieee754_pow+0x40>
 8005fac:	1803      	adds	r3, r0, r0
 8005fae:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8005fb2:	4152      	adcs	r2, r2
 8005fb4:	4299      	cmp	r1, r3
 8005fb6:	4b82      	ldr	r3, [pc, #520]	; (80061c0 <__ieee754_pow+0x230>)
 8005fb8:	4193      	sbcs	r3, r2
 8005fba:	f080 84b9 	bcs.w	8006930 <__ieee754_pow+0x9a0>
 8005fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	f7fa f985 	bl	80002d4 <__adddf3>
 8005fca:	4683      	mov	fp, r0
 8005fcc:	468c      	mov	ip, r1
 8005fce:	e06f      	b.n	80060b0 <__ieee754_pow+0x120>
 8005fd0:	4b7c      	ldr	r3, [pc, #496]	; (80061c4 <__ieee754_pow+0x234>)
 8005fd2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	464d      	mov	r5, r9
 8005fda:	4682      	mov	sl, r0
 8005fdc:	dc06      	bgt.n	8005fec <__ieee754_pow+0x5c>
 8005fde:	d101      	bne.n	8005fe4 <__ieee754_pow+0x54>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d1ec      	bne.n	8005fbe <__ieee754_pow+0x2e>
 8005fe4:	429e      	cmp	r6, r3
 8005fe6:	dc01      	bgt.n	8005fec <__ieee754_pow+0x5c>
 8005fe8:	d10f      	bne.n	800600a <__ieee754_pow+0x7a>
 8005fea:	b172      	cbz	r2, 800600a <__ieee754_pow+0x7a>
 8005fec:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005ff0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005ff4:	ea55 050a 	orrs.w	r5, r5, sl
 8005ff8:	d1e1      	bne.n	8005fbe <__ieee754_pow+0x2e>
 8005ffa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005ffe:	18db      	adds	r3, r3, r3
 8006000:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006004:	4152      	adcs	r2, r2
 8006006:	429d      	cmp	r5, r3
 8006008:	e7d5      	b.n	8005fb6 <__ieee754_pow+0x26>
 800600a:	2d00      	cmp	r5, #0
 800600c:	da39      	bge.n	8006082 <__ieee754_pow+0xf2>
 800600e:	4b6e      	ldr	r3, [pc, #440]	; (80061c8 <__ieee754_pow+0x238>)
 8006010:	429e      	cmp	r6, r3
 8006012:	dc52      	bgt.n	80060ba <__ieee754_pow+0x12a>
 8006014:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006018:	429e      	cmp	r6, r3
 800601a:	f340 849c 	ble.w	8006956 <__ieee754_pow+0x9c6>
 800601e:	1533      	asrs	r3, r6, #20
 8006020:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006024:	2b14      	cmp	r3, #20
 8006026:	dd0f      	ble.n	8006048 <__ieee754_pow+0xb8>
 8006028:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800602c:	fa22 f103 	lsr.w	r1, r2, r3
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	4293      	cmp	r3, r2
 8006036:	f040 848e 	bne.w	8006956 <__ieee754_pow+0x9c6>
 800603a:	f001 0101 	and.w	r1, r1, #1
 800603e:	f1c1 0302 	rsb	r3, r1, #2
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	b182      	cbz	r2, 8006068 <__ieee754_pow+0xd8>
 8006046:	e05d      	b.n	8006104 <__ieee754_pow+0x174>
 8006048:	2a00      	cmp	r2, #0
 800604a:	d159      	bne.n	8006100 <__ieee754_pow+0x170>
 800604c:	f1c3 0314 	rsb	r3, r3, #20
 8006050:	fa46 f103 	asr.w	r1, r6, r3
 8006054:	fa01 f303 	lsl.w	r3, r1, r3
 8006058:	42b3      	cmp	r3, r6
 800605a:	f040 8479 	bne.w	8006950 <__ieee754_pow+0x9c0>
 800605e:	f001 0101 	and.w	r1, r1, #1
 8006062:	f1c1 0302 	rsb	r3, r1, #2
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	4b58      	ldr	r3, [pc, #352]	; (80061cc <__ieee754_pow+0x23c>)
 800606a:	429e      	cmp	r6, r3
 800606c:	d132      	bne.n	80060d4 <__ieee754_pow+0x144>
 800606e:	2f00      	cmp	r7, #0
 8006070:	f280 846a 	bge.w	8006948 <__ieee754_pow+0x9b8>
 8006074:	4642      	mov	r2, r8
 8006076:	464b      	mov	r3, r9
 8006078:	2000      	movs	r0, #0
 800607a:	4954      	ldr	r1, [pc, #336]	; (80061cc <__ieee754_pow+0x23c>)
 800607c:	f7fa fc0a 	bl	8000894 <__aeabi_ddiv>
 8006080:	e7a3      	b.n	8005fca <__ieee754_pow+0x3a>
 8006082:	2300      	movs	r3, #0
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	2a00      	cmp	r2, #0
 8006088:	d13c      	bne.n	8006104 <__ieee754_pow+0x174>
 800608a:	4b4e      	ldr	r3, [pc, #312]	; (80061c4 <__ieee754_pow+0x234>)
 800608c:	429e      	cmp	r6, r3
 800608e:	d1eb      	bne.n	8006068 <__ieee754_pow+0xd8>
 8006090:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006094:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006098:	ea53 030a 	orrs.w	r3, r3, sl
 800609c:	f000 8448 	beq.w	8006930 <__ieee754_pow+0x9a0>
 80060a0:	4b4b      	ldr	r3, [pc, #300]	; (80061d0 <__ieee754_pow+0x240>)
 80060a2:	429c      	cmp	r4, r3
 80060a4:	dd0b      	ble.n	80060be <__ieee754_pow+0x12e>
 80060a6:	2f00      	cmp	r7, #0
 80060a8:	f2c0 8448 	blt.w	800693c <__ieee754_pow+0x9ac>
 80060ac:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80060b0:	4658      	mov	r0, fp
 80060b2:	4661      	mov	r1, ip
 80060b4:	b013      	add	sp, #76	; 0x4c
 80060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	2302      	movs	r3, #2
 80060bc:	e7e2      	b.n	8006084 <__ieee754_pow+0xf4>
 80060be:	2f00      	cmp	r7, #0
 80060c0:	f04f 0b00 	mov.w	fp, #0
 80060c4:	f04f 0c00 	mov.w	ip, #0
 80060c8:	daf2      	bge.n	80060b0 <__ieee754_pow+0x120>
 80060ca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80060ce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80060d2:	e7ed      	b.n	80060b0 <__ieee754_pow+0x120>
 80060d4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80060d8:	d106      	bne.n	80060e8 <__ieee754_pow+0x158>
 80060da:	4642      	mov	r2, r8
 80060dc:	464b      	mov	r3, r9
 80060de:	4640      	mov	r0, r8
 80060e0:	4649      	mov	r1, r9
 80060e2:	f7fa faad 	bl	8000640 <__aeabi_dmul>
 80060e6:	e770      	b.n	8005fca <__ieee754_pow+0x3a>
 80060e8:	4b3a      	ldr	r3, [pc, #232]	; (80061d4 <__ieee754_pow+0x244>)
 80060ea:	429f      	cmp	r7, r3
 80060ec:	d10a      	bne.n	8006104 <__ieee754_pow+0x174>
 80060ee:	2d00      	cmp	r5, #0
 80060f0:	db08      	blt.n	8006104 <__ieee754_pow+0x174>
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	b013      	add	sp, #76	; 0x4c
 80060f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	f000 bc5e 	b.w	80069bc <__ieee754_sqrt>
 8006100:	2300      	movs	r3, #0
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	4640      	mov	r0, r8
 8006106:	4649      	mov	r1, r9
 8006108:	f000 fd34 	bl	8006b74 <fabs>
 800610c:	4683      	mov	fp, r0
 800610e:	468c      	mov	ip, r1
 8006110:	f1ba 0f00 	cmp.w	sl, #0
 8006114:	d128      	bne.n	8006168 <__ieee754_pow+0x1d8>
 8006116:	b124      	cbz	r4, 8006122 <__ieee754_pow+0x192>
 8006118:	4b2c      	ldr	r3, [pc, #176]	; (80061cc <__ieee754_pow+0x23c>)
 800611a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800611e:	429a      	cmp	r2, r3
 8006120:	d122      	bne.n	8006168 <__ieee754_pow+0x1d8>
 8006122:	2f00      	cmp	r7, #0
 8006124:	da07      	bge.n	8006136 <__ieee754_pow+0x1a6>
 8006126:	465a      	mov	r2, fp
 8006128:	4663      	mov	r3, ip
 800612a:	2000      	movs	r0, #0
 800612c:	4927      	ldr	r1, [pc, #156]	; (80061cc <__ieee754_pow+0x23c>)
 800612e:	f7fa fbb1 	bl	8000894 <__aeabi_ddiv>
 8006132:	4683      	mov	fp, r0
 8006134:	468c      	mov	ip, r1
 8006136:	2d00      	cmp	r5, #0
 8006138:	daba      	bge.n	80060b0 <__ieee754_pow+0x120>
 800613a:	9b00      	ldr	r3, [sp, #0]
 800613c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006140:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006144:	4323      	orrs	r3, r4
 8006146:	d108      	bne.n	800615a <__ieee754_pow+0x1ca>
 8006148:	465a      	mov	r2, fp
 800614a:	4663      	mov	r3, ip
 800614c:	4658      	mov	r0, fp
 800614e:	4661      	mov	r1, ip
 8006150:	f7fa f8be 	bl	80002d0 <__aeabi_dsub>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	e790      	b.n	800607c <__ieee754_pow+0xec>
 800615a:	9b00      	ldr	r3, [sp, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d1a7      	bne.n	80060b0 <__ieee754_pow+0x120>
 8006160:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006164:	469c      	mov	ip, r3
 8006166:	e7a3      	b.n	80060b0 <__ieee754_pow+0x120>
 8006168:	0feb      	lsrs	r3, r5, #31
 800616a:	3b01      	subs	r3, #1
 800616c:	930c      	str	r3, [sp, #48]	; 0x30
 800616e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006170:	9b00      	ldr	r3, [sp, #0]
 8006172:	4313      	orrs	r3, r2
 8006174:	d104      	bne.n	8006180 <__ieee754_pow+0x1f0>
 8006176:	4642      	mov	r2, r8
 8006178:	464b      	mov	r3, r9
 800617a:	4640      	mov	r0, r8
 800617c:	4649      	mov	r1, r9
 800617e:	e7e7      	b.n	8006150 <__ieee754_pow+0x1c0>
 8006180:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <__ieee754_pow+0x248>)
 8006182:	429e      	cmp	r6, r3
 8006184:	f340 80f6 	ble.w	8006374 <__ieee754_pow+0x3e4>
 8006188:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800618c:	429e      	cmp	r6, r3
 800618e:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <__ieee754_pow+0x240>)
 8006190:	dd09      	ble.n	80061a6 <__ieee754_pow+0x216>
 8006192:	429c      	cmp	r4, r3
 8006194:	dc0c      	bgt.n	80061b0 <__ieee754_pow+0x220>
 8006196:	2f00      	cmp	r7, #0
 8006198:	da0c      	bge.n	80061b4 <__ieee754_pow+0x224>
 800619a:	2000      	movs	r0, #0
 800619c:	b013      	add	sp, #76	; 0x4c
 800619e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a2:	f000 bce2 	b.w	8006b6a <__math_oflow>
 80061a6:	429c      	cmp	r4, r3
 80061a8:	dbf5      	blt.n	8006196 <__ieee754_pow+0x206>
 80061aa:	4b08      	ldr	r3, [pc, #32]	; (80061cc <__ieee754_pow+0x23c>)
 80061ac:	429c      	cmp	r4, r3
 80061ae:	dd15      	ble.n	80061dc <__ieee754_pow+0x24c>
 80061b0:	2f00      	cmp	r7, #0
 80061b2:	dcf2      	bgt.n	800619a <__ieee754_pow+0x20a>
 80061b4:	2000      	movs	r0, #0
 80061b6:	b013      	add	sp, #76	; 0x4c
 80061b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	f000 bcd0 	b.w	8006b60 <__math_uflow>
 80061c0:	fff00000 	.word	0xfff00000
 80061c4:	7ff00000 	.word	0x7ff00000
 80061c8:	433fffff 	.word	0x433fffff
 80061cc:	3ff00000 	.word	0x3ff00000
 80061d0:	3fefffff 	.word	0x3fefffff
 80061d4:	3fe00000 	.word	0x3fe00000
 80061d8:	41e00000 	.word	0x41e00000
 80061dc:	4661      	mov	r1, ip
 80061de:	2200      	movs	r2, #0
 80061e0:	4658      	mov	r0, fp
 80061e2:	4b5f      	ldr	r3, [pc, #380]	; (8006360 <__ieee754_pow+0x3d0>)
 80061e4:	f7fa f874 	bl	80002d0 <__aeabi_dsub>
 80061e8:	a355      	add	r3, pc, #340	; (adr r3, 8006340 <__ieee754_pow+0x3b0>)
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	4604      	mov	r4, r0
 80061f0:	460d      	mov	r5, r1
 80061f2:	f7fa fa25 	bl	8000640 <__aeabi_dmul>
 80061f6:	a354      	add	r3, pc, #336	; (adr r3, 8006348 <__ieee754_pow+0x3b8>)
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	4606      	mov	r6, r0
 80061fe:	460f      	mov	r7, r1
 8006200:	4620      	mov	r0, r4
 8006202:	4629      	mov	r1, r5
 8006204:	f7fa fa1c 	bl	8000640 <__aeabi_dmul>
 8006208:	2200      	movs	r2, #0
 800620a:	4682      	mov	sl, r0
 800620c:	468b      	mov	fp, r1
 800620e:	4620      	mov	r0, r4
 8006210:	4629      	mov	r1, r5
 8006212:	4b54      	ldr	r3, [pc, #336]	; (8006364 <__ieee754_pow+0x3d4>)
 8006214:	f7fa fa14 	bl	8000640 <__aeabi_dmul>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	a14c      	add	r1, pc, #304	; (adr r1, 8006350 <__ieee754_pow+0x3c0>)
 800621e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006222:	f7fa f855 	bl	80002d0 <__aeabi_dsub>
 8006226:	4622      	mov	r2, r4
 8006228:	462b      	mov	r3, r5
 800622a:	f7fa fa09 	bl	8000640 <__aeabi_dmul>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	2000      	movs	r0, #0
 8006234:	494c      	ldr	r1, [pc, #304]	; (8006368 <__ieee754_pow+0x3d8>)
 8006236:	f7fa f84b 	bl	80002d0 <__aeabi_dsub>
 800623a:	4622      	mov	r2, r4
 800623c:	462b      	mov	r3, r5
 800623e:	4680      	mov	r8, r0
 8006240:	4689      	mov	r9, r1
 8006242:	4620      	mov	r0, r4
 8006244:	4629      	mov	r1, r5
 8006246:	f7fa f9fb 	bl	8000640 <__aeabi_dmul>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4640      	mov	r0, r8
 8006250:	4649      	mov	r1, r9
 8006252:	f7fa f9f5 	bl	8000640 <__aeabi_dmul>
 8006256:	a340      	add	r3, pc, #256	; (adr r3, 8006358 <__ieee754_pow+0x3c8>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fa f9f0 	bl	8000640 <__aeabi_dmul>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4650      	mov	r0, sl
 8006266:	4659      	mov	r1, fp
 8006268:	f7fa f832 	bl	80002d0 <__aeabi_dsub>
 800626c:	f04f 0a00 	mov.w	sl, #0
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4604      	mov	r4, r0
 8006276:	460d      	mov	r5, r1
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	f7fa f82a 	bl	80002d4 <__adddf3>
 8006280:	4632      	mov	r2, r6
 8006282:	463b      	mov	r3, r7
 8006284:	4650      	mov	r0, sl
 8006286:	468b      	mov	fp, r1
 8006288:	f7fa f822 	bl	80002d0 <__aeabi_dsub>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7fa f81c 	bl	80002d0 <__aeabi_dsub>
 8006298:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800629c:	9b00      	ldr	r3, [sp, #0]
 800629e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062a0:	3b01      	subs	r3, #1
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f04f 0600 	mov.w	r6, #0
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	bf0c      	ite	eq
 80062ae:	4b2f      	ldreq	r3, [pc, #188]	; (800636c <__ieee754_pow+0x3dc>)
 80062b0:	4b2b      	ldrne	r3, [pc, #172]	; (8006360 <__ieee754_pow+0x3d0>)
 80062b2:	4604      	mov	r4, r0
 80062b4:	460d      	mov	r5, r1
 80062b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ba:	e9cd 2300 	strd	r2, r3, [sp]
 80062be:	4632      	mov	r2, r6
 80062c0:	463b      	mov	r3, r7
 80062c2:	f7fa f805 	bl	80002d0 <__aeabi_dsub>
 80062c6:	4652      	mov	r2, sl
 80062c8:	465b      	mov	r3, fp
 80062ca:	f7fa f9b9 	bl	8000640 <__aeabi_dmul>
 80062ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062d2:	4680      	mov	r8, r0
 80062d4:	4689      	mov	r9, r1
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7fa f9b1 	bl	8000640 <__aeabi_dmul>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7f9 fff5 	bl	80002d4 <__adddf3>
 80062ea:	4632      	mov	r2, r6
 80062ec:	463b      	mov	r3, r7
 80062ee:	4680      	mov	r8, r0
 80062f0:	4689      	mov	r9, r1
 80062f2:	4650      	mov	r0, sl
 80062f4:	4659      	mov	r1, fp
 80062f6:	f7fa f9a3 	bl	8000640 <__aeabi_dmul>
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	460b      	mov	r3, r1
 8006300:	4602      	mov	r2, r0
 8006302:	4649      	mov	r1, r9
 8006304:	4640      	mov	r0, r8
 8006306:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800630a:	f7f9 ffe3 	bl	80002d4 <__adddf3>
 800630e:	4b18      	ldr	r3, [pc, #96]	; (8006370 <__ieee754_pow+0x3e0>)
 8006310:	4682      	mov	sl, r0
 8006312:	4299      	cmp	r1, r3
 8006314:	460f      	mov	r7, r1
 8006316:	460e      	mov	r6, r1
 8006318:	f340 82e5 	ble.w	80068e6 <__ieee754_pow+0x956>
 800631c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006320:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006324:	4303      	orrs	r3, r0
 8006326:	f000 81df 	beq.w	80066e8 <__ieee754_pow+0x758>
 800632a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800632e:	2200      	movs	r2, #0
 8006330:	2300      	movs	r3, #0
 8006332:	f7fa fbf7 	bl	8000b24 <__aeabi_dcmplt>
 8006336:	3800      	subs	r0, #0
 8006338:	bf18      	it	ne
 800633a:	2001      	movne	r0, #1
 800633c:	e72e      	b.n	800619c <__ieee754_pow+0x20c>
 800633e:	bf00      	nop
 8006340:	60000000 	.word	0x60000000
 8006344:	3ff71547 	.word	0x3ff71547
 8006348:	f85ddf44 	.word	0xf85ddf44
 800634c:	3e54ae0b 	.word	0x3e54ae0b
 8006350:	55555555 	.word	0x55555555
 8006354:	3fd55555 	.word	0x3fd55555
 8006358:	652b82fe 	.word	0x652b82fe
 800635c:	3ff71547 	.word	0x3ff71547
 8006360:	3ff00000 	.word	0x3ff00000
 8006364:	3fd00000 	.word	0x3fd00000
 8006368:	3fe00000 	.word	0x3fe00000
 800636c:	bff00000 	.word	0xbff00000
 8006370:	408fffff 	.word	0x408fffff
 8006374:	4bd2      	ldr	r3, [pc, #840]	; (80066c0 <__ieee754_pow+0x730>)
 8006376:	2200      	movs	r2, #0
 8006378:	402b      	ands	r3, r5
 800637a:	b943      	cbnz	r3, 800638e <__ieee754_pow+0x3fe>
 800637c:	4658      	mov	r0, fp
 800637e:	4661      	mov	r1, ip
 8006380:	4bd0      	ldr	r3, [pc, #832]	; (80066c4 <__ieee754_pow+0x734>)
 8006382:	f7fa f95d 	bl	8000640 <__aeabi_dmul>
 8006386:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800638a:	4683      	mov	fp, r0
 800638c:	460c      	mov	r4, r1
 800638e:	1523      	asrs	r3, r4, #20
 8006390:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006394:	4413      	add	r3, r2
 8006396:	930b      	str	r3, [sp, #44]	; 0x2c
 8006398:	4bcb      	ldr	r3, [pc, #812]	; (80066c8 <__ieee754_pow+0x738>)
 800639a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800639e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80063a2:	429c      	cmp	r4, r3
 80063a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80063a8:	dd08      	ble.n	80063bc <__ieee754_pow+0x42c>
 80063aa:	4bc8      	ldr	r3, [pc, #800]	; (80066cc <__ieee754_pow+0x73c>)
 80063ac:	429c      	cmp	r4, r3
 80063ae:	f340 8199 	ble.w	80066e4 <__ieee754_pow+0x754>
 80063b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80063b8:	3301      	adds	r3, #1
 80063ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80063bc:	2600      	movs	r6, #0
 80063be:	00f3      	lsls	r3, r6, #3
 80063c0:	930d      	str	r3, [sp, #52]	; 0x34
 80063c2:	4bc3      	ldr	r3, [pc, #780]	; (80066d0 <__ieee754_pow+0x740>)
 80063c4:	4658      	mov	r0, fp
 80063c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063ce:	4629      	mov	r1, r5
 80063d0:	461a      	mov	r2, r3
 80063d2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80063d6:	4623      	mov	r3, r4
 80063d8:	f7f9 ff7a 	bl	80002d0 <__aeabi_dsub>
 80063dc:	46da      	mov	sl, fp
 80063de:	462b      	mov	r3, r5
 80063e0:	4652      	mov	r2, sl
 80063e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80063e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063ea:	f7f9 ff73 	bl	80002d4 <__adddf3>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	2000      	movs	r0, #0
 80063f4:	49b7      	ldr	r1, [pc, #732]	; (80066d4 <__ieee754_pow+0x744>)
 80063f6:	f7fa fa4d 	bl	8000894 <__aeabi_ddiv>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006402:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006406:	f7fa f91b 	bl	8000640 <__aeabi_dmul>
 800640a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800640e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006412:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006416:	2300      	movs	r3, #0
 8006418:	2200      	movs	r2, #0
 800641a:	46ab      	mov	fp, r5
 800641c:	106d      	asrs	r5, r5, #1
 800641e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006422:	9304      	str	r3, [sp, #16]
 8006424:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006428:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800642c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	4614      	mov	r4, r2
 8006436:	461d      	mov	r5, r3
 8006438:	f7fa f902 	bl	8000640 <__aeabi_dmul>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006444:	f7f9 ff44 	bl	80002d0 <__aeabi_dsub>
 8006448:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800644c:	4606      	mov	r6, r0
 800644e:	460f      	mov	r7, r1
 8006450:	4620      	mov	r0, r4
 8006452:	4629      	mov	r1, r5
 8006454:	f7f9 ff3c 	bl	80002d0 <__aeabi_dsub>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4650      	mov	r0, sl
 800645e:	4659      	mov	r1, fp
 8006460:	f7f9 ff36 	bl	80002d0 <__aeabi_dsub>
 8006464:	4642      	mov	r2, r8
 8006466:	464b      	mov	r3, r9
 8006468:	f7fa f8ea 	bl	8000640 <__aeabi_dmul>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4630      	mov	r0, r6
 8006472:	4639      	mov	r1, r7
 8006474:	f7f9 ff2c 	bl	80002d0 <__aeabi_dsub>
 8006478:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800647c:	f7fa f8e0 	bl	8000640 <__aeabi_dmul>
 8006480:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006484:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006488:	4610      	mov	r0, r2
 800648a:	4619      	mov	r1, r3
 800648c:	f7fa f8d8 	bl	8000640 <__aeabi_dmul>
 8006490:	a379      	add	r3, pc, #484	; (adr r3, 8006678 <__ieee754_pow+0x6e8>)
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	4604      	mov	r4, r0
 8006498:	460d      	mov	r5, r1
 800649a:	f7fa f8d1 	bl	8000640 <__aeabi_dmul>
 800649e:	a378      	add	r3, pc, #480	; (adr r3, 8006680 <__ieee754_pow+0x6f0>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7f9 ff16 	bl	80002d4 <__adddf3>
 80064a8:	4622      	mov	r2, r4
 80064aa:	462b      	mov	r3, r5
 80064ac:	f7fa f8c8 	bl	8000640 <__aeabi_dmul>
 80064b0:	a375      	add	r3, pc, #468	; (adr r3, 8006688 <__ieee754_pow+0x6f8>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f7f9 ff0d 	bl	80002d4 <__adddf3>
 80064ba:	4622      	mov	r2, r4
 80064bc:	462b      	mov	r3, r5
 80064be:	f7fa f8bf 	bl	8000640 <__aeabi_dmul>
 80064c2:	a373      	add	r3, pc, #460	; (adr r3, 8006690 <__ieee754_pow+0x700>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7f9 ff04 	bl	80002d4 <__adddf3>
 80064cc:	4622      	mov	r2, r4
 80064ce:	462b      	mov	r3, r5
 80064d0:	f7fa f8b6 	bl	8000640 <__aeabi_dmul>
 80064d4:	a370      	add	r3, pc, #448	; (adr r3, 8006698 <__ieee754_pow+0x708>)
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f7f9 fefb 	bl	80002d4 <__adddf3>
 80064de:	4622      	mov	r2, r4
 80064e0:	462b      	mov	r3, r5
 80064e2:	f7fa f8ad 	bl	8000640 <__aeabi_dmul>
 80064e6:	a36e      	add	r3, pc, #440	; (adr r3, 80066a0 <__ieee754_pow+0x710>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f7f9 fef2 	bl	80002d4 <__adddf3>
 80064f0:	4622      	mov	r2, r4
 80064f2:	4606      	mov	r6, r0
 80064f4:	460f      	mov	r7, r1
 80064f6:	462b      	mov	r3, r5
 80064f8:	4620      	mov	r0, r4
 80064fa:	4629      	mov	r1, r5
 80064fc:	f7fa f8a0 	bl	8000640 <__aeabi_dmul>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4630      	mov	r0, r6
 8006506:	4639      	mov	r1, r7
 8006508:	f7fa f89a 	bl	8000640 <__aeabi_dmul>
 800650c:	4604      	mov	r4, r0
 800650e:	460d      	mov	r5, r1
 8006510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006514:	4642      	mov	r2, r8
 8006516:	464b      	mov	r3, r9
 8006518:	f7f9 fedc 	bl	80002d4 <__adddf3>
 800651c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006520:	f7fa f88e 	bl	8000640 <__aeabi_dmul>
 8006524:	4622      	mov	r2, r4
 8006526:	462b      	mov	r3, r5
 8006528:	f7f9 fed4 	bl	80002d4 <__adddf3>
 800652c:	4642      	mov	r2, r8
 800652e:	4606      	mov	r6, r0
 8006530:	460f      	mov	r7, r1
 8006532:	464b      	mov	r3, r9
 8006534:	4640      	mov	r0, r8
 8006536:	4649      	mov	r1, r9
 8006538:	f7fa f882 	bl	8000640 <__aeabi_dmul>
 800653c:	2200      	movs	r2, #0
 800653e:	4b66      	ldr	r3, [pc, #408]	; (80066d8 <__ieee754_pow+0x748>)
 8006540:	4682      	mov	sl, r0
 8006542:	468b      	mov	fp, r1
 8006544:	f7f9 fec6 	bl	80002d4 <__adddf3>
 8006548:	4632      	mov	r2, r6
 800654a:	463b      	mov	r3, r7
 800654c:	f7f9 fec2 	bl	80002d4 <__adddf3>
 8006550:	2400      	movs	r4, #0
 8006552:	460d      	mov	r5, r1
 8006554:	4622      	mov	r2, r4
 8006556:	460b      	mov	r3, r1
 8006558:	4640      	mov	r0, r8
 800655a:	4649      	mov	r1, r9
 800655c:	f7fa f870 	bl	8000640 <__aeabi_dmul>
 8006560:	2200      	movs	r2, #0
 8006562:	4680      	mov	r8, r0
 8006564:	4689      	mov	r9, r1
 8006566:	4620      	mov	r0, r4
 8006568:	4629      	mov	r1, r5
 800656a:	4b5b      	ldr	r3, [pc, #364]	; (80066d8 <__ieee754_pow+0x748>)
 800656c:	f7f9 feb0 	bl	80002d0 <__aeabi_dsub>
 8006570:	4652      	mov	r2, sl
 8006572:	465b      	mov	r3, fp
 8006574:	f7f9 feac 	bl	80002d0 <__aeabi_dsub>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4630      	mov	r0, r6
 800657e:	4639      	mov	r1, r7
 8006580:	f7f9 fea6 	bl	80002d0 <__aeabi_dsub>
 8006584:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006588:	f7fa f85a 	bl	8000640 <__aeabi_dmul>
 800658c:	4622      	mov	r2, r4
 800658e:	4606      	mov	r6, r0
 8006590:	460f      	mov	r7, r1
 8006592:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006596:	462b      	mov	r3, r5
 8006598:	f7fa f852 	bl	8000640 <__aeabi_dmul>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4630      	mov	r0, r6
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7f9 fe96 	bl	80002d4 <__adddf3>
 80065a8:	2400      	movs	r4, #0
 80065aa:	4606      	mov	r6, r0
 80065ac:	460f      	mov	r7, r1
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4640      	mov	r0, r8
 80065b4:	4649      	mov	r1, r9
 80065b6:	f7f9 fe8d 	bl	80002d4 <__adddf3>
 80065ba:	a33b      	add	r3, pc, #236	; (adr r3, 80066a8 <__ieee754_pow+0x718>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	4620      	mov	r0, r4
 80065c2:	460d      	mov	r5, r1
 80065c4:	f7fa f83c 	bl	8000640 <__aeabi_dmul>
 80065c8:	4642      	mov	r2, r8
 80065ca:	464b      	mov	r3, r9
 80065cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065d0:	4620      	mov	r0, r4
 80065d2:	4629      	mov	r1, r5
 80065d4:	f7f9 fe7c 	bl	80002d0 <__aeabi_dsub>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4630      	mov	r0, r6
 80065de:	4639      	mov	r1, r7
 80065e0:	f7f9 fe76 	bl	80002d0 <__aeabi_dsub>
 80065e4:	a332      	add	r3, pc, #200	; (adr r3, 80066b0 <__ieee754_pow+0x720>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7fa f829 	bl	8000640 <__aeabi_dmul>
 80065ee:	a332      	add	r3, pc, #200	; (adr r3, 80066b8 <__ieee754_pow+0x728>)
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	4606      	mov	r6, r0
 80065f6:	460f      	mov	r7, r1
 80065f8:	4620      	mov	r0, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	f7fa f820 	bl	8000640 <__aeabi_dmul>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4630      	mov	r0, r6
 8006606:	4639      	mov	r1, r7
 8006608:	f7f9 fe64 	bl	80002d4 <__adddf3>
 800660c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800660e:	4b33      	ldr	r3, [pc, #204]	; (80066dc <__ieee754_pow+0x74c>)
 8006610:	f04f 0a00 	mov.w	sl, #0
 8006614:	4413      	add	r3, r2
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	f7f9 fe5b 	bl	80002d4 <__adddf3>
 800661e:	4680      	mov	r8, r0
 8006620:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006622:	4689      	mov	r9, r1
 8006624:	f7f9 ffa2 	bl	800056c <__aeabi_i2d>
 8006628:	4604      	mov	r4, r0
 800662a:	460d      	mov	r5, r1
 800662c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800662e:	4b2c      	ldr	r3, [pc, #176]	; (80066e0 <__ieee754_pow+0x750>)
 8006630:	4413      	add	r3, r2
 8006632:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006636:	4642      	mov	r2, r8
 8006638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800663c:	464b      	mov	r3, r9
 800663e:	f7f9 fe49 	bl	80002d4 <__adddf3>
 8006642:	4632      	mov	r2, r6
 8006644:	463b      	mov	r3, r7
 8006646:	f7f9 fe45 	bl	80002d4 <__adddf3>
 800664a:	4622      	mov	r2, r4
 800664c:	462b      	mov	r3, r5
 800664e:	f7f9 fe41 	bl	80002d4 <__adddf3>
 8006652:	4622      	mov	r2, r4
 8006654:	462b      	mov	r3, r5
 8006656:	4650      	mov	r0, sl
 8006658:	468b      	mov	fp, r1
 800665a:	f7f9 fe39 	bl	80002d0 <__aeabi_dsub>
 800665e:	4632      	mov	r2, r6
 8006660:	463b      	mov	r3, r7
 8006662:	f7f9 fe35 	bl	80002d0 <__aeabi_dsub>
 8006666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800666a:	f7f9 fe31 	bl	80002d0 <__aeabi_dsub>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4640      	mov	r0, r8
 8006674:	4649      	mov	r1, r9
 8006676:	e60d      	b.n	8006294 <__ieee754_pow+0x304>
 8006678:	4a454eef 	.word	0x4a454eef
 800667c:	3fca7e28 	.word	0x3fca7e28
 8006680:	93c9db65 	.word	0x93c9db65
 8006684:	3fcd864a 	.word	0x3fcd864a
 8006688:	a91d4101 	.word	0xa91d4101
 800668c:	3fd17460 	.word	0x3fd17460
 8006690:	518f264d 	.word	0x518f264d
 8006694:	3fd55555 	.word	0x3fd55555
 8006698:	db6fabff 	.word	0xdb6fabff
 800669c:	3fdb6db6 	.word	0x3fdb6db6
 80066a0:	33333303 	.word	0x33333303
 80066a4:	3fe33333 	.word	0x3fe33333
 80066a8:	e0000000 	.word	0xe0000000
 80066ac:	3feec709 	.word	0x3feec709
 80066b0:	dc3a03fd 	.word	0xdc3a03fd
 80066b4:	3feec709 	.word	0x3feec709
 80066b8:	145b01f5 	.word	0x145b01f5
 80066bc:	be3e2fe0 	.word	0xbe3e2fe0
 80066c0:	7ff00000 	.word	0x7ff00000
 80066c4:	43400000 	.word	0x43400000
 80066c8:	0003988e 	.word	0x0003988e
 80066cc:	000bb679 	.word	0x000bb679
 80066d0:	080070f0 	.word	0x080070f0
 80066d4:	3ff00000 	.word	0x3ff00000
 80066d8:	40080000 	.word	0x40080000
 80066dc:	08007110 	.word	0x08007110
 80066e0:	08007100 	.word	0x08007100
 80066e4:	2601      	movs	r6, #1
 80066e6:	e66a      	b.n	80063be <__ieee754_pow+0x42e>
 80066e8:	a39d      	add	r3, pc, #628	; (adr r3, 8006960 <__ieee754_pow+0x9d0>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	4640      	mov	r0, r8
 80066f0:	4649      	mov	r1, r9
 80066f2:	f7f9 fdef 	bl	80002d4 <__adddf3>
 80066f6:	4622      	mov	r2, r4
 80066f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066fc:	462b      	mov	r3, r5
 80066fe:	4650      	mov	r0, sl
 8006700:	4639      	mov	r1, r7
 8006702:	f7f9 fde5 	bl	80002d0 <__aeabi_dsub>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800670e:	f7fa fa27 	bl	8000b60 <__aeabi_dcmpgt>
 8006712:	2800      	cmp	r0, #0
 8006714:	f47f ae09 	bne.w	800632a <__ieee754_pow+0x39a>
 8006718:	4aa3      	ldr	r2, [pc, #652]	; (80069a8 <__ieee754_pow+0xa18>)
 800671a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800671e:	4293      	cmp	r3, r2
 8006720:	f340 8101 	ble.w	8006926 <__ieee754_pow+0x996>
 8006724:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006728:	2000      	movs	r0, #0
 800672a:	151b      	asrs	r3, r3, #20
 800672c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006730:	fa4a f303 	asr.w	r3, sl, r3
 8006734:	4433      	add	r3, r6
 8006736:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800673a:	4f9c      	ldr	r7, [pc, #624]	; (80069ac <__ieee754_pow+0xa1c>)
 800673c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006740:	4117      	asrs	r7, r2
 8006742:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006746:	ea23 0107 	bic.w	r1, r3, r7
 800674a:	f1c2 0214 	rsb	r2, r2, #20
 800674e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006752:	460b      	mov	r3, r1
 8006754:	fa4a fa02 	asr.w	sl, sl, r2
 8006758:	2e00      	cmp	r6, #0
 800675a:	4602      	mov	r2, r0
 800675c:	4629      	mov	r1, r5
 800675e:	4620      	mov	r0, r4
 8006760:	bfb8      	it	lt
 8006762:	f1ca 0a00 	rsblt	sl, sl, #0
 8006766:	f7f9 fdb3 	bl	80002d0 <__aeabi_dsub>
 800676a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800676e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006772:	2400      	movs	r4, #0
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	f7f9 fdac 	bl	80002d4 <__adddf3>
 800677c:	a37a      	add	r3, pc, #488	; (adr r3, 8006968 <__ieee754_pow+0x9d8>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	4620      	mov	r0, r4
 8006784:	460d      	mov	r5, r1
 8006786:	f7f9 ff5b 	bl	8000640 <__aeabi_dmul>
 800678a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800678e:	4606      	mov	r6, r0
 8006790:	460f      	mov	r7, r1
 8006792:	4620      	mov	r0, r4
 8006794:	4629      	mov	r1, r5
 8006796:	f7f9 fd9b 	bl	80002d0 <__aeabi_dsub>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f7f9 fd95 	bl	80002d0 <__aeabi_dsub>
 80067a6:	a372      	add	r3, pc, #456	; (adr r3, 8006970 <__ieee754_pow+0x9e0>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7f9 ff48 	bl	8000640 <__aeabi_dmul>
 80067b0:	a371      	add	r3, pc, #452	; (adr r3, 8006978 <__ieee754_pow+0x9e8>)
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	4680      	mov	r8, r0
 80067b8:	4689      	mov	r9, r1
 80067ba:	4620      	mov	r0, r4
 80067bc:	4629      	mov	r1, r5
 80067be:	f7f9 ff3f 	bl	8000640 <__aeabi_dmul>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4640      	mov	r0, r8
 80067c8:	4649      	mov	r1, r9
 80067ca:	f7f9 fd83 	bl	80002d4 <__adddf3>
 80067ce:	4604      	mov	r4, r0
 80067d0:	460d      	mov	r5, r1
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4630      	mov	r0, r6
 80067d8:	4639      	mov	r1, r7
 80067da:	f7f9 fd7b 	bl	80002d4 <__adddf3>
 80067de:	4632      	mov	r2, r6
 80067e0:	463b      	mov	r3, r7
 80067e2:	4680      	mov	r8, r0
 80067e4:	4689      	mov	r9, r1
 80067e6:	f7f9 fd73 	bl	80002d0 <__aeabi_dsub>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4620      	mov	r0, r4
 80067f0:	4629      	mov	r1, r5
 80067f2:	f7f9 fd6d 	bl	80002d0 <__aeabi_dsub>
 80067f6:	4642      	mov	r2, r8
 80067f8:	4606      	mov	r6, r0
 80067fa:	460f      	mov	r7, r1
 80067fc:	464b      	mov	r3, r9
 80067fe:	4640      	mov	r0, r8
 8006800:	4649      	mov	r1, r9
 8006802:	f7f9 ff1d 	bl	8000640 <__aeabi_dmul>
 8006806:	a35e      	add	r3, pc, #376	; (adr r3, 8006980 <__ieee754_pow+0x9f0>)
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	4604      	mov	r4, r0
 800680e:	460d      	mov	r5, r1
 8006810:	f7f9 ff16 	bl	8000640 <__aeabi_dmul>
 8006814:	a35c      	add	r3, pc, #368	; (adr r3, 8006988 <__ieee754_pow+0x9f8>)
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f7f9 fd59 	bl	80002d0 <__aeabi_dsub>
 800681e:	4622      	mov	r2, r4
 8006820:	462b      	mov	r3, r5
 8006822:	f7f9 ff0d 	bl	8000640 <__aeabi_dmul>
 8006826:	a35a      	add	r3, pc, #360	; (adr r3, 8006990 <__ieee754_pow+0xa00>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fd52 	bl	80002d4 <__adddf3>
 8006830:	4622      	mov	r2, r4
 8006832:	462b      	mov	r3, r5
 8006834:	f7f9 ff04 	bl	8000640 <__aeabi_dmul>
 8006838:	a357      	add	r3, pc, #348	; (adr r3, 8006998 <__ieee754_pow+0xa08>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fd47 	bl	80002d0 <__aeabi_dsub>
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	f7f9 fefb 	bl	8000640 <__aeabi_dmul>
 800684a:	a355      	add	r3, pc, #340	; (adr r3, 80069a0 <__ieee754_pow+0xa10>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f7f9 fd40 	bl	80002d4 <__adddf3>
 8006854:	4622      	mov	r2, r4
 8006856:	462b      	mov	r3, r5
 8006858:	f7f9 fef2 	bl	8000640 <__aeabi_dmul>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4640      	mov	r0, r8
 8006862:	4649      	mov	r1, r9
 8006864:	f7f9 fd34 	bl	80002d0 <__aeabi_dsub>
 8006868:	4604      	mov	r4, r0
 800686a:	460d      	mov	r5, r1
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4640      	mov	r0, r8
 8006872:	4649      	mov	r1, r9
 8006874:	f7f9 fee4 	bl	8000640 <__aeabi_dmul>
 8006878:	2200      	movs	r2, #0
 800687a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800687e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006882:	4620      	mov	r0, r4
 8006884:	4629      	mov	r1, r5
 8006886:	f7f9 fd23 	bl	80002d0 <__aeabi_dsub>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006892:	f7f9 ffff 	bl	8000894 <__aeabi_ddiv>
 8006896:	4632      	mov	r2, r6
 8006898:	4604      	mov	r4, r0
 800689a:	460d      	mov	r5, r1
 800689c:	463b      	mov	r3, r7
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7f9 fecd 	bl	8000640 <__aeabi_dmul>
 80068a6:	4632      	mov	r2, r6
 80068a8:	463b      	mov	r3, r7
 80068aa:	f7f9 fd13 	bl	80002d4 <__adddf3>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4620      	mov	r0, r4
 80068b4:	4629      	mov	r1, r5
 80068b6:	f7f9 fd0b 	bl	80002d0 <__aeabi_dsub>
 80068ba:	4642      	mov	r2, r8
 80068bc:	464b      	mov	r3, r9
 80068be:	f7f9 fd07 	bl	80002d0 <__aeabi_dsub>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	2000      	movs	r0, #0
 80068c8:	4939      	ldr	r1, [pc, #228]	; (80069b0 <__ieee754_pow+0xa20>)
 80068ca:	f7f9 fd01 	bl	80002d0 <__aeabi_dsub>
 80068ce:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80068d2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80068d6:	da29      	bge.n	800692c <__ieee754_pow+0x99c>
 80068d8:	4652      	mov	r2, sl
 80068da:	f000 f955 	bl	8006b88 <scalbn>
 80068de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068e2:	f7ff bbfe 	b.w	80060e2 <__ieee754_pow+0x152>
 80068e6:	4b33      	ldr	r3, [pc, #204]	; (80069b4 <__ieee754_pow+0xa24>)
 80068e8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80068ec:	429f      	cmp	r7, r3
 80068ee:	f77f af13 	ble.w	8006718 <__ieee754_pow+0x788>
 80068f2:	4b31      	ldr	r3, [pc, #196]	; (80069b8 <__ieee754_pow+0xa28>)
 80068f4:	440b      	add	r3, r1
 80068f6:	4303      	orrs	r3, r0
 80068f8:	d009      	beq.n	800690e <__ieee754_pow+0x97e>
 80068fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068fe:	2200      	movs	r2, #0
 8006900:	2300      	movs	r3, #0
 8006902:	f7fa f90f 	bl	8000b24 <__aeabi_dcmplt>
 8006906:	3800      	subs	r0, #0
 8006908:	bf18      	it	ne
 800690a:	2001      	movne	r0, #1
 800690c:	e453      	b.n	80061b6 <__ieee754_pow+0x226>
 800690e:	4622      	mov	r2, r4
 8006910:	462b      	mov	r3, r5
 8006912:	f7f9 fcdd 	bl	80002d0 <__aeabi_dsub>
 8006916:	4642      	mov	r2, r8
 8006918:	464b      	mov	r3, r9
 800691a:	f7fa f917 	bl	8000b4c <__aeabi_dcmpge>
 800691e:	2800      	cmp	r0, #0
 8006920:	f43f aefa 	beq.w	8006718 <__ieee754_pow+0x788>
 8006924:	e7e9      	b.n	80068fa <__ieee754_pow+0x96a>
 8006926:	f04f 0a00 	mov.w	sl, #0
 800692a:	e720      	b.n	800676e <__ieee754_pow+0x7de>
 800692c:	4621      	mov	r1, r4
 800692e:	e7d6      	b.n	80068de <__ieee754_pow+0x94e>
 8006930:	f04f 0b00 	mov.w	fp, #0
 8006934:	f8df c078 	ldr.w	ip, [pc, #120]	; 80069b0 <__ieee754_pow+0xa20>
 8006938:	f7ff bbba 	b.w	80060b0 <__ieee754_pow+0x120>
 800693c:	f04f 0b00 	mov.w	fp, #0
 8006940:	f04f 0c00 	mov.w	ip, #0
 8006944:	f7ff bbb4 	b.w	80060b0 <__ieee754_pow+0x120>
 8006948:	4640      	mov	r0, r8
 800694a:	4649      	mov	r1, r9
 800694c:	f7ff bb3d 	b.w	8005fca <__ieee754_pow+0x3a>
 8006950:	9200      	str	r2, [sp, #0]
 8006952:	f7ff bb89 	b.w	8006068 <__ieee754_pow+0xd8>
 8006956:	2300      	movs	r3, #0
 8006958:	f7ff bb73 	b.w	8006042 <__ieee754_pow+0xb2>
 800695c:	f3af 8000 	nop.w
 8006960:	652b82fe 	.word	0x652b82fe
 8006964:	3c971547 	.word	0x3c971547
 8006968:	00000000 	.word	0x00000000
 800696c:	3fe62e43 	.word	0x3fe62e43
 8006970:	fefa39ef 	.word	0xfefa39ef
 8006974:	3fe62e42 	.word	0x3fe62e42
 8006978:	0ca86c39 	.word	0x0ca86c39
 800697c:	be205c61 	.word	0xbe205c61
 8006980:	72bea4d0 	.word	0x72bea4d0
 8006984:	3e663769 	.word	0x3e663769
 8006988:	c5d26bf1 	.word	0xc5d26bf1
 800698c:	3ebbbd41 	.word	0x3ebbbd41
 8006990:	af25de2c 	.word	0xaf25de2c
 8006994:	3f11566a 	.word	0x3f11566a
 8006998:	16bebd93 	.word	0x16bebd93
 800699c:	3f66c16c 	.word	0x3f66c16c
 80069a0:	5555553e 	.word	0x5555553e
 80069a4:	3fc55555 	.word	0x3fc55555
 80069a8:	3fe00000 	.word	0x3fe00000
 80069ac:	000fffff 	.word	0x000fffff
 80069b0:	3ff00000 	.word	0x3ff00000
 80069b4:	4090cbff 	.word	0x4090cbff
 80069b8:	3f6f3400 	.word	0x3f6f3400

080069bc <__ieee754_sqrt>:
 80069bc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006b18 <__ieee754_sqrt+0x15c>
 80069c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c4:	ea3c 0c01 	bics.w	ip, ip, r1
 80069c8:	4606      	mov	r6, r0
 80069ca:	460d      	mov	r5, r1
 80069cc:	460c      	mov	r4, r1
 80069ce:	460a      	mov	r2, r1
 80069d0:	4607      	mov	r7, r0
 80069d2:	4603      	mov	r3, r0
 80069d4:	d10f      	bne.n	80069f6 <__ieee754_sqrt+0x3a>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	f7f9 fe31 	bl	8000640 <__aeabi_dmul>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4630      	mov	r0, r6
 80069e4:	4629      	mov	r1, r5
 80069e6:	f7f9 fc75 	bl	80002d4 <__adddf3>
 80069ea:	4606      	mov	r6, r0
 80069ec:	460d      	mov	r5, r1
 80069ee:	4630      	mov	r0, r6
 80069f0:	4629      	mov	r1, r5
 80069f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f6:	2900      	cmp	r1, #0
 80069f8:	dc0e      	bgt.n	8006a18 <__ieee754_sqrt+0x5c>
 80069fa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80069fe:	ea5c 0707 	orrs.w	r7, ip, r7
 8006a02:	d0f4      	beq.n	80069ee <__ieee754_sqrt+0x32>
 8006a04:	b141      	cbz	r1, 8006a18 <__ieee754_sqrt+0x5c>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	f7f9 fc61 	bl	80002d0 <__aeabi_dsub>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	f7f9 ff3f 	bl	8000894 <__aeabi_ddiv>
 8006a16:	e7e8      	b.n	80069ea <__ieee754_sqrt+0x2e>
 8006a18:	1521      	asrs	r1, r4, #20
 8006a1a:	d075      	beq.n	8006b08 <__ieee754_sqrt+0x14c>
 8006a1c:	07cc      	lsls	r4, r1, #31
 8006a1e:	f04f 0400 	mov.w	r4, #0
 8006a22:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006a26:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8006a2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a2e:	bf5e      	ittt	pl
 8006a30:	0fd9      	lsrpl	r1, r3, #31
 8006a32:	005b      	lslpl	r3, r3, #1
 8006a34:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006a38:	0fd9      	lsrs	r1, r3, #31
 8006a3a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006a3e:	2516      	movs	r5, #22
 8006a40:	4620      	mov	r0, r4
 8006a42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a46:	107f      	asrs	r7, r7, #1
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	1846      	adds	r6, r0, r1
 8006a4c:	4296      	cmp	r6, r2
 8006a4e:	bfde      	ittt	le
 8006a50:	1b92      	suble	r2, r2, r6
 8006a52:	1870      	addle	r0, r6, r1
 8006a54:	1864      	addle	r4, r4, r1
 8006a56:	0052      	lsls	r2, r2, #1
 8006a58:	3d01      	subs	r5, #1
 8006a5a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006a5e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006a62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a66:	d1f0      	bne.n	8006a4a <__ieee754_sqrt+0x8e>
 8006a68:	4629      	mov	r1, r5
 8006a6a:	f04f 0e20 	mov.w	lr, #32
 8006a6e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006a72:	4282      	cmp	r2, r0
 8006a74:	eb06 0c05 	add.w	ip, r6, r5
 8006a78:	dc02      	bgt.n	8006a80 <__ieee754_sqrt+0xc4>
 8006a7a:	d113      	bne.n	8006aa4 <__ieee754_sqrt+0xe8>
 8006a7c:	459c      	cmp	ip, r3
 8006a7e:	d811      	bhi.n	8006aa4 <__ieee754_sqrt+0xe8>
 8006a80:	f1bc 0f00 	cmp.w	ip, #0
 8006a84:	eb0c 0506 	add.w	r5, ip, r6
 8006a88:	da43      	bge.n	8006b12 <__ieee754_sqrt+0x156>
 8006a8a:	2d00      	cmp	r5, #0
 8006a8c:	db41      	blt.n	8006b12 <__ieee754_sqrt+0x156>
 8006a8e:	f100 0801 	add.w	r8, r0, #1
 8006a92:	1a12      	subs	r2, r2, r0
 8006a94:	4640      	mov	r0, r8
 8006a96:	459c      	cmp	ip, r3
 8006a98:	bf88      	it	hi
 8006a9a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006a9e:	eba3 030c 	sub.w	r3, r3, ip
 8006aa2:	4431      	add	r1, r6
 8006aa4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006aa8:	f1be 0e01 	subs.w	lr, lr, #1
 8006aac:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ab4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006ab8:	d1db      	bne.n	8006a72 <__ieee754_sqrt+0xb6>
 8006aba:	4313      	orrs	r3, r2
 8006abc:	d006      	beq.n	8006acc <__ieee754_sqrt+0x110>
 8006abe:	1c48      	adds	r0, r1, #1
 8006ac0:	bf0b      	itete	eq
 8006ac2:	4671      	moveq	r1, lr
 8006ac4:	3101      	addne	r1, #1
 8006ac6:	3401      	addeq	r4, #1
 8006ac8:	f021 0101 	bicne.w	r1, r1, #1
 8006acc:	1063      	asrs	r3, r4, #1
 8006ace:	0849      	lsrs	r1, r1, #1
 8006ad0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006ad4:	07e2      	lsls	r2, r4, #31
 8006ad6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006ada:	bf48      	it	mi
 8006adc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006ae0:	460e      	mov	r6, r1
 8006ae2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006ae6:	e782      	b.n	80069ee <__ieee754_sqrt+0x32>
 8006ae8:	0ada      	lsrs	r2, r3, #11
 8006aea:	3815      	subs	r0, #21
 8006aec:	055b      	lsls	r3, r3, #21
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	d0fa      	beq.n	8006ae8 <__ieee754_sqrt+0x12c>
 8006af2:	02d5      	lsls	r5, r2, #11
 8006af4:	d50a      	bpl.n	8006b0c <__ieee754_sqrt+0x150>
 8006af6:	f1c1 0420 	rsb	r4, r1, #32
 8006afa:	fa23 f404 	lsr.w	r4, r3, r4
 8006afe:	1e4d      	subs	r5, r1, #1
 8006b00:	408b      	lsls	r3, r1
 8006b02:	4322      	orrs	r2, r4
 8006b04:	1b41      	subs	r1, r0, r5
 8006b06:	e789      	b.n	8006a1c <__ieee754_sqrt+0x60>
 8006b08:	4608      	mov	r0, r1
 8006b0a:	e7f0      	b.n	8006aee <__ieee754_sqrt+0x132>
 8006b0c:	0052      	lsls	r2, r2, #1
 8006b0e:	3101      	adds	r1, #1
 8006b10:	e7ef      	b.n	8006af2 <__ieee754_sqrt+0x136>
 8006b12:	4680      	mov	r8, r0
 8006b14:	e7bd      	b.n	8006a92 <__ieee754_sqrt+0xd6>
 8006b16:	bf00      	nop
 8006b18:	7ff00000 	.word	0x7ff00000

08006b1c <with_errno>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	4604      	mov	r4, r0
 8006b20:	460d      	mov	r5, r1
 8006b22:	4616      	mov	r6, r2
 8006b24:	f7fc fac0 	bl	80030a8 <__errno>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	6006      	str	r6, [r0, #0]
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}

08006b30 <xflow>:
 8006b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b32:	4615      	mov	r5, r2
 8006b34:	461c      	mov	r4, r3
 8006b36:	b180      	cbz	r0, 8006b5a <xflow+0x2a>
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b3e:	e9cd 0100 	strd	r0, r1, [sp]
 8006b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b46:	4628      	mov	r0, r5
 8006b48:	4621      	mov	r1, r4
 8006b4a:	f7f9 fd79 	bl	8000640 <__aeabi_dmul>
 8006b4e:	2222      	movs	r2, #34	; 0x22
 8006b50:	b003      	add	sp, #12
 8006b52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b56:	f7ff bfe1 	b.w	8006b1c <with_errno>
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	e7ee      	b.n	8006b3e <xflow+0xe>

08006b60 <__math_uflow>:
 8006b60:	2200      	movs	r2, #0
 8006b62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b66:	f7ff bfe3 	b.w	8006b30 <xflow>

08006b6a <__math_oflow>:
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006b70:	f7ff bfde 	b.w	8006b30 <xflow>

08006b74 <fabs>:
 8006b74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006b78:	4770      	bx	lr

08006b7a <finite>:
 8006b7a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006b7e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006b82:	0fc0      	lsrs	r0, r0, #31
 8006b84:	4770      	bx	lr
	...

08006b88 <scalbn>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	4617      	mov	r7, r2
 8006b94:	460b      	mov	r3, r1
 8006b96:	b996      	cbnz	r6, 8006bbe <scalbn+0x36>
 8006b98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b9c:	4303      	orrs	r3, r0
 8006b9e:	d039      	beq.n	8006c14 <scalbn+0x8c>
 8006ba0:	4b33      	ldr	r3, [pc, #204]	; (8006c70 <scalbn+0xe8>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f7f9 fd4c 	bl	8000640 <__aeabi_dmul>
 8006ba8:	4b32      	ldr	r3, [pc, #200]	; (8006c74 <scalbn+0xec>)
 8006baa:	4604      	mov	r4, r0
 8006bac:	429f      	cmp	r7, r3
 8006bae:	460d      	mov	r5, r1
 8006bb0:	da0f      	bge.n	8006bd2 <scalbn+0x4a>
 8006bb2:	a32b      	add	r3, pc, #172	; (adr r3, 8006c60 <scalbn+0xd8>)
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f7f9 fd42 	bl	8000640 <__aeabi_dmul>
 8006bbc:	e006      	b.n	8006bcc <scalbn+0x44>
 8006bbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006bc2:	4296      	cmp	r6, r2
 8006bc4:	d10a      	bne.n	8006bdc <scalbn+0x54>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	f7f9 fb84 	bl	80002d4 <__adddf3>
 8006bcc:	4604      	mov	r4, r0
 8006bce:	460d      	mov	r5, r1
 8006bd0:	e020      	b.n	8006c14 <scalbn+0x8c>
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006bd8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006bdc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006be0:	19b9      	adds	r1, r7, r6
 8006be2:	4291      	cmp	r1, r2
 8006be4:	dd0e      	ble.n	8006c04 <scalbn+0x7c>
 8006be6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006bea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006bee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006bf2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006bf6:	4820      	ldr	r0, [pc, #128]	; (8006c78 <scalbn+0xf0>)
 8006bf8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006bfc:	a31a      	add	r3, pc, #104	; (adr r3, 8006c68 <scalbn+0xe0>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	e7d9      	b.n	8006bb8 <scalbn+0x30>
 8006c04:	2900      	cmp	r1, #0
 8006c06:	dd08      	ble.n	8006c1a <scalbn+0x92>
 8006c08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006c14:	4620      	mov	r0, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006c1e:	da12      	bge.n	8006c46 <scalbn+0xbe>
 8006c20:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c24:	429f      	cmp	r7, r3
 8006c26:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006c2a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006c2e:	dcdc      	bgt.n	8006bea <scalbn+0x62>
 8006c30:	a30b      	add	r3, pc, #44	; (adr r3, 8006c60 <scalbn+0xd8>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006c3a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006c3e:	480f      	ldr	r0, [pc, #60]	; (8006c7c <scalbn+0xf4>)
 8006c40:	f041 011f 	orr.w	r1, r1, #31
 8006c44:	e7b8      	b.n	8006bb8 <scalbn+0x30>
 8006c46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c4a:	3136      	adds	r1, #54	; 0x36
 8006c4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006c54:	4620      	mov	r0, r4
 8006c56:	4629      	mov	r1, r5
 8006c58:	2200      	movs	r2, #0
 8006c5a:	4b09      	ldr	r3, [pc, #36]	; (8006c80 <scalbn+0xf8>)
 8006c5c:	e7ac      	b.n	8006bb8 <scalbn+0x30>
 8006c5e:	bf00      	nop
 8006c60:	c2f8f359 	.word	0xc2f8f359
 8006c64:	01a56e1f 	.word	0x01a56e1f
 8006c68:	8800759c 	.word	0x8800759c
 8006c6c:	7e37e43c 	.word	0x7e37e43c
 8006c70:	43500000 	.word	0x43500000
 8006c74:	ffff3cb0 	.word	0xffff3cb0
 8006c78:	8800759c 	.word	0x8800759c
 8006c7c:	c2f8f359 	.word	0xc2f8f359
 8006c80:	3c900000 	.word	0x3c900000

08006c84 <_init>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr

08006c90 <_fini>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr
