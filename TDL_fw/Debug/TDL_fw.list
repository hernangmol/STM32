
TDL_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800bd60  0800bd60  0001bd60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2f0  0800c2f0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c2f0  0800c2f0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c2f0  0800c2f0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2f0  0800c2f0  0001c2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2f4  0800c2f4  0001c2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c2f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002208  200001f4  0800c4ec  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023fc  0800c4ec  000223fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001001c  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad7  00000000  00000000  00030239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00032d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00033d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a03b  00000000  00000000  00034c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013363  00000000  00000000  0004ec63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d69a  00000000  00000000  00061fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef660  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005850  00000000  00000000  000ef6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bd44 	.word	0x0800bd44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800bd44 	.word	0x0800bd44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_f2iz>:
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa0:	d30f      	bcc.n	8000fc2 <__aeabi_f2iz+0x2a>
 8000fa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d90d      	bls.n	8000fc8 <__aeabi_f2iz+0x30>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	bf18      	it	ne
 8000fbe:	4240      	negne	r0, r0
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2iz+0x3a>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d105      	bne.n	8000fde <__aeabi_f2iz+0x46>
 8000fd2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd6:	bf08      	it	eq
 8000fd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4770      	bx	lr

08000fe4 <Set_Pin_Output>:
#include "ds18b20.h"

extern TIM_HandleTypeDef htim3;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2302      	movs	r3, #2
 8001008:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4619      	mov	r1, r3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f001 ff6b 	bl	8002eec <HAL_GPIO_Init>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f001 ff4e 	bl	8002eec <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <delay_us>:

void delay_us (uint16_t us)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <delay_us+0x2c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 800106a:	bf00      	nop
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <delay_us+0x2c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3f9      	bcc.n	800106c <delay_us+0x14>
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20002314 	.word	0x20002314

08001088 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	4815      	ldr	r0, [pc, #84]	; (80010ec <DS18B20_Start+0x64>)
 8001098:	f7ff ffa4 	bl	8000fe4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <DS18B20_Start+0x64>)
 80010a4:	f002 f8bd 	bl	8003222 <HAL_GPIO_WritePin>
	delay_us (480);   // delay according to datasheet
 80010a8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80010ac:	f7ff ffd4 	bl	8001058 <delay_us>
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80010b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <DS18B20_Start+0x64>)
 80010b6:	f7ff ffb2 	bl	800101e <Set_Pin_Input>
	delay_us (80);    // delay according to datasheet
 80010ba:	2050      	movs	r0, #80	; 0x50
 80010bc:	f7ff ffcc 	bl	8001058 <delay_us>
	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN)))
 80010c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <DS18B20_Start+0x64>)
 80010c6:	f002 f895 	bl	80031f4 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <DS18B20_Start+0x4e>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 80010d0:	2301      	movs	r3, #1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	e001      	b.n	80010da <DS18B20_Start+0x52>
	else Response = -1;
 80010d6:	23ff      	movs	r3, #255	; 0xff
 80010d8:	71fb      	strb	r3, [r7, #7]
	delay_us (400); // 480 us delay totally.
 80010da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010de:	f7ff ffbb 	bl	8001058 <delay_us>
	return Response;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40010c00 	.word	0x40010c00

080010f0 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fe:	4821      	ldr	r0, [pc, #132]	; (8001184 <DS18B20_Write+0x94>)
 8001100:	f7ff ff70 	bl	8000fe4 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e034      	b.n	8001174 <DS18B20_Write+0x84>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800110a:	79fa      	ldrb	r2, [r7, #7]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	fa42 f303 	asr.w	r3, r2, r3
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d016      	beq.n	8001148 <DS18B20_Write+0x58>
		{
			// write 1
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800111a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111e:	4819      	ldr	r0, [pc, #100]	; (8001184 <DS18B20_Write+0x94>)
 8001120:	f7ff ff60 	bl	8000fe4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <DS18B20_Write+0x94>)
 800112c:	f002 f879 	bl	8003222 <HAL_GPIO_WritePin>
			delay_us (1);  // wait for 1 us
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff ff91 	bl	8001058 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <DS18B20_Write+0x94>)
 800113c:	f7ff ff6f 	bl	800101e <Set_Pin_Input>
			delay_us (50);  // wait for 60 us
 8001140:	2032      	movs	r0, #50	; 0x32
 8001142:	f7ff ff89 	bl	8001058 <delay_us>
 8001146:	e012      	b.n	800116e <DS18B20_Write+0x7e>
		}
		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <DS18B20_Write+0x94>)
 800114e:	f7ff ff49 	bl	8000fe4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <DS18B20_Write+0x94>)
 800115a:	f002 f862 	bl	8003222 <HAL_GPIO_WritePin>
			delay_us (50);  // wait for 60 us
 800115e:	2032      	movs	r0, #50	; 0x32
 8001160:	f7ff ff7a 	bl	8001058 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <DS18B20_Write+0x94>)
 800116a:	f7ff ff58 	bl	800101e <Set_Pin_Input>
	for (int i=0; i<8; i++)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3301      	adds	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b07      	cmp	r3, #7
 8001178:	ddc7      	ble.n	800110a <DS18B20_Write+0x1a>
		}
	}
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010c00 	.word	0x40010c00

08001188 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <DS18B20_Read+0x80>)
 8001198:	f7ff ff41 	bl	800101e <Set_Pin_Input>
	for (int i=0;i<8;i++)
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	e02a      	b.n	80011f8 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80011a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a6:	4818      	ldr	r0, [pc, #96]	; (8001208 <DS18B20_Read+0x80>)
 80011a8:	f7ff ff1c 	bl	8000fe4 <Set_Pin_Output>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, 0);  // pull the data pin LOW
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	4815      	ldr	r0, [pc, #84]	; (8001208 <DS18B20_Read+0x80>)
 80011b4:	f002 f835 	bl	8003222 <HAL_GPIO_WritePin>
		delay_us (2);  // wait for 2 us
 80011b8:	2002      	movs	r0, #2
 80011ba:	f7ff ff4d 	bl	8001058 <delay_us>
		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <DS18B20_Read+0x80>)
 80011c4:	f7ff ff2b 	bl	800101e <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_9))  // if the pin is HIGH
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <DS18B20_Read+0x80>)
 80011ce:	f002 f811 	bl	80031f4 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d009      	beq.n	80011ec <DS18B20_Read+0x64>
		{
			value |= 1<<i;  // read = 1
 80011d8:	2201      	movs	r2, #1
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	71fb      	strb	r3, [r7, #7]
		}
		delay_us (60);  // wait for 60 us
 80011ec:	203c      	movs	r0, #60	; 0x3c
 80011ee:	f7ff ff33 	bl	8001058 <delay_us>
	for (int i=0;i<8;i++)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	ddd1      	ble.n	80011a2 <DS18B20_Read+0x1a>
	}
	return value;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010c00 	.word	0x40010c00

0800120c <DS18B20_Temp2Float>:


float DS18B20_Temp2Float(uint16_t number)
{
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
	uint16_t aux;
	float result = 0;
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
	float signo;
	uint16_t mask = 0b1111100000000000;
 800121c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001220:	827b      	strh	r3, [r7, #18]
	// extracción del signo
	if((number & mask) > 0)
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	8a7b      	ldrh	r3, [r7, #18]
 8001226:	4013      	ands	r3, r2
 8001228:	b29b      	uxth	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <DS18B20_Temp2Float+0x28>
		signo = -1;
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <DS18B20_Temp2Float+0xec>)
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e002      	b.n	800123a <DS18B20_Temp2Float+0x2e>
	else
		signo = 1;
 8001234:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001238:	617b      	str	r3, [r7, #20]
	// calculo de la magnitud
	mask = 0b0000011111111111;
 800123a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800123e:	827b      	strh	r3, [r7, #18]
	// parte entera
	if (signo == -1)
 8001240:	492d      	ldr	r1, [pc, #180]	; (80012f8 <DS18B20_Temp2Float+0xec>)
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff fe76 	bl	8000f34 <__aeabi_fcmpeq>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00c      	beq.n	8001268 <DS18B20_Temp2Float+0x5c>
	{                     // complemento A2
		aux = ~number & mask;
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	43db      	mvns	r3, r3
 8001254:	b21a      	sxth	r2, r3
 8001256:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800125a:	4013      	ands	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	83fb      	strh	r3, [r7, #30]
		aux+=1;
 8001260:	8bfb      	ldrh	r3, [r7, #30]
 8001262:	3301      	adds	r3, #1
 8001264:	83fb      	strh	r3, [r7, #30]
 8001266:	e003      	b.n	8001270 <DS18B20_Temp2Float+0x64>
	}
	else
	{
		aux = number & mask;
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	8a7b      	ldrh	r3, [r7, #18]
 800126c:	4013      	ands	r3, r2
 800126e:	83fb      	strh	r3, [r7, #30]
	}
// parte decimal
	result = 0;
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
	mask = 0b0000000000000001;
 8001276:	2301      	movs	r3, #1
 8001278:	827b      	strh	r3, [r7, #18]
	for (int i=0;i<12;i++)
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	e02e      	b.n	80012de <DS18B20_Temp2Float+0xd2>
	{
		 if((aux & mask)>0)
 8001280:	8bfa      	ldrh	r2, [r7, #30]
 8001282:	8a7b      	ldrh	r3, [r7, #18]
 8001284:	4013      	ands	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d022      	beq.n	80012d2 <DS18B20_Temp2Float+0xc6>
			 result = result + .0625 *pow(2, i);
 800128c:	69b8      	ldr	r0, [r7, #24]
 800128e:	f7ff f97f 	bl	8000590 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff f968 	bl	800056c <__aeabi_i2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	f04f 0000 	mov.w	r0, #0
 80012a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012a8:	f009 fe6a 	bl	800af80 <pow>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <DS18B20_Temp2Float+0xf0>)
 80012b2:	f7ff f9c5 	bl	8000640 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f809 	bl	80002d4 <__adddf3>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc91 	bl	8000bf0 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
		 mask = mask << 1;
 80012d2:	8a7b      	ldrh	r3, [r7, #18]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	827b      	strh	r3, [r7, #18]
	for (int i=0;i<12;i++)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b0b      	cmp	r3, #11
 80012e2:	ddcd      	ble.n	8001280 <DS18B20_Temp2Float+0x74>
	}
	return (signo * result);
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7fe ff3a 	bl	8000160 <__aeabi_fmul>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bdb0      	pop	{r4, r5, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	bf800000 	.word	0xbf800000
 80012fc:	3fb00000 	.word	0x3fb00000

08001300 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <SELECT+0x1c>)
 800130c:	f001 ff89 	bl	8003222 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f001 fcb9 	bl	8002c88 <HAL_Delay>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40010c00 	.word	0x40010c00

08001320 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <DESELECT+0x1c>)
 800132c:	f001 ff79 	bl	8003222 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f001 fca9 	bl	8002c88 <HAL_Delay>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010c00 	.word	0x40010c00

08001340 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800134a:	bf00      	nop
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <SPI_TxByte+0x30>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b02      	cmp	r3, #2
 8001358:	d1f8      	bne.n	800134c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800135a:	1df9      	adds	r1, r7, #7
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	2201      	movs	r2, #1
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <SPI_TxByte+0x30>)
 8001362:	f002 fbf1 	bl	8003b48 <HAL_SPI_Transmit>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20002274 	.word	0x20002274

08001374 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001380:	bf00      	nop
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <SPI_TxBuffer+0x30>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b02      	cmp	r3, #2
 800138e:	d1f8      	bne.n	8001382 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	2364      	movs	r3, #100	; 0x64
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <SPI_TxBuffer+0x30>)
 8001398:	f002 fbd6 	bl	8003b48 <HAL_SPI_Transmit>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20002274 	.word	0x20002274

080013a8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80013ae:	23ff      	movs	r3, #255	; 0xff
 80013b0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80013b2:	bf00      	nop
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <SPI_RxByte+0x34>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d1f8      	bne.n	80013b4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80013c2:	1dba      	adds	r2, r7, #6
 80013c4:	1df9      	adds	r1, r7, #7
 80013c6:	2364      	movs	r3, #100	; 0x64
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2301      	movs	r3, #1
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <SPI_RxByte+0x34>)
 80013ce:	f002 fcfe 	bl	8003dce <HAL_SPI_TransmitReceive>

	return data;
 80013d2:	79bb      	ldrb	r3, [r7, #6]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20002274 	.word	0x20002274

080013e0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80013e8:	f7ff ffde 	bl	80013a8 <SPI_RxByte>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	701a      	strb	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <SD_ReadyWait+0x30>)
 8001404:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001408:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800140a:	f7ff ffcd 	bl	80013a8 <SPI_RxByte>
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2bff      	cmp	r3, #255	; 0xff
 8001416:	d003      	beq.n	8001420 <SD_ReadyWait+0x24>
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <SD_ReadyWait+0x30>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f4      	bne.n	800140a <SD_ReadyWait+0xe>

	return res;
 8001420:	79fb      	ldrb	r3, [r7, #7]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000212 	.word	0x20000212

08001430 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001436:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800143a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800143c:	f7ff ff70 	bl	8001320 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	e005      	b.n	8001452 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001446:	20ff      	movs	r0, #255	; 0xff
 8001448:	f7ff ff7a 	bl	8001340 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b09      	cmp	r3, #9
 8001456:	ddf6      	ble.n	8001446 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001458:	f7ff ff52 	bl	8001300 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800145c:	2340      	movs	r3, #64	; 0x40
 800145e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001470:	2395      	movs	r3, #149	; 0x95
 8001472:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001474:	463b      	mov	r3, r7
 8001476:	2106      	movs	r1, #6
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff7b 	bl	8001374 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800147e:	e002      	b.n	8001486 <SD_PowerOn+0x56>
	{
		cnt--;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3b01      	subs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001486:	f7ff ff8f 	bl	80013a8 <SPI_RxByte>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d002      	beq.n	8001496 <SD_PowerOn+0x66>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f4      	bne.n	8001480 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001496:	f7ff ff43 	bl	8001320 <DESELECT>
	SPI_TxByte(0XFF);
 800149a:	20ff      	movs	r0, #255	; 0xff
 800149c:	f7ff ff50 	bl	8001340 <SPI_TxByte>

	PowerFlag = 1;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <SD_PowerOn+0x80>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000215 	.word	0x20000215

080014b4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <SD_PowerOff+0x14>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000215 	.word	0x20000215

080014cc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	return PowerFlag;
 80014d0:	4b02      	ldr	r3, [pc, #8]	; (80014dc <SD_CheckPower+0x10>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000215 	.word	0x20000215

080014e0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <SD_RxDataBlock+0x58>)
 80014ec:	22c8      	movs	r2, #200	; 0xc8
 80014ee:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80014f0:	f7ff ff5a 	bl	80013a8 <SPI_RxByte>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2bff      	cmp	r3, #255	; 0xff
 80014fc:	d103      	bne.n	8001506 <SD_RxDataBlock+0x26>
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <SD_RxDataBlock+0x58>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f4      	bne.n	80014f0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2bfe      	cmp	r3, #254	; 0xfe
 800150a:	d001      	beq.n	8001510 <SD_RxDataBlock+0x30>
 800150c:	2300      	movs	r3, #0
 800150e:	e00f      	b.n	8001530 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff62 	bl	80013e0 <SPI_RxBytePtr>
	} while(len--);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	603a      	str	r2, [r7, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f4      	bne.n	8001510 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001526:	f7ff ff3f 	bl	80013a8 <SPI_RxByte>
	SPI_RxByte();
 800152a:	f7ff ff3d 	bl	80013a8 <SPI_RxByte>

	return TRUE;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000210 	.word	0x20000210

0800153c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800154c:	f7ff ff56 	bl	80013fc <SD_ReadyWait>
 8001550:	4603      	mov	r3, r0
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d001      	beq.n	800155a <SD_TxDataBlock+0x1e>
 8001556:	2300      	movs	r3, #0
 8001558:	e02f      	b.n	80015ba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff feef 	bl	8001340 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	2bfd      	cmp	r3, #253	; 0xfd
 8001566:	d020      	beq.n	80015aa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff01 	bl	8001374 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001572:	f7ff ff19 	bl	80013a8 <SPI_RxByte>
		SPI_RxByte();
 8001576:	f7ff ff17 	bl	80013a8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800157a:	e00b      	b.n	8001594 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800157c:	f7ff ff14 	bl	80013a8 <SPI_RxByte>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	2b05      	cmp	r3, #5
 800158c:	d006      	beq.n	800159c <SD_TxDataBlock+0x60>
			i++;
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	3301      	adds	r3, #1
 8001592:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	2b40      	cmp	r3, #64	; 0x40
 8001598:	d9f0      	bls.n	800157c <SD_TxDataBlock+0x40>
 800159a:	e000      	b.n	800159e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800159c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800159e:	bf00      	nop
 80015a0:	f7ff ff02 	bl	80013a8 <SPI_RxByte>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0fa      	beq.n	80015a0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d101      	bne.n	80015b8 <SD_TxDataBlock+0x7c>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <SD_TxDataBlock+0x7e>

	return FALSE;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	6039      	str	r1, [r7, #0]
 80015cc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80015ce:	f7ff ff15 	bl	80013fc <SD_ReadyWait>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2bff      	cmp	r3, #255	; 0xff
 80015d6:	d001      	beq.n	80015dc <SD_SendCmd+0x1a>
 80015d8:	23ff      	movs	r3, #255	; 0xff
 80015da:	e042      	b.n	8001662 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff feae 	bl	8001340 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	0e1b      	lsrs	r3, r3, #24
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fea8 	bl	8001340 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fea2 	bl	8001340 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fe9c 	bl	8001340 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe97 	bl	8001340 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b40      	cmp	r3, #64	; 0x40
 8001616:	d102      	bne.n	800161e <SD_SendCmd+0x5c>
 8001618:	2395      	movs	r3, #149	; 0x95
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e007      	b.n	800162e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b48      	cmp	r3, #72	; 0x48
 8001622:	d102      	bne.n	800162a <SD_SendCmd+0x68>
 8001624:	2387      	movs	r3, #135	; 0x87
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e001      	b.n	800162e <SD_SendCmd+0x6c>
	else crc = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fe85 	bl	8001340 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b4c      	cmp	r3, #76	; 0x4c
 800163a:	d101      	bne.n	8001640 <SD_SendCmd+0x7e>
 800163c:	f7ff feb4 	bl	80013a8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001640:	230a      	movs	r3, #10
 8001642:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001644:	f7ff feb0 	bl	80013a8 <SPI_RxByte>
 8001648:	4603      	mov	r3, r0
 800164a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800164c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da05      	bge.n	8001660 <SD_SendCmd+0x9e>
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	3b01      	subs	r3, #1
 8001658:	73bb      	strb	r3, [r7, #14]
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f1      	bne.n	8001644 <SD_SendCmd+0x82>

	return res;
 8001660:	7b7b      	ldrb	r3, [r7, #13]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_disk_initialize+0x14>
 800167c:	2301      	movs	r3, #1
 800167e:	e0d1      	b.n	8001824 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <SD_disk_initialize+0x1c0>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <SD_disk_initialize+0x2a>
 800168e:	4b67      	ldr	r3, [pc, #412]	; (800182c <SD_disk_initialize+0x1c0>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	e0c6      	b.n	8001824 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001696:	f7ff fecb 	bl	8001430 <SD_PowerOn>

	/* slave select */
	SELECT();
 800169a:	f7ff fe31 	bl	8001300 <SELECT>

	/* check disk type */
	type = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80016a2:	2100      	movs	r1, #0
 80016a4:	2040      	movs	r0, #64	; 0x40
 80016a6:	f7ff ff8c 	bl	80015c2 <SD_SendCmd>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	f040 80a1 	bne.w	80017f4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80016b2:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <SD_disk_initialize+0x1c4>)
 80016b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80016ba:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80016be:	2048      	movs	r0, #72	; 0x48
 80016c0:	f7ff ff7f 	bl	80015c2 <SD_SendCmd>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d155      	bne.n	8001776 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e00c      	b.n	80016ea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80016d0:	7bfc      	ldrb	r4, [r7, #15]
 80016d2:	f7ff fe69 	bl	80013a8 <SPI_RxByte>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	f104 0310 	add.w	r3, r4, #16
 80016de:	443b      	add	r3, r7
 80016e0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	3301      	adds	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d9ef      	bls.n	80016d0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80016f0:	7abb      	ldrb	r3, [r7, #10]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d17e      	bne.n	80017f4 <SD_disk_initialize+0x188>
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	2baa      	cmp	r3, #170	; 0xaa
 80016fa:	d17b      	bne.n	80017f4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80016fc:	2100      	movs	r1, #0
 80016fe:	2077      	movs	r0, #119	; 0x77
 8001700:	f7ff ff5f 	bl	80015c2 <SD_SendCmd>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d807      	bhi.n	800171a <SD_disk_initialize+0xae>
 800170a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800170e:	2069      	movs	r0, #105	; 0x69
 8001710:	f7ff ff57 	bl	80015c2 <SD_SendCmd>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800171a:	4b45      	ldr	r3, [pc, #276]	; (8001830 <SD_disk_initialize+0x1c4>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ec      	bne.n	80016fc <SD_disk_initialize+0x90>
 8001722:	e000      	b.n	8001726 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001724:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001726:	4b42      	ldr	r3, [pc, #264]	; (8001830 <SD_disk_initialize+0x1c4>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d062      	beq.n	80017f4 <SD_disk_initialize+0x188>
 800172e:	2100      	movs	r1, #0
 8001730:	207a      	movs	r0, #122	; 0x7a
 8001732:	f7ff ff46 	bl	80015c2 <SD_SendCmd>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d15b      	bne.n	80017f4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e00c      	b.n	800175c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001742:	7bfc      	ldrb	r4, [r7, #15]
 8001744:	f7ff fe30 	bl	80013a8 <SPI_RxByte>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	f104 0310 	add.w	r3, r4, #16
 8001750:	443b      	add	r3, r7
 8001752:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	3301      	adds	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d9ef      	bls.n	8001742 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001762:	7a3b      	ldrb	r3, [r7, #8]
 8001764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SD_disk_initialize+0x104>
 800176c:	230c      	movs	r3, #12
 800176e:	e000      	b.n	8001772 <SD_disk_initialize+0x106>
 8001770:	2304      	movs	r3, #4
 8001772:	73bb      	strb	r3, [r7, #14]
 8001774:	e03e      	b.n	80017f4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001776:	2100      	movs	r1, #0
 8001778:	2077      	movs	r0, #119	; 0x77
 800177a:	f7ff ff22 	bl	80015c2 <SD_SendCmd>
 800177e:	4603      	mov	r3, r0
 8001780:	2b01      	cmp	r3, #1
 8001782:	d808      	bhi.n	8001796 <SD_disk_initialize+0x12a>
 8001784:	2100      	movs	r1, #0
 8001786:	2069      	movs	r0, #105	; 0x69
 8001788:	f7ff ff1b 	bl	80015c2 <SD_SendCmd>
 800178c:	4603      	mov	r3, r0
 800178e:	2b01      	cmp	r3, #1
 8001790:	d801      	bhi.n	8001796 <SD_disk_initialize+0x12a>
 8001792:	2302      	movs	r3, #2
 8001794:	e000      	b.n	8001798 <SD_disk_initialize+0x12c>
 8001796:	2301      	movs	r3, #1
 8001798:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800179a:	7bbb      	ldrb	r3, [r7, #14]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d10e      	bne.n	80017be <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80017a0:	2100      	movs	r1, #0
 80017a2:	2077      	movs	r0, #119	; 0x77
 80017a4:	f7ff ff0d 	bl	80015c2 <SD_SendCmd>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d80e      	bhi.n	80017cc <SD_disk_initialize+0x160>
 80017ae:	2100      	movs	r1, #0
 80017b0:	2069      	movs	r0, #105	; 0x69
 80017b2:	f7ff ff06 	bl	80015c2 <SD_SendCmd>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <SD_disk_initialize+0x160>
 80017bc:	e00c      	b.n	80017d8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80017be:	2100      	movs	r1, #0
 80017c0:	2041      	movs	r0, #65	; 0x41
 80017c2:	f7ff fefe 	bl	80015c2 <SD_SendCmd>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <SD_disk_initialize+0x1c4>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e2      	bne.n	800179a <SD_disk_initialize+0x12e>
 80017d4:	e000      	b.n	80017d8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80017d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <SD_disk_initialize+0x1c4>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <SD_disk_initialize+0x184>
 80017e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e4:	2050      	movs	r0, #80	; 0x50
 80017e6:	f7ff feec 	bl	80015c2 <SD_SendCmd>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SD_disk_initialize+0x188>
 80017f0:	2300      	movs	r3, #0
 80017f2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80017f4:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <SD_disk_initialize+0x1c8>)
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80017fa:	f7ff fd91 	bl	8001320 <DESELECT>
	SPI_RxByte();
 80017fe:	f7ff fdd3 	bl	80013a8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <SD_disk_initialize+0x1c0>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SD_disk_initialize+0x1c0>)
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e001      	b.n	800181e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800181a:	f7ff fe4b 	bl	80014b4 <SD_PowerOff>
	}

	return Stat;
 800181e:	4b03      	ldr	r3, [pc, #12]	; (800182c <SD_disk_initialize+0x1c0>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b2db      	uxtb	r3, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	20000000 	.word	0x20000000
 8001830:	20000210 	.word	0x20000210
 8001834:	20000214 	.word	0x20000214

08001838 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SD_disk_status+0x14>
 8001848:	2301      	movs	r3, #1
 800184a:	e002      	b.n	8001852 <SD_disk_status+0x1a>
	return Stat;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <SD_disk_status+0x24>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b2db      	uxtb	r3, r3
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000000 	.word	0x20000000

08001860 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <SD_disk_read+0x1c>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <SD_disk_read+0x20>
 800187c:	2304      	movs	r3, #4
 800187e:	e051      	b.n	8001924 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <SD_disk_read+0xcc>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SD_disk_read+0x32>
 800188e:	2303      	movs	r3, #3
 8001890:	e048      	b.n	8001924 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <SD_disk_read+0xd0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <SD_disk_read+0x44>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	607b      	str	r3, [r7, #4]

	SELECT();
 80018a4:	f7ff fd2c 	bl	8001300 <SELECT>

	if (count == 1)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d111      	bne.n	80018d2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	2051      	movs	r0, #81	; 0x51
 80018b2:	f7ff fe86 	bl	80015c2 <SD_SendCmd>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d129      	bne.n	8001910 <SD_disk_read+0xb0>
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f7ff fe0d 	bl	80014e0 <SD_RxDataBlock>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d021      	beq.n	8001910 <SD_disk_read+0xb0>
 80018cc:	2300      	movs	r3, #0
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	e01e      	b.n	8001910 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	2052      	movs	r0, #82	; 0x52
 80018d6:	f7ff fe74 	bl	80015c2 <SD_SendCmd>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d117      	bne.n	8001910 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80018e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	f7ff fdfb 	bl	80014e0 <SD_RxDataBlock>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00a      	beq.n	8001906 <SD_disk_read+0xa6>
				buff += 512;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018f6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ed      	bne.n	80018e0 <SD_disk_read+0x80>
 8001904:	e000      	b.n	8001908 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001906:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001908:	2100      	movs	r1, #0
 800190a:	204c      	movs	r0, #76	; 0x4c
 800190c:	f7ff fe59 	bl	80015c2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001910:	f7ff fd06 	bl	8001320 <DESELECT>
	SPI_RxByte();
 8001914:	f7ff fd48 	bl	80013a8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000000 	.word	0x20000000
 8001930:	20000214 	.word	0x20000214

08001934 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <SD_disk_write+0x1c>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <SD_disk_write+0x20>
 8001950:	2304      	movs	r3, #4
 8001952:	e06b      	b.n	8001a2c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001954:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <SD_disk_write+0x100>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SD_disk_write+0x32>
 8001962:	2303      	movs	r3, #3
 8001964:	e062      	b.n	8001a2c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001966:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <SD_disk_write+0x100>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SD_disk_write+0x44>
 8001974:	2302      	movs	r3, #2
 8001976:	e059      	b.n	8001a2c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <SD_disk_write+0x104>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <SD_disk_write+0x56>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	607b      	str	r3, [r7, #4]

	SELECT();
 800198a:	f7ff fcb9 	bl	8001300 <SELECT>

	if (count == 1)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d110      	bne.n	80019b6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	2058      	movs	r0, #88	; 0x58
 8001998:	f7ff fe13 	bl	80015c2 <SD_SendCmd>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d13a      	bne.n	8001a18 <SD_disk_write+0xe4>
 80019a2:	21fe      	movs	r1, #254	; 0xfe
 80019a4:	68b8      	ldr	r0, [r7, #8]
 80019a6:	f7ff fdc9 	bl	800153c <SD_TxDataBlock>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d033      	beq.n	8001a18 <SD_disk_write+0xe4>
			count = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	e030      	b.n	8001a18 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <SD_disk_write+0x104>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80019c2:	2100      	movs	r1, #0
 80019c4:	2077      	movs	r0, #119	; 0x77
 80019c6:	f7ff fdfc 	bl	80015c2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80019ca:	6839      	ldr	r1, [r7, #0]
 80019cc:	2057      	movs	r0, #87	; 0x57
 80019ce:	f7ff fdf8 	bl	80015c2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	2059      	movs	r0, #89	; 0x59
 80019d6:	f7ff fdf4 	bl	80015c2 <SD_SendCmd>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11b      	bne.n	8001a18 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80019e0:	21fc      	movs	r1, #252	; 0xfc
 80019e2:	68b8      	ldr	r0, [r7, #8]
 80019e4:	f7ff fdaa 	bl	800153c <SD_TxDataBlock>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00a      	beq.n	8001a04 <SD_disk_write+0xd0>
				buff += 512;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019f4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ee      	bne.n	80019e0 <SD_disk_write+0xac>
 8001a02:	e000      	b.n	8001a06 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001a04:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001a06:	21fd      	movs	r1, #253	; 0xfd
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fd97 	bl	800153c <SD_TxDataBlock>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <SD_disk_write+0xe4>
			{
				count = 1;
 8001a14:	2301      	movs	r3, #1
 8001a16:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001a18:	f7ff fc82 	bl	8001320 <DESELECT>
	SPI_RxByte();
 8001a1c:	f7ff fcc4 	bl	80013a8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000214 	.word	0x20000214

08001a3c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	603a      	str	r2, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SD_disk_ioctl+0x1e>
 8001a56:	2304      	movs	r3, #4
 8001a58:	e115      	b.n	8001c86 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d124      	bne.n	8001ab0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d012      	beq.n	8001a94 <SD_disk_ioctl+0x58>
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	dc1a      	bgt.n	8001aa8 <SD_disk_ioctl+0x6c>
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <SD_disk_ioctl+0x40>
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d006      	beq.n	8001a88 <SD_disk_ioctl+0x4c>
 8001a7a:	e015      	b.n	8001aa8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001a7c:	f7ff fd1a 	bl	80014b4 <SD_PowerOff>
			res = RES_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a86:	e0fc      	b.n	8001c82 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001a88:	f7ff fcd2 	bl	8001430 <SD_PowerOn>
			res = RES_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a92:	e0f6      	b.n	8001c82 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	1c5c      	adds	r4, r3, #1
 8001a98:	f7ff fd18 	bl	80014cc <SD_CheckPower>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001aa6:	e0ec      	b.n	8001c82 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aae:	e0e8      	b.n	8001c82 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ab0:	4b77      	ldr	r3, [pc, #476]	; (8001c90 <SD_disk_ioctl+0x254>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SD_disk_ioctl+0x86>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0e1      	b.n	8001c86 <SD_disk_ioctl+0x24a>

		SELECT();
 8001ac2:	f7ff fc1d 	bl	8001300 <SELECT>

		switch (ctrl)
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	2b0d      	cmp	r3, #13
 8001aca:	f200 80cb 	bhi.w	8001c64 <SD_disk_ioctl+0x228>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <SD_disk_ioctl+0x98>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001bcf 	.word	0x08001bcf
 8001ad8:	08001b0d 	.word	0x08001b0d
 8001adc:	08001bbf 	.word	0x08001bbf
 8001ae0:	08001c65 	.word	0x08001c65
 8001ae4:	08001c65 	.word	0x08001c65
 8001ae8:	08001c65 	.word	0x08001c65
 8001aec:	08001c65 	.word	0x08001c65
 8001af0:	08001c65 	.word	0x08001c65
 8001af4:	08001c65 	.word	0x08001c65
 8001af8:	08001c65 	.word	0x08001c65
 8001afc:	08001c65 	.word	0x08001c65
 8001b00:	08001be1 	.word	0x08001be1
 8001b04:	08001c05 	.word	0x08001c05
 8001b08:	08001c29 	.word	0x08001c29
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2049      	movs	r0, #73	; 0x49
 8001b10:	f7ff fd57 	bl	80015c2 <SD_SendCmd>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 80a8 	bne.w	8001c6c <SD_disk_ioctl+0x230>
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2110      	movs	r1, #16
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fcdc 	bl	80014e0 <SD_RxDataBlock>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 809e 	beq.w	8001c6c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001b30:	7b3b      	ldrb	r3, [r7, #12]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10e      	bne.n	8001b58 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001b3a:	7d7b      	ldrb	r3, [r7, #21]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	7d3b      	ldrb	r3, [r7, #20]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001b4e:	8bfb      	ldrh	r3, [r7, #30]
 8001b50:	029a      	lsls	r2, r3, #10
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e02e      	b.n	8001bb6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001b58:	7c7b      	ldrb	r3, [r7, #17]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	7dbb      	ldrb	r3, [r7, #22]
 8001b62:	09db      	lsrs	r3, r3, #7
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	7d7b      	ldrb	r3, [r7, #21]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f003 0306 	and.w	r3, r3, #6
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b80:	7d3b      	ldrb	r3, [r7, #20]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	7cbb      	ldrb	r3, [r7, #18]
 8001b96:	029b      	lsls	r3, r3, #10
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ba8:	8bfa      	ldrh	r2, [r7, #30]
 8001baa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bae:	3b09      	subs	r3, #9
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001bbc:	e056      	b.n	8001c6c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001bcc:	e055      	b.n	8001c7a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001bce:	f7ff fc15 	bl	80013fc <SD_ReadyWait>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2bff      	cmp	r3, #255	; 0xff
 8001bd6:	d14b      	bne.n	8001c70 <SD_disk_ioctl+0x234>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001bde:	e047      	b.n	8001c70 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001be0:	2100      	movs	r1, #0
 8001be2:	2049      	movs	r0, #73	; 0x49
 8001be4:	f7ff fced 	bl	80015c2 <SD_SendCmd>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d142      	bne.n	8001c74 <SD_disk_ioctl+0x238>
 8001bee:	2110      	movs	r1, #16
 8001bf0:	6a38      	ldr	r0, [r7, #32]
 8001bf2:	f7ff fc75 	bl	80014e0 <SD_RxDataBlock>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d03b      	beq.n	8001c74 <SD_disk_ioctl+0x238>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c02:	e037      	b.n	8001c74 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001c04:	2100      	movs	r1, #0
 8001c06:	204a      	movs	r0, #74	; 0x4a
 8001c08:	f7ff fcdb 	bl	80015c2 <SD_SendCmd>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d132      	bne.n	8001c78 <SD_disk_ioctl+0x23c>
 8001c12:	2110      	movs	r1, #16
 8001c14:	6a38      	ldr	r0, [r7, #32]
 8001c16:	f7ff fc63 	bl	80014e0 <SD_RxDataBlock>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d02b      	beq.n	8001c78 <SD_disk_ioctl+0x23c>
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c26:	e027      	b.n	8001c78 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	207a      	movs	r0, #122	; 0x7a
 8001c2c:	f7ff fcc9 	bl	80015c2 <SD_SendCmd>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c3c:	e00b      	b.n	8001c56 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001c3e:	6a3c      	ldr	r4, [r7, #32]
 8001c40:	1c63      	adds	r3, r4, #1
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	f7ff fbb0 	bl	80013a8 <SPI_RxByte>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c50:	3301      	adds	r3, #1
 8001c52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d9ef      	bls.n	8001c3e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001c64:	2304      	movs	r3, #4
 8001c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c6a:	e006      	b.n	8001c7a <SD_disk_ioctl+0x23e>
			break;
 8001c6c:	bf00      	nop
 8001c6e:	e004      	b.n	8001c7a <SD_disk_ioctl+0x23e>
			break;
 8001c70:	bf00      	nop
 8001c72:	e002      	b.n	8001c7a <SD_disk_ioctl+0x23e>
			break;
 8001c74:	bf00      	nop
 8001c76:	e000      	b.n	8001c7a <SD_disk_ioctl+0x23e>
			break;
 8001c78:	bf00      	nop
		}

		DESELECT();
 8001c7a:	f7ff fb51 	bl	8001320 <DESELECT>
		SPI_RxByte();
 8001c7e:	f7ff fb93 	bl	80013a8 <SPI_RxByte>
	}

	return res;
 8001c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	372c      	adds	r7, #44	; 0x2c
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000

08001c94 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8001ca2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001ca6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8001caa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cae:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8001cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001cb6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f80e 	bl	8001cea <Lcd_init>

	return lcd;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	f107 0410 	add.w	r4, r7, #16
 8001cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cde:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bdb0      	pop	{r4, r5, r7, pc}

08001cea <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7d9b      	ldrb	r3, [r3, #22]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001cfa:	2133      	movs	r1, #51	; 0x33
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8bb 	bl	8001e78 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8001d02:	2132      	movs	r1, #50	; 0x32
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8b7 	bl	8001e78 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001d0a:	2128      	movs	r1, #40	; 0x28
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8b3 	bl	8001e78 <lcd_write_command>
 8001d12:	e003      	b.n	8001d1c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001d14:	2138      	movs	r1, #56	; 0x38
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8ae 	bl	8001e78 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8aa 	bl	8001e78 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001d24:	210c      	movs	r1, #12
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8a6 	bl	8001e78 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001d2c:	2106      	movs	r1, #6
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8a2 	bl	8001e78 <lcd_write_command>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4906      	ldr	r1, [pc, #24]	; (8001d68 <Lcd_int+0x2c>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f006 fe9e 	bl	8008a90 <siprintf>
	Lcd_string(lcd, buffer);
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f852 	bl	8001e04 <Lcd_string>
}
 8001d60:	bf00      	nop
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	0800bd60 	.word	0x0800bd60

08001d6c <Lcd_float_lim>:

/*
 * Write a number on the current position
 */
void Lcd_float_lim(Lcd_HandleTypeDef * lcd, float number, uint8_t decimal)
{
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	71fb      	strb	r3, [r7, #7]
	int intPart = (int) number;
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff f90c 	bl	8000f98 <__aeabi_f2iz>
 8001d80:	4603      	mov	r3, r0
 8001d82:	617b      	str	r3, [r7, #20]
	Lcd_int(lcd, intPart);
 8001d84:	6979      	ldr	r1, [r7, #20]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff ffd8 	bl	8001d3c <Lcd_int>
	Lcd_string(lcd, ".");
 8001d8c:	491b      	ldr	r1, [pc, #108]	; (8001dfc <Lcd_float_lim+0x90>)
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f838 	bl	8001e04 <Lcd_string>
	number = number - (float)intPart;
 8001d94:	6978      	ldr	r0, [r7, #20]
 8001d96:	f7ff f835 	bl	8000e04 <__aeabi_i2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	68b8      	ldr	r0, [r7, #8]
 8001da0:	f7fe ff7a 	bl	8000c98 <__aeabi_fsub>
 8001da4:	4603      	mov	r3, r0
 8001da6:	60bb      	str	r3, [r7, #8]
	number = number * pow(10,decimal);
 8001da8:	68b8      	ldr	r0, [r7, #8]
 8001daa:	f7fe fbf1 	bl	8000590 <__aeabi_f2d>
 8001dae:	4604      	mov	r4, r0
 8001db0:	460d      	mov	r5, r1
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbc9 	bl	800054c <__aeabi_ui2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	f04f 0000 	mov.w	r0, #0
 8001dc2:	490f      	ldr	r1, [pc, #60]	; (8001e00 <Lcd_float_lim+0x94>)
 8001dc4:	f009 f8dc 	bl	800af80 <pow>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4620      	mov	r0, r4
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f7fe fc36 	bl	8000640 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe ff08 	bl	8000bf0 <__aeabi_d2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	60bb      	str	r3, [r7, #8]
	Lcd_int(lcd, (int)number);
 8001de4:	68b8      	ldr	r0, [r7, #8]
 8001de6:	f7ff f8d7 	bl	8000f98 <__aeabi_f2iz>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4619      	mov	r1, r3
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff ffa4 	bl	8001d3c <Lcd_int>
}
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfc:	0800bd6c 	.word	0x0800bd6c
 8001e00:	40240000 	.word	0x40240000

08001e04 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e00a      	b.n	8001e2a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f858 	bl	8001ed4 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	3301      	adds	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	7bfc      	ldrb	r4, [r7, #15]
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f7fe f98f 	bl	8000150 <strlen>
 8001e32:	4603      	mov	r3, r0
 8001e34:	429c      	cmp	r4, r3
 8001e36:	d3ed      	bcc.n	8001e14 <Lcd_string+0x10>
	}
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}
	...

08001e44 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
 8001e50:	4613      	mov	r3, r2
 8001e52:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <Lcd_cursor+0x30>)
 8001e58:	5cd2      	ldrb	r2, [r2, r3]
 8001e5a:	78bb      	ldrb	r3, [r7, #2]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3b80      	subs	r3, #128	; 0x80
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f806 	bl	8001e78 <lcd_write_command>
	#endif
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	0800be3c 	.word	0x0800be3c

08001e78 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6898      	ldr	r0, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	899b      	ldrh	r3, [r3, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f001 f9c7 	bl	8003222 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7d9b      	ldrb	r3, [r3, #22]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d111      	bne.n	8001ec0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f842 	bl	8001f30 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f839 	bl	8001f30 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001ebe:	e005      	b.n	8001ecc <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f832 	bl	8001f30 <lcd_write>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	899b      	ldrh	r3, [r3, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4619      	mov	r1, r3
 8001eec:	f001 f999 	bl	8003222 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7d9b      	ldrb	r3, [r3, #22]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2204      	movs	r2, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f814 	bl	8001f30 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2204      	movs	r2, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f80b 	bl	8001f30 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001f1a:	e005      	b.n	8001f28 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	2208      	movs	r2, #8
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f804 	bl	8001f30 <lcd_write>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e019      	b.n	8001f7a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	8819      	ldrh	r1, [r3, #0]
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	fa42 f303 	asr.w	r3, r2, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f001 f957 	bl	8003222 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3301      	adds	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	78bb      	ldrb	r3, [r7, #2]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3e1      	bcc.n	8001f46 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6918      	ldr	r0, [r3, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	8a9b      	ldrh	r3, [r3, #20]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f001 f948 	bl	8003222 <HAL_GPIO_WritePin>
	DELAY(1);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f000 fe78 	bl	8002c88 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6918      	ldr	r0, [r3, #16]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8a9b      	ldrh	r3, [r3, #20]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f001 f93d 	bl	8003222 <HAL_GPIO_WritePin>
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b0b0      	sub	sp, #192	; 0xc0
 8001fb4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb6:	f000 fe05 	bl	8002bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fba:	f000 fa3b 	bl	8002434 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_7);
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	486c      	ldr	r0, [pc, #432]	; (8002174 <main+0x1c4>)
 8001fc2:	f001 f946 	bl	8003252 <HAL_GPIO_TogglePin>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc6:	f000 fb4d 	bl	8002664 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001fca:	f000 fafd 	bl	80025c8 <MX_TIM3_Init>
  MX_SPI2_Init();
 8001fce:	f000 fa77 	bl	80024c0 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001fd2:	f002 fd9b 	bl	8004b0c <MX_FATFS_Init>
  MX_TIM2_Init();
 8001fd6:	f000 faa9 	bl	800252c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8001fda:	4867      	ldr	r0, [pc, #412]	; (8002178 <main+0x1c8>)
 8001fdc:	f002 f99e 	bl	800431c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001fe0:	4866      	ldr	r0, [pc, #408]	; (800217c <main+0x1cc>)
 8001fe2:	f002 f9e5 	bl	80043b0 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 8001fe6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fea:	f000 fe4d 	bl	8002c88 <HAL_Delay>

  uint8_t Presence;
  uint8_t scratchPad[8];
  uint16_t buffer;
  uint16_t sample = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
  char message[25];
  int m;
  //uint8_t recording;
  //float temperature;

  Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8001ff4:	4b62      	ldr	r3, [pc, #392]	; (8002180 <main+0x1d0>)
 8001ff6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8002000:	4a60      	ldr	r2, [pc, #384]	; (8002184 <main+0x1d4>)
 8002002:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800200a:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_1, LCD_4_BIT_MODE);
 800200e:	4638      	mov	r0, r7
 8002010:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002014:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002018:	2300      	movs	r3, #0
 800201a:	9303      	str	r3, [sp, #12]
 800201c:	2302      	movs	r3, #2
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	4b54      	ldr	r3, [pc, #336]	; (8002174 <main+0x1c4>)
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2340      	movs	r3, #64	; 0x40
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4b52      	ldr	r3, [pc, #328]	; (8002174 <main+0x1c4>)
 800202a:	f7ff fe33 	bl	8001c94 <Lcd_create>
 800202e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002032:	463d      	mov	r5, r7
 8002034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002038:	e895 0003 	ldmia.w	r5, {r0, r1}
 800203c:	e884 0003 	stmia.w	r4, {r0, r1}
    }
  Presence = Presence; // ToDo: chequeo de errores
  HAL_Delay(10000);
#endif
  // Sensor 1:
  uint8_t aux[N][8]= {{0x28, 0xEB, 0x42, 0x76, 0xE0, 0x01, 0x3C, 0x1A},
 8002040:	4b51      	ldr	r3, [pc, #324]	; (8002188 <main+0x1d8>)
 8002042:	f107 0418 	add.w	r4, r7, #24
 8002046:	461d      	mov	r5, r3
 8002048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800204c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  	  	  	 {0x28, 0x2F, 0x9B, 0x76, 0xE0, 0x01, 0x3C, 0xF4},
					 {0x28, 0x2C, 0x4D, 0x43, 0xD4, 0xE1, 0x3C, 0x93},
					 {0x28, 0xBF, 0x88, 0x43, 0xD4, 0xE1, 0x3C, 0x8B}};
  for(int j=0; j<N;j++)
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800205a:	e029      	b.n	80020b0 <main+0x100>
	  for(int i=0; i<8; i++)
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002062:	e01c      	b.n	800209e <main+0xee>
	  {
		  sensor[j].ROM_NO[i]= aux[j][i];
 8002064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	33b0      	adds	r3, #176	; 0xb0
 800206c:	19da      	adds	r2, r3, r7
 800206e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002072:	4413      	add	r3, r2
 8002074:	3b98      	subs	r3, #152	; 0x98
 8002076:	7818      	ldrb	r0, [r3, #0]
 8002078:	4944      	ldr	r1, [pc, #272]	; (800218c <main+0x1dc>)
 800207a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	18ca      	adds	r2, r1, r3
 8002088:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	4602      	mov	r2, r0
 8002092:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<8; i++)
 8002094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002098:	3301      	adds	r3, #1
 800209a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800209e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020a2:	2b07      	cmp	r3, #7
 80020a4:	ddde      	ble.n	8002064 <main+0xb4>
  for(int j=0; j<N;j++)
 80020a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020aa:	3301      	adds	r3, #1
 80020ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	ddd1      	ble.n	800205c <main+0xac>
	  }

	f_mount(&fs, "", 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	4935      	ldr	r1, [pc, #212]	; (8002190 <main+0x1e0>)
 80020bc:	4835      	ldr	r0, [pc, #212]	; (8002194 <main+0x1e4>)
 80020be:	f004 fe11 	bl	8006ce4 <f_mount>
	f_open(&fil, "temp.log", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80020c2:	2213      	movs	r2, #19
 80020c4:	4934      	ldr	r1, [pc, #208]	; (8002198 <main+0x1e8>)
 80020c6:	4835      	ldr	r0, [pc, #212]	; (800219c <main+0x1ec>)
 80020c8:	f004 fe56 	bl	8006d78 <f_open>
	f_lseek(&fil, fil.fsize);
 80020cc:	4b33      	ldr	r3, [pc, #204]	; (800219c <main+0x1ec>)
 80020ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4831      	ldr	r0, [pc, #196]	; (800219c <main+0x1ec>)
 80020d8:	f005 fc86 	bl	80079e8 <f_lseek>
	f_puts("sample, T1, T2, T3, T4\n", &fil);
 80020dc:	492f      	ldr	r1, [pc, #188]	; (800219c <main+0x1ec>)
 80020de:	4830      	ldr	r0, [pc, #192]	; (80021a0 <main+0x1f0>)
 80020e0:	f005 ffb0 	bl	8008044 <f_puts>
	f_close(&fil);
 80020e4:	482d      	ldr	r0, [pc, #180]	; (800219c <main+0x1ec>)
 80020e6:	f005 fc54 	bl	8007992 <f_close>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Iniciar conversión
	  Presence = DS18B20_Start ();
 80020ea:	f7fe ffcd 	bl	8001088 <DS18B20_Start>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	  HAL_Delay (1);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f000 fdc7 	bl	8002c88 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 80020fa:	20cc      	movs	r0, #204	; 0xcc
 80020fc:	f7fe fff8 	bl	80010f0 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8002100:	2044      	movs	r0, #68	; 0x44
 8002102:	f7fe fff5 	bl	80010f0 <DS18B20_Write>
	  HAL_Delay (800);
 8002106:	f44f 7048 	mov.w	r0, #800	; 0x320
 800210a:	f000 fdbd 	bl	8002c88 <HAL_Delay>
//	  DS18B20_Write (0xBE);  // Read Scratch-pad
//	  for(int i = 0; i<8; i++)
//		  scratchPad[i] = DS18B20_Read();

///////////////////////////////////////////////////////////
	  for(int j=0; j<N; j++)
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002114:	e07d      	b.n	8002212 <main+0x262>
	  {
		  Presence = DS18B20_Start ();
 8002116:	f7fe ffb7 	bl	8001088 <DS18B20_Start>
 800211a:	4603      	mov	r3, r0
 800211c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		  HAL_Delay(1);
 8002120:	2001      	movs	r0, #1
 8002122:	f000 fdb1 	bl	8002c88 <HAL_Delay>
		  DS18B20_Write (0x55);  // match ROM
 8002126:	2055      	movs	r0, #85	; 0x55
 8002128:	f7fe ffe2 	bl	80010f0 <DS18B20_Write>
		  for(int i=0;i<8;i++)
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002132:	e014      	b.n	800215e <main+0x1ae>
		  {
			  DS18B20_Write (sensor[j].ROM_NO[i]);
 8002134:	4915      	ldr	r1, [pc, #84]	; (800218c <main+0x1dc>)
 8002136:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	18ca      	adds	r2, r1, r3
 8002144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002148:	4413      	add	r3, r2
 800214a:	3304      	adds	r3, #4
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe ffce 	bl	80010f0 <DS18B20_Write>
		  for(int i=0;i<8;i++)
 8002154:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002158:	3301      	adds	r3, #1
 800215a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800215e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002162:	2b07      	cmp	r3, #7
 8002164:	dde6      	ble.n	8002134 <main+0x184>
		  }
		  DS18B20_Write (0xBE);  // Read Scratch-pad
 8002166:	20be      	movs	r0, #190	; 0xbe
 8002168:	f7fe ffc2 	bl	80010f0 <DS18B20_Write>
		  for(int i = 0; i<8; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002172:	e027      	b.n	80021c4 <main+0x214>
 8002174:	40010800 	.word	0x40010800
 8002178:	20002314 	.word	0x20002314
 800217c:	200022cc 	.word	0x200022cc
 8002180:	0800bdc0 	.word	0x0800bdc0
 8002184:	0800bdd0 	.word	0x0800bdd0
 8002188:	0800bdd8 	.word	0x0800bdd8
 800218c:	2000235c 	.word	0x2000235c
 8002190:	0800bd70 	.word	0x0800bd70
 8002194:	20000218 	.word	0x20000218
 8002198:	0800bd74 	.word	0x0800bd74
 800219c:	20001248 	.word	0x20001248
 80021a0:	0800bd80 	.word	0x0800bd80
			  scratchPad[i] = DS18B20_Read();
 80021a4:	f7fe fff0 	bl	8001188 <DS18B20_Read>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4619      	mov	r1, r3
 80021ac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021b4:	4413      	add	r3, r2
 80021b6:	460a      	mov	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i<8; i++)
 80021ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021be:	3301      	adds	r3, #1
 80021c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021c8:	2b07      	cmp	r3, #7
 80021ca:	ddeb      	ble.n	80021a4 <main+0x1f4>
		  buffer = scratchPad[1];
 80021cc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80021d0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		  buffer = (buffer << 8) + scratchPad[0];
 80021d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	b29a      	uxth	r2, r3
 80021dc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		  sensor[j].temp = DS18B20_Temp2Float(buffer);
 80021e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f80d 	bl	800120c <DS18B20_Temp2Float>
 80021f2:	4601      	mov	r1, r0
 80021f4:	4880      	ldr	r0, [pc, #512]	; (80023f8 <main+0x448>)
 80021f6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4403      	add	r3, r0
 8002204:	3310      	adds	r3, #16
 8002206:	6019      	str	r1, [r3, #0]
	  for(int j=0; j<N; j++)
 8002208:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800220c:	3301      	adds	r3, #1
 800220e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002216:	2b03      	cmp	r3, #3
 8002218:	f77f af7d 	ble.w	8002116 <main+0x166>
	  }

	  Lcd_clear;
	  Lcd_cursor(&lcd, 0,0);
 800221c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fe0d 	bl	8001e44 <Lcd_cursor>
	  Lcd_string(&lcd, "T1=");
 800222a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800222e:	4973      	ldr	r1, [pc, #460]	; (80023fc <main+0x44c>)
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fde7 	bl	8001e04 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[0].temp, 1);
 8002236:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <main+0x448>)
 8002238:	6919      	ldr	r1, [r3, #16]
 800223a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800223e:	2201      	movs	r2, #1
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fd93 	bl	8001d6c <Lcd_float_lim>
	  Lcd_cursor(&lcd, 0,8);
 8002246:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800224a:	2208      	movs	r2, #8
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fdf8 	bl	8001e44 <Lcd_cursor>
	  Lcd_string(&lcd, "T2=");
 8002254:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002258:	4969      	ldr	r1, [pc, #420]	; (8002400 <main+0x450>)
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fdd2 	bl	8001e04 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[1].temp, 1);
 8002260:	4b65      	ldr	r3, [pc, #404]	; (80023f8 <main+0x448>)
 8002262:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002264:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002268:	2201      	movs	r2, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fd7e 	bl	8001d6c <Lcd_float_lim>
	  Lcd_cursor(&lcd, 1,0);
 8002270:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002274:	2200      	movs	r2, #0
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fde3 	bl	8001e44 <Lcd_cursor>
	  Lcd_string(&lcd, "T3=");
 800227e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002282:	4960      	ldr	r1, [pc, #384]	; (8002404 <main+0x454>)
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fdbd 	bl	8001e04 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[2].temp, 1);
 800228a:	4b5b      	ldr	r3, [pc, #364]	; (80023f8 <main+0x448>)
 800228c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800228e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002292:	2201      	movs	r2, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fd69 	bl	8001d6c <Lcd_float_lim>
	  Lcd_cursor(&lcd, 1,8);
 800229a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800229e:	2208      	movs	r2, #8
 80022a0:	2101      	movs	r1, #1
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fdce 	bl	8001e44 <Lcd_cursor>
	  Lcd_string(&lcd, "T4=");
 80022a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022ac:	4956      	ldr	r1, [pc, #344]	; (8002408 <main+0x458>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fda8 	bl	8001e04 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[3].temp, 1);
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <main+0x448>)
 80022b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80022b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022bc:	2201      	movs	r2, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fd54 	bl	8001d6c <Lcd_float_lim>
//	   f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
//	   f_lseek(&fil, fil.fsize);
//	   f_puts("Hello from CENADIF\n", &fil);
//	   f_close(&fil);

	if((count % 10) == 0 && recording == 1) // cada 10 segundos
 80022c4:	4b51      	ldr	r3, [pc, #324]	; (800240c <main+0x45c>)
 80022c6:	781a      	ldrb	r2, [r3, #0]
 80022c8:	4b51      	ldr	r3, [pc, #324]	; (8002410 <main+0x460>)
 80022ca:	fba3 1302 	umull	r1, r3, r3, r2
 80022ce:	08d9      	lsrs	r1, r3, #3
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f af04 	bne.w	80020ea <main+0x13a>
 80022e2:	4b4c      	ldr	r3, [pc, #304]	; (8002414 <main+0x464>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	f47f aeff 	bne.w	80020ea <main+0x13a>
	{
		f_mount(&fs, "", 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	494a      	ldr	r1, [pc, #296]	; (8002418 <main+0x468>)
 80022f0:	484a      	ldr	r0, [pc, #296]	; (800241c <main+0x46c>)
 80022f2:	f004 fcf7 	bl	8006ce4 <f_mount>
		f_open(&fil, "temp.log", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80022f6:	2213      	movs	r2, #19
 80022f8:	4949      	ldr	r1, [pc, #292]	; (8002420 <main+0x470>)
 80022fa:	484a      	ldr	r0, [pc, #296]	; (8002424 <main+0x474>)
 80022fc:	f004 fd3c 	bl	8006d78 <f_open>
		f_lseek(&fil, fil.fsize);
 8002300:	4b48      	ldr	r3, [pc, #288]	; (8002424 <main+0x474>)
 8002302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4619      	mov	r1, r3
 800230a:	4846      	ldr	r0, [pc, #280]	; (8002424 <main+0x474>)
 800230c:	f005 fb6c 	bl	80079e8 <f_lseek>
		m = sprintf(message, "%d, ", sample);
 8002310:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8002314:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002318:	4943      	ldr	r1, [pc, #268]	; (8002428 <main+0x478>)
 800231a:	4618      	mov	r0, r3
 800231c:	f006 fbb8 	bl	8008a90 <siprintf>
 8002320:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		m += sprintf(message+m, "%.2f, ",sensor[0].temp );
 8002324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002328:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800232c:	18d4      	adds	r4, r2, r3
 800232e:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <main+0x448>)
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f92c 	bl	8000590 <__aeabi_f2d>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	493b      	ldr	r1, [pc, #236]	; (800242c <main+0x47c>)
 800233e:	4620      	mov	r0, r4
 8002340:	f006 fba6 	bl	8008a90 <siprintf>
 8002344:	4602      	mov	r2, r0
 8002346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800234a:	4413      	add	r3, r2
 800234c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		m += sprintf(message+m, "%.2f, ",sensor[1].temp );
 8002350:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002354:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002358:	18d4      	adds	r4, r2, r3
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <main+0x448>)
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f916 	bl	8000590 <__aeabi_f2d>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4930      	ldr	r1, [pc, #192]	; (800242c <main+0x47c>)
 800236a:	4620      	mov	r0, r4
 800236c:	f006 fb90 	bl	8008a90 <siprintf>
 8002370:	4602      	mov	r2, r0
 8002372:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002376:	4413      	add	r3, r2
 8002378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		m += sprintf(message+m, "%.2f, ",sensor[2].temp );
 800237c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002380:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002384:	18d4      	adds	r4, r2, r3
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <main+0x448>)
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f900 	bl	8000590 <__aeabi_f2d>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4925      	ldr	r1, [pc, #148]	; (800242c <main+0x47c>)
 8002396:	4620      	mov	r0, r4
 8002398:	f006 fb7a 	bl	8008a90 <siprintf>
 800239c:	4602      	mov	r2, r0
 800239e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023a2:	4413      	add	r3, r2
 80023a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		m += sprintf(message+m, "%.2f\n",sensor[3].temp );
 80023a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80023b0:	18d4      	adds	r4, r2, r3
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <main+0x448>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8ea 	bl	8000590 <__aeabi_f2d>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	491b      	ldr	r1, [pc, #108]	; (8002430 <main+0x480>)
 80023c2:	4620      	mov	r0, r4
 80023c4:	f006 fb64 	bl	8008a90 <siprintf>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ce:	4413      	add	r3, r2
 80023d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		f_puts(message, &fil);
 80023d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023d8:	4912      	ldr	r1, [pc, #72]	; (8002424 <main+0x474>)
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 fe32 	bl	8008044 <f_puts>
		f_close(&fil);
 80023e0:	4810      	ldr	r0, [pc, #64]	; (8002424 <main+0x474>)
 80023e2:	f005 fad6 	bl	8007992 <f_close>
		count = 0;
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <main+0x45c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
		sample ++;
 80023ec:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80023f0:	3301      	adds	r3, #1
 80023f2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	  Presence = DS18B20_Start ();
 80023f6:	e678      	b.n	80020ea <main+0x13a>
 80023f8:	2000235c 	.word	0x2000235c
 80023fc:	0800bd98 	.word	0x0800bd98
 8002400:	0800bd9c 	.word	0x0800bd9c
 8002404:	0800bda0 	.word	0x0800bda0
 8002408:	0800bda4 	.word	0x0800bda4
 800240c:	200023ac 	.word	0x200023ac
 8002410:	cccccccd 	.word	0xcccccccd
 8002414:	200023ad 	.word	0x200023ad
 8002418:	0800bd70 	.word	0x0800bd70
 800241c:	20000218 	.word	0x20000218
 8002420:	0800bd74 	.word	0x0800bd74
 8002424:	20001248 	.word	0x20001248
 8002428:	0800bda8 	.word	0x0800bda8
 800242c:	0800bdb0 	.word	0x0800bdb0
 8002430:	0800bdb8 	.word	0x0800bdb8

08002434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b090      	sub	sp, #64	; 0x40
 8002438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800243a:	f107 0318 	add.w	r3, r7, #24
 800243e:	2228      	movs	r2, #40	; 0x28
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f005 febc 	bl	80081c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002456:	2301      	movs	r3, #1
 8002458:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800245a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002464:	2301      	movs	r3, #1
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002468:	2302      	movs	r3, #2
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800246c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002470:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002472:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002478:	f107 0318 	add.w	r3, r7, #24
 800247c:	4618      	mov	r0, r3
 800247e:	f000 ff01 	bl	8003284 <HAL_RCC_OscConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002488:	f000 f9aa 	bl	80027e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800248c:	230f      	movs	r3, #15
 800248e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002490:	2302      	movs	r3, #2
 8002492:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002498:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800249c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2102      	movs	r1, #2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 f96e 	bl	8003788 <HAL_RCC_ClockConfig>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80024b2:	f000 f995 	bl	80027e0 <Error_Handler>
  }
}
 80024b6:	bf00      	nop
 80024b8:	3740      	adds	r7, #64	; 0x40
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <MX_SPI2_Init+0x64>)
 80024c6:	4a18      	ldr	r2, [pc, #96]	; (8002528 <MX_SPI2_Init+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <MX_SPI2_Init+0x64>)
 80024cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <MX_SPI2_Init+0x64>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <MX_SPI2_Init+0x64>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <MX_SPI2_Init+0x64>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <MX_SPI2_Init+0x64>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <MX_SPI2_Init+0x64>)
 80024ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <MX_SPI2_Init+0x64>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <MX_SPI2_Init+0x64>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <MX_SPI2_Init+0x64>)
 8002500:	2200      	movs	r2, #0
 8002502:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <MX_SPI2_Init+0x64>)
 8002506:	2200      	movs	r2, #0
 8002508:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MX_SPI2_Init+0x64>)
 800250c:	220a      	movs	r2, #10
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002510:	4804      	ldr	r0, [pc, #16]	; (8002524 <MX_SPI2_Init+0x64>)
 8002512:	f001 fa95 	bl	8003a40 <HAL_SPI_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800251c:	f000 f960 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20002274 	.word	0x20002274
 8002528:	40003800 	.word	0x40003800

0800252c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002532:	f107 0308 	add.w	r3, r7, #8
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002540:	463b      	mov	r3, r7
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <MX_TIM2_Init+0x98>)
 800254a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800254e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <MX_TIM2_Init+0x98>)
 8002552:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002556:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <MX_TIM2_Init+0x98>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800255e:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <MX_TIM2_Init+0x98>)
 8002560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002564:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <MX_TIM2_Init+0x98>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <MX_TIM2_Init+0x98>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002572:	4814      	ldr	r0, [pc, #80]	; (80025c4 <MX_TIM2_Init+0x98>)
 8002574:	f001 fe82 	bl	800427c <HAL_TIM_Base_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800257e:	f000 f92f 	bl	80027e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002586:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	4619      	mov	r1, r3
 800258e:	480d      	ldr	r0, [pc, #52]	; (80025c4 <MX_TIM2_Init+0x98>)
 8002590:	f002 f868 	bl	8004664 <HAL_TIM_ConfigClockSource>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800259a:	f000 f921 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025a6:	463b      	mov	r3, r7
 80025a8:	4619      	mov	r1, r3
 80025aa:	4806      	ldr	r0, [pc, #24]	; (80025c4 <MX_TIM2_Init+0x98>)
 80025ac:	f002 fa3e 	bl	8004a2c <HAL_TIMEx_MasterConfigSynchronization>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025b6:	f000 f913 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200022cc 	.word	0x200022cc

080025c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025dc:	463b      	mov	r3, r7
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <MX_TIM3_Init+0x94>)
 80025e6:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <MX_TIM3_Init+0x98>)
 80025e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <MX_TIM3_Init+0x94>)
 80025ec:	2247      	movs	r2, #71	; 0x47
 80025ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <MX_TIM3_Init+0x94>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <MX_TIM3_Init+0x94>)
 80025f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <MX_TIM3_Init+0x94>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <MX_TIM3_Init+0x94>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800260a:	4814      	ldr	r0, [pc, #80]	; (800265c <MX_TIM3_Init+0x94>)
 800260c:	f001 fe36 	bl	800427c <HAL_TIM_Base_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002616:	f000 f8e3 	bl	80027e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4619      	mov	r1, r3
 8002626:	480d      	ldr	r0, [pc, #52]	; (800265c <MX_TIM3_Init+0x94>)
 8002628:	f002 f81c 	bl	8004664 <HAL_TIM_ConfigClockSource>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002632:	f000 f8d5 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800263e:	463b      	mov	r3, r7
 8002640:	4619      	mov	r1, r3
 8002642:	4806      	ldr	r0, [pc, #24]	; (800265c <MX_TIM3_Init+0x94>)
 8002644:	f002 f9f2 	bl	8004a2c <HAL_TIMEx_MasterConfigSynchronization>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800264e:	f000 f8c7 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20002314 	.word	0x20002314
 8002660:	40000400 	.word	0x40000400

08002664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002678:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <MX_GPIO_Init+0x110>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a3d      	ldr	r2, [pc, #244]	; (8002774 <MX_GPIO_Init+0x110>)
 800267e:	f043 0310 	orr.w	r3, r3, #16
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <MX_GPIO_Init+0x110>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002690:	4b38      	ldr	r3, [pc, #224]	; (8002774 <MX_GPIO_Init+0x110>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a37      	ldr	r2, [pc, #220]	; (8002774 <MX_GPIO_Init+0x110>)
 8002696:	f043 0320 	orr.w	r3, r3, #32
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b35      	ldr	r3, [pc, #212]	; (8002774 <MX_GPIO_Init+0x110>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	4b32      	ldr	r3, [pc, #200]	; (8002774 <MX_GPIO_Init+0x110>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a31      	ldr	r2, [pc, #196]	; (8002774 <MX_GPIO_Init+0x110>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <MX_GPIO_Init+0x110>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c0:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <MX_GPIO_Init+0x110>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a2b      	ldr	r2, [pc, #172]	; (8002774 <MX_GPIO_Init+0x110>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b29      	ldr	r3, [pc, #164]	; (8002774 <MX_GPIO_Init+0x110>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026de:	4826      	ldr	r0, [pc, #152]	; (8002778 <MX_GPIO_Init+0x114>)
 80026e0:	f000 fd9f 	bl	8003222 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80026e4:	2200      	movs	r2, #0
 80026e6:	21fe      	movs	r1, #254	; 0xfe
 80026e8:	4824      	ldr	r0, [pc, #144]	; (800277c <MX_GPIO_Init+0x118>)
 80026ea:	f000 fd9a 	bl	8003222 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80026ee:	2200      	movs	r2, #0
 80026f0:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80026f4:	4822      	ldr	r0, [pc, #136]	; (8002780 <MX_GPIO_Init+0x11c>)
 80026f6:	f000 fd94 	bl	8003222 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80026fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	2301      	movs	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2302      	movs	r3, #2
 800270a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	4619      	mov	r1, r3
 8002712:	4819      	ldr	r0, [pc, #100]	; (8002778 <MX_GPIO_Init+0x114>)
 8002714:	f000 fbea 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002718:	23fe      	movs	r3, #254	; 0xfe
 800271a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271c:	2301      	movs	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2302      	movs	r3, #2
 8002726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	4619      	mov	r1, r3
 800272e:	4813      	ldr	r0, [pc, #76]	; (800277c <MX_GPIO_Init+0x118>)
 8002730:	f000 fbdc 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002734:	2303      	movs	r3, #3
 8002736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800273c:	2302      	movs	r3, #2
 800273e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	4619      	mov	r1, r3
 8002746:	480e      	ldr	r0, [pc, #56]	; (8002780 <MX_GPIO_Init+0x11c>)
 8002748:	f000 fbd0 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 800274c:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8002750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002752:	2301      	movs	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2302      	movs	r3, #2
 800275c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 0310 	add.w	r3, r7, #16
 8002762:	4619      	mov	r1, r3
 8002764:	4806      	ldr	r0, [pc, #24]	; (8002780 <MX_GPIO_Init+0x11c>)
 8002766:	f000 fbc1 	bl	8002eec <HAL_GPIO_Init>

}
 800276a:	bf00      	nop
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	40011000 	.word	0x40011000
 800277c:	40010800 	.word	0x40010800
 8002780:	40010c00 	.word	0x40010c00

08002784 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d117      	bne.n	80027c6 <HAL_TIM_PeriodElapsedCallback+0x42>
  {
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002796:	2102      	movs	r1, #2
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800279a:	f000 fd2b 	bl	80031f4 <HAL_GPIO_ReadPin>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d102      	bne.n	80027aa <HAL_TIM_PeriodElapsedCallback+0x26>
		  recording = 1;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
	  if (recording == 1)
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d109      	bne.n	80027c6 <HAL_TIM_PeriodElapsedCallback+0x42>
	  {
		  count ++;
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	3301      	adds	r3, #1
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80027bc:	701a      	strb	r2, [r3, #0]
		  //HAL_GPIO_TogglePin (GPIOC, LED_Pin);
		  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_7);
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	4806      	ldr	r0, [pc, #24]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80027c2:	f000 fd46 	bl	8003252 <HAL_GPIO_TogglePin>
	  }
  }
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40010c00 	.word	0x40010c00
 80027d4:	200023ad 	.word	0x200023ad
 80027d8:	200023ac 	.word	0x200023ac
 80027dc:	40010800 	.word	0x40010800

080027e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e4:	b672      	cpsid	i
}
 80027e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <Error_Handler+0x8>
	...

080027ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_MspInit+0x5c>)
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_MspInit+0x5c>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6193      	str	r3, [r2, #24]
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_MspInit+0x5c>)
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_MspInit+0x5c>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <HAL_MspInit+0x5c>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	61d3      	str	r3, [r2, #28]
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_MspInit+0x5c>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_MspInit+0x60>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_MspInit+0x60>)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40021000 	.word	0x40021000
 800284c:	40010000 	.word	0x40010000

08002850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <HAL_SPI_MspInit+0x8c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d131      	bne.n	80028d4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_SPI_MspInit+0x90>)
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <HAL_SPI_MspInit+0x90>)
 8002876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287a:	61d3      	str	r3, [r2, #28]
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_SPI_MspInit+0x90>)
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_SPI_MspInit+0x90>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_SPI_MspInit+0x90>)
 800288e:	f043 0308 	orr.w	r3, r3, #8
 8002892:	6193      	str	r3, [r2, #24]
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_SPI_MspInit+0x90>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80028a0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80028a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ae:	f107 0310 	add.w	r3, r7, #16
 80028b2:	4619      	mov	r1, r3
 80028b4:	480b      	ldr	r0, [pc, #44]	; (80028e4 <HAL_SPI_MspInit+0x94>)
 80028b6:	f000 fb19 	bl	8002eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80028ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	4619      	mov	r1, r3
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <HAL_SPI_MspInit+0x94>)
 80028d0:	f000 fb0c 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028d4:	bf00      	nop
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40003800 	.word	0x40003800
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40010c00 	.word	0x40010c00

080028e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d114      	bne.n	8002924 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_TIM_Base_MspInit+0x68>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4a14      	ldr	r2, [pc, #80]	; (8002950 <HAL_TIM_Base_MspInit+0x68>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	61d3      	str	r3, [r2, #28]
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_TIM_Base_MspInit+0x68>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	201c      	movs	r0, #28
 8002918:	f000 fab1 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800291c:	201c      	movs	r0, #28
 800291e:	f000 faca 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002922:	e010      	b.n	8002946 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_TIM_Base_MspInit+0x6c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d10b      	bne.n	8002946 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_TIM_Base_MspInit+0x68>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a07      	ldr	r2, [pc, #28]	; (8002950 <HAL_TIM_Base_MspInit+0x68>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	61d3      	str	r3, [r2, #28]
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_TIM_Base_MspInit+0x68>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	40000400 	.word	0x40000400

08002958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800295c:	e7fe      	b.n	800295c <NMI_Handler+0x4>

0800295e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002962:	e7fe      	b.n	8002962 <HardFault_Handler+0x4>

08002964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <MemManage_Handler+0x4>

0800296a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800296e:	e7fe      	b.n	800296e <BusFault_Handler+0x4>

08002970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <UsageFault_Handler+0x4>

08002976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
	...

0800299c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <SysTick_Handler+0x34>)
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <SysTick_Handler+0x18>
		Timer1 --;
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <SysTick_Handler+0x34>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <SysTick_Handler+0x34>)
 80029b2:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <SysTick_Handler+0x38>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <SysTick_Handler+0x2c>
		Timer2 --;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <SysTick_Handler+0x38>)
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <SysTick_Handler+0x38>)
 80029c6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c8:	f000 f942 	bl	8002c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000210 	.word	0x20000210
 80029d4:	20000212 	.word	0x20000212

080029d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <TIM2_IRQHandler+0x10>)
 80029de:	f001 fd39 	bl	8004454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200022cc 	.word	0x200022cc

080029ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return 1;
 80029f0:	2301      	movs	r3, #1
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <_kill>:

int _kill(int pid, int sig)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a04:	f005 fbb2 	bl	800816c <__errno>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2216      	movs	r2, #22
 8002a0c:	601a      	str	r2, [r3, #0]
  return -1;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_exit>:

void _exit (int status)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a22:	f04f 31ff 	mov.w	r1, #4294967295
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffe7 	bl	80029fa <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a2c:	e7fe      	b.n	8002a2c <_exit+0x12>

08002a2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e00a      	b.n	8002a56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a40:	f3af 8000 	nop.w
 8002a44:	4601      	mov	r1, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	60ba      	str	r2, [r7, #8]
 8002a4c:	b2ca      	uxtb	r2, r1
 8002a4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	dbf0      	blt.n	8002a40 <_read+0x12>
  }

  return len;
 8002a5e:	687b      	ldr	r3, [r7, #4]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	e009      	b.n	8002a8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	60ba      	str	r2, [r7, #8]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	dbf1      	blt.n	8002a7a <_write+0x12>
  }
  return len;
 8002a96:	687b      	ldr	r3, [r7, #4]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_close>:

int _close(int file)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <_isatty>:

int _isatty(int file)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002adc:	2301      	movs	r3, #1
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <_sbrk+0x5c>)
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <_sbrk+0x60>)
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <_sbrk+0x64>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <_sbrk+0x64>)
 8002b1e:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <_sbrk+0x68>)
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <_sbrk+0x64>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d207      	bcs.n	8002b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b30:	f005 fb1c 	bl	800816c <__errno>
 8002b34:	4603      	mov	r3, r0
 8002b36:	220c      	movs	r2, #12
 8002b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e009      	b.n	8002b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <_sbrk+0x64>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <_sbrk+0x64>)
 8002b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20005000 	.word	0x20005000
 8002b60:	00000400 	.word	0x00000400
 8002b64:	200023b0 	.word	0x200023b0
 8002b68:	20002400 	.word	0x20002400

08002b6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b78:	f7ff fff8 	bl	8002b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b7c:	480b      	ldr	r0, [pc, #44]	; (8002bac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b7e:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b80:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b84:	e002      	b.n	8002b8c <LoopCopyDataInit>

08002b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b8a:	3304      	adds	r3, #4

08002b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b90:	d3f9      	bcc.n	8002b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b94:	4c09      	ldr	r4, [pc, #36]	; (8002bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b98:	e001      	b.n	8002b9e <LoopFillZerobss>

08002b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b9c:	3204      	adds	r2, #4

08002b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba0:	d3fb      	bcc.n	8002b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ba2:	f005 fae9 	bl	8008178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ba6:	f7ff fa03 	bl	8001fb0 <main>
  bx lr
 8002baa:	4770      	bx	lr
  ldr r0, =_sdata
 8002bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002bb4:	0800c2f8 	.word	0x0800c2f8
  ldr r2, =_sbss
 8002bb8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002bbc:	200023fc 	.word	0x200023fc

08002bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bc0:	e7fe      	b.n	8002bc0 <ADC1_2_IRQHandler>
	...

08002bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_Init+0x28>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a07      	ldr	r2, [pc, #28]	; (8002bec <HAL_Init+0x28>)
 8002bce:	f043 0310 	orr.w	r3, r3, #16
 8002bd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd4:	2003      	movs	r0, #3
 8002bd6:	f000 f947 	bl	8002e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bda:	200f      	movs	r0, #15
 8002bdc:	f000 f808 	bl	8002bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002be0:	f7ff fe04 	bl	80027ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40022000 	.word	0x40022000

08002bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_InitTick+0x54>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_InitTick+0x58>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f95f 	bl	8002ed2 <HAL_SYSTICK_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00e      	b.n	8002c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b0f      	cmp	r3, #15
 8002c22:	d80a      	bhi.n	8002c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c24:	2200      	movs	r2, #0
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f000 f927 	bl	8002e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c30:	4a06      	ldr	r2, [pc, #24]	; (8002c4c <HAL_InitTick+0x5c>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000004 	.word	0x20000004
 8002c48:	2000000c 	.word	0x2000000c
 8002c4c:	20000008 	.word	0x20000008

08002c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_IncTick+0x1c>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_IncTick+0x20>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <HAL_IncTick+0x20>)
 8002c62:	6013      	str	r3, [r2, #0]
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	2000000c 	.word	0x2000000c
 8002c70:	200023b4 	.word	0x200023b4

08002c74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return uwTick;
 8002c78:	4b02      	ldr	r3, [pc, #8]	; (8002c84 <HAL_GetTick+0x10>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	200023b4 	.word	0x200023b4

08002c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c90:	f7ff fff0 	bl	8002c74 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d005      	beq.n	8002cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_Delay+0x44>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cae:	bf00      	nop
 8002cb0:	f7ff ffe0 	bl	8002c74 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d8f7      	bhi.n	8002cb0 <HAL_Delay+0x28>
  {
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000000c 	.word	0x2000000c

08002cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cec:	4013      	ands	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d02:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <__NVIC_GetPriorityGrouping+0x18>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 0307 	and.w	r3, r3, #7
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	db0b      	blt.n	8002d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4906      	ldr	r1, [pc, #24]	; (8002d68 <__NVIC_EnableIRQ+0x34>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2001      	movs	r0, #1
 8002d56:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	e000e100 	.word	0xe000e100

08002d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	db0a      	blt.n	8002d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	490c      	ldr	r1, [pc, #48]	; (8002db8 <__NVIC_SetPriority+0x4c>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d94:	e00a      	b.n	8002dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4908      	ldr	r1, [pc, #32]	; (8002dbc <__NVIC_SetPriority+0x50>)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3b04      	subs	r3, #4
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	440b      	add	r3, r1
 8002daa:	761a      	strb	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000e100 	.word	0xe000e100
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f1c3 0307 	rsb	r3, r3, #7
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	bf28      	it	cs
 8002dde:	2304      	movcs	r3, #4
 8002de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d902      	bls.n	8002df0 <NVIC_EncodePriority+0x30>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3b03      	subs	r3, #3
 8002dee:	e000      	b.n	8002df2 <NVIC_EncodePriority+0x32>
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	401a      	ands	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e08:	f04f 31ff 	mov.w	r1, #4294967295
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	43d9      	mvns	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	4313      	orrs	r3, r2
         );
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e34:	d301      	bcc.n	8002e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00f      	b.n	8002e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <SysTick_Config+0x40>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e42:	210f      	movs	r1, #15
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	f7ff ff90 	bl	8002d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <SysTick_Config+0x40>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <SysTick_Config+0x40>)
 8002e54:	2207      	movs	r2, #7
 8002e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000e010 	.word	0xe000e010

08002e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff2d 	bl	8002cd0 <__NVIC_SetPriorityGrouping>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e90:	f7ff ff42 	bl	8002d18 <__NVIC_GetPriorityGrouping>
 8002e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	6978      	ldr	r0, [r7, #20]
 8002e9c:	f7ff ff90 	bl	8002dc0 <NVIC_EncodePriority>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff5f 	bl	8002d6c <__NVIC_SetPriority>
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff35 	bl	8002d34 <__NVIC_EnableIRQ>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ffa2 	bl	8002e24 <SysTick_Config>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b08b      	sub	sp, #44	; 0x2c
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efe:	e169      	b.n	80031d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f00:	2201      	movs	r2, #1
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	f040 8158 	bne.w	80031ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a9a      	ldr	r2, [pc, #616]	; (800318c <HAL_GPIO_Init+0x2a0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d05e      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f28:	4a98      	ldr	r2, [pc, #608]	; (800318c <HAL_GPIO_Init+0x2a0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d875      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f2e:	4a98      	ldr	r2, [pc, #608]	; (8003190 <HAL_GPIO_Init+0x2a4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d058      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f34:	4a96      	ldr	r2, [pc, #600]	; (8003190 <HAL_GPIO_Init+0x2a4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d86f      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f3a:	4a96      	ldr	r2, [pc, #600]	; (8003194 <HAL_GPIO_Init+0x2a8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d052      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f40:	4a94      	ldr	r2, [pc, #592]	; (8003194 <HAL_GPIO_Init+0x2a8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d869      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f46:	4a94      	ldr	r2, [pc, #592]	; (8003198 <HAL_GPIO_Init+0x2ac>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d04c      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f4c:	4a92      	ldr	r2, [pc, #584]	; (8003198 <HAL_GPIO_Init+0x2ac>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d863      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f52:	4a92      	ldr	r2, [pc, #584]	; (800319c <HAL_GPIO_Init+0x2b0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d046      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f58:	4a90      	ldr	r2, [pc, #576]	; (800319c <HAL_GPIO_Init+0x2b0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d85d      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f5e:	2b12      	cmp	r3, #18
 8002f60:	d82a      	bhi.n	8002fb8 <HAL_GPIO_Init+0xcc>
 8002f62:	2b12      	cmp	r3, #18
 8002f64:	d859      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <HAL_GPIO_Init+0x80>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002fe7 	.word	0x08002fe7
 8002f70:	08002fc1 	.word	0x08002fc1
 8002f74:	08002fd3 	.word	0x08002fd3
 8002f78:	08003015 	.word	0x08003015
 8002f7c:	0800301b 	.word	0x0800301b
 8002f80:	0800301b 	.word	0x0800301b
 8002f84:	0800301b 	.word	0x0800301b
 8002f88:	0800301b 	.word	0x0800301b
 8002f8c:	0800301b 	.word	0x0800301b
 8002f90:	0800301b 	.word	0x0800301b
 8002f94:	0800301b 	.word	0x0800301b
 8002f98:	0800301b 	.word	0x0800301b
 8002f9c:	0800301b 	.word	0x0800301b
 8002fa0:	0800301b 	.word	0x0800301b
 8002fa4:	0800301b 	.word	0x0800301b
 8002fa8:	0800301b 	.word	0x0800301b
 8002fac:	0800301b 	.word	0x0800301b
 8002fb0:	08002fc9 	.word	0x08002fc9
 8002fb4:	08002fdd 	.word	0x08002fdd
 8002fb8:	4a79      	ldr	r2, [pc, #484]	; (80031a0 <HAL_GPIO_Init+0x2b4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fbe:	e02c      	b.n	800301a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	623b      	str	r3, [r7, #32]
          break;
 8002fc6:	e029      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	623b      	str	r3, [r7, #32]
          break;
 8002fd0:	e024      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	623b      	str	r3, [r7, #32]
          break;
 8002fda:	e01f      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	623b      	str	r3, [r7, #32]
          break;
 8002fe4:	e01a      	b.n	800301c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fee:	2304      	movs	r3, #4
 8002ff0:	623b      	str	r3, [r7, #32]
          break;
 8002ff2:	e013      	b.n	800301c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	611a      	str	r2, [r3, #16]
          break;
 8003006:	e009      	b.n	800301c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003008:	2308      	movs	r3, #8
 800300a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	615a      	str	r2, [r3, #20]
          break;
 8003012:	e003      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003014:	2300      	movs	r3, #0
 8003016:	623b      	str	r3, [r7, #32]
          break;
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x130>
          break;
 800301a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2bff      	cmp	r3, #255	; 0xff
 8003020:	d801      	bhi.n	8003026 <HAL_GPIO_Init+0x13a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	e001      	b.n	800302a <HAL_GPIO_Init+0x13e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3304      	adds	r3, #4
 800302a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2bff      	cmp	r3, #255	; 0xff
 8003030:	d802      	bhi.n	8003038 <HAL_GPIO_Init+0x14c>
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	e002      	b.n	800303e <HAL_GPIO_Init+0x152>
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	3b08      	subs	r3, #8
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	210f      	movs	r1, #15
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	401a      	ands	r2, r3
 8003050:	6a39      	ldr	r1, [r7, #32]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	431a      	orrs	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80b1 	beq.w	80031ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800306c:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <HAL_GPIO_Init+0x2b8>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4a4c      	ldr	r2, [pc, #304]	; (80031a4 <HAL_GPIO_Init+0x2b8>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6193      	str	r3, [r2, #24]
 8003078:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <HAL_GPIO_Init+0x2b8>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003084:	4a48      	ldr	r2, [pc, #288]	; (80031a8 <HAL_GPIO_Init+0x2bc>)
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3302      	adds	r3, #2
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a40      	ldr	r2, [pc, #256]	; (80031ac <HAL_GPIO_Init+0x2c0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <HAL_GPIO_Init+0x1ec>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a3f      	ldr	r2, [pc, #252]	; (80031b0 <HAL_GPIO_Init+0x2c4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00d      	beq.n	80030d4 <HAL_GPIO_Init+0x1e8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a3e      	ldr	r2, [pc, #248]	; (80031b4 <HAL_GPIO_Init+0x2c8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <HAL_GPIO_Init+0x1e4>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3d      	ldr	r2, [pc, #244]	; (80031b8 <HAL_GPIO_Init+0x2cc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <HAL_GPIO_Init+0x1e0>
 80030c8:	2303      	movs	r3, #3
 80030ca:	e006      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030cc:	2304      	movs	r3, #4
 80030ce:	e004      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e002      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030d8:	2300      	movs	r3, #0
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	f002 0203 	and.w	r2, r2, #3
 80030e0:	0092      	lsls	r2, r2, #2
 80030e2:	4093      	lsls	r3, r2
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030ea:	492f      	ldr	r1, [pc, #188]	; (80031a8 <HAL_GPIO_Init+0x2bc>)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3302      	adds	r3, #2
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003104:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	492c      	ldr	r1, [pc, #176]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003112:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	43db      	mvns	r3, r3
 800311a:	4928      	ldr	r1, [pc, #160]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800311c:	4013      	ands	r3, r2
 800311e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	4922      	ldr	r1, [pc, #136]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	60cb      	str	r3, [r1, #12]
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	43db      	mvns	r3, r3
 8003142:	491e      	ldr	r1, [pc, #120]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003144:	4013      	ands	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4918      	ldr	r1, [pc, #96]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
 8003160:	e006      	b.n	8003170 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	43db      	mvns	r3, r3
 800316a:	4914      	ldr	r1, [pc, #80]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800316c:	4013      	ands	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d021      	beq.n	80031c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	490e      	ldr	r1, [pc, #56]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	600b      	str	r3, [r1, #0]
 8003188:	e021      	b.n	80031ce <HAL_GPIO_Init+0x2e2>
 800318a:	bf00      	nop
 800318c:	10320000 	.word	0x10320000
 8003190:	10310000 	.word	0x10310000
 8003194:	10220000 	.word	0x10220000
 8003198:	10210000 	.word	0x10210000
 800319c:	10120000 	.word	0x10120000
 80031a0:	10110000 	.word	0x10110000
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40010800 	.word	0x40010800
 80031b0:	40010c00 	.word	0x40010c00
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_GPIO_Init+0x304>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	4909      	ldr	r1, [pc, #36]	; (80031f0 <HAL_GPIO_Init+0x304>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	3301      	adds	r3, #1
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f47f ae8e 	bne.w	8002f00 <HAL_GPIO_Init+0x14>
  }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	372c      	adds	r7, #44	; 0x2c
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	40010400 	.word	0x40010400

080031f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e001      	b.n	8003216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	807b      	strh	r3, [r7, #2]
 800322e:	4613      	mov	r3, r2
 8003230:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003232:	787b      	ldrb	r3, [r7, #1]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800323e:	e003      	b.n	8003248 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	041a      	lsls	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	611a      	str	r2, [r3, #16]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003264:	887a      	ldrh	r2, [r7, #2]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4013      	ands	r3, r2
 800326a:	041a      	lsls	r2, r3, #16
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43d9      	mvns	r1, r3
 8003270:	887b      	ldrh	r3, [r7, #2]
 8003272:	400b      	ands	r3, r1
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	611a      	str	r2, [r3, #16]
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e272      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8087 	beq.w	80033b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a4:	4b92      	ldr	r3, [pc, #584]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d00c      	beq.n	80032ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b0:	4b8f      	ldr	r3, [pc, #572]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d112      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5e>
 80032bc:	4b8c      	ldr	r3, [pc, #560]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ca:	4b89      	ldr	r3, [pc, #548]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d06c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x12c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d168      	bne.n	80033b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e24c      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x76>
 80032ec:	4b80      	ldr	r3, [pc, #512]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a7f      	ldr	r2, [pc, #508]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e02e      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b7b      	ldr	r3, [pc, #492]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7a      	ldr	r2, [pc, #488]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b78      	ldr	r3, [pc, #480]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a77      	ldr	r2, [pc, #476]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e01d      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0xbc>
 8003326:	4b72      	ldr	r3, [pc, #456]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a71      	ldr	r2, [pc, #452]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b6f      	ldr	r3, [pc, #444]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6e      	ldr	r2, [pc, #440]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 8003340:	4b6b      	ldr	r3, [pc, #428]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6a      	ldr	r2, [pc, #424]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a67      	ldr	r2, [pc, #412]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7ff fc88 	bl	8002c74 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7ff fc84 	bl	8002c74 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e200      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0xe4>
 8003386:	e014      	b.n	80033b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7ff fc74 	bl	8002c74 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7ff fc70 	bl	8002c74 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1ec      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x10c>
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d063      	beq.n	8003486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033be:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033ca:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d11c      	bne.n	8003410 <HAL_RCC_OscConfig+0x18c>
 80033d6:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_RCC_OscConfig+0x176>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e1c0      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4939      	ldr	r1, [pc, #228]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	e03a      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7ff fc29 	bl	8002c74 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7ff fc25 	bl	8002c74 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1a1      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4927      	ldr	r1, [pc, #156]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	e015      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7ff fc08 	bl	8002c74 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7ff fc04 	bl	8002c74 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e180      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d03a      	beq.n	8003508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d019      	beq.n	80034ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7ff fbe8 	bl	8002c74 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7ff fbe4 	bl	8002c74 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e160      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034c6:	2001      	movs	r0, #1
 80034c8:	f000 fa9c 	bl	8003a04 <RCC_Delay>
 80034cc:	e01c      	b.n	8003508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7ff fbce 	bl	8002c74 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034da:	e00f      	b.n	80034fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034dc:	f7ff fbca 	bl	8002c74 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d908      	bls.n	80034fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e146      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	42420000 	.word	0x42420000
 80034f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	4b92      	ldr	r3, [pc, #584]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e9      	bne.n	80034dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a6 	beq.w	8003662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b8b      	ldr	r3, [pc, #556]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4a87      	ldr	r2, [pc, #540]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	61d3      	str	r3, [r2, #28]
 8003532:	4b85      	ldr	r3, [pc, #532]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b82      	ldr	r3, [pc, #520]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b7f      	ldr	r3, [pc, #508]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7e      	ldr	r2, [pc, #504]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7ff fb8b 	bl	8002c74 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7ff fb87 	bl	8002c74 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b64      	cmp	r3, #100	; 0x64
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e103      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b75      	ldr	r3, [pc, #468]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x312>
 8003588:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4a6e      	ldr	r2, [pc, #440]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	e02d      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x334>
 800359e:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4a69      	ldr	r2, [pc, #420]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6213      	str	r3, [r2, #32]
 80035aa:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4a66      	ldr	r2, [pc, #408]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	6213      	str	r3, [r2, #32]
 80035b6:	e01c      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d10c      	bne.n	80035da <HAL_RCC_OscConfig+0x356>
 80035c0:	4b61      	ldr	r3, [pc, #388]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4a60      	ldr	r2, [pc, #384]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6213      	str	r3, [r2, #32]
 80035cc:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a5d      	ldr	r2, [pc, #372]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	e00b      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 80035da:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4a5a      	ldr	r2, [pc, #360]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6213      	str	r3, [r2, #32]
 80035e6:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4a57      	ldr	r2, [pc, #348]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d015      	beq.n	8003626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7ff fb3b 	bl	8002c74 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7ff fb37 	bl	8002c74 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0b1      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RCC_OscConfig+0x37e>
 8003624:	e014      	b.n	8003650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7ff fb25 	bl	8002c74 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7ff fb21 	bl	8002c74 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e09b      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	4b40      	ldr	r3, [pc, #256]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ee      	bne.n	800362e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003656:	4b3c      	ldr	r3, [pc, #240]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4a3b      	ldr	r2, [pc, #236]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8087 	beq.w	800377a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d061      	beq.n	800373c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d146      	bne.n	800370e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003680:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7ff faf5 	bl	8002c74 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7ff faf1 	bl	8002c74 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e06d      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d108      	bne.n	80036c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	4921      	ldr	r1, [pc, #132]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a19      	ldr	r1, [r3, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	430b      	orrs	r3, r1
 80036da:	491b      	ldr	r1, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7ff fac5 	bl	8002c74 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7ff fac1 	bl	8002c74 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x46a>
 800370c:	e035      	b.n	800377a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_RCC_OscConfig+0x4cc>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7ff faae 	bl	8002c74 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7ff faaa 	bl	8002c74 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e026      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x498>
 800373a:	e01e      	b.n	800377a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e019      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
 8003750:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_OscConfig+0x500>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	429a      	cmp	r2, r3
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000

08003788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0d0      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d910      	bls.n	80037cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0207 	bic.w	r2, r3, #7
 80037b2:	4965      	ldr	r1, [pc, #404]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d040      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d115      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e073      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b3d      	ldr	r3, [pc, #244]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06b      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4936      	ldr	r1, [pc, #216]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003878:	f7ff f9fc 	bl	8002c74 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7ff f9f8 	bl	8002c74 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e053      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a8:	4b27      	ldr	r3, [pc, #156]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d210      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0207 	bic.w	r2, r3, #7
 80038be:	4922      	ldr	r1, [pc, #136]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1cc>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1d0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff f95a 	bl	8002bf0 <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40022000 	.word	0x40022000
 800394c:	40021000 	.word	0x40021000
 8003950:	0800be40 	.word	0x0800be40
 8003954:	20000004 	.word	0x20000004
 8003958:	20000008 	.word	0x20000008

0800395c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003976:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b04      	cmp	r3, #4
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x30>
 8003986:	2b08      	cmp	r3, #8
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x36>
 800398a:	e027      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800398e:	613b      	str	r3, [r7, #16]
      break;
 8003990:	e027      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	0c9b      	lsrs	r3, r3, #18
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	0c5b      	lsrs	r3, r3, #17
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	4a11      	ldr	r2, [pc, #68]	; (80039fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80039b6:	5cd3      	ldrb	r3, [r2, r3]
 80039b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a0d      	ldr	r2, [pc, #52]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80039be:	fb03 f202 	mul.w	r2, r3, r2
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e004      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	613b      	str	r3, [r7, #16]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80039de:	613b      	str	r3, [r7, #16]
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	693b      	ldr	r3, [r7, #16]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	007a1200 	.word	0x007a1200
 80039f8:	0800be50 	.word	0x0800be50
 80039fc:	0800be60 	.word	0x0800be60
 8003a00:	003d0900 	.word	0x003d0900

08003a04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <RCC_Delay+0x34>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <RCC_Delay+0x38>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0a5b      	lsrs	r3, r3, #9
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a20:	bf00      	nop
  }
  while (Delay --);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e5a      	subs	r2, r3, #1
 8003a26:	60fa      	str	r2, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f9      	bne.n	8003a20 <RCC_Delay+0x1c>
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	20000004 	.word	0x20000004
 8003a3c:	10624dd3 	.word	0x10624dd3

08003a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e076      	b.n	8003b40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a62:	d009      	beq.n	8003a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
 8003a6a:	e005      	b.n	8003a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fe fedc 	bl	8002850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	ea42 0103 	orr.w	r1, r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	0c1a      	lsrs	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f002 0204 	and.w	r2, r2, #4
 8003b1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_SPI_Transmit+0x22>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e12d      	b.n	8003dc6 <HAL_SPI_Transmit+0x27e>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b72:	f7ff f87f 	bl	8002c74 <HAL_GetTick>
 8003b76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d002      	beq.n	8003b8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b8c:	e116      	b.n	8003dbc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_SPI_Transmit+0x52>
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b9e:	e10d      	b.n	8003dbc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be6:	d10f      	bne.n	8003c08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d007      	beq.n	8003c26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2e:	d14f      	bne.n	8003cd0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_SPI_Transmit+0xf6>
 8003c38:	8afb      	ldrh	r3, [r7, #22]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d142      	bne.n	8003cc4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	881a      	ldrh	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	1c9a      	adds	r2, r3, #2
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c62:	e02f      	b.n	8003cc4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d112      	bne.n	8003c98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	881a      	ldrh	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c96:	e015      	b.n	8003cc4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c98:	f7fe ffec 	bl	8002c74 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d803      	bhi.n	8003cb0 <HAL_SPI_Transmit+0x168>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d102      	bne.n	8003cb6 <HAL_SPI_Transmit+0x16e>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003cc2:	e07b      	b.n	8003dbc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ca      	bne.n	8003c64 <HAL_SPI_Transmit+0x11c>
 8003cce:	e050      	b.n	8003d72 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_SPI_Transmit+0x196>
 8003cd8:	8afb      	ldrh	r3, [r7, #22]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d144      	bne.n	8003d68 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	7812      	ldrb	r2, [r2, #0]
 8003cea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d04:	e030      	b.n	8003d68 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d113      	bne.n	8003d3c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d3a:	e015      	b.n	8003d68 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d3c:	f7fe ff9a 	bl	8002c74 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d803      	bhi.n	8003d54 <HAL_SPI_Transmit+0x20c>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d102      	bne.n	8003d5a <HAL_SPI_Transmit+0x212>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d66:	e029      	b.n	8003dbc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1c9      	bne.n	8003d06 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fa62 	bl	8004240 <SPI_EndRxTxTransaction>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e003      	b.n	8003dbc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b08c      	sub	sp, #48	; 0x30
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_SPI_TransmitReceive+0x26>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e198      	b.n	8004126 <HAL_SPI_TransmitReceive+0x358>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dfc:	f7fe ff3a 	bl	8002c74 <HAL_GetTick>
 8003e00:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e12:	887b      	ldrh	r3, [r7, #2]
 8003e14:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d00f      	beq.n	8003e3e <HAL_SPI_TransmitReceive+0x70>
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e24:	d107      	bne.n	8003e36 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <HAL_SPI_TransmitReceive+0x68>
 8003e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d003      	beq.n	8003e3e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
 8003e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e3c:	e16d      	b.n	800411a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x82>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x82>
 8003e4a:	887b      	ldrh	r3, [r7, #2]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e56:	e160      	b.n	800411a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d003      	beq.n	8003e6c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2205      	movs	r2, #5
 8003e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	887a      	ldrh	r2, [r7, #2]
 8003e82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	887a      	ldrh	r2, [r7, #2]
 8003e8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	887a      	ldrh	r2, [r7, #2]
 8003e94:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d007      	beq.n	8003ec0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec8:	d17c      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x10a>
 8003ed2:	8b7b      	ldrh	r3, [r7, #26]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d16a      	bne.n	8003fae <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	881a      	ldrh	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	1c9a      	adds	r2, r3, #2
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003efc:	e057      	b.n	8003fae <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d11b      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x176>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d016      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x176>
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d113      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d119      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x1b8>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d014      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	b292      	uxth	r2, r2
 8003f68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	1c9a      	adds	r2, r3, #2
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f82:	2301      	movs	r3, #1
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f86:	f7fe fe75 	bl	8002c74 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d80b      	bhi.n	8003fae <HAL_SPI_TransmitReceive+0x1e0>
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d007      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003fac:	e0b5      	b.n	800411a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1a2      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x130>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d19d      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x130>
 8003fc2:	e080      	b.n	80040c6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x204>
 8003fcc:	8b7b      	ldrh	r3, [r7, #26]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d16f      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	7812      	ldrb	r2, [r2, #0]
 8003fde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff8:	e05b      	b.n	80040b2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	d11c      	bne.n	8004042 <HAL_SPI_TransmitReceive+0x274>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d017      	beq.n	8004042 <HAL_SPI_TransmitReceive+0x274>
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d114      	bne.n	8004042 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d119      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x2b6>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d014      	beq.n	8004084 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004080:	2301      	movs	r3, #1
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004084:	f7fe fdf6 	bl	8002c74 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004090:	429a      	cmp	r2, r3
 8004092:	d803      	bhi.n	800409c <HAL_SPI_TransmitReceive+0x2ce>
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d102      	bne.n	80040a2 <HAL_SPI_TransmitReceive+0x2d4>
 800409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d107      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80040b0:	e033      	b.n	800411a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d19e      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x22c>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d199      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f8b8 	bl	8004240 <SPI_EndRxTxTransaction>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d006      	beq.n	80040e4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040e2:	e01a      	b.n	800411a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004110:	e003      	b.n	800411a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004126:	4618      	mov	r0, r3
 8004128:	3730      	adds	r7, #48	; 0x30
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004140:	f7fe fd98 	bl	8002c74 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4413      	add	r3, r2
 800414e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004150:	f7fe fd90 	bl	8002c74 <HAL_GetTick>
 8004154:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004156:	4b39      	ldr	r3, [pc, #228]	; (800423c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	0d1b      	lsrs	r3, r3, #20
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	fb02 f303 	mul.w	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004166:	e054      	b.n	8004212 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d050      	beq.n	8004212 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004170:	f7fe fd80 	bl	8002c74 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	429a      	cmp	r2, r3
 800417e:	d902      	bls.n	8004186 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d13d      	bne.n	8004202 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419e:	d111      	bne.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a8:	d004      	beq.n	80041b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b2:	d107      	bne.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041cc:	d10f      	bne.n	80041ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e017      	b.n	8004232 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3b01      	subs	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	429a      	cmp	r2, r3
 8004220:	bf0c      	ite	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	2300      	movne	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	429a      	cmp	r2, r3
 800422e:	d19b      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000004 	.word	0x20000004

08004240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2200      	movs	r2, #0
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7ff ff6a 	bl	8004130 <SPI_WaitFlagStateUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	f043 0220 	orr.w	r2, r3, #32
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e000      	b.n	8004274 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e041      	b.n	8004312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fe fb20 	bl	80028e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f000 fabe 	bl	800483c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d001      	beq.n	8004334 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e032      	b.n	800439a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <HAL_TIM_Base_Start+0x88>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00e      	beq.n	8004364 <HAL_TIM_Base_Start+0x48>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434e:	d009      	beq.n	8004364 <HAL_TIM_Base_Start+0x48>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <HAL_TIM_Base_Start+0x8c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d004      	beq.n	8004364 <HAL_TIM_Base_Start+0x48>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a13      	ldr	r2, [pc, #76]	; (80043ac <HAL_TIM_Base_Start+0x90>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d111      	bne.n	8004388 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b06      	cmp	r3, #6
 8004374:	d010      	beq.n	8004398 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004386:	e007      	b.n	8004398 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800

080043b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d001      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e03a      	b.n	800443e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_TIM_Base_Start_IT+0x98>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00e      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x58>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f2:	d009      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x58>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <HAL_TIM_Base_Start_IT+0x9c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x58>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_TIM_Base_Start_IT+0xa0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d111      	bne.n	800442c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b06      	cmp	r3, #6
 8004418:	d010      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442a:	e007      	b.n	800443c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800

08004454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0202 	mvn.w	r2, #2
 8004480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9b4 	bl	8004804 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9a7 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f9b6 	bl	8004816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0204 	mvn.w	r2, #4
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2202      	movs	r2, #2
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f98a 	bl	8004804 <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f97d 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f98c 	bl	8004816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b08      	cmp	r3, #8
 8004510:	d122      	bne.n	8004558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b08      	cmp	r3, #8
 800451e:	d11b      	bne.n	8004558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0208 	mvn.w	r2, #8
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2204      	movs	r2, #4
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f960 	bl	8004804 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f953 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f962 	bl	8004816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b10      	cmp	r3, #16
 8004564:	d122      	bne.n	80045ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b10      	cmp	r3, #16
 8004572:	d11b      	bne.n	80045ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0210 	mvn.w	r2, #16
 800457c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2208      	movs	r2, #8
 8004582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f936 	bl	8004804 <HAL_TIM_IC_CaptureCallback>
 8004598:	e005      	b.n	80045a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f929 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f938 	bl	8004816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d10e      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d107      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0201 	mvn.w	r2, #1
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fe f8d6 	bl	8002784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d10e      	bne.n	8004604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	2b80      	cmp	r3, #128	; 0x80
 80045f2:	d107      	bne.n	8004604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fa7b 	bl	8004afa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d10e      	bne.n	8004630 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d107      	bne.n	8004630 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8fc 	bl	8004828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b20      	cmp	r3, #32
 800463c:	d10e      	bne.n	800465c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b20      	cmp	r3, #32
 800464a:	d107      	bne.n	800465c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0220 	mvn.w	r2, #32
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa46 	bl	8004ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_TIM_ConfigClockSource+0x1c>
 800467c:	2302      	movs	r3, #2
 800467e:	e0b4      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x186>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800469e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b8:	d03e      	beq.n	8004738 <HAL_TIM_ConfigClockSource+0xd4>
 80046ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046be:	f200 8087 	bhi.w	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c6:	f000 8086 	beq.w	80047d6 <HAL_TIM_ConfigClockSource+0x172>
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	d87f      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b70      	cmp	r3, #112	; 0x70
 80046d2:	d01a      	beq.n	800470a <HAL_TIM_ConfigClockSource+0xa6>
 80046d4:	2b70      	cmp	r3, #112	; 0x70
 80046d6:	d87b      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b60      	cmp	r3, #96	; 0x60
 80046da:	d050      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x11a>
 80046dc:	2b60      	cmp	r3, #96	; 0x60
 80046de:	d877      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b50      	cmp	r3, #80	; 0x50
 80046e2:	d03c      	beq.n	800475e <HAL_TIM_ConfigClockSource+0xfa>
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d873      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d058      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x13a>
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d86f      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b30      	cmp	r3, #48	; 0x30
 80046f2:	d064      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15a>
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	d86b      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d060      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15a>
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d867      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d05c      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15a>
 8004704:	2b10      	cmp	r3, #16
 8004706:	d05a      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15a>
 8004708:	e062      	b.n	80047d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6899      	ldr	r1, [r3, #8]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f000 f968 	bl	80049ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800472c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	609a      	str	r2, [r3, #8]
      break;
 8004736:	e04f      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6899      	ldr	r1, [r3, #8]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f000 f951 	bl	80049ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800475a:	609a      	str	r2, [r3, #8]
      break;
 800475c:	e03c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	461a      	mov	r2, r3
 800476c:	f000 f8c8 	bl	8004900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2150      	movs	r1, #80	; 0x50
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f91f 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 800477c:	e02c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	461a      	mov	r2, r3
 800478c:	f000 f8e6 	bl	800495c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2160      	movs	r1, #96	; 0x60
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f90f 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 800479c:	e01c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 f8a8 	bl	8004900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2140      	movs	r1, #64	; 0x40
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f8ff 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 80047bc:	e00c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f000 f8f6 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 80047ce:	e003      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
      break;
 80047d4:	e000      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
	...

0800483c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a29      	ldr	r2, [pc, #164]	; (80048f4 <TIM_Base_SetConfig+0xb8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00b      	beq.n	800486c <TIM_Base_SetConfig+0x30>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d007      	beq.n	800486c <TIM_Base_SetConfig+0x30>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a26      	ldr	r2, [pc, #152]	; (80048f8 <TIM_Base_SetConfig+0xbc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0x30>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a25      	ldr	r2, [pc, #148]	; (80048fc <TIM_Base_SetConfig+0xc0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d108      	bne.n	800487e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <TIM_Base_SetConfig+0xb8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00b      	beq.n	800489e <TIM_Base_SetConfig+0x62>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488c:	d007      	beq.n	800489e <TIM_Base_SetConfig+0x62>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <TIM_Base_SetConfig+0xbc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d003      	beq.n	800489e <TIM_Base_SetConfig+0x62>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a18      	ldr	r2, [pc, #96]	; (80048fc <TIM_Base_SetConfig+0xc0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d108      	bne.n	80048b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a07      	ldr	r2, [pc, #28]	; (80048f4 <TIM_Base_SetConfig+0xb8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d103      	bne.n	80048e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	615a      	str	r2, [r3, #20]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	40012c00 	.word	0x40012c00
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800

08004900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f023 0201 	bic.w	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f023 030a 	bic.w	r3, r3, #10
 800493c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	031b      	lsls	r3, r3, #12
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004998:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f043 0307 	orr.w	r3, r3, #7
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	609a      	str	r2, [r3, #8]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	021a      	lsls	r2, r3, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	609a      	str	r2, [r3, #8]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e046      	b.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a16      	ldr	r2, [pc, #88]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d009      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a10      	ldr	r2, [pc, #64]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800

08004ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004b10:	4904      	ldr	r1, [pc, #16]	; (8004b24 <MX_FATFS_Init+0x18>)
 8004b12:	4805      	ldr	r0, [pc, #20]	; (8004b28 <MX_FATFS_Init+0x1c>)
 8004b14:	f003 fb1a 	bl	800814c <FATFS_LinkDriver>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <MX_FATFS_Init+0x20>)
 8004b1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004b20:	bf00      	nop
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	200023bc 	.word	0x200023bc
 8004b28:	20000010 	.word	0x20000010
 8004b2c:	200023b8 	.word	0x200023b8

08004b30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004b34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	4603      	mov	r3, r0
 8004b46:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;  //@hgm
    //return Stat;        //@hgm
	return SD_disk_initialize(pdrv); // @hgm
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fc fd8e 	bl	800166c <SD_disk_initialize>
 8004b50:	4603      	mov	r3, r0
 8004b52:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT; // @hgm
    //return Stat;       // @hgm
	return SD_disk_status(pdrv); // @hgm
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fc fe65 	bl	8001838 <SD_disk_status>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4603      	mov	r3, r0
 8004b88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;     // @hgm
	return SD_disk_read(pdrv, buff, sector, count);
 8004b8a:	7bf8      	ldrb	r0, [r7, #15]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	f7fc fe65 	bl	8001860 <SD_disk_read>
 8004b96:	4603      	mov	r3, r0
 8004b98:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4603      	mov	r3, r0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;   // @hgm
	return SD_disk_write(pdrv, buff, sector, count);
 8004bb2:	7bf8      	ldrb	r0, [r7, #15]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	f7fc febb 	bl	8001934 <SD_disk_write>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	603a      	str	r2, [r7, #0]
 8004bd4:	71fb      	strb	r3, [r7, #7]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;  // @hgm
    //return res;               // @hgm
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	79b9      	ldrb	r1, [r7, #6]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fc ff2b 	bl	8001a3c <SD_disk_ioctl>
 8004be6:	4603      	mov	r3, r0
 8004be8:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <disk_status+0x30>)
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	79fa      	ldrb	r2, [r7, #7]
 8004c0c:	4905      	ldr	r1, [pc, #20]	; (8004c24 <disk_status+0x30>)
 8004c0e:	440a      	add	r2, r1
 8004c10:	7a12      	ldrb	r2, [r2, #8]
 8004c12:	4610      	mov	r0, r2
 8004c14:	4798      	blx	r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	200023e0 	.word	0x200023e0

08004c28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	4a0d      	ldr	r2, [pc, #52]	; (8004c70 <disk_initialize+0x48>)
 8004c3a:	5cd3      	ldrb	r3, [r2, r3]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d111      	bne.n	8004c64 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	4a0b      	ldr	r2, [pc, #44]	; (8004c70 <disk_initialize+0x48>)
 8004c44:	2101      	movs	r1, #1
 8004c46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <disk_initialize+0x48>)
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	79fa      	ldrb	r2, [r7, #7]
 8004c56:	4906      	ldr	r1, [pc, #24]	; (8004c70 <disk_initialize+0x48>)
 8004c58:	440a      	add	r2, r1
 8004c5a:	7a12      	ldrb	r2, [r2, #8]
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4798      	blx	r3
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	200023e0 	.word	0x200023e0

08004c74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4603      	mov	r3, r0
 8004c82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <disk_read+0x3c>)
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	689c      	ldr	r4, [r3, #8]
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	4a07      	ldr	r2, [pc, #28]	; (8004cb0 <disk_read+0x3c>)
 8004c94:	4413      	add	r3, r2
 8004c96:	7a18      	ldrb	r0, [r3, #8]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	47a0      	blx	r4
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd90      	pop	{r4, r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	200023e0 	.word	0x200023e0

08004cb4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <disk_write+0x3c>)
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	68dc      	ldr	r4, [r3, #12]
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <disk_write+0x3c>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	7a18      	ldrb	r0, [r3, #8]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	47a0      	blx	r4
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd90      	pop	{r4, r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200023e0 	.word	0x200023e0

08004cf4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	603a      	str	r2, [r7, #0]
 8004cfe:	71fb      	strb	r3, [r7, #7]
 8004d00:	460b      	mov	r3, r1
 8004d02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <disk_ioctl+0x38>)
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	79fa      	ldrb	r2, [r7, #7]
 8004d12:	4906      	ldr	r1, [pc, #24]	; (8004d2c <disk_ioctl+0x38>)
 8004d14:	440a      	add	r2, r1
 8004d16:	7a10      	ldrb	r0, [r2, #8]
 8004d18:	79b9      	ldrb	r1, [r7, #6]
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	4798      	blx	r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	200023e0 	.word	0x200023e0

08004d30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004d44:	e007      	b.n	8004d56 <mem_cpy+0x26>
		*d++ = *s++;
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	1c53      	adds	r3, r2, #1
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	1c59      	adds	r1, r3, #1
 8004d50:	6179      	str	r1, [r7, #20]
 8004d52:	7812      	ldrb	r2, [r2, #0]
 8004d54:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	1e5a      	subs	r2, r3, #1
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f2      	bne.n	8004d46 <mem_cpy+0x16>
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr

08004d6c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004d7c:	e005      	b.n	8004d8a <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	617a      	str	r2, [r7, #20]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	1e5a      	subs	r2, r3, #1
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f4      	bne.n	8004d7e <mem_set+0x12>
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	; 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004db8:	bf00      	nop
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	1e5a      	subs	r2, r3, #1
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <mem_cmp+0x40>
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	61fa      	str	r2, [r7, #28]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	61ba      	str	r2, [r7, #24]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	1acb      	subs	r3, r1, r3
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ec      	beq.n	8004dba <mem_cmp+0x1a>
	return r;
 8004de0:	697b      	ldr	r3, [r7, #20]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3724      	adds	r7, #36	; 0x24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr

08004dec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004df6:	e002      	b.n	8004dfe <chk_chr+0x12>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <chk_chr+0x26>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d1f2      	bne.n	8004df8 <chk_chr+0xc>
	return *str;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	781b      	ldrb	r3, [r3, #0]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr

08004e20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e03b      	b.n	8004eac <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8004e34:	4931      	ldr	r1, [pc, #196]	; (8004efc <chk_lock+0xdc>)
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d02c      	beq.n	8004ea2 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004e48:	492c      	ldr	r1, [pc, #176]	; (8004efc <chk_lock+0xdc>)
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d120      	bne.n	8004ea6 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8004e64:	4925      	ldr	r1, [pc, #148]	; (8004efc <chk_lock+0xdc>)
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	3304      	adds	r3, #4
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e7c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d111      	bne.n	8004ea6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004e82:	491e      	ldr	r1, [pc, #120]	; (8004efc <chk_lock+0xdc>)
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4613      	mov	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	3308      	adds	r3, #8
 8004e92:	881a      	ldrh	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d102      	bne.n	8004ea6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004ea0:	e007      	b.n	8004eb2 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d9c0      	bls.n	8004e34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d109      	bne.n	8004ecc <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <chk_lock+0xa4>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d101      	bne.n	8004ec8 <chk_lock+0xa8>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e013      	b.n	8004ef0 <chk_lock+0xd0>
 8004ec8:	2312      	movs	r3, #18
 8004eca:	e011      	b.n	8004ef0 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10b      	bne.n	8004eea <chk_lock+0xca>
 8004ed2:	490a      	ldr	r1, [pc, #40]	; (8004efc <chk_lock+0xdc>)
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	330a      	adds	r3, #10
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee8:	d101      	bne.n	8004eee <chk_lock+0xce>
 8004eea:	2310      	movs	r3, #16
 8004eec:	e000      	b.n	8004ef0 <chk_lock+0xd0>
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	200023c8 	.word	0x200023c8

08004f00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f06:	2300      	movs	r3, #0
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	e002      	b.n	8004f12 <enq_lock+0x12>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d809      	bhi.n	8004f2c <enq_lock+0x2c>
 8004f18:	490a      	ldr	r1, [pc, #40]	; (8004f44 <enq_lock+0x44>)
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1ef      	bne.n	8004f0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	bf14      	ite	ne
 8004f32:	2301      	movne	r3, #1
 8004f34:	2300      	moveq	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	200023c8 	.word	0x200023c8

08004f48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e02e      	b.n	8004fb6 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8004f58:	4958      	ldr	r1, [pc, #352]	; (80050bc <inc_lock+0x174>)
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d11d      	bne.n	8004fb0 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8004f74:	4951      	ldr	r1, [pc, #324]	; (80050bc <inc_lock+0x174>)
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	3304      	adds	r3, #4
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d10e      	bne.n	8004fb0 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8004f92:	494a      	ldr	r1, [pc, #296]	; (80050bc <inc_lock+0x174>)
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	881a      	ldrh	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004faa:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d006      	beq.n	8004fbe <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d9cd      	bls.n	8004f58 <inc_lock+0x10>
 8004fbc:	e000      	b.n	8004fc0 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8004fbe:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d148      	bne.n	8005058 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e002      	b.n	8004fd2 <inc_lock+0x8a>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d809      	bhi.n	8004fec <inc_lock+0xa4>
 8004fd8:	4938      	ldr	r1, [pc, #224]	; (80050bc <inc_lock+0x174>)
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1ef      	bne.n	8004fcc <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d101      	bne.n	8004ff6 <inc_lock+0xae>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e05d      	b.n	80050b2 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ffc:	6819      	ldr	r1, [r3, #0]
 8004ffe:	482f      	ldr	r0, [pc, #188]	; (80050bc <inc_lock+0x174>)
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4613      	mov	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4403      	add	r3, r0
 800500c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005014:	6899      	ldr	r1, [r3, #8]
 8005016:	4829      	ldr	r0, [pc, #164]	; (80050bc <inc_lock+0x174>)
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4403      	add	r3, r0
 8005024:	3304      	adds	r3, #4
 8005026:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502e:	88d8      	ldrh	r0, [r3, #6]
 8005030:	4922      	ldr	r1, [pc, #136]	; (80050bc <inc_lock+0x174>)
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4613      	mov	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	3308      	adds	r3, #8
 8005040:	4602      	mov	r2, r0
 8005042:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005044:	491d      	ldr	r1, [pc, #116]	; (80050bc <inc_lock+0x174>)
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	330a      	adds	r3, #10
 8005054:	2200      	movs	r2, #0
 8005056:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00c      	beq.n	8005078 <inc_lock+0x130>
 800505e:	4917      	ldr	r1, [pc, #92]	; (80050bc <inc_lock+0x174>)
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	330a      	adds	r3, #10
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <inc_lock+0x130>
 8005074:	2300      	movs	r3, #0
 8005076:	e01c      	b.n	80050b2 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10b      	bne.n	8005096 <inc_lock+0x14e>
 800507e:	490f      	ldr	r1, [pc, #60]	; (80050bc <inc_lock+0x174>)
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4613      	mov	r3, r2
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	330a      	adds	r3, #10
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	b299      	uxth	r1, r3
 8005094:	e001      	b.n	800509a <inc_lock+0x152>
 8005096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800509a:	4808      	ldr	r0, [pc, #32]	; (80050bc <inc_lock+0x174>)
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4613      	mov	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4403      	add	r3, r0
 80050a8:	330a      	adds	r3, #10
 80050aa:	460a      	mov	r2, r1
 80050ac:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3301      	adds	r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	200023c8 	.word	0x200023c8

080050c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d82e      	bhi.n	8005132 <dec_lock+0x72>
		n = Files[i].ctr;
 80050d4:	491b      	ldr	r1, [pc, #108]	; (8005144 <dec_lock+0x84>)
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	330a      	adds	r3, #10
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80050e8:	89fb      	ldrh	r3, [r7, #14]
 80050ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ee:	d101      	bne.n	80050f4 <dec_lock+0x34>
 80050f0:	2300      	movs	r3, #0
 80050f2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80050f4:	89fb      	ldrh	r3, [r7, #14]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <dec_lock+0x40>
 80050fa:	89fb      	ldrh	r3, [r7, #14]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005100:	4910      	ldr	r1, [pc, #64]	; (8005144 <dec_lock+0x84>)
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	330a      	adds	r3, #10
 8005110:	89fa      	ldrh	r2, [r7, #14]
 8005112:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005114:	89fb      	ldrh	r3, [r7, #14]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d108      	bne.n	800512c <dec_lock+0x6c>
 800511a:	490a      	ldr	r1, [pc, #40]	; (8005144 <dec_lock+0x84>)
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	737b      	strb	r3, [r7, #13]
 8005130:	e001      	b.n	8005136 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005132:	2302      	movs	r3, #2
 8005134:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005136:	7b7b      	ldrb	r3, [r7, #13]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	200023c8 	.word	0x200023c8

08005148 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	e016      	b.n	8005184 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005156:	4910      	ldr	r1, [pc, #64]	; (8005198 <clear_lock+0x50>)
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d108      	bne.n	800517e <clear_lock+0x36>
 800516c:	490a      	ldr	r1, [pc, #40]	; (8005198 <clear_lock+0x50>)
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4613      	mov	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3301      	adds	r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d9e5      	bls.n	8005156 <clear_lock+0xe>
	}
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	200023c8 	.word	0x200023c8

0800519c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ae:	791b      	ldrb	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d040      	beq.n	8005236 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c4:	7858      	ldrb	r0, [r3, #1]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	2301      	movs	r3, #1
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	f7ff fd72 	bl	8004cb4 <disk_write>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <sync_window+0x40>
			res = FR_DISK_ERR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
 80051da:	e02c      	b.n	8005236 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e2:	2200      	movs	r2, #0
 80051e4:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	1ad2      	subs	r2, r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d21b      	bcs.n	8005236 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005204:	78db      	ldrb	r3, [r3, #3]
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	e012      	b.n	8005230 <sync_window+0x94>
					wsect += fs->fsize;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4413      	add	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521e:	7858      	ldrb	r0, [r3, #1]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	2301      	movs	r3, #1
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	f7ff fd45 	bl	8004cb4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3b01      	subs	r3, #1
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d8e9      	bhi.n	800520a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8005236:	7bfb      	ldrb	r3, [r7, #15]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d01e      	beq.n	800529a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff9d 	bl	800519c <sync_window>
 8005262:	4603      	mov	r3, r0
 8005264:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d116      	bne.n	800529a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005272:	7858      	ldrb	r0, [r3, #1]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	2301      	movs	r3, #1
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	f7ff fcfb 	bl	8004c74 <disk_read>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005284:	f04f 33ff 	mov.w	r3, #4294967295
 8005288:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005294:	461a      	mov	r2, r3
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff ff75 	bl	800519c <sync_window>
 80052b2:	4603      	mov	r3, r0
 80052b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 80ad 	bne.w	8005418 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	f040 8098 	bne.w	80053fc <sync_fs+0x158>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d2:	795b      	ldrb	r3, [r3, #5]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	f040 8091 	bne.w	80053fc <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e2:	895b      	ldrh	r3, [r3, #10]
 80052e4:	461a      	mov	r2, r3
 80052e6:	2100      	movs	r1, #0
 80052e8:	f7ff fd40 	bl	8004d6c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2255      	movs	r2, #85	; 0x55
 80052f0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	22aa      	movs	r2, #170	; 0xaa
 80052f8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2252      	movs	r2, #82	; 0x52
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2252      	movs	r2, #82	; 0x52
 8005306:	705a      	strb	r2, [r3, #1]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2261      	movs	r2, #97	; 0x61
 800530c:	709a      	strb	r2, [r3, #2]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2241      	movs	r2, #65	; 0x41
 8005312:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2272      	movs	r2, #114	; 0x72
 8005318:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2272      	movs	r2, #114	; 0x72
 8005320:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2241      	movs	r2, #65	; 0x41
 8005328:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2261      	movs	r2, #97	; 0x61
 8005330:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	b2da      	uxtb	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	b29b      	uxth	r3, r3
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	b29b      	uxth	r3, r3
 8005352:	b2da      	uxtb	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	0c1b      	lsrs	r3, r3, #16
 8005364:	b2da      	uxtb	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	0e1b      	lsrs	r3, r3, #24
 8005376:	b2da      	uxtb	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	b29b      	uxth	r3, r3
 8005398:	0a1b      	lsrs	r3, r3, #8
 800539a:	b29b      	uxth	r3, r3
 800539c:	b2da      	uxtb	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	0e1b      	lsrs	r3, r3, #24
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	3301      	adds	r3, #1
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053d8:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e0:	7858      	ldrb	r0, [r3, #1]
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	2301      	movs	r3, #1
 80053ee:	f7ff fc61 	bl	8004cb4 <disk_write>
			fs->fsi_flag = 0;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f8:	2200      	movs	r2, #0
 80053fa:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2200      	movs	r2, #0
 8005406:	2100      	movs	r1, #0
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fc73 	bl	8004cf4 <disk_ioctl>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	3b02      	subs	r3, #2
 8005430:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	3b02      	subs	r3, #2
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d301      	bcc.n	8005446 <clust2sect+0x24>
 8005442:	2300      	movs	r3, #0
 8005444:	e00c      	b.n	8005460 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800544c:	789b      	ldrb	r3, [r3, #2]
 800544e:	461a      	mov	r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	fb03 f202 	mul.w	r2, r3, r2
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	4413      	add	r3, r2
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d906      	bls.n	8005488 <get_fat+0x1e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d302      	bcc.n	800548e <get_fat+0x24>
		val = 1;	/* Internal error */
 8005488:	2301      	movs	r3, #1
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	e0e4      	b.n	8005658 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800548e:	f04f 33ff 	mov.w	r3, #4294967295
 8005492:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b03      	cmp	r3, #3
 800549e:	f000 8098 	beq.w	80055d2 <get_fat+0x168>
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	f300 80ce 	bgt.w	8005644 <get_fat+0x1da>
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d002      	beq.n	80054b2 <get_fat+0x48>
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d05f      	beq.n	8005570 <get_fat+0x106>
 80054b0:	e0c8      	b.n	8005644 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ce:	895b      	ldrh	r3, [r3, #10]
 80054d0:	4619      	mov	r1, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80054d8:	4413      	add	r3, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff feaf 	bl	8005240 <move_window>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f040 80b0 	bne.w	800564a <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	60fa      	str	r2, [r7, #12]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054f6:	8952      	ldrh	r2, [r2, #10]
 80054f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80054fc:	fb01 f202 	mul.w	r2, r1, r2
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	5cd3      	ldrb	r3, [r2, r3]
 8005506:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005516:	895b      	ldrh	r3, [r3, #10]
 8005518:	4619      	mov	r1, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005520:	4413      	add	r3, r2
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fe8b 	bl	8005240 <move_window>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	f040 808e 	bne.w	800564e <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005538:	895b      	ldrh	r3, [r3, #10]
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005542:	fb01 f202 	mul.w	r2, r1, r2
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	5cd3      	ldrb	r3, [r2, r3]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	461a      	mov	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <get_fat+0xfc>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	e002      	b.n	800556c <get_fat+0x102>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556c:	617b      	str	r3, [r7, #20]
			break;
 800556e:	e073      	b.n	8005658 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557e:	895b      	ldrh	r3, [r3, #10]
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	b29b      	uxth	r3, r3
 8005584:	4619      	mov	r1, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	fbb3 f3f1 	udiv	r3, r3, r1
 800558c:	4413      	add	r3, r2
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff fe55 	bl	8005240 <move_window>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d15a      	bne.n	8005652 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055a6:	8952      	ldrh	r2, [r2, #10]
 80055a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80055ac:	fb01 f202 	mul.w	r2, r1, r2
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	3301      	adds	r3, #1
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	b21a      	sxth	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	4313      	orrs	r3, r2
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	617b      	str	r3, [r7, #20]
			break;
 80055d0:	e042      	b.n	8005658 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d8:	6a1a      	ldr	r2, [r3, #32]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e0:	895b      	ldrh	r3, [r3, #10]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	4619      	mov	r1, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ee:	4413      	add	r3, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff fe24 	bl	8005240 <move_window>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d12b      	bne.n	8005656 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005608:	8952      	ldrh	r2, [r2, #10]
 800560a:	fbb3 f1f2 	udiv	r1, r3, r2
 800560e:	fb01 f202 	mul.w	r2, r1, r2
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	4413      	add	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	3303      	adds	r3, #3
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	061a      	lsls	r2, r3, #24
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3302      	adds	r3, #2
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	4313      	orrs	r3, r2
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	3201      	adds	r2, #1
 8005630:	7812      	ldrb	r2, [r2, #0]
 8005632:	0212      	lsls	r2, r2, #8
 8005634:	4313      	orrs	r3, r2
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	7812      	ldrb	r2, [r2, #0]
 800563a:	4313      	orrs	r3, r2
 800563c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005640:	617b      	str	r3, [r7, #20]
			break;
 8005642:	e009      	b.n	8005658 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8005644:	2301      	movs	r3, #1
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e006      	b.n	8005658 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800564a:	bf00      	nop
 800564c:	e004      	b.n	8005658 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800564e:	bf00      	nop
 8005650:	e002      	b.n	8005658 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005652:	bf00      	nop
 8005654:	e000      	b.n	8005658 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005656:	bf00      	nop
		}
	}

	return val;
 8005658:	697b      	ldr	r3, [r7, #20]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b088      	sub	sp, #32
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d906      	bls.n	8005682 <put_fat+0x20>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	429a      	cmp	r2, r3
 8005680:	d302      	bcc.n	8005688 <put_fat+0x26>
		res = FR_INT_ERR;
 8005682:	2302      	movs	r3, #2
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e13a      	b.n	80058fe <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b03      	cmp	r3, #3
 8005692:	f000 80d0 	beq.w	8005836 <put_fat+0x1d4>
 8005696:	2b03      	cmp	r3, #3
 8005698:	f300 8127 	bgt.w	80058ea <put_fat+0x288>
 800569c:	2b01      	cmp	r3, #1
 800569e:	d003      	beq.n	80056a8 <put_fat+0x46>
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	f000 808f 	beq.w	80057c4 <put_fat+0x162>
 80056a6:	e120      	b.n	80058ea <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4413      	add	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c4:	895b      	ldrh	r3, [r3, #10]
 80056c6:	4619      	mov	r1, r3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80056ce:	4413      	add	r3, r2
 80056d0:	4619      	mov	r1, r3
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff fdb4 	bl	8005240 <move_window>
 80056d8:	4603      	mov	r3, r0
 80056da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056dc:	7ffb      	ldrb	r3, [r7, #31]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 8106 	bne.w	80058f0 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	617a      	str	r2, [r7, #20]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056f0:	8952      	ldrh	r2, [r2, #10]
 80056f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80056f6:	fb01 f202 	mul.w	r2, r1, r2
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <put_fat+0xc6>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	b25b      	sxtb	r3, r3
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	b25a      	sxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	b25b      	sxtb	r3, r3
 8005720:	4313      	orrs	r3, r2
 8005722:	b25b      	sxtb	r3, r3
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e001      	b.n	800572c <put_fat+0xca>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005736:	2201      	movs	r2, #1
 8005738:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005740:	6a1a      	ldr	r2, [r3, #32]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005748:	895b      	ldrh	r3, [r3, #10]
 800574a:	4619      	mov	r1, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005752:	4413      	add	r3, r2
 8005754:	4619      	mov	r1, r3
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff fd72 	bl	8005240 <move_window>
 800575c:	4603      	mov	r3, r0
 800575e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005760:	7ffb      	ldrb	r3, [r7, #31]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 80c6 	bne.w	80058f4 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576e:	895b      	ldrh	r3, [r3, #10]
 8005770:	461a      	mov	r2, r3
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	fbb3 f1f2 	udiv	r1, r3, r2
 8005778:	fb01 f202 	mul.w	r2, r1, r2
 800577c:	1a9b      	subs	r3, r3, r2
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <put_fat+0x134>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	b2db      	uxtb	r3, r3
 8005794:	e00e      	b.n	80057b4 <put_fat+0x152>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b25b      	sxtb	r3, r3
 800579c:	f023 030f 	bic.w	r3, r3, #15
 80057a0:	b25a      	sxtb	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	0a1b      	lsrs	r3, r3, #8
 80057a6:	b25b      	sxtb	r3, r3
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	b25b      	sxtb	r3, r3
 80057ae:	4313      	orrs	r3, r2
 80057b0:	b25b      	sxtb	r3, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057be:	2201      	movs	r2, #1
 80057c0:	711a      	strb	r2, [r3, #4]
			break;
 80057c2:	e09c      	b.n	80058fe <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d2:	895b      	ldrh	r3, [r3, #10]
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	4619      	mov	r1, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80057e0:	4413      	add	r3, r2
 80057e2:	4619      	mov	r1, r3
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7ff fd2b 	bl	8005240 <move_window>
 80057ea:	4603      	mov	r3, r0
 80057ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057ee:	7ffb      	ldrb	r3, [r7, #31]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f040 8081 	bne.w	80058f8 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005800:	8952      	ldrh	r2, [r2, #10]
 8005802:	fbb3 f1f2 	udiv	r1, r3, r2
 8005806:	fb01 f202 	mul.w	r2, r1, r2
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	b29b      	uxth	r3, r3
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	b29a      	uxth	r2, r3
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	3301      	adds	r3, #1
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005830:	2201      	movs	r2, #1
 8005832:	711a      	strb	r2, [r3, #4]
			break;
 8005834:	e063      	b.n	80058fe <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583c:	6a1a      	ldr	r2, [r3, #32]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005844:	895b      	ldrh	r3, [r3, #10]
 8005846:	089b      	lsrs	r3, r3, #2
 8005848:	b29b      	uxth	r3, r3
 800584a:	4619      	mov	r1, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005852:	4413      	add	r3, r2
 8005854:	4619      	mov	r1, r3
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff fcf2 	bl	8005240 <move_window>
 800585c:	4603      	mov	r3, r0
 800585e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005860:	7ffb      	ldrb	r3, [r7, #31]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d14a      	bne.n	80058fc <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005870:	8952      	ldrh	r2, [r2, #10]
 8005872:	fbb3 f1f2 	udiv	r1, r3, r2
 8005876:	fb01 f202 	mul.w	r2, r1, r2
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	3303      	adds	r3, #3
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	061a      	lsls	r2, r3, #24
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	3302      	adds	r3, #2
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	041b      	lsls	r3, r3, #16
 8005892:	4313      	orrs	r3, r2
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	3201      	adds	r2, #1
 8005898:	7812      	ldrb	r2, [r2, #0]
 800589a:	0212      	lsls	r2, r2, #8
 800589c:	4313      	orrs	r3, r2
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	7812      	ldrb	r2, [r2, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	0a1b      	lsrs	r3, r3, #8
 80058bc:	b29a      	uxth	r2, r3
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	3301      	adds	r3, #1
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	0c1a      	lsrs	r2, r3, #16
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	3302      	adds	r3, #2
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	0e1a      	lsrs	r2, r3, #24
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3303      	adds	r3, #3
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	2201      	movs	r2, #1
 80058e6:	711a      	strb	r2, [r3, #4]
			break;
 80058e8:	e009      	b.n	80058fe <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80058ea:	2302      	movs	r3, #2
 80058ec:	77fb      	strb	r3, [r7, #31]
 80058ee:	e006      	b.n	80058fe <put_fat+0x29c>
			if (res != FR_OK) break;
 80058f0:	bf00      	nop
 80058f2:	e004      	b.n	80058fe <put_fat+0x29c>
			if (res != FR_OK) break;
 80058f4:	bf00      	nop
 80058f6:	e002      	b.n	80058fe <put_fat+0x29c>
			if (res != FR_OK) break;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <put_fat+0x29c>
			if (res != FR_OK) break;
 80058fc:	bf00      	nop
		}
	}

	return res;
 80058fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3720      	adds	r7, #32
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d906      	bls.n	8005926 <remove_chain+0x1e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <remove_chain+0x24>
		res = FR_INT_ERR;
 8005926:	2302      	movs	r3, #2
 8005928:	73fb      	strb	r3, [r7, #15]
 800592a:	e049      	b.n	80059c0 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005930:	e03b      	b.n	80059aa <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fd98 	bl	800546a <get_fat>
 800593a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d03b      	beq.n	80059ba <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d102      	bne.n	800594e <remove_chain+0x46>
 8005948:	2302      	movs	r3, #2
 800594a:	73fb      	strb	r3, [r7, #15]
 800594c:	e038      	b.n	80059c0 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d102      	bne.n	800595c <remove_chain+0x54>
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
 800595a:	e031      	b.n	80059c0 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800595c:	2200      	movs	r2, #0
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff fe7e 	bl	8005662 <put_fat>
 8005966:	4603      	mov	r3, r0
 8005968:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d126      	bne.n	80059be <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597c:	d013      	beq.n	80059a6 <remove_chain+0x9e>
				fs->free_clust++;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	3301      	adds	r3, #1
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800598e:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005996:	795b      	ldrb	r3, [r3, #5]
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	b2da      	uxtb	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a4:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d3bc      	bcc.n	8005932 <remove_chain+0x2a>
 80059b8:	e002      	b.n	80059c0 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80059ba:	bf00      	nop
 80059bc:	e000      	b.n	80059c0 <remove_chain+0xb8>
			if (res != FR_OK) break;
 80059be:	bf00      	nop
		}
	}

	return res;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d111      	bne.n	80059fe <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d006      	beq.n	80059f8 <create_chain+0x2e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d31d      	bcc.n	8005a34 <create_chain+0x6a>
 80059f8:	2301      	movs	r3, #1
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	e01a      	b.n	8005a34 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff fd32 	bl	800546a <get_fat>
 8005a06:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d801      	bhi.n	8005a12 <create_chain+0x48>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e07f      	b.n	8005b12 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d101      	bne.n	8005a1e <create_chain+0x54>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	e079      	b.n	8005b12 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d201      	bcs.n	8005a30 <create_chain+0x66>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	e070      	b.n	8005b12 <create_chain+0x148>
		scl = clst;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d307      	bcc.n	8005a5c <create_chain+0x92>
			ncl = 2;
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d901      	bls.n	8005a5c <create_chain+0x92>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e05a      	b.n	8005b12 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005a5c:	6979      	ldr	r1, [r7, #20]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fd03 	bl	800546a <get_fat>
 8005a64:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d002      	beq.n	8005a7a <create_chain+0xb0>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <create_chain+0xb4>
			return cs;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	e049      	b.n	8005b12 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d1d8      	bne.n	8005a38 <create_chain+0x6e>
 8005a86:	2300      	movs	r3, #0
 8005a88:	e043      	b.n	8005b12 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8005a8a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005a8c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005a90:	6979      	ldr	r1, [r7, #20]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fde5 	bl	8005662 <put_fat>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <create_chain+0xec>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d006      	beq.n	8005ab6 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff fdd8 	bl	8005662 <put_fat>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d121      	bne.n	8005b00 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d01c      	beq.n	8005b10 <create_chain+0x146>
			fs->free_clust--;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ae6:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aee:	795b      	ldrb	r3, [r3, #5]
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afc:	715a      	strb	r2, [r3, #5]
 8005afe:	e007      	b.n	8005b10 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d102      	bne.n	8005b0c <create_chain+0x142>
 8005b06:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0a:	e000      	b.n	8005b0e <create_chain+0x144>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005b10:	697b      	ldr	r3, [r7, #20]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3c:	895b      	ldrh	r3, [r3, #10]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b52:	7892      	ldrb	r2, [r2, #2]
 8005b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1d1a      	adds	r2, r3, #4
 8005b5e:	613a      	str	r2, [r7, #16]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <clmt_clust+0x54>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e010      	b.n	8005b90 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d307      	bcc.n	8005b86 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3304      	adds	r3, #4
 8005b82:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b84:	e7e9      	b.n	8005b5a <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8005b86:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4413      	add	r3, r2
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr

08005b9a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b086      	sub	sp, #24
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bae:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d009      	beq.n	8005bd4 <dir_sdi+0x3a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d301      	bcc.n	8005bd8 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e0aa      	b.n	8005d2e <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d110      	bne.n	8005c00 <dir_sdi+0x66>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d107      	bne.n	8005c00 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d115      	bne.n	8005c32 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c12:	891b      	ldrh	r3, [r3, #8]
 8005c14:	461a      	mov	r2, r3
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d301      	bcc.n	8005c20 <dir_sdi+0x86>
			return FR_INT_ERR;
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e086      	b.n	8005d2e <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	e043      	b.n	8005cba <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c3e:	895b      	ldrh	r3, [r3, #10]
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c52:	789b      	ldrb	r3, [r3, #2]
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005c5a:	e021      	b.n	8005ca0 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6979      	ldr	r1, [r7, #20]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fbff 	bl	800546a <get_fat>
 8005c6c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d101      	bne.n	8005c7a <dir_sdi+0xe0>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e059      	b.n	8005d2e <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d909      	bls.n	8005c94 <dir_sdi+0xfa>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d301      	bcc.n	8005c98 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8005c94:	2302      	movs	r3, #2
 8005c96:	e04a      	b.n	8005d2e <dir_sdi+0x194>
			idx -= ic;
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d2d9      	bcs.n	8005c5c <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6979      	ldr	r1, [r7, #20]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fbb5 	bl	8005422 <clust2sect>
 8005cb8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <dir_sdi+0x136>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e02e      	b.n	8005d2e <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cdc:	895b      	ldrh	r3, [r3, #10]
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	4413      	add	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cf4:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0c:	895b      	ldrh	r3, [r3, #10]
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d1a:	fb01 f202 	mul.w	r2, r1, r2
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	015b      	lsls	r3, r3, #5
 8005d22:	4403      	add	r3, r0
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d2a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005d36:	b590      	push	{r4, r7, lr}
 8005d38:	b087      	sub	sp, #28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d46:	88db      	ldrh	r3, [r3, #6]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <dir_next+0x2a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <dir_next+0x2e>
		return FR_NO_FILE;
 8005d60:	2304      	movs	r3, #4
 8005d62:	e12e      	b.n	8005fc2 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d70:	895b      	ldrh	r3, [r3, #10]
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d7e:	fb01 f202 	mul.w	r2, r1, r2
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f040 80fa 	bne.w	8005f7e <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	3301      	adds	r3, #1
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d9a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10d      	bne.n	8005dc4 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db4:	891b      	ldrh	r3, [r3, #8]
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f0c0 80df 	bcc.w	8005f7e <dir_next+0x248>
				return FR_NO_FILE;
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	e0fe      	b.n	8005fc2 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd0:	895b      	ldrh	r3, [r3, #10]
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005dea:	7892      	ldrb	r2, [r2, #2]
 8005dec:	3a01      	subs	r2, #1
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f040 80c4 	bne.w	8005f7e <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f7ff fb2e 	bl	800546a <get_fat>
 8005e0e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d801      	bhi.n	8005e1a <dir_next+0xe4>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e0d3      	b.n	8005fc2 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d101      	bne.n	8005e26 <dir_next+0xf0>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e0cd      	b.n	8005fc2 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	f0c0 808e 	bcc.w	8005f58 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <dir_next+0x110>
 8005e42:	2304      	movs	r3, #4
 8005e44:	e0bd      	b.n	8005fc2 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	4619      	mov	r1, r3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	f7ff fdb6 	bl	80059ca <create_chain>
 8005e5e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <dir_next+0x134>
 8005e66:	2307      	movs	r3, #7
 8005e68:	e0ab      	b.n	8005fc2 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <dir_next+0x13e>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e0a6      	b.n	8005fc2 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d101      	bne.n	8005e80 <dir_next+0x14a>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0a0      	b.n	8005fc2 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff f987 	bl	800519c <sync_window>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <dir_next+0x162>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e094      	b.n	8005fc2 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eae:	895b      	ldrh	r3, [r3, #10]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	f7fe ff5a 	bl	8004d6c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec6:	681c      	ldr	r4, [r3, #0]
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f7ff faa9 	bl	8005422 <clust2sect>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8005ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	e021      	b.n	8005f22 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eea:	2201      	movs	r2, #1
 8005eec:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff f950 	bl	800519c <sync_window>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <dir_next+0x1d0>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e05d      	b.n	8005fc2 <dir_next+0x28c>
						dp->fs->winsect++;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8005f12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f14:	3201      	adds	r2, #1
 8005f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f1a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2e:	789b      	ldrb	r3, [r3, #2]
 8005f30:	461a      	mov	r2, r3
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d3d2      	bcc.n	8005ede <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1acb      	subs	r3, r1, r3
 8005f52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f56:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5e:	461a      	mov	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6979      	ldr	r1, [r7, #20]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fa57 	bl	8005422 <clust2sect>
 8005f74:	4602      	mov	r2, r0
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f88:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa0:	895b      	ldrh	r3, [r3, #10]
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fae:	fb01 f202 	mul.w	r2, r1, r2
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	015b      	lsls	r3, r3, #5
 8005fb6:	4403      	add	r3, r0
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fbe:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd90      	pop	{r4, r7, pc}

08005fca <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fddf 	bl	8005b9a <dir_sdi>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d135      	bne.n	8006052 <dir_alloc+0x88>
		n = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	f7ff f91f 	bl	8005240 <move_window>
 8006002:	4603      	mov	r3, r0
 8006004:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d121      	bne.n	8006050 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2be5      	cmp	r3, #229	; 0xe5
 8006018:	d006      	beq.n	8006028 <dir_alloc+0x5e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	3301      	adds	r3, #1
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d102      	bne.n	800603c <dir_alloc+0x72>
 8006036:	e00c      	b.n	8006052 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006038:	2300      	movs	r3, #0
 800603a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800603c:	2101      	movs	r1, #1
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff fe79 	bl	8005d36 <dir_next>
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0cd      	beq.n	8005fea <dir_alloc+0x20>
 800604e:	e000      	b.n	8006052 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8006050:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	2b04      	cmp	r3, #4
 8006056:	d101      	bne.n	800605c <dir_alloc+0x92>
 8006058:	2307      	movs	r3, #7
 800605a:	73fb      	strb	r3, [r7, #15]
	return res;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	331b      	adds	r3, #27
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	b21a      	sxth	r2, r3
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	331a      	adds	r3, #26
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	b21b      	sxth	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b21b      	sxth	r3, r3
 8006086:	b29b      	uxth	r3, r3
 8006088:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b03      	cmp	r3, #3
 8006094:	d10f      	bne.n	80060b6 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	3315      	adds	r3, #21
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	b21a      	sxth	r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	3314      	adds	r3, #20
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	b21b      	sxth	r3, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	b21b      	sxth	r3, r3
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	041b      	lsls	r3, r3, #16
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

	return cl;
 80060b6:	68fb      	ldr	r3, [r7, #12]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr

080060c2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	331a      	adds	r3, #26
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	0a1b      	lsrs	r3, r3, #8
 80060dc:	b29a      	uxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	331b      	adds	r3, #27
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	0c1a      	lsrs	r2, r3, #16
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3314      	adds	r3, #20
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	0c1b      	lsrs	r3, r3, #16
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3315      	adds	r3, #21
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr

0800610e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006116:	2100      	movs	r1, #0
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff fd3e 	bl	8005b9a <dir_sdi>
 800611e:	4603      	mov	r3, r0
 8006120:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <dir_find+0x1e>
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	e03f      	b.n	80061ac <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7ff f87e 	bl	8005240 <move_window>
 8006144:	4603      	mov	r3, r0
 8006146:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006148:	7dfb      	ldrb	r3, [r7, #23]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d12a      	bne.n	80061a4 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <dir_find+0x5c>
 8006164:	2304      	movs	r3, #4
 8006166:	75fb      	strb	r3, [r7, #23]
 8006168:	e01f      	b.n	80061aa <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	330b      	adds	r3, #11
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <dir_find+0x82>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	220b      	movs	r2, #11
 8006182:	4619      	mov	r1, r3
 8006184:	6938      	ldr	r0, [r7, #16]
 8006186:	f7fe fe0b 	bl	8004da0 <mem_cmp>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00b      	beq.n	80061a8 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006190:	2100      	movs	r1, #0
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff fdcf 	bl	8005d36 <dir_next>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0c4      	beq.n	800612c <dir_find+0x1e>
 80061a2:	e002      	b.n	80061aa <dir_find+0x9c>
		if (res != FR_OK) break;
 80061a4:	bf00      	nop
 80061a6:	e000      	b.n	80061aa <dir_find+0x9c>
			break;
 80061a8:	bf00      	nop

	return res;
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80061bc:	2101      	movs	r1, #1
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff ff03 	bl	8005fca <dir_alloc>
 80061c4:	4603      	mov	r3, r0
 80061c6:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d12d      	bne.n	800622a <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f7ff f82d 	bl	8005240 <move_window>
 80061e6:	4603      	mov	r3, r0
 80061e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d11c      	bne.n	800622a <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	2220      	movs	r2, #32
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fdb5 	bl	8004d6c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006208:	6958      	ldr	r0, [r3, #20]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	220b      	movs	r2, #11
 8006214:	4619      	mov	r1, r3
 8006216:	f7fe fd8b 	bl	8004d30 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006226:	2201      	movs	r2, #1
 8006228:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e002      	b.n	800624c <create_name+0x18>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b2f      	cmp	r3, #47	; 0x2f
 8006252:	d0f8      	beq.n	8006246 <create_name+0x12>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b5c      	cmp	r3, #92	; 0x5c
 800625a:	d0f4      	beq.n	8006246 <create_name+0x12>
	sfn = dp->fn;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006266:	220b      	movs	r2, #11
 8006268:	2120      	movs	r1, #32
 800626a:	68b8      	ldr	r0, [r7, #8]
 800626c:	f7fe fd7e 	bl	8004d6c <mem_set>
	si = i = b = 0; ni = 8;
 8006270:	2300      	movs	r3, #0
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	2308      	movs	r3, #8
 800627e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	617a      	str	r2, [r7, #20]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800628e:	7fbb      	ldrb	r3, [r7, #30]
 8006290:	2b20      	cmp	r3, #32
 8006292:	d953      	bls.n	800633c <create_name+0x108>
 8006294:	7fbb      	ldrb	r3, [r7, #30]
 8006296:	2b2f      	cmp	r3, #47	; 0x2f
 8006298:	d050      	beq.n	800633c <create_name+0x108>
 800629a:	7fbb      	ldrb	r3, [r7, #30]
 800629c:	2b5c      	cmp	r3, #92	; 0x5c
 800629e:	d04d      	beq.n	800633c <create_name+0x108>
		if (c == '.' || i >= ni) {
 80062a0:	7fbb      	ldrb	r3, [r7, #30]
 80062a2:	2b2e      	cmp	r3, #46	; 0x2e
 80062a4:	d003      	beq.n	80062ae <create_name+0x7a>
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d30f      	bcc.n	80062ce <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d102      	bne.n	80062ba <create_name+0x86>
 80062b4:	7fbb      	ldrb	r3, [r7, #30]
 80062b6:	2b2e      	cmp	r3, #46	; 0x2e
 80062b8:	d001      	beq.n	80062be <create_name+0x8a>
 80062ba:	2306      	movs	r3, #6
 80062bc:	e073      	b.n	80063a6 <create_name+0x172>
			i = 8; ni = 11;
 80062be:	2308      	movs	r3, #8
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	230b      	movs	r3, #11
 80062c4:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80062c6:	7ffb      	ldrb	r3, [r7, #31]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e035      	b.n	800633a <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 80062ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da08      	bge.n	80062e8 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 80062d6:	7ffb      	ldrb	r3, [r7, #31]
 80062d8:	f043 0303 	orr.w	r3, r3, #3
 80062dc:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80062de:	7fbb      	ldrb	r3, [r7, #30]
 80062e0:	3b80      	subs	r3, #128	; 0x80
 80062e2:	4a33      	ldr	r2, [pc, #204]	; (80063b0 <create_name+0x17c>)
 80062e4:	5cd3      	ldrb	r3, [r2, r3]
 80062e6:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80062e8:	7fbb      	ldrb	r3, [r7, #30]
 80062ea:	4619      	mov	r1, r3
 80062ec:	4831      	ldr	r0, [pc, #196]	; (80063b4 <create_name+0x180>)
 80062ee:	f7fe fd7d 	bl	8004dec <chk_chr>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <create_name+0xc8>
				return FR_INVALID_NAME;
 80062f8:	2306      	movs	r3, #6
 80062fa:	e054      	b.n	80063a6 <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80062fc:	7fbb      	ldrb	r3, [r7, #30]
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	d907      	bls.n	8006312 <create_name+0xde>
 8006302:	7fbb      	ldrb	r3, [r7, #30]
 8006304:	2b5a      	cmp	r3, #90	; 0x5a
 8006306:	d804      	bhi.n	8006312 <create_name+0xde>
				b |= 2;
 8006308:	7ffb      	ldrb	r3, [r7, #31]
 800630a:	f043 0302 	orr.w	r3, r3, #2
 800630e:	77fb      	strb	r3, [r7, #31]
 8006310:	e00c      	b.n	800632c <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006312:	7fbb      	ldrb	r3, [r7, #30]
 8006314:	2b60      	cmp	r3, #96	; 0x60
 8006316:	d909      	bls.n	800632c <create_name+0xf8>
 8006318:	7fbb      	ldrb	r3, [r7, #30]
 800631a:	2b7a      	cmp	r3, #122	; 0x7a
 800631c:	d806      	bhi.n	800632c <create_name+0xf8>
					b |= 1; c -= 0x20;
 800631e:	7ffb      	ldrb	r3, [r7, #31]
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	7fbb      	ldrb	r3, [r7, #30]
 8006328:	3b20      	subs	r3, #32
 800632a:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	613a      	str	r2, [r7, #16]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	7fba      	ldrb	r2, [r7, #30]
 8006338:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800633a:	e7a1      	b.n	8006280 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	441a      	add	r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006346:	7fbb      	ldrb	r3, [r7, #30]
 8006348:	2b20      	cmp	r3, #32
 800634a:	d801      	bhi.n	8006350 <create_name+0x11c>
 800634c:	2304      	movs	r3, #4
 800634e:	e000      	b.n	8006352 <create_name+0x11e>
 8006350:	2300      	movs	r3, #0
 8006352:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <create_name+0x12a>
 800635a:	2306      	movs	r3, #6
 800635c:	e023      	b.n	80063a6 <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2be5      	cmp	r3, #229	; 0xe5
 8006364:	d102      	bne.n	800636c <create_name+0x138>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2205      	movs	r2, #5
 800636a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	2b08      	cmp	r3, #8
 8006370:	d102      	bne.n	8006378 <create_name+0x144>
 8006372:	7ffb      	ldrb	r3, [r7, #31]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006378:	7ffb      	ldrb	r3, [r7, #31]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d103      	bne.n	800638a <create_name+0x156>
 8006382:	7fbb      	ldrb	r3, [r7, #30]
 8006384:	f043 0310 	orr.w	r3, r3, #16
 8006388:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800638a:	7ffb      	ldrb	r3, [r7, #31]
 800638c:	f003 030c 	and.w	r3, r3, #12
 8006390:	2b04      	cmp	r3, #4
 8006392:	d103      	bne.n	800639c <create_name+0x168>
 8006394:	7fbb      	ldrb	r3, [r7, #30]
 8006396:	f043 0308 	orr.w	r3, r3, #8
 800639a:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	330b      	adds	r3, #11
 80063a0:	7fba      	ldrb	r2, [r7, #30]
 80063a2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80063a4:	2300      	movs	r3, #0
#endif
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	0800be64 	.word	0x0800be64
 80063b4:	0800bdf8 	.word	0x0800bdf8

080063b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b2f      	cmp	r3, #47	; 0x2f
 80063c8:	d003      	beq.n	80063d2 <follow_path+0x1a>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b5c      	cmp	r3, #92	; 0x5c
 80063d0:	d102      	bne.n	80063d8 <follow_path+0x20>
		path++;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063de:	461a      	mov	r2, r3
 80063e0:	2300      	movs	r3, #0
 80063e2:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b1f      	cmp	r3, #31
 80063ea:	d80c      	bhi.n	8006406 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80063ec:	2100      	movs	r1, #0
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fbd3 	bl	8005b9a <dir_sdi>
 80063f4:	4603      	mov	r3, r0
 80063f6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fe:	461a      	mov	r2, r3
 8006400:	2300      	movs	r3, #0
 8006402:	6153      	str	r3, [r2, #20]
 8006404:	e049      	b.n	800649a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006406:	463b      	mov	r3, r7
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff ff12 	bl	8006234 <create_name>
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d13a      	bne.n	8006490 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fe77 	bl	800610e <dir_find>
 8006420:	4603      	mov	r3, r0
 8006422:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	7adb      	ldrb	r3, [r3, #11]
 800642e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b04      	cmp	r3, #4
 800643a:	d12b      	bne.n	8006494 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d126      	bne.n	8006494 <follow_path+0xdc>
 8006446:	2305      	movs	r3, #5
 8006448:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800644a:	e023      	b.n	8006494 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d120      	bne.n	8006498 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	330b      	adds	r3, #11
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800646e:	2305      	movs	r3, #5
 8006470:	73fb      	strb	r3, [r7, #15]
 8006472:	e012      	b.n	800649a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff fdf1 	bl	8006066 <ld_clust>
 8006484:	4602      	mov	r2, r0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800648e:	e7ba      	b.n	8006406 <follow_path+0x4e>
			if (res != FR_OK) break;
 8006490:	bf00      	nop
 8006492:	e002      	b.n	800649a <follow_path+0xe2>
				break;
 8006494:	bf00      	nop
 8006496:	e000      	b.n	800649a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006498:	bf00      	nop
		}
	}

	return res;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295
 80064b0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d031      	beq.n	800651e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e002      	b.n	80064c8 <get_ldnumber+0x24>
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	3301      	adds	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d903      	bls.n	80064d8 <get_ldnumber+0x34>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b3a      	cmp	r3, #58	; 0x3a
 80064d6:	d1f4      	bne.n	80064c2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b3a      	cmp	r3, #58	; 0x3a
 80064de:	d11c      	bne.n	800651a <get_ldnumber+0x76>
			tp = *path;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	60fa      	str	r2, [r7, #12]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	3b30      	subs	r3, #48	; 0x30
 80064f0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b09      	cmp	r3, #9
 80064f6:	d80e      	bhi.n	8006516 <get_ldnumber+0x72>
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d10a      	bne.n	8006516 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d107      	bne.n	8006516 <get_ldnumber+0x72>
					vol = (int)i;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	3301      	adds	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	e002      	b.n	8006520 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800651e:	693b      	ldr	r3, [r7, #16]
}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr
	...

0800652c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653c:	2200      	movs	r2, #0
 800653e:	711a      	strb	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006546:	461a      	mov	r2, r3
 8006548:	f04f 33ff 	mov.w	r3, #4294967295
 800654c:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7fe fe75 	bl	8005240 <move_window>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <check_fs+0x34>
		return 3;
 800655c:	2303      	movs	r3, #3
 800655e:	e04a      	b.n	80065f6 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006566:	3301      	adds	r3, #1
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	b21a      	sxth	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006574:	b21b      	sxth	r3, r3
 8006576:	4313      	orrs	r3, r2
 8006578:	b21b      	sxth	r3, r3
 800657a:	4a21      	ldr	r2, [pc, #132]	; (8006600 <check_fs+0xd4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d001      	beq.n	8006584 <check_fs+0x58>
		return 2;
 8006580:	2302      	movs	r3, #2
 8006582:	e038      	b.n	80065f6 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3336      	adds	r3, #54	; 0x36
 8006588:	3303      	adds	r3, #3
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	061a      	lsls	r2, r3, #24
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3336      	adds	r3, #54	; 0x36
 8006592:	3302      	adds	r3, #2
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	4313      	orrs	r3, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	3236      	adds	r2, #54	; 0x36
 800659e:	3201      	adds	r2, #1
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	0212      	lsls	r2, r2, #8
 80065a4:	4313      	orrs	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065b2:	4a14      	ldr	r2, [pc, #80]	; (8006604 <check_fs+0xd8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d101      	bne.n	80065bc <check_fs+0x90>
		return 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e01c      	b.n	80065f6 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3352      	adds	r3, #82	; 0x52
 80065c0:	3303      	adds	r3, #3
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	061a      	lsls	r2, r3, #24
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3352      	adds	r3, #82	; 0x52
 80065ca:	3302      	adds	r3, #2
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	041b      	lsls	r3, r3, #16
 80065d0:	4313      	orrs	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	3252      	adds	r2, #82	; 0x52
 80065d6:	3201      	adds	r2, #1
 80065d8:	7812      	ldrb	r2, [r2, #0]
 80065da:	0212      	lsls	r2, r2, #8
 80065dc:	4313      	orrs	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065ea:	4a06      	ldr	r2, [pc, #24]	; (8006604 <check_fs+0xd8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d101      	bne.n	80065f4 <check_fs+0xc8>
		return 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	e000      	b.n	80065f6 <check_fs+0xca>

	return 1;
 80065f4:	2301      	movs	r3, #1
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	ffffaa55 	.word	0xffffaa55
 8006604:	00544146 	.word	0x00544146

08006608 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b096      	sub	sp, #88	; 0x58
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	4613      	mov	r3, r2
 8006614:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800661c:	68b8      	ldr	r0, [r7, #8]
 800661e:	f7ff ff41 	bl	80064a4 <get_ldnumber>
 8006622:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006626:	2b00      	cmp	r3, #0
 8006628:	da01      	bge.n	800662e <find_volume+0x26>
 800662a:	230b      	movs	r3, #11
 800662c:	e311      	b.n	8006c52 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800662e:	4a98      	ldr	r2, [pc, #608]	; (8006890 <find_volume+0x288>)
 8006630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006636:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <find_volume+0x3a>
 800663e:	230c      	movs	r3, #12
 8006640:	e307      	b.n	8006c52 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006646:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01c      	beq.n	800668e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	4618      	mov	r0, r3
 800665e:	f7fe fac9 	bl	8004bf4 <disk_status>
 8006662:	4603      	mov	r3, r0
 8006664:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10c      	bne.n	800668e <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <find_volume+0x82>
 800667a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006686:	230a      	movs	r3, #10
 8006688:	e2e3      	b.n	8006c52 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800668a:	2300      	movs	r3, #0
 800668c:	e2e1      	b.n	8006c52 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669a:	b2da      	uxtb	r2, r3
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066aa:	785b      	ldrb	r3, [r3, #1]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe fabb 	bl	8004c28 <disk_initialize>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80066b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80066c4:	2303      	movs	r3, #3
 80066c6:	e2c4      	b.n	8006c52 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <find_volume+0xd6>
 80066ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80066da:	230a      	movs	r3, #10
 80066dc:	e2b9      	b.n	8006c52 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e4:	7858      	ldrb	r0, [r3, #1]
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ec:	330a      	adds	r3, #10
 80066ee:	461a      	mov	r2, r3
 80066f0:	2102      	movs	r1, #2
 80066f2:	f7fe faff 	bl	8004cf4 <disk_ioctl>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10d      	bne.n	8006718 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006702:	895b      	ldrh	r3, [r3, #10]
 8006704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006708:	d306      	bcc.n	8006718 <find_volume+0x110>
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006710:	895b      	ldrh	r3, [r3, #10]
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006716:	d901      	bls.n	800671c <find_volume+0x114>
 8006718:	2301      	movs	r3, #1
 800671a:	e29a      	b.n	8006c52 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006720:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006722:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006724:	f7ff ff02 	bl	800652c <check_fs>
 8006728:	4603      	mov	r3, r0
 800672a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800672e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006732:	2b01      	cmp	r3, #1
 8006734:	d153      	bne.n	80067de <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006736:	2300      	movs	r3, #0
 8006738:	643b      	str	r3, [r7, #64]	; 0x40
 800673a:	e028      	b.n	800678e <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800673c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800673e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006746:	4413      	add	r3, r2
 8006748:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	3304      	adds	r3, #4
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d012      	beq.n	800677a <find_volume+0x172>
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	330b      	adds	r3, #11
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	061a      	lsls	r2, r3, #24
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	330a      	adds	r3, #10
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	041b      	lsls	r3, r3, #16
 8006764:	4313      	orrs	r3, r2
 8006766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006768:	3209      	adds	r2, #9
 800676a:	7812      	ldrb	r2, [r2, #0]
 800676c:	0212      	lsls	r2, r2, #8
 800676e:	4313      	orrs	r3, r2
 8006770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006772:	3208      	adds	r2, #8
 8006774:	7812      	ldrb	r2, [r2, #0]
 8006776:	431a      	orrs	r2, r3
 8006778:	e000      	b.n	800677c <find_volume+0x174>
 800677a:	2200      	movs	r2, #0
 800677c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	3358      	adds	r3, #88	; 0x58
 8006782:	443b      	add	r3, r7
 8006784:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800678a:	3301      	adds	r3, #1
 800678c:	643b      	str	r3, [r7, #64]	; 0x40
 800678e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006790:	2b03      	cmp	r3, #3
 8006792:	d9d3      	bls.n	800673c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006794:	2300      	movs	r3, #0
 8006796:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <find_volume+0x19c>
 800679e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a0:	3b01      	subs	r3, #1
 80067a2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80067a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	3358      	adds	r3, #88	; 0x58
 80067aa:	443b      	add	r3, r7
 80067ac:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80067b0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80067b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <find_volume+0x1bc>
 80067b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067bc:	f7ff feb6 	bl	800652c <check_fs>
 80067c0:	4603      	mov	r3, r0
 80067c2:	e000      	b.n	80067c6 <find_volume+0x1be>
 80067c4:	2302      	movs	r3, #2
 80067c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80067ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <find_volume+0x1d6>
 80067d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d4:	3301      	adds	r3, #1
 80067d6:	643b      	str	r3, [r7, #64]	; 0x40
 80067d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d9e2      	bls.n	80067a4 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80067de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d101      	bne.n	80067ea <find_volume+0x1e2>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e233      	b.n	8006c52 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80067ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <find_volume+0x1ee>
 80067f2:	230d      	movs	r3, #13
 80067f4:	e22d      	b.n	8006c52 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	7b1b      	ldrb	r3, [r3, #12]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	b21a      	sxth	r2, r3
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	7adb      	ldrb	r3, [r3, #11]
 8006802:	b21b      	sxth	r3, r3
 8006804:	4313      	orrs	r3, r2
 8006806:	b21a      	sxth	r2, r3
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680e:	895b      	ldrh	r3, [r3, #10]
 8006810:	b21b      	sxth	r3, r3
 8006812:	429a      	cmp	r2, r3
 8006814:	d001      	beq.n	800681a <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8006816:	230d      	movs	r3, #13
 8006818:	e21b      	b.n	8006c52 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	7ddb      	ldrb	r3, [r3, #23]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	b21a      	sxth	r2, r3
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	7d9b      	ldrb	r3, [r3, #22]
 8006826:	b21b      	sxth	r3, r3
 8006828:	4313      	orrs	r3, r2
 800682a:	b21b      	sxth	r3, r3
 800682c:	b29b      	uxth	r3, r3
 800682e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d112      	bne.n	800685c <find_volume+0x254>
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800683c:	061a      	lsls	r2, r3, #24
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006844:	041b      	lsls	r3, r3, #16
 8006846:	4313      	orrs	r3, r2
 8006848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800684a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800684e:	0212      	lsls	r2, r2, #8
 8006850:	4313      	orrs	r3, r2
 8006852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006854:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006858:	4313      	orrs	r3, r2
 800685a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006862:	461a      	mov	r2, r3
 8006864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006866:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686a:	7c1a      	ldrb	r2, [r3, #16]
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006872:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800687a:	78db      	ldrb	r3, [r3, #3]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d009      	beq.n	8006894 <find_volume+0x28c>
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006886:	78db      	ldrb	r3, [r3, #3]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d003      	beq.n	8006894 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800688c:	230d      	movs	r3, #13
 800688e:	e1e0      	b.n	8006c52 <find_volume+0x64a>
 8006890:	200023c0 	.word	0x200023c0
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689a:	78db      	ldrb	r3, [r3, #3]
 800689c:	461a      	mov	r2, r3
 800689e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a0:	fb02 f303 	mul.w	r3, r2, r3
 80068a4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	7b5a      	ldrb	r2, [r3, #13]
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b0:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b8:	789b      	ldrb	r3, [r3, #2]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00c      	beq.n	80068d8 <find_volume+0x2d0>
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c4:	789b      	ldrb	r3, [r3, #2]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ce:	789b      	ldrb	r3, [r3, #2]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80068d8:	230d      	movs	r3, #13
 80068da:	e1ba      	b.n	8006c52 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	7c9b      	ldrb	r3, [r3, #18]
 80068e0:	021b      	lsls	r3, r3, #8
 80068e2:	b21a      	sxth	r2, r3
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	7c5b      	ldrb	r3, [r3, #17]
 80068e8:	b21b      	sxth	r3, r3
 80068ea:	4313      	orrs	r3, r2
 80068ec:	b21b      	sxth	r3, r3
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fe:	891b      	ldrh	r3, [r3, #8]
 8006900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006902:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006906:	8952      	ldrh	r2, [r2, #10]
 8006908:	0952      	lsrs	r2, r2, #5
 800690a:	b292      	uxth	r2, r2
 800690c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006910:	fb01 f202 	mul.w	r2, r1, r2
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800691c:	230d      	movs	r3, #13
 800691e:	e198      	b.n	8006c52 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	7d1b      	ldrb	r3, [r3, #20]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	b21a      	sxth	r2, r3
 8006928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692a:	7cdb      	ldrb	r3, [r3, #19]
 800692c:	b21b      	sxth	r3, r3
 800692e:	4313      	orrs	r3, r2
 8006930:	b21b      	sxth	r3, r3
 8006932:	b29b      	uxth	r3, r3
 8006934:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006938:	2b00      	cmp	r3, #0
 800693a:	d112      	bne.n	8006962 <find_volume+0x35a>
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006942:	061a      	lsls	r2, r3, #24
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800694a:	041b      	lsls	r3, r3, #16
 800694c:	4313      	orrs	r3, r2
 800694e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006950:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006954:	0212      	lsls	r2, r2, #8
 8006956:	4313      	orrs	r3, r2
 8006958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800695a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800695e:	4313      	orrs	r3, r2
 8006960:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	7bdb      	ldrb	r3, [r3, #15]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	b21a      	sxth	r2, r3
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	7b9b      	ldrb	r3, [r3, #14]
 800696e:	b21b      	sxth	r3, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	b21b      	sxth	r3, r3
 8006974:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006976:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <find_volume+0x378>
 800697c:	230d      	movs	r3, #13
 800697e:	e168      	b.n	8006c52 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006980:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006984:	4413      	add	r3, r2
 8006986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006988:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800698c:	8911      	ldrh	r1, [r2, #8]
 800698e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006990:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006994:	8952      	ldrh	r2, [r2, #10]
 8006996:	0952      	lsrs	r2, r2, #5
 8006998:	b292      	uxth	r2, r2
 800699a:	fbb1 f2f2 	udiv	r2, r1, r2
 800699e:	b292      	uxth	r2, r2
 80069a0:	4413      	add	r3, r2
 80069a2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80069a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d201      	bcs.n	80069b0 <find_volume+0x3a8>
 80069ac:	230d      	movs	r3, #13
 80069ae:	e150      	b.n	8006c52 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80069b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069bc:	7892      	ldrb	r2, [r2, #2]
 80069be:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <find_volume+0x3c6>
 80069ca:	230d      	movs	r3, #13
 80069cc:	e141      	b.n	8006c52 <find_volume+0x64a>
	fmt = FS_FAT12;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80069da:	4293      	cmp	r3, r2
 80069dc:	d902      	bls.n	80069e4 <find_volume+0x3dc>
 80069de:	2302      	movs	r3, #2
 80069e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d902      	bls.n	80069f4 <find_volume+0x3ec>
 80069ee:	2303      	movs	r3, #3
 80069f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	3302      	adds	r3, #2
 80069f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069fe:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a06:	461a      	mov	r2, r3
 8006a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0a:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006a0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a10:	4413      	add	r3, r2
 8006a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a18:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8006a1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	4413      	add	r3, r2
 8006a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a26:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8006a28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d124      	bne.n	8006a7a <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a36:	891b      	ldrh	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <find_volume+0x438>
 8006a3c:	230d      	movs	r3, #13
 8006a3e:	e108      	b.n	8006c52 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006a46:	061a      	lsls	r2, r3, #24
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006a4e:	041b      	lsls	r3, r3, #16
 8006a50:	4313      	orrs	r3, r2
 8006a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a54:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006a58:	0212      	lsls	r2, r2, #8
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a5e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006a62:	4313      	orrs	r3, r2
 8006a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a6a:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	647b      	str	r3, [r7, #68]	; 0x44
 8006a78:	e02b      	b.n	8006ad2 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a80:	891b      	ldrh	r3, [r3, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <find_volume+0x482>
 8006a86:	230d      	movs	r3, #13
 8006a88:	e0e3      	b.n	8006c52 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a90:	6a1a      	ldr	r2, [r3, #32]
 8006a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a94:	4413      	add	r3, r2
 8006a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a9c:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d105      	bne.n	8006ab2 <find_volume+0x4aa>
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	e00e      	b.n	8006ad0 <find_volume+0x4c8>
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab8:	695a      	ldr	r2, [r3, #20]
 8006aba:	4613      	mov	r3, r2
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	4413      	add	r3, r2
 8006ac0:	085a      	lsrs	r2, r3, #1
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006ad0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae0:	895b      	ldrh	r3, [r3, #10]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae6:	440b      	add	r3, r1
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aec:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8006af0:	8949      	ldrh	r1, [r1, #10]
 8006af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d201      	bcs.n	8006afe <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8006afa:	230d      	movs	r3, #13
 8006afc:	e0a9      	b.n	8006c52 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b04:	461a      	mov	r2, r3
 8006b06:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0a:	6113      	str	r3, [r2, #16]
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b1a:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b22:	2280      	movs	r2, #128	; 0x80
 8006b24:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006b26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d17a      	bne.n	8006c24 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	b21a      	sxth	r2, r3
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b3e:	b21b      	sxth	r3, r3
 8006b40:	4313      	orrs	r3, r2
 8006b42:	b21b      	sxth	r3, r3
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d16d      	bne.n	8006c24 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b50:	f7fe fb76 	bl	8005240 <move_window>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d164      	bne.n	8006c24 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b60:	2200      	movs	r2, #0
 8006b62:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	b21a      	sxth	r2, r3
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006b74:	b21b      	sxth	r3, r3
 8006b76:	4313      	orrs	r3, r2
 8006b78:	b21b      	sxth	r3, r3
 8006b7a:	4a38      	ldr	r2, [pc, #224]	; (8006c5c <find_volume+0x654>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d151      	bne.n	8006c24 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	78db      	ldrb	r3, [r3, #3]
 8006b84:	061a      	lsls	r2, r3, #24
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	789b      	ldrb	r3, [r3, #2]
 8006b8a:	041b      	lsls	r3, r3, #16
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b90:	7852      	ldrb	r2, [r2, #1]
 8006b92:	0212      	lsls	r2, r2, #8
 8006b94:	4313      	orrs	r3, r2
 8006b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b98:	7812      	ldrb	r2, [r2, #0]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	4a30      	ldr	r2, [pc, #192]	; (8006c60 <find_volume+0x658>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d140      	bne.n	8006c24 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006ba8:	061a      	lsls	r2, r3, #24
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006bb0:	041b      	lsls	r3, r3, #16
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bb6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006bba:	0212      	lsls	r2, r2, #8
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	4a27      	ldr	r2, [pc, #156]	; (8006c64 <find_volume+0x65c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d12b      	bne.n	8006c24 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006bd2:	061a      	lsls	r2, r3, #24
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006bda:	041b      	lsls	r3, r3, #16
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006be0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006be4:	0212      	lsls	r2, r2, #8
 8006be6:	4313      	orrs	r3, r2
 8006be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bea:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bf6:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006bfe:	061a      	lsls	r2, r3, #24
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006c06:	041b      	lsls	r3, r3, #16
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c0c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006c10:	0212      	lsls	r2, r2, #8
 8006c12:	4313      	orrs	r3, r2
 8006c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c16:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c22:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c30:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006c32:	4b0d      	ldr	r3, [pc, #52]	; (8006c68 <find_volume+0x660>)
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	3301      	adds	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <find_volume+0x660>)
 8006c3c:	801a      	strh	r2, [r3, #0]
 8006c3e:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <find_volume+0x660>)
 8006c40:	881a      	ldrh	r2, [r3, #0]
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c48:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006c4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c4c:	f7fe fa7c 	bl	8005148 <clear_lock>
#endif

	return FR_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3758      	adds	r7, #88	; 0x58
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	ffffaa55 	.word	0xffffaa55
 8006c60:	41615252 	.word	0x41615252
 8006c64:	61417272 	.word	0x61417272
 8006c68:	200023c4 	.word	0x200023c4

08006c6c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d02a      	beq.n	8006cd4 <validate+0x68>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d024      	beq.n	8006cd4 <validate+0x68>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01b      	beq.n	8006cd4 <validate+0x68>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca8:	88da      	ldrh	r2, [r3, #6]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb0:	889b      	ldrh	r3, [r3, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d10e      	bne.n	8006cd4 <validate+0x68>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fd ff95 	bl	8004bf4 <disk_status>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8006cd4:	2309      	movs	r3, #9
 8006cd6:	e000      	b.n	8006cda <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006cf6:	f107 0310 	add.w	r3, r7, #16
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fbd2 	bl	80064a4 <get_ldnumber>
 8006d00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	da01      	bge.n	8006d0c <f_mount+0x28>
 8006d08:	230b      	movs	r3, #11
 8006d0a:	e02f      	b.n	8006d6c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006d0c:	4a19      	ldr	r2, [pc, #100]	; (8006d74 <f_mount+0x90>)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006d1c:	69b8      	ldr	r0, [r7, #24]
 8006d1e:	f7fe fa13 	bl	8005148 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d004      	beq.n	8006d3c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	490d      	ldr	r1, [pc, #52]	; (8006d74 <f_mount+0x90>)
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <f_mount+0x6e>
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d001      	beq.n	8006d56 <f_mount+0x72>
 8006d52:	2300      	movs	r3, #0
 8006d54:	e00a      	b.n	8006d6c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006d56:	f107 0108 	add.w	r1, r7, #8
 8006d5a:	f107 030c 	add.w	r3, r7, #12
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff fc51 	bl	8006608 <find_volume>
 8006d66:	4603      	mov	r3, r0
 8006d68:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	200023c0 	.word	0x200023c0

08006d78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d86:	f843 0c44 	str.w	r0, [r3, #-68]
 8006d8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d8e:	f843 1c48 	str.w	r1, [r3, #-72]
 8006d92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d96:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006d9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <f_open+0x32>
 8006da6:	2309      	movs	r3, #9
 8006da8:	e2e6      	b.n	8007378 <f_open+0x600>
	fp->fs = 0;			/* Clear file object */
 8006daa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006dae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db6:	461a      	mov	r2, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006dbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006dc6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006dd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006dd6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006dda:	f023 0301 	bic.w	r3, r3, #1
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	f107 0110 	add.w	r1, r7, #16
 8006de4:	3908      	subs	r1, #8
 8006de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dea:	3b10      	subs	r3, #16
 8006dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fc09 	bl	8006608 <find_volume>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006dfc:	f102 020f 	add.w	r2, r2, #15
 8006e00:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006e02:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e06:	f103 030f 	add.w	r3, r3, #15
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f040 82ae 	bne.w	800736e <f_open+0x5f6>
		INIT_BUF(dj);
 8006e12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e16:	461a      	mov	r2, r3
 8006e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e1c:	3b1c      	subs	r3, #28
 8006e1e:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e26:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8006e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e2e:	3b10      	subs	r3, #16
 8006e30:	4611      	mov	r1, r2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff fac0 	bl	80063b8 <follow_path>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e3e:	f102 020f 	add.w	r2, r2, #15
 8006e42:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8006e44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e48:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8006e4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e50:	f102 0208 	add.w	r2, r2, #8
 8006e54:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006e56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e5a:	f103 030f 	add.w	r3, r3, #15
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d126      	bne.n	8006eb2 <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 8006e64:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e68:	f103 0308 	add.w	r3, r3, #8
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <f_open+0x108>
				res = FR_INVALID_NAME;
 8006e72:	2306      	movs	r3, #6
 8006e74:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e78:	f102 020f 	add.w	r2, r2, #15
 8006e7c:	7013      	strb	r3, [r2, #0]
 8006e7e:	e018      	b.n	8006eb2 <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e84:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bf14      	ite	ne
 8006e90:	2301      	movne	r3, #1
 8006e92:	2300      	moveq	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e9c:	3b10      	subs	r3, #16
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fd ffbd 	bl	8004e20 <chk_lock>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006eac:	f102 020f 	add.w	r2, r2, #15
 8006eb0:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006eb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006eb6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006eba:	f003 031c 	and.w	r3, r3, #28
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 8134 	beq.w	800712c <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 8006ec4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ec8:	f103 030f 	add.w	r3, r3, #15
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d02e      	beq.n	8006f30 <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006ed2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ed6:	f103 030f 	add.w	r3, r3, #15
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d112      	bne.n	8006f06 <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006ee0:	f7fe f80e 	bl	8004f00 <enq_lock>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <f_open+0x182>
 8006eea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006eee:	3b10      	subs	r3, #16
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff f95f 	bl	80061b4 <dir_register>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	e000      	b.n	8006efc <f_open+0x184>
 8006efa:	2312      	movs	r3, #18
 8006efc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f00:	f102 020f 	add.w	r2, r2, #15
 8006f04:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f10:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006f14:	f043 0308 	orr.w	r3, r3, #8
 8006f18:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8006f1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f20:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8006f24:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f28:	f102 0208 	add.w	r2, r2, #8
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e01f      	b.n	8006f70 <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f30:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f34:	f103 0308 	add.w	r3, r3, #8
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	330b      	adds	r3, #11
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	f003 0311 	and.w	r3, r3, #17
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d006      	beq.n	8006f54 <f_open+0x1dc>
					res = FR_DENIED;
 8006f46:	2307      	movs	r3, #7
 8006f48:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f4c:	f102 020f 	add.w	r2, r2, #15
 8006f50:	7013      	strb	r3, [r2, #0]
 8006f52:	e00d      	b.n	8006f70 <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006f54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f58:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <f_open+0x1f8>
						res = FR_EXIST;
 8006f64:	2308      	movs	r3, #8
 8006f66:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f6a:	f102 020f 	add.w	r2, r2, #15
 8006f6e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006f70:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f74:	f103 030f 	add.w	r3, r3, #15
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 8108 	bne.w	8007190 <f_open+0x418>
 8006f80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f84:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 80ff 	beq.w	8007190 <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 8006f92:	f7fd fdcd 	bl	8004b30 <get_fattime>
 8006f96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f9a:	f103 0304 	add.w	r3, r3, #4
 8006f9e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006fa0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fa4:	f103 0308 	add.w	r3, r3, #8
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	330e      	adds	r3, #14
 8006fac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006fb0:	f102 0204 	add.w	r2, r2, #4
 8006fb4:	6812      	ldr	r2, [r2, #0]
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fbe:	f103 0304 	add.w	r3, r3, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	0a1b      	lsrs	r3, r3, #8
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fce:	f103 0308 	add.w	r3, r3, #8
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	330f      	adds	r3, #15
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fde:	f103 0304 	add.w	r3, r3, #4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	0c1a      	lsrs	r2, r3, #16
 8006fe6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fea:	f103 0308 	add.w	r3, r3, #8
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3310      	adds	r3, #16
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ffa:	f103 0304 	add.w	r3, r3, #4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	0e1a      	lsrs	r2, r3, #24
 8007002:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007006:	f103 0308 	add.w	r3, r3, #8
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3311      	adds	r3, #17
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007012:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007016:	f103 0308 	add.w	r3, r3, #8
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330b      	adds	r3, #11
 800701e:	2200      	movs	r2, #0
 8007020:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007022:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007026:	f103 0308 	add.w	r3, r3, #8
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	331c      	adds	r3, #28
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007036:	f103 0308 	add.w	r3, r3, #8
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	331d      	adds	r3, #29
 800703e:	2200      	movs	r2, #0
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007046:	f103 0308 	add.w	r3, r3, #8
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	331e      	adds	r3, #30
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007056:	f103 0308 	add.w	r3, r3, #8
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	331f      	adds	r3, #31
 800705e:	2200      	movs	r2, #0
 8007060:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007062:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007066:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800706a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800706e:	f102 0208 	add.w	r2, r2, #8
 8007072:	6811      	ldr	r1, [r2, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe fff6 	bl	8006066 <ld_clust>
 800707a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800707e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007080:	2100      	movs	r1, #0
 8007082:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007086:	f103 0308 	add.w	r3, r3, #8
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	f7ff f819 	bl	80060c2 <st_clust>
				dj.fs->wflag = 1;
 8007090:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007094:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709c:	2201      	movs	r2, #1
 800709e:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80070a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d072      	beq.n	8007190 <f_open+0x418>
					dw = dj.fs->winsect;
 80070aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070ae:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80070b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070bc:	f102 0204 	add.w	r2, r2, #4
 80070c0:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80070c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070c6:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80070ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070ce:	6811      	ldr	r1, [r2, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fc19 	bl	8005908 <remove_chain>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070dc:	f102 020f 	add.w	r2, r2, #15
 80070e0:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80070e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070e6:	f103 030f 	add.w	r3, r3, #15
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d14f      	bne.n	8007190 <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80070f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070f4:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 80070f8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3b01      	subs	r3, #1
 8007100:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007104:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8007106:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800710a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800710e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007112:	f102 0204 	add.w	r2, r2, #4
 8007116:	6811      	ldr	r1, [r2, #0]
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe f891 	bl	8005240 <move_window>
 800711e:	4603      	mov	r3, r0
 8007120:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007124:	f102 020f 	add.w	r2, r2, #15
 8007128:	7013      	strb	r3, [r2, #0]
 800712a:	e031      	b.n	8007190 <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800712c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007130:	f103 030f 	add.w	r3, r3, #15
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d12a      	bne.n	8007190 <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800713a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800713e:	f103 0308 	add.w	r3, r3, #8
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	330b      	adds	r3, #11
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	d006      	beq.n	800715e <f_open+0x3e6>
					res = FR_NO_FILE;
 8007150:	2304      	movs	r3, #4
 8007152:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007156:	f102 020f 	add.w	r2, r2, #15
 800715a:	7013      	strb	r3, [r2, #0]
 800715c:	e018      	b.n	8007190 <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800715e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007162:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d010      	beq.n	8007190 <f_open+0x418>
 800716e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007172:	f103 0308 	add.w	r3, r3, #8
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	330b      	adds	r3, #11
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <f_open+0x418>
						res = FR_DENIED;
 8007184:	2307      	movs	r3, #7
 8007186:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800718a:	f102 020f 	add.w	r2, r2, #15
 800718e:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007190:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007194:	f103 030f 	add.w	r3, r3, #15
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d157      	bne.n	800724e <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800719e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071a2:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <f_open+0x44c>
				mode |= FA__WRITTEN;
 80071ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071b2:	461a      	mov	r2, r3
 80071b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071b8:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80071bc:	f043 0320 	orr.w	r3, r3, #32
 80071c0:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80071c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071c8:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80071cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80071d6:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80071da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071de:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80071e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071e4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80071e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ec:	461a      	mov	r2, r3
 80071ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071f2:	f103 0308 	add.w	r3, r3, #8
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80071fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071fe:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007202:	f023 0301 	bic.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	bf14      	ite	ne
 800720a:	2301      	movne	r3, #1
 800720c:	2300      	moveq	r3, #0
 800720e:	b2db      	uxtb	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007216:	3b10      	subs	r3, #16
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f7fd fe94 	bl	8004f48 <inc_lock>
 8007220:	4602      	mov	r2, r0
 8007222:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007226:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800722a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722e:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007230:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007234:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	2b00      	cmp	r3, #0
 8007240:	d105      	bne.n	800724e <f_open+0x4d6>
 8007242:	2302      	movs	r3, #2
 8007244:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007248:	f102 020f 	add.w	r2, r2, #15
 800724c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800724e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007252:	f103 030f 	add.w	r3, r3, #15
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	f040 8088 	bne.w	800736e <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 800725e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007262:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726a:	461a      	mov	r2, r3
 800726c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007270:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007274:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007276:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800727a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800727e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007282:	2200      	movs	r2, #0
 8007284:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800728a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800728e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007292:	f102 0208 	add.w	r2, r2, #8
 8007296:	6811      	ldr	r1, [r2, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fee4 	bl	8006066 <ld_clust>
 800729e:	4602      	mov	r2, r0
 80072a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072a4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80072a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ac:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80072ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80072b2:	f103 0308 	add.w	r3, r3, #8
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	331f      	adds	r3, #31
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	061a      	lsls	r2, r3, #24
 80072be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80072c2:	f103 0308 	add.w	r3, r3, #8
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	331e      	adds	r3, #30
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80072d4:	f102 0208 	add.w	r2, r2, #8
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	321d      	adds	r2, #29
 80072dc:	7812      	ldrb	r2, [r2, #0]
 80072de:	0212      	lsls	r2, r2, #8
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80072e6:	f102 0208 	add.w	r2, r2, #8
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	321c      	adds	r2, #28
 80072ee:	7812      	ldrb	r2, [r2, #0]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80072f6:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80072fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072fe:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8007300:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007304:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730c:	461a      	mov	r2, r3
 800730e:	2300      	movs	r3, #0
 8007310:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8007312:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007316:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800731a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800731e:	461a      	mov	r2, r3
 8007320:	2300      	movs	r3, #0
 8007322:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007324:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007328:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800732c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007330:	461a      	mov	r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800733a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800733e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007342:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8007346:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800734a:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800734c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007350:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735e:	88da      	ldrh	r2, [r3, #6]
 8007360:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007364:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736c:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800736e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007372:	f103 030f 	add.w	r3, r3, #15
 8007376:	781b      	ldrb	r3, [r3, #0]
}
 8007378:	4618      	mov	r0, r3
 800737a:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08a      	sub	sp, #40	; 0x28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff fc65 	bl	8006c6c <validate>
 80073a2:	4603      	mov	r3, r0
 80073a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <f_write+0x2c>
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	e21e      	b.n	80077ee <f_write+0x46a>
	if (fp->err)							/* Check error */
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b6:	79db      	ldrb	r3, [r3, #7]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c2:	79db      	ldrb	r3, [r3, #7]
 80073c4:	e213      	b.n	80077ee <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073cc:	799b      	ldrb	r3, [r3, #6]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80073d6:	2307      	movs	r3, #7
 80073d8:	e209      	b.n	80077ee <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e0:	689a      	ldr	r2, [r3, #8]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	441a      	add	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	f080 81d9 	bcs.w	80077a6 <f_write+0x422>
 80073f4:	2300      	movs	r3, #0
 80073f6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80073f8:	e1d5      	b.n	80077a6 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007408:	6812      	ldr	r2, [r2, #0]
 800740a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800740e:	8952      	ldrh	r2, [r2, #10]
 8007410:	fbb3 f1f2 	udiv	r1, r3, r2
 8007414:	fb01 f202 	mul.w	r2, r1, r2
 8007418:	1a9b      	subs	r3, r3, r2
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 8169 	bne.w	80076f2 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007434:	8952      	ldrh	r2, [r2, #10]
 8007436:	fbb3 f3f2 	udiv	r3, r3, r2
 800743a:	b2da      	uxtb	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007448:	789b      	ldrb	r3, [r3, #2]
 800744a:	3b01      	subs	r3, #1
 800744c:	b2db      	uxtb	r3, r3
 800744e:	4013      	ands	r3, r2
 8007450:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007452:	7dbb      	ldrb	r3, [r7, #22]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d15f      	bne.n	8007518 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d111      	bne.n	8007488 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	2b00      	cmp	r3, #0
 8007472:	d126      	bne.n	80074c2 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2100      	movs	r1, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe faa3 	bl	80059ca <create_chain>
 8007484:	6278      	str	r0, [r7, #36]	; 0x24
 8007486:	e01c      	b.n	80074c2 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d009      	beq.n	80074a8 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	4619      	mov	r1, r3
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f7fe fb3b 	bl	8005b1a <clmt_clust>
 80074a4:	6278      	str	r0, [r7, #36]	; 0x24
 80074a6:	e00c      	b.n	80074c2 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	4619      	mov	r1, r3
 80074ba:	4610      	mov	r0, r2
 80074bc:	f7fe fa85 	bl	80059ca <create_chain>
 80074c0:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8173 	beq.w	80077b0 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d106      	bne.n	80074de <f_write+0x15a>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d6:	2202      	movs	r2, #2
 80074d8:	71da      	strb	r2, [r3, #7]
 80074da:	2302      	movs	r3, #2
 80074dc:	e187      	b.n	80077ee <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e4:	d106      	bne.n	80074f4 <f_write+0x170>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ec:	2201      	movs	r2, #1
 80074ee:	71da      	strb	r2, [r3, #7]
 80074f0:	2301      	movs	r3, #1
 80074f2:	e17c      	b.n	80077ee <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074fa:	461a      	mov	r2, r3
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <f_write+0x194>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007512:	461a      	mov	r2, r3
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751e:	799b      	ldrb	r3, [r3, #6]
 8007520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007524:	2b00      	cmp	r3, #0
 8007526:	d023      	beq.n	8007570 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007534:	7858      	ldrb	r0, [r3, #1]
 8007536:	68f9      	ldr	r1, [r7, #12]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	2301      	movs	r3, #1
 8007542:	f7fd fbb7 	bl	8004cb4 <disk_write>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d006      	beq.n	800755a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007552:	2201      	movs	r2, #1
 8007554:	71da      	strb	r2, [r3, #7]
 8007556:	2301      	movs	r3, #1
 8007558:	e149      	b.n	80077ee <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007560:	799b      	ldrb	r3, [r3, #6]
 8007562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007566:	b2da      	uxtb	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800756e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	4619      	mov	r1, r3
 8007582:	4610      	mov	r0, r2
 8007584:	f7fd ff4d 	bl	8005422 <clust2sect>
 8007588:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <f_write+0x21a>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007596:	2202      	movs	r2, #2
 8007598:	71da      	strb	r2, [r3, #7]
 800759a:	2302      	movs	r3, #2
 800759c:	e127      	b.n	80077ee <f_write+0x46a>
			sect += csect;
 800759e:	7dbb      	ldrb	r3, [r7, #22]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4413      	add	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b2:	895b      	ldrh	r3, [r3, #10]
 80075b4:	461a      	mov	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075bc:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d069      	beq.n	8007698 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80075c4:	7dba      	ldrb	r2, [r7, #22]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075d0:	6812      	ldr	r2, [r2, #0]
 80075d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075d6:	7892      	ldrb	r2, [r2, #2]
 80075d8:	4293      	cmp	r3, r2
 80075da:	d90a      	bls.n	80075f2 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e8:	789b      	ldrb	r3, [r3, #2]
 80075ea:	461a      	mov	r2, r3
 80075ec:	7dbb      	ldrb	r3, [r7, #22]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fe:	7858      	ldrb	r0, [r3, #1]
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	69b9      	ldr	r1, [r7, #24]
 8007606:	f7fd fb55 	bl	8004cb4 <disk_write>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d006      	beq.n	800761e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007616:	2201      	movs	r2, #1
 8007618:	71da      	strb	r2, [r3, #7]
 800761a:	2301      	movs	r3, #1
 800761c:	e0e7      	b.n	80077ee <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	429a      	cmp	r2, r3
 800762e:	d926      	bls.n	800767e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007638:	699a      	ldr	r2, [r3, #24]
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800764a:	8952      	ldrh	r2, [r2, #10]
 800764c:	fb02 f303 	mul.w	r3, r2, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	18d1      	adds	r1, r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007660:	895b      	ldrh	r3, [r3, #10]
 8007662:	461a      	mov	r2, r3
 8007664:	f7fd fb64 	bl	8004d30 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800766e:	799b      	ldrb	r3, [r3, #6]
 8007670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007674:	b2da      	uxtb	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768a:	895b      	ldrh	r3, [r3, #10]
 800768c:	461a      	mov	r2, r3
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	fb02 f303 	mul.w	r3, r2, r3
 8007694:	623b      	str	r3, [r7, #32]
				continue;
 8007696:	e06e      	b.n	8007776 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d01f      	beq.n	80076e6 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d215      	bcs.n	80076e6 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c6:	7858      	ldrb	r0, [r3, #1]
 80076c8:	68f9      	ldr	r1, [r7, #12]
 80076ca:	2301      	movs	r3, #1
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	f7fd fad1 	bl	8004c74 <disk_read>
 80076d2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d006      	beq.n	80076e6 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076de:	2201      	movs	r2, #1
 80076e0:	71da      	strb	r2, [r3, #7]
 80076e2:	2301      	movs	r3, #1
 80076e4:	e083      	b.n	80077ee <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ec:	461a      	mov	r2, r3
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fe:	895b      	ldrh	r3, [r3, #10]
 8007700:	4618      	mov	r0, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007716:	8952      	ldrh	r2, [r2, #10]
 8007718:	fbb3 f1f2 	udiv	r1, r3, r2
 800771c:	fb01 f202 	mul.w	r2, r1, r2
 8007720:	1a9b      	subs	r3, r3, r2
 8007722:	1ac3      	subs	r3, r0, r3
 8007724:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007726:	6a3a      	ldr	r2, [r7, #32]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	429a      	cmp	r2, r3
 800772c:	d901      	bls.n	8007732 <f_write+0x3ae>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007746:	8952      	ldrh	r2, [r2, #10]
 8007748:	fbb3 f1f2 	udiv	r1, r3, r2
 800774c:	fb01 f202 	mul.w	r2, r1, r2
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4413      	add	r3, r2
 8007756:	6a3a      	ldr	r2, [r7, #32]
 8007758:	69b9      	ldr	r1, [r7, #24]
 800775a:	4618      	mov	r0, r3
 800775c:	f7fd fae8 	bl	8004d30 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007766:	799b      	ldrb	r3, [r3, #6]
 8007768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800776c:	b2da      	uxtb	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007774:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	4413      	add	r3, r2
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	4413      	add	r3, r2
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007790:	6093      	str	r3, [r2, #8]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	441a      	add	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f47f ae26 	bne.w	80073fa <f_write+0x76>
 80077ae:	e000      	b.n	80077b2 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077b0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d907      	bls.n	80077d6 <f_write+0x452>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077d4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077dc:	799b      	ldrb	r3, [r3, #6]
 80077de:	f043 0320 	orr.w	r3, r3, #32
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ea:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3728      	adds	r7, #40	; 0x28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b086      	sub	sp, #24
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff fa34 	bl	8006c6c <validate>
 8007804:	4603      	mov	r3, r0
 8007806:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007808:	7dfb      	ldrb	r3, [r7, #23]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f040 80bc 	bne.w	8007988 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007816:	799b      	ldrb	r3, [r3, #6]
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80b3 	beq.w	8007988 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007828:	799b      	ldrb	r3, [r3, #6]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d01e      	beq.n	8007870 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800783e:	7858      	ldrb	r0, [r3, #1]
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	2301      	movs	r3, #1
 800784c:	f7fd fa32 	bl	8004cb4 <disk_write>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007856:	2301      	movs	r3, #1
 8007858:	e097      	b.n	800798a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007860:	799b      	ldrb	r3, [r3, #6]
 8007862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007866:	b2da      	uxtb	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800786e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f7fd fcdc 	bl	8005240 <move_window>
 8007888:	4603      	mov	r3, r0
 800788a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d17a      	bne.n	8007988 <f_sync+0x192>
				dir = fp->dir_ptr;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	330b      	adds	r3, #11
 80078a0:	781a      	ldrb	r2, [r3, #0]
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	330b      	adds	r3, #11
 80078a6:	f042 0220 	orr.w	r2, r2, #32
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	331c      	adds	r3, #28
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	331d      	adds	r3, #29
 80078d0:	b2d2      	uxtb	r2, r2
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	0c1a      	lsrs	r2, r3, #16
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	331e      	adds	r3, #30
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	0e1a      	lsrs	r2, r3, #24
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	331f      	adds	r3, #31
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	4619      	mov	r1, r3
 8007902:	6938      	ldr	r0, [r7, #16]
 8007904:	f7fe fbdd 	bl	80060c2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007908:	f7fd f912 	bl	8004b30 <get_fattime>
 800790c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	3316      	adds	r3, #22
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	b29b      	uxth	r3, r3
 800791c:	0a1b      	lsrs	r3, r3, #8
 800791e:	b29a      	uxth	r2, r3
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	3317      	adds	r3, #23
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	701a      	strb	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	0c1a      	lsrs	r2, r3, #16
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	3318      	adds	r3, #24
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	0e1a      	lsrs	r2, r3, #24
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	3319      	adds	r3, #25
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	3312      	adds	r3, #18
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	3313      	adds	r3, #19
 800794c:	2200      	movs	r2, #0
 800794e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007956:	799b      	ldrb	r3, [r3, #6]
 8007958:	f023 0320 	bic.w	r3, r3, #32
 800795c:	b2da      	uxtb	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007964:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007972:	2201      	movs	r2, #1
 8007974:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4618      	mov	r0, r3
 8007980:	f7fd fc90 	bl	80052a4 <sync_fs>
 8007984:	4603      	mov	r3, r0
 8007986:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007988:	7dfb      	ldrb	r3, [r7, #23]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff ff2b 	bl	80077f6 <f_sync>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d119      	bne.n	80079de <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff f95e 	bl	8006c6c <validate>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d111      	bne.n	80079de <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fd fb7c 	bl	80050c0 <dec_lock>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d105      	bne.n	80079de <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d8:	461a      	mov	r2, r3
 80079da:	2300      	movs	r3, #0
 80079dc:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b090      	sub	sp, #64	; 0x40
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff f93a 	bl	8006c6c <validate>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80079fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <f_lseek+0x24>
 8007a06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a0a:	e2da      	b.n	8007fc2 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a12:	79db      	ldrb	r3, [r3, #7]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1e:	79db      	ldrb	r3, [r3, #7]
 8007a20:	e2cf      	b.n	8007fc2 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8124 	beq.w	8007c78 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a36:	d16c      	bne.n	8007b12 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	1d1a      	adds	r2, r3, #4
 8007a46:	627a      	str	r2, [r7, #36]	; 0x24
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d046      	beq.n	8007aee <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	2300      	movs	r3, #0
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a74:	3301      	adds	r3, #1
 8007a76:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd fcf1 	bl	800546a <get_fat>
 8007a88:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d806      	bhi.n	8007a9e <f_lseek+0xb6>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a96:	2202      	movs	r2, #2
 8007a98:	71da      	strb	r2, [r3, #7]
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e291      	b.n	8007fc2 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa4:	d106      	bne.n	8007ab4 <f_lseek+0xcc>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aac:	2201      	movs	r2, #1
 8007aae:	71da      	strb	r2, [r3, #7]
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e286      	b.n	8007fc2 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d0d7      	beq.n	8007a6e <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d809      	bhi.n	8007ada <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	1d1a      	adds	r2, r3, #4
 8007aca:	627a      	str	r2, [r7, #36]	; 0x24
 8007acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	1d1a      	adds	r2, r3, #4
 8007ad4:	627a      	str	r2, [r7, #36]	; 0x24
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d3b8      	bcc.n	8007a60 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007af8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d803      	bhi.n	8007b0a <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	e259      	b.n	8007fbe <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007b0a:	2311      	movs	r3, #17
 8007b0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007b10:	e255      	b.n	8007fbe <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d904      	bls.n	8007b2a <f_lseek+0x142>
				ofs = fp->fsize;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b30:	461a      	mov	r2, r3
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 8240 	beq.w	8007fbe <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7fd ffe8 	bl	8005b1a <clmt_clust>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b52:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f7fd fc5b 	bl	8005422 <clust2sect>
 8007b6c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <f_lseek+0x19a>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	71da      	strb	r2, [r3, #7]
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e21f      	b.n	8007fc2 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b92:	8952      	ldrh	r2, [r2, #10]
 8007b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b9e:	6812      	ldr	r2, [r2, #0]
 8007ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ba4:	7892      	ldrb	r2, [r2, #2]
 8007ba6:	3a01      	subs	r2, #1
 8007ba8:	4013      	ands	r3, r2
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	4413      	add	r3, r2
 8007bae:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007bbe:	6812      	ldr	r2, [r2, #0]
 8007bc0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007bc4:	8952      	ldrh	r2, [r2, #10]
 8007bc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bca:	fb01 f202 	mul.w	r2, r1, r2
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 81f4 	beq.w	8007fbe <f_lseek+0x5d6>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	f000 81ec 	beq.w	8007fbe <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bec:	799b      	ldrb	r3, [r3, #6]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d023      	beq.n	8007c3e <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c02:	7858      	ldrb	r0, [r3, #1]
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c0c:	699a      	ldr	r2, [r3, #24]
 8007c0e:	2301      	movs	r3, #1
 8007c10:	f7fd f850 	bl	8004cb4 <disk_write>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d006      	beq.n	8007c28 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c20:	2201      	movs	r2, #1
 8007c22:	71da      	strb	r2, [r3, #7]
 8007c24:	2301      	movs	r3, #1
 8007c26:	e1cc      	b.n	8007fc2 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c2e:	799b      	ldrb	r3, [r3, #6]
 8007c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3c:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4a:	7858      	ldrb	r0, [r3, #1]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	2301      	movs	r3, #1
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	f7fd f80f 	bl	8004c74 <disk_read>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d006      	beq.n	8007c6a <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c62:	2201      	movs	r2, #1
 8007c64:	71da      	strb	r2, [r3, #7]
 8007c66:	2301      	movs	r3, #1
 8007c68:	e1ab      	b.n	8007fc2 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c70:	461a      	mov	r2, r3
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	6193      	str	r3, [r2, #24]
 8007c76:	e1a2      	b.n	8007fbe <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d90c      	bls.n	8007ca0 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8c:	799b      	ldrb	r3, [r3, #6]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d104      	bne.n	8007ca0 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	637b      	str	r3, [r7, #52]	; 0x34
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb8:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 8100 	beq.w	8007ec2 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cce:	789b      	ldrb	r3, [r3, #2]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cde:	895b      	ldrh	r3, [r3, #10]
 8007ce0:	fb02 f303 	mul.w	r3, r2, r3
 8007ce4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d021      	beq.n	8007d30 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	1e5a      	subs	r2, r3, #1
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	1e59      	subs	r1, r3, #1
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d315      	bcc.n	8007d30 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	1e5a      	subs	r2, r3, #1
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	425b      	negs	r3, r3
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d14:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d2e:	e031      	b.n	8007d94 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d123      	bne.n	8007d88 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fd fe3d 	bl	80059ca <create_chain>
 8007d50:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d106      	bne.n	8007d66 <f_lseek+0x37e>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d5e:	2202      	movs	r2, #2
 8007d60:	71da      	strb	r2, [r3, #7]
 8007d62:	2302      	movs	r3, #2
 8007d64:	e12d      	b.n	8007fc2 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6c:	d106      	bne.n	8007d7c <f_lseek+0x394>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d74:	2201      	movs	r2, #1
 8007d76:	71da      	strb	r2, [r3, #7]
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e122      	b.n	8007fc2 <f_lseek+0x5da>
					fp->sclust = clst;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d82:	461a      	mov	r2, r3
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d8e:	461a      	mov	r2, r3
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8093 	beq.w	8007ec2 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8007d9c:	e052      	b.n	8007e44 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da4:	799b      	ldrb	r3, [r3, #6]
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00e      	beq.n	8007dcc <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fd fe06 	bl	80059ca <create_chain>
 8007dbe:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <f_lseek+0x3f6>
							ofs = bcs; break;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	603b      	str	r3, [r7, #0]
 8007dca:	e03f      	b.n	8007e4c <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fd fb47 	bl	800546a <get_fat>
 8007ddc:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d106      	bne.n	8007df4 <f_lseek+0x40c>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dec:	2201      	movs	r2, #1
 8007dee:	71da      	strb	r2, [r3, #7]
 8007df0:	2301      	movs	r3, #1
 8007df2:	e0e6      	b.n	8007fc2 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d909      	bls.n	8007e0e <f_lseek+0x426>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d306      	bcc.n	8007e1c <f_lseek+0x434>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e14:	2202      	movs	r2, #2
 8007e16:	71da      	strb	r2, [r3, #7]
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e0d2      	b.n	8007fc2 <f_lseek+0x5da>
					fp->clust = clst;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e22:	461a      	mov	r2, r3
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e3a:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d8a8      	bhi.n	8007d9e <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	4413      	add	r3, r2
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e5e:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e6c:	895b      	ldrh	r3, [r3, #10]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e76:	fb01 f202 	mul.w	r2, r1, r2
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d020      	beq.n	8007ec2 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fd fac9 	bl	8005422 <clust2sect>
 8007e90:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d106      	bne.n	8007ea6 <f_lseek+0x4be>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	71da      	strb	r2, [r3, #7]
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e08d      	b.n	8007fc2 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb2:	895b      	ldrh	r3, [r3, #10]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ebe:	4413      	add	r3, r2
 8007ec0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ed6:	8952      	ldrh	r2, [r2, #10]
 8007ed8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007edc:	fb01 f202 	mul.w	r2, r1, r2
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d04e      	beq.n	8007f84 <f_lseek+0x59c>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d047      	beq.n	8007f84 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efa:	799b      	ldrb	r3, [r3, #6]
 8007efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d023      	beq.n	8007f4c <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f10:	7858      	ldrb	r0, [r3, #1]
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f1a:	699a      	ldr	r2, [r3, #24]
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f7fc fec9 	bl	8004cb4 <disk_write>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d006      	beq.n	8007f36 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f2e:	2201      	movs	r2, #1
 8007f30:	71da      	strb	r2, [r3, #7]
 8007f32:	2301      	movs	r3, #1
 8007f34:	e045      	b.n	8007fc2 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3c:	799b      	ldrb	r3, [r3, #6]
 8007f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f4a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f58:	7858      	ldrb	r0, [r3, #1]
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f60:	f7fc fe88 	bl	8004c74 <disk_read>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d006      	beq.n	8007f78 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f70:	2201      	movs	r2, #1
 8007f72:	71da      	strb	r2, [r3, #7]
 8007f74:	2301      	movs	r3, #1
 8007f76:	e024      	b.n	8007fc2 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f82:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d912      	bls.n	8007fbe <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fa6:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fae:	799b      	ldrb	r3, [r3, #6]
 8007fb0:	f043 0320 	orr.w	r3, r3, #32
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fbc:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007fbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3740      	adds	r7, #64	; 0x40
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b084      	sub	sp, #16
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	2b0a      	cmp	r3, #10
 8007fda:	d103      	bne.n	8007fe4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007fdc:	210d      	movs	r1, #13
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff fff3 	bl	8007fca <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	db25      	blt.n	800803c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	60fa      	str	r2, [r7, #12]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	78fa      	ldrb	r2, [r7, #3]
 8007ffc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b3c      	cmp	r3, #60	; 0x3c
 8008002:	dd12      	ble.n	800802a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f103 010c 	add.w	r1, r3, #12
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	f107 0308 	add.w	r3, r7, #8
 8008014:	f7ff f9b6 	bl	8007384 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	429a      	cmp	r2, r3
 800801e:	d101      	bne.n	8008024 <putc_bfd+0x5a>
 8008020:	2300      	movs	r3, #0
 8008022:	e001      	b.n	8008028 <putc_bfd+0x5e>
 8008024:	f04f 33ff 	mov.w	r3, #4294967295
 8008028:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	609a      	str	r2, [r3, #8]
 800803a:	e000      	b.n	800803e <putc_bfd+0x74>
	if (i < 0) return;
 800803c:	bf00      	nop
}
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b097      	sub	sp, #92	; 0x5c
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800805a:	e009      	b.n	8008070 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	f107 030c 	add.w	r3, r7, #12
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff ffad 	bl	8007fca <putc_bfd>
	while (*str)			/* Put the string */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1f1      	bne.n	800805c <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	db15      	blt.n	80080aa <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	461c      	mov	r4, r3
 8008084:	f107 0208 	add.w	r2, r7, #8
 8008088:	f107 030c 	add.w	r3, r7, #12
 800808c:	f103 010c 	add.w	r1, r3, #12
 8008090:	4613      	mov	r3, r2
 8008092:	4622      	mov	r2, r4
 8008094:	f7ff f976 	bl	8007384 <f_write>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d105      	bne.n	80080aa <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <f_puts+0x66>
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	e001      	b.n	80080ae <f_puts+0x6a>
	return EOF;
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	375c      	adds	r7, #92	; 0x5c
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd90      	pop	{r4, r7, pc}
	...

080080b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80080c6:	2301      	movs	r3, #1
 80080c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80080ce:	4b1e      	ldr	r3, [pc, #120]	; (8008148 <FATFS_LinkDriverEx+0x90>)
 80080d0:	7a5b      	ldrb	r3, [r3, #9]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d831      	bhi.n	800813c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80080d8:	4b1b      	ldr	r3, [pc, #108]	; (8008148 <FATFS_LinkDriverEx+0x90>)
 80080da:	7a5b      	ldrb	r3, [r3, #9]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	461a      	mov	r2, r3
 80080e0:	4b19      	ldr	r3, [pc, #100]	; (8008148 <FATFS_LinkDriverEx+0x90>)
 80080e2:	2100      	movs	r1, #0
 80080e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80080e6:	4b18      	ldr	r3, [pc, #96]	; (8008148 <FATFS_LinkDriverEx+0x90>)
 80080e8:	7a5b      	ldrb	r3, [r3, #9]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	4a16      	ldr	r2, [pc, #88]	; (8008148 <FATFS_LinkDriverEx+0x90>)
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80080f6:	4b14      	ldr	r3, [pc, #80]	; (8008148 <FATFS_LinkDriverEx+0x90>)
 80080f8:	7a5b      	ldrb	r3, [r3, #9]
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	4b12      	ldr	r3, [pc, #72]	; (8008148 <FATFS_LinkDriverEx+0x90>)
 8008100:	4413      	add	r3, r2
 8008102:	79fa      	ldrb	r2, [r7, #7]
 8008104:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008106:	4b10      	ldr	r3, [pc, #64]	; (8008148 <FATFS_LinkDriverEx+0x90>)
 8008108:	7a5b      	ldrb	r3, [r3, #9]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	b2d1      	uxtb	r1, r2
 8008110:	4a0d      	ldr	r2, [pc, #52]	; (8008148 <FATFS_LinkDriverEx+0x90>)
 8008112:	7251      	strb	r1, [r2, #9]
 8008114:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008116:	7dbb      	ldrb	r3, [r7, #22]
 8008118:	3330      	adds	r3, #48	; 0x30
 800811a:	b2da      	uxtb	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	3301      	adds	r3, #1
 8008124:	223a      	movs	r2, #58	; 0x3a
 8008126:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	3302      	adds	r3, #2
 800812c:	222f      	movs	r2, #47	; 0x2f
 800812e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	3303      	adds	r3, #3
 8008134:	2200      	movs	r2, #0
 8008136:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
}
 800813e:	4618      	mov	r0, r3
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr
 8008148:	200023e0 	.word	0x200023e0

0800814c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008156:	2200      	movs	r2, #0
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff ffac 	bl	80080b8 <FATFS_LinkDriverEx>
 8008160:	4603      	mov	r3, r0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <__errno>:
 800816c:	4b01      	ldr	r3, [pc, #4]	; (8008174 <__errno+0x8>)
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	20000024 	.word	0x20000024

08008178 <__libc_init_array>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	2600      	movs	r6, #0
 800817c:	4d0c      	ldr	r5, [pc, #48]	; (80081b0 <__libc_init_array+0x38>)
 800817e:	4c0d      	ldr	r4, [pc, #52]	; (80081b4 <__libc_init_array+0x3c>)
 8008180:	1b64      	subs	r4, r4, r5
 8008182:	10a4      	asrs	r4, r4, #2
 8008184:	42a6      	cmp	r6, r4
 8008186:	d109      	bne.n	800819c <__libc_init_array+0x24>
 8008188:	f003 fddc 	bl	800bd44 <_init>
 800818c:	2600      	movs	r6, #0
 800818e:	4d0a      	ldr	r5, [pc, #40]	; (80081b8 <__libc_init_array+0x40>)
 8008190:	4c0a      	ldr	r4, [pc, #40]	; (80081bc <__libc_init_array+0x44>)
 8008192:	1b64      	subs	r4, r4, r5
 8008194:	10a4      	asrs	r4, r4, #2
 8008196:	42a6      	cmp	r6, r4
 8008198:	d105      	bne.n	80081a6 <__libc_init_array+0x2e>
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a0:	4798      	blx	r3
 80081a2:	3601      	adds	r6, #1
 80081a4:	e7ee      	b.n	8008184 <__libc_init_array+0xc>
 80081a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081aa:	4798      	blx	r3
 80081ac:	3601      	adds	r6, #1
 80081ae:	e7f2      	b.n	8008196 <__libc_init_array+0x1e>
 80081b0:	0800c2f0 	.word	0x0800c2f0
 80081b4:	0800c2f0 	.word	0x0800c2f0
 80081b8:	0800c2f0 	.word	0x0800c2f0
 80081bc:	0800c2f4 	.word	0x0800c2f4

080081c0 <memset>:
 80081c0:	4603      	mov	r3, r0
 80081c2:	4402      	add	r2, r0
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d100      	bne.n	80081ca <memset+0xa>
 80081c8:	4770      	bx	lr
 80081ca:	f803 1b01 	strb.w	r1, [r3], #1
 80081ce:	e7f9      	b.n	80081c4 <memset+0x4>

080081d0 <__cvt>:
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d6:	461f      	mov	r7, r3
 80081d8:	bfbb      	ittet	lt
 80081da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80081de:	461f      	movlt	r7, r3
 80081e0:	2300      	movge	r3, #0
 80081e2:	232d      	movlt	r3, #45	; 0x2d
 80081e4:	b088      	sub	sp, #32
 80081e6:	4614      	mov	r4, r2
 80081e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80081ec:	7013      	strb	r3, [r2, #0]
 80081ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80081f4:	f023 0820 	bic.w	r8, r3, #32
 80081f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081fc:	d005      	beq.n	800820a <__cvt+0x3a>
 80081fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008202:	d100      	bne.n	8008206 <__cvt+0x36>
 8008204:	3501      	adds	r5, #1
 8008206:	2302      	movs	r3, #2
 8008208:	e000      	b.n	800820c <__cvt+0x3c>
 800820a:	2303      	movs	r3, #3
 800820c:	aa07      	add	r2, sp, #28
 800820e:	9204      	str	r2, [sp, #16]
 8008210:	aa06      	add	r2, sp, #24
 8008212:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008216:	e9cd 3500 	strd	r3, r5, [sp]
 800821a:	4622      	mov	r2, r4
 800821c:	463b      	mov	r3, r7
 800821e:	f000 fce3 	bl	8008be8 <_dtoa_r>
 8008222:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008226:	4606      	mov	r6, r0
 8008228:	d102      	bne.n	8008230 <__cvt+0x60>
 800822a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800822c:	07db      	lsls	r3, r3, #31
 800822e:	d522      	bpl.n	8008276 <__cvt+0xa6>
 8008230:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008234:	eb06 0905 	add.w	r9, r6, r5
 8008238:	d110      	bne.n	800825c <__cvt+0x8c>
 800823a:	7833      	ldrb	r3, [r6, #0]
 800823c:	2b30      	cmp	r3, #48	; 0x30
 800823e:	d10a      	bne.n	8008256 <__cvt+0x86>
 8008240:	2200      	movs	r2, #0
 8008242:	2300      	movs	r3, #0
 8008244:	4620      	mov	r0, r4
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 fc62 	bl	8000b10 <__aeabi_dcmpeq>
 800824c:	b918      	cbnz	r0, 8008256 <__cvt+0x86>
 800824e:	f1c5 0501 	rsb	r5, r5, #1
 8008252:	f8ca 5000 	str.w	r5, [sl]
 8008256:	f8da 3000 	ldr.w	r3, [sl]
 800825a:	4499      	add	r9, r3
 800825c:	2200      	movs	r2, #0
 800825e:	2300      	movs	r3, #0
 8008260:	4620      	mov	r0, r4
 8008262:	4639      	mov	r1, r7
 8008264:	f7f8 fc54 	bl	8000b10 <__aeabi_dcmpeq>
 8008268:	b108      	cbz	r0, 800826e <__cvt+0x9e>
 800826a:	f8cd 901c 	str.w	r9, [sp, #28]
 800826e:	2230      	movs	r2, #48	; 0x30
 8008270:	9b07      	ldr	r3, [sp, #28]
 8008272:	454b      	cmp	r3, r9
 8008274:	d307      	bcc.n	8008286 <__cvt+0xb6>
 8008276:	4630      	mov	r0, r6
 8008278:	9b07      	ldr	r3, [sp, #28]
 800827a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800827c:	1b9b      	subs	r3, r3, r6
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	b008      	add	sp, #32
 8008282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008286:	1c59      	adds	r1, r3, #1
 8008288:	9107      	str	r1, [sp, #28]
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	e7f0      	b.n	8008270 <__cvt+0xa0>

0800828e <__exponent>:
 800828e:	4603      	mov	r3, r0
 8008290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008292:	2900      	cmp	r1, #0
 8008294:	f803 2b02 	strb.w	r2, [r3], #2
 8008298:	bfb6      	itet	lt
 800829a:	222d      	movlt	r2, #45	; 0x2d
 800829c:	222b      	movge	r2, #43	; 0x2b
 800829e:	4249      	neglt	r1, r1
 80082a0:	2909      	cmp	r1, #9
 80082a2:	7042      	strb	r2, [r0, #1]
 80082a4:	dd2b      	ble.n	80082fe <__exponent+0x70>
 80082a6:	f10d 0407 	add.w	r4, sp, #7
 80082aa:	46a4      	mov	ip, r4
 80082ac:	270a      	movs	r7, #10
 80082ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80082b2:	460a      	mov	r2, r1
 80082b4:	46a6      	mov	lr, r4
 80082b6:	fb07 1516 	mls	r5, r7, r6, r1
 80082ba:	2a63      	cmp	r2, #99	; 0x63
 80082bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80082c0:	4631      	mov	r1, r6
 80082c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80082c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082ca:	dcf0      	bgt.n	80082ae <__exponent+0x20>
 80082cc:	3130      	adds	r1, #48	; 0x30
 80082ce:	f1ae 0502 	sub.w	r5, lr, #2
 80082d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082d6:	4629      	mov	r1, r5
 80082d8:	1c44      	adds	r4, r0, #1
 80082da:	4561      	cmp	r1, ip
 80082dc:	d30a      	bcc.n	80082f4 <__exponent+0x66>
 80082de:	f10d 0209 	add.w	r2, sp, #9
 80082e2:	eba2 020e 	sub.w	r2, r2, lr
 80082e6:	4565      	cmp	r5, ip
 80082e8:	bf88      	it	hi
 80082ea:	2200      	movhi	r2, #0
 80082ec:	4413      	add	r3, r2
 80082ee:	1a18      	subs	r0, r3, r0
 80082f0:	b003      	add	sp, #12
 80082f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082fc:	e7ed      	b.n	80082da <__exponent+0x4c>
 80082fe:	2330      	movs	r3, #48	; 0x30
 8008300:	3130      	adds	r1, #48	; 0x30
 8008302:	7083      	strb	r3, [r0, #2]
 8008304:	70c1      	strb	r1, [r0, #3]
 8008306:	1d03      	adds	r3, r0, #4
 8008308:	e7f1      	b.n	80082ee <__exponent+0x60>
	...

0800830c <_printf_float>:
 800830c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008310:	b091      	sub	sp, #68	; 0x44
 8008312:	460c      	mov	r4, r1
 8008314:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008318:	4616      	mov	r6, r2
 800831a:	461f      	mov	r7, r3
 800831c:	4605      	mov	r5, r0
 800831e:	f001 fa51 	bl	80097c4 <_localeconv_r>
 8008322:	6803      	ldr	r3, [r0, #0]
 8008324:	4618      	mov	r0, r3
 8008326:	9309      	str	r3, [sp, #36]	; 0x24
 8008328:	f7f7 ff12 	bl	8000150 <strlen>
 800832c:	2300      	movs	r3, #0
 800832e:	930e      	str	r3, [sp, #56]	; 0x38
 8008330:	f8d8 3000 	ldr.w	r3, [r8]
 8008334:	900a      	str	r0, [sp, #40]	; 0x28
 8008336:	3307      	adds	r3, #7
 8008338:	f023 0307 	bic.w	r3, r3, #7
 800833c:	f103 0208 	add.w	r2, r3, #8
 8008340:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008344:	f8d4 b000 	ldr.w	fp, [r4]
 8008348:	f8c8 2000 	str.w	r2, [r8]
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008354:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008358:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800835c:	930b      	str	r3, [sp, #44]	; 0x2c
 800835e:	f04f 32ff 	mov.w	r2, #4294967295
 8008362:	4640      	mov	r0, r8
 8008364:	4b9c      	ldr	r3, [pc, #624]	; (80085d8 <_printf_float+0x2cc>)
 8008366:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008368:	f7f8 fc04 	bl	8000b74 <__aeabi_dcmpun>
 800836c:	bb70      	cbnz	r0, 80083cc <_printf_float+0xc0>
 800836e:	f04f 32ff 	mov.w	r2, #4294967295
 8008372:	4640      	mov	r0, r8
 8008374:	4b98      	ldr	r3, [pc, #608]	; (80085d8 <_printf_float+0x2cc>)
 8008376:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008378:	f7f8 fbde 	bl	8000b38 <__aeabi_dcmple>
 800837c:	bb30      	cbnz	r0, 80083cc <_printf_float+0xc0>
 800837e:	2200      	movs	r2, #0
 8008380:	2300      	movs	r3, #0
 8008382:	4640      	mov	r0, r8
 8008384:	4651      	mov	r1, sl
 8008386:	f7f8 fbcd 	bl	8000b24 <__aeabi_dcmplt>
 800838a:	b110      	cbz	r0, 8008392 <_printf_float+0x86>
 800838c:	232d      	movs	r3, #45	; 0x2d
 800838e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008392:	4b92      	ldr	r3, [pc, #584]	; (80085dc <_printf_float+0x2d0>)
 8008394:	4892      	ldr	r0, [pc, #584]	; (80085e0 <_printf_float+0x2d4>)
 8008396:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800839a:	bf94      	ite	ls
 800839c:	4698      	movls	r8, r3
 800839e:	4680      	movhi	r8, r0
 80083a0:	2303      	movs	r3, #3
 80083a2:	f04f 0a00 	mov.w	sl, #0
 80083a6:	6123      	str	r3, [r4, #16]
 80083a8:	f02b 0304 	bic.w	r3, fp, #4
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	4633      	mov	r3, r6
 80083b0:	4621      	mov	r1, r4
 80083b2:	4628      	mov	r0, r5
 80083b4:	9700      	str	r7, [sp, #0]
 80083b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80083b8:	f000 f9d4 	bl	8008764 <_printf_common>
 80083bc:	3001      	adds	r0, #1
 80083be:	f040 8090 	bne.w	80084e2 <_printf_float+0x1d6>
 80083c2:	f04f 30ff 	mov.w	r0, #4294967295
 80083c6:	b011      	add	sp, #68	; 0x44
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	4642      	mov	r2, r8
 80083ce:	4653      	mov	r3, sl
 80083d0:	4640      	mov	r0, r8
 80083d2:	4651      	mov	r1, sl
 80083d4:	f7f8 fbce 	bl	8000b74 <__aeabi_dcmpun>
 80083d8:	b148      	cbz	r0, 80083ee <_printf_float+0xe2>
 80083da:	f1ba 0f00 	cmp.w	sl, #0
 80083de:	bfb8      	it	lt
 80083e0:	232d      	movlt	r3, #45	; 0x2d
 80083e2:	4880      	ldr	r0, [pc, #512]	; (80085e4 <_printf_float+0x2d8>)
 80083e4:	bfb8      	it	lt
 80083e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083ea:	4b7f      	ldr	r3, [pc, #508]	; (80085e8 <_printf_float+0x2dc>)
 80083ec:	e7d3      	b.n	8008396 <_printf_float+0x8a>
 80083ee:	6863      	ldr	r3, [r4, #4]
 80083f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80083f4:	1c5a      	adds	r2, r3, #1
 80083f6:	d142      	bne.n	800847e <_printf_float+0x172>
 80083f8:	2306      	movs	r3, #6
 80083fa:	6063      	str	r3, [r4, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	9206      	str	r2, [sp, #24]
 8008400:	aa0e      	add	r2, sp, #56	; 0x38
 8008402:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008406:	aa0d      	add	r2, sp, #52	; 0x34
 8008408:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800840c:	9203      	str	r2, [sp, #12]
 800840e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008412:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	6863      	ldr	r3, [r4, #4]
 800841a:	4642      	mov	r2, r8
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	4628      	mov	r0, r5
 8008420:	4653      	mov	r3, sl
 8008422:	910b      	str	r1, [sp, #44]	; 0x2c
 8008424:	f7ff fed4 	bl	80081d0 <__cvt>
 8008428:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800842a:	4680      	mov	r8, r0
 800842c:	2947      	cmp	r1, #71	; 0x47
 800842e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008430:	d108      	bne.n	8008444 <_printf_float+0x138>
 8008432:	1cc8      	adds	r0, r1, #3
 8008434:	db02      	blt.n	800843c <_printf_float+0x130>
 8008436:	6863      	ldr	r3, [r4, #4]
 8008438:	4299      	cmp	r1, r3
 800843a:	dd40      	ble.n	80084be <_printf_float+0x1b2>
 800843c:	f1a9 0902 	sub.w	r9, r9, #2
 8008440:	fa5f f989 	uxtb.w	r9, r9
 8008444:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008448:	d81f      	bhi.n	800848a <_printf_float+0x17e>
 800844a:	464a      	mov	r2, r9
 800844c:	3901      	subs	r1, #1
 800844e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008452:	910d      	str	r1, [sp, #52]	; 0x34
 8008454:	f7ff ff1b 	bl	800828e <__exponent>
 8008458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800845a:	4682      	mov	sl, r0
 800845c:	1813      	adds	r3, r2, r0
 800845e:	2a01      	cmp	r2, #1
 8008460:	6123      	str	r3, [r4, #16]
 8008462:	dc02      	bgt.n	800846a <_printf_float+0x15e>
 8008464:	6822      	ldr	r2, [r4, #0]
 8008466:	07d2      	lsls	r2, r2, #31
 8008468:	d501      	bpl.n	800846e <_printf_float+0x162>
 800846a:	3301      	adds	r3, #1
 800846c:	6123      	str	r3, [r4, #16]
 800846e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008472:	2b00      	cmp	r3, #0
 8008474:	d09b      	beq.n	80083ae <_printf_float+0xa2>
 8008476:	232d      	movs	r3, #45	; 0x2d
 8008478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800847c:	e797      	b.n	80083ae <_printf_float+0xa2>
 800847e:	2947      	cmp	r1, #71	; 0x47
 8008480:	d1bc      	bne.n	80083fc <_printf_float+0xf0>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1ba      	bne.n	80083fc <_printf_float+0xf0>
 8008486:	2301      	movs	r3, #1
 8008488:	e7b7      	b.n	80083fa <_printf_float+0xee>
 800848a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800848e:	d118      	bne.n	80084c2 <_printf_float+0x1b6>
 8008490:	2900      	cmp	r1, #0
 8008492:	6863      	ldr	r3, [r4, #4]
 8008494:	dd0b      	ble.n	80084ae <_printf_float+0x1a2>
 8008496:	6121      	str	r1, [r4, #16]
 8008498:	b913      	cbnz	r3, 80084a0 <_printf_float+0x194>
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	07d0      	lsls	r0, r2, #31
 800849e:	d502      	bpl.n	80084a6 <_printf_float+0x19a>
 80084a0:	3301      	adds	r3, #1
 80084a2:	440b      	add	r3, r1
 80084a4:	6123      	str	r3, [r4, #16]
 80084a6:	f04f 0a00 	mov.w	sl, #0
 80084aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80084ac:	e7df      	b.n	800846e <_printf_float+0x162>
 80084ae:	b913      	cbnz	r3, 80084b6 <_printf_float+0x1aa>
 80084b0:	6822      	ldr	r2, [r4, #0]
 80084b2:	07d2      	lsls	r2, r2, #31
 80084b4:	d501      	bpl.n	80084ba <_printf_float+0x1ae>
 80084b6:	3302      	adds	r3, #2
 80084b8:	e7f4      	b.n	80084a4 <_printf_float+0x198>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e7f2      	b.n	80084a4 <_printf_float+0x198>
 80084be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80084c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084c4:	4299      	cmp	r1, r3
 80084c6:	db05      	blt.n	80084d4 <_printf_float+0x1c8>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	6121      	str	r1, [r4, #16]
 80084cc:	07d8      	lsls	r0, r3, #31
 80084ce:	d5ea      	bpl.n	80084a6 <_printf_float+0x19a>
 80084d0:	1c4b      	adds	r3, r1, #1
 80084d2:	e7e7      	b.n	80084a4 <_printf_float+0x198>
 80084d4:	2900      	cmp	r1, #0
 80084d6:	bfcc      	ite	gt
 80084d8:	2201      	movgt	r2, #1
 80084da:	f1c1 0202 	rsble	r2, r1, #2
 80084de:	4413      	add	r3, r2
 80084e0:	e7e0      	b.n	80084a4 <_printf_float+0x198>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	055a      	lsls	r2, r3, #21
 80084e6:	d407      	bmi.n	80084f8 <_printf_float+0x1ec>
 80084e8:	6923      	ldr	r3, [r4, #16]
 80084ea:	4642      	mov	r2, r8
 80084ec:	4631      	mov	r1, r6
 80084ee:	4628      	mov	r0, r5
 80084f0:	47b8      	blx	r7
 80084f2:	3001      	adds	r0, #1
 80084f4:	d12b      	bne.n	800854e <_printf_float+0x242>
 80084f6:	e764      	b.n	80083c2 <_printf_float+0xb6>
 80084f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80084fc:	f240 80dd 	bls.w	80086ba <_printf_float+0x3ae>
 8008500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	f7f8 fb02 	bl	8000b10 <__aeabi_dcmpeq>
 800850c:	2800      	cmp	r0, #0
 800850e:	d033      	beq.n	8008578 <_printf_float+0x26c>
 8008510:	2301      	movs	r3, #1
 8008512:	4631      	mov	r1, r6
 8008514:	4628      	mov	r0, r5
 8008516:	4a35      	ldr	r2, [pc, #212]	; (80085ec <_printf_float+0x2e0>)
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	f43f af51 	beq.w	80083c2 <_printf_float+0xb6>
 8008520:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008524:	429a      	cmp	r2, r3
 8008526:	db02      	blt.n	800852e <_printf_float+0x222>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	07d8      	lsls	r0, r3, #31
 800852c:	d50f      	bpl.n	800854e <_printf_float+0x242>
 800852e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008532:	4631      	mov	r1, r6
 8008534:	4628      	mov	r0, r5
 8008536:	47b8      	blx	r7
 8008538:	3001      	adds	r0, #1
 800853a:	f43f af42 	beq.w	80083c2 <_printf_float+0xb6>
 800853e:	f04f 0800 	mov.w	r8, #0
 8008542:	f104 091a 	add.w	r9, r4, #26
 8008546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008548:	3b01      	subs	r3, #1
 800854a:	4543      	cmp	r3, r8
 800854c:	dc09      	bgt.n	8008562 <_printf_float+0x256>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	079b      	lsls	r3, r3, #30
 8008552:	f100 8102 	bmi.w	800875a <_printf_float+0x44e>
 8008556:	68e0      	ldr	r0, [r4, #12]
 8008558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800855a:	4298      	cmp	r0, r3
 800855c:	bfb8      	it	lt
 800855e:	4618      	movlt	r0, r3
 8008560:	e731      	b.n	80083c6 <_printf_float+0xba>
 8008562:	2301      	movs	r3, #1
 8008564:	464a      	mov	r2, r9
 8008566:	4631      	mov	r1, r6
 8008568:	4628      	mov	r0, r5
 800856a:	47b8      	blx	r7
 800856c:	3001      	adds	r0, #1
 800856e:	f43f af28 	beq.w	80083c2 <_printf_float+0xb6>
 8008572:	f108 0801 	add.w	r8, r8, #1
 8008576:	e7e6      	b.n	8008546 <_printf_float+0x23a>
 8008578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800857a:	2b00      	cmp	r3, #0
 800857c:	dc38      	bgt.n	80085f0 <_printf_float+0x2e4>
 800857e:	2301      	movs	r3, #1
 8008580:	4631      	mov	r1, r6
 8008582:	4628      	mov	r0, r5
 8008584:	4a19      	ldr	r2, [pc, #100]	; (80085ec <_printf_float+0x2e0>)
 8008586:	47b8      	blx	r7
 8008588:	3001      	adds	r0, #1
 800858a:	f43f af1a 	beq.w	80083c2 <_printf_float+0xb6>
 800858e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008592:	4313      	orrs	r3, r2
 8008594:	d102      	bne.n	800859c <_printf_float+0x290>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	07d9      	lsls	r1, r3, #31
 800859a:	d5d8      	bpl.n	800854e <_printf_float+0x242>
 800859c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085a0:	4631      	mov	r1, r6
 80085a2:	4628      	mov	r0, r5
 80085a4:	47b8      	blx	r7
 80085a6:	3001      	adds	r0, #1
 80085a8:	f43f af0b 	beq.w	80083c2 <_printf_float+0xb6>
 80085ac:	f04f 0900 	mov.w	r9, #0
 80085b0:	f104 0a1a 	add.w	sl, r4, #26
 80085b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b6:	425b      	negs	r3, r3
 80085b8:	454b      	cmp	r3, r9
 80085ba:	dc01      	bgt.n	80085c0 <_printf_float+0x2b4>
 80085bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085be:	e794      	b.n	80084ea <_printf_float+0x1de>
 80085c0:	2301      	movs	r3, #1
 80085c2:	4652      	mov	r2, sl
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	f43f aef9 	beq.w	80083c2 <_printf_float+0xb6>
 80085d0:	f109 0901 	add.w	r9, r9, #1
 80085d4:	e7ee      	b.n	80085b4 <_printf_float+0x2a8>
 80085d6:	bf00      	nop
 80085d8:	7fefffff 	.word	0x7fefffff
 80085dc:	0800bee8 	.word	0x0800bee8
 80085e0:	0800beec 	.word	0x0800beec
 80085e4:	0800bef4 	.word	0x0800bef4
 80085e8:	0800bef0 	.word	0x0800bef0
 80085ec:	0800bef8 	.word	0x0800bef8
 80085f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085f4:	429a      	cmp	r2, r3
 80085f6:	bfa8      	it	ge
 80085f8:	461a      	movge	r2, r3
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	4691      	mov	r9, r2
 80085fe:	dc37      	bgt.n	8008670 <_printf_float+0x364>
 8008600:	f04f 0b00 	mov.w	fp, #0
 8008604:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008608:	f104 021a 	add.w	r2, r4, #26
 800860c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008610:	ebaa 0309 	sub.w	r3, sl, r9
 8008614:	455b      	cmp	r3, fp
 8008616:	dc33      	bgt.n	8008680 <_printf_float+0x374>
 8008618:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800861c:	429a      	cmp	r2, r3
 800861e:	db3b      	blt.n	8008698 <_printf_float+0x38c>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	07da      	lsls	r2, r3, #31
 8008624:	d438      	bmi.n	8008698 <_printf_float+0x38c>
 8008626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008628:	990d      	ldr	r1, [sp, #52]	; 0x34
 800862a:	eba3 020a 	sub.w	r2, r3, sl
 800862e:	eba3 0901 	sub.w	r9, r3, r1
 8008632:	4591      	cmp	r9, r2
 8008634:	bfa8      	it	ge
 8008636:	4691      	movge	r9, r2
 8008638:	f1b9 0f00 	cmp.w	r9, #0
 800863c:	dc34      	bgt.n	80086a8 <_printf_float+0x39c>
 800863e:	f04f 0800 	mov.w	r8, #0
 8008642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008646:	f104 0a1a 	add.w	sl, r4, #26
 800864a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800864e:	1a9b      	subs	r3, r3, r2
 8008650:	eba3 0309 	sub.w	r3, r3, r9
 8008654:	4543      	cmp	r3, r8
 8008656:	f77f af7a 	ble.w	800854e <_printf_float+0x242>
 800865a:	2301      	movs	r3, #1
 800865c:	4652      	mov	r2, sl
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	47b8      	blx	r7
 8008664:	3001      	adds	r0, #1
 8008666:	f43f aeac 	beq.w	80083c2 <_printf_float+0xb6>
 800866a:	f108 0801 	add.w	r8, r8, #1
 800866e:	e7ec      	b.n	800864a <_printf_float+0x33e>
 8008670:	4613      	mov	r3, r2
 8008672:	4631      	mov	r1, r6
 8008674:	4642      	mov	r2, r8
 8008676:	4628      	mov	r0, r5
 8008678:	47b8      	blx	r7
 800867a:	3001      	adds	r0, #1
 800867c:	d1c0      	bne.n	8008600 <_printf_float+0x2f4>
 800867e:	e6a0      	b.n	80083c2 <_printf_float+0xb6>
 8008680:	2301      	movs	r3, #1
 8008682:	4631      	mov	r1, r6
 8008684:	4628      	mov	r0, r5
 8008686:	920b      	str	r2, [sp, #44]	; 0x2c
 8008688:	47b8      	blx	r7
 800868a:	3001      	adds	r0, #1
 800868c:	f43f ae99 	beq.w	80083c2 <_printf_float+0xb6>
 8008690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008692:	f10b 0b01 	add.w	fp, fp, #1
 8008696:	e7b9      	b.n	800860c <_printf_float+0x300>
 8008698:	4631      	mov	r1, r6
 800869a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800869e:	4628      	mov	r0, r5
 80086a0:	47b8      	blx	r7
 80086a2:	3001      	adds	r0, #1
 80086a4:	d1bf      	bne.n	8008626 <_printf_float+0x31a>
 80086a6:	e68c      	b.n	80083c2 <_printf_float+0xb6>
 80086a8:	464b      	mov	r3, r9
 80086aa:	4631      	mov	r1, r6
 80086ac:	4628      	mov	r0, r5
 80086ae:	eb08 020a 	add.w	r2, r8, sl
 80086b2:	47b8      	blx	r7
 80086b4:	3001      	adds	r0, #1
 80086b6:	d1c2      	bne.n	800863e <_printf_float+0x332>
 80086b8:	e683      	b.n	80083c2 <_printf_float+0xb6>
 80086ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086bc:	2a01      	cmp	r2, #1
 80086be:	dc01      	bgt.n	80086c4 <_printf_float+0x3b8>
 80086c0:	07db      	lsls	r3, r3, #31
 80086c2:	d537      	bpl.n	8008734 <_printf_float+0x428>
 80086c4:	2301      	movs	r3, #1
 80086c6:	4642      	mov	r2, r8
 80086c8:	4631      	mov	r1, r6
 80086ca:	4628      	mov	r0, r5
 80086cc:	47b8      	blx	r7
 80086ce:	3001      	adds	r0, #1
 80086d0:	f43f ae77 	beq.w	80083c2 <_printf_float+0xb6>
 80086d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086d8:	4631      	mov	r1, r6
 80086da:	4628      	mov	r0, r5
 80086dc:	47b8      	blx	r7
 80086de:	3001      	adds	r0, #1
 80086e0:	f43f ae6f 	beq.w	80083c2 <_printf_float+0xb6>
 80086e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086e8:	2200      	movs	r2, #0
 80086ea:	2300      	movs	r3, #0
 80086ec:	f7f8 fa10 	bl	8000b10 <__aeabi_dcmpeq>
 80086f0:	b9d8      	cbnz	r0, 800872a <_printf_float+0x41e>
 80086f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f4:	f108 0201 	add.w	r2, r8, #1
 80086f8:	3b01      	subs	r3, #1
 80086fa:	4631      	mov	r1, r6
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b8      	blx	r7
 8008700:	3001      	adds	r0, #1
 8008702:	d10e      	bne.n	8008722 <_printf_float+0x416>
 8008704:	e65d      	b.n	80083c2 <_printf_float+0xb6>
 8008706:	2301      	movs	r3, #1
 8008708:	464a      	mov	r2, r9
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	f43f ae56 	beq.w	80083c2 <_printf_float+0xb6>
 8008716:	f108 0801 	add.w	r8, r8, #1
 800871a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800871c:	3b01      	subs	r3, #1
 800871e:	4543      	cmp	r3, r8
 8008720:	dcf1      	bgt.n	8008706 <_printf_float+0x3fa>
 8008722:	4653      	mov	r3, sl
 8008724:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008728:	e6e0      	b.n	80084ec <_printf_float+0x1e0>
 800872a:	f04f 0800 	mov.w	r8, #0
 800872e:	f104 091a 	add.w	r9, r4, #26
 8008732:	e7f2      	b.n	800871a <_printf_float+0x40e>
 8008734:	2301      	movs	r3, #1
 8008736:	4642      	mov	r2, r8
 8008738:	e7df      	b.n	80086fa <_printf_float+0x3ee>
 800873a:	2301      	movs	r3, #1
 800873c:	464a      	mov	r2, r9
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	f43f ae3c 	beq.w	80083c2 <_printf_float+0xb6>
 800874a:	f108 0801 	add.w	r8, r8, #1
 800874e:	68e3      	ldr	r3, [r4, #12]
 8008750:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008752:	1a5b      	subs	r3, r3, r1
 8008754:	4543      	cmp	r3, r8
 8008756:	dcf0      	bgt.n	800873a <_printf_float+0x42e>
 8008758:	e6fd      	b.n	8008556 <_printf_float+0x24a>
 800875a:	f04f 0800 	mov.w	r8, #0
 800875e:	f104 0919 	add.w	r9, r4, #25
 8008762:	e7f4      	b.n	800874e <_printf_float+0x442>

08008764 <_printf_common>:
 8008764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	4616      	mov	r6, r2
 800876a:	4699      	mov	r9, r3
 800876c:	688a      	ldr	r2, [r1, #8]
 800876e:	690b      	ldr	r3, [r1, #16]
 8008770:	4607      	mov	r7, r0
 8008772:	4293      	cmp	r3, r2
 8008774:	bfb8      	it	lt
 8008776:	4613      	movlt	r3, r2
 8008778:	6033      	str	r3, [r6, #0]
 800877a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800877e:	460c      	mov	r4, r1
 8008780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008784:	b10a      	cbz	r2, 800878a <_printf_common+0x26>
 8008786:	3301      	adds	r3, #1
 8008788:	6033      	str	r3, [r6, #0]
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	0699      	lsls	r1, r3, #26
 800878e:	bf42      	ittt	mi
 8008790:	6833      	ldrmi	r3, [r6, #0]
 8008792:	3302      	addmi	r3, #2
 8008794:	6033      	strmi	r3, [r6, #0]
 8008796:	6825      	ldr	r5, [r4, #0]
 8008798:	f015 0506 	ands.w	r5, r5, #6
 800879c:	d106      	bne.n	80087ac <_printf_common+0x48>
 800879e:	f104 0a19 	add.w	sl, r4, #25
 80087a2:	68e3      	ldr	r3, [r4, #12]
 80087a4:	6832      	ldr	r2, [r6, #0]
 80087a6:	1a9b      	subs	r3, r3, r2
 80087a8:	42ab      	cmp	r3, r5
 80087aa:	dc28      	bgt.n	80087fe <_printf_common+0x9a>
 80087ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087b0:	1e13      	subs	r3, r2, #0
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	bf18      	it	ne
 80087b6:	2301      	movne	r3, #1
 80087b8:	0692      	lsls	r2, r2, #26
 80087ba:	d42d      	bmi.n	8008818 <_printf_common+0xb4>
 80087bc:	4649      	mov	r1, r9
 80087be:	4638      	mov	r0, r7
 80087c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087c4:	47c0      	blx	r8
 80087c6:	3001      	adds	r0, #1
 80087c8:	d020      	beq.n	800880c <_printf_common+0xa8>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	68e5      	ldr	r5, [r4, #12]
 80087ce:	f003 0306 	and.w	r3, r3, #6
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	bf18      	it	ne
 80087d6:	2500      	movne	r5, #0
 80087d8:	6832      	ldr	r2, [r6, #0]
 80087da:	f04f 0600 	mov.w	r6, #0
 80087de:	68a3      	ldr	r3, [r4, #8]
 80087e0:	bf08      	it	eq
 80087e2:	1aad      	subeq	r5, r5, r2
 80087e4:	6922      	ldr	r2, [r4, #16]
 80087e6:	bf08      	it	eq
 80087e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087ec:	4293      	cmp	r3, r2
 80087ee:	bfc4      	itt	gt
 80087f0:	1a9b      	subgt	r3, r3, r2
 80087f2:	18ed      	addgt	r5, r5, r3
 80087f4:	341a      	adds	r4, #26
 80087f6:	42b5      	cmp	r5, r6
 80087f8:	d11a      	bne.n	8008830 <_printf_common+0xcc>
 80087fa:	2000      	movs	r0, #0
 80087fc:	e008      	b.n	8008810 <_printf_common+0xac>
 80087fe:	2301      	movs	r3, #1
 8008800:	4652      	mov	r2, sl
 8008802:	4649      	mov	r1, r9
 8008804:	4638      	mov	r0, r7
 8008806:	47c0      	blx	r8
 8008808:	3001      	adds	r0, #1
 800880a:	d103      	bne.n	8008814 <_printf_common+0xb0>
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008814:	3501      	adds	r5, #1
 8008816:	e7c4      	b.n	80087a2 <_printf_common+0x3e>
 8008818:	2030      	movs	r0, #48	; 0x30
 800881a:	18e1      	adds	r1, r4, r3
 800881c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008820:	1c5a      	adds	r2, r3, #1
 8008822:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008826:	4422      	add	r2, r4
 8008828:	3302      	adds	r3, #2
 800882a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800882e:	e7c5      	b.n	80087bc <_printf_common+0x58>
 8008830:	2301      	movs	r3, #1
 8008832:	4622      	mov	r2, r4
 8008834:	4649      	mov	r1, r9
 8008836:	4638      	mov	r0, r7
 8008838:	47c0      	blx	r8
 800883a:	3001      	adds	r0, #1
 800883c:	d0e6      	beq.n	800880c <_printf_common+0xa8>
 800883e:	3601      	adds	r6, #1
 8008840:	e7d9      	b.n	80087f6 <_printf_common+0x92>
	...

08008844 <_printf_i>:
 8008844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	7e0f      	ldrb	r7, [r1, #24]
 800884a:	4691      	mov	r9, r2
 800884c:	2f78      	cmp	r7, #120	; 0x78
 800884e:	4680      	mov	r8, r0
 8008850:	460c      	mov	r4, r1
 8008852:	469a      	mov	sl, r3
 8008854:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800885a:	d807      	bhi.n	800886c <_printf_i+0x28>
 800885c:	2f62      	cmp	r7, #98	; 0x62
 800885e:	d80a      	bhi.n	8008876 <_printf_i+0x32>
 8008860:	2f00      	cmp	r7, #0
 8008862:	f000 80d9 	beq.w	8008a18 <_printf_i+0x1d4>
 8008866:	2f58      	cmp	r7, #88	; 0x58
 8008868:	f000 80a4 	beq.w	80089b4 <_printf_i+0x170>
 800886c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008874:	e03a      	b.n	80088ec <_printf_i+0xa8>
 8008876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800887a:	2b15      	cmp	r3, #21
 800887c:	d8f6      	bhi.n	800886c <_printf_i+0x28>
 800887e:	a101      	add	r1, pc, #4	; (adr r1, 8008884 <_printf_i+0x40>)
 8008880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008884:	080088dd 	.word	0x080088dd
 8008888:	080088f1 	.word	0x080088f1
 800888c:	0800886d 	.word	0x0800886d
 8008890:	0800886d 	.word	0x0800886d
 8008894:	0800886d 	.word	0x0800886d
 8008898:	0800886d 	.word	0x0800886d
 800889c:	080088f1 	.word	0x080088f1
 80088a0:	0800886d 	.word	0x0800886d
 80088a4:	0800886d 	.word	0x0800886d
 80088a8:	0800886d 	.word	0x0800886d
 80088ac:	0800886d 	.word	0x0800886d
 80088b0:	080089ff 	.word	0x080089ff
 80088b4:	08008921 	.word	0x08008921
 80088b8:	080089e1 	.word	0x080089e1
 80088bc:	0800886d 	.word	0x0800886d
 80088c0:	0800886d 	.word	0x0800886d
 80088c4:	08008a21 	.word	0x08008a21
 80088c8:	0800886d 	.word	0x0800886d
 80088cc:	08008921 	.word	0x08008921
 80088d0:	0800886d 	.word	0x0800886d
 80088d4:	0800886d 	.word	0x0800886d
 80088d8:	080089e9 	.word	0x080089e9
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	1d1a      	adds	r2, r3, #4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	602a      	str	r2, [r5, #0]
 80088e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088ec:	2301      	movs	r3, #1
 80088ee:	e0a4      	b.n	8008a3a <_printf_i+0x1f6>
 80088f0:	6820      	ldr	r0, [r4, #0]
 80088f2:	6829      	ldr	r1, [r5, #0]
 80088f4:	0606      	lsls	r6, r0, #24
 80088f6:	f101 0304 	add.w	r3, r1, #4
 80088fa:	d50a      	bpl.n	8008912 <_printf_i+0xce>
 80088fc:	680e      	ldr	r6, [r1, #0]
 80088fe:	602b      	str	r3, [r5, #0]
 8008900:	2e00      	cmp	r6, #0
 8008902:	da03      	bge.n	800890c <_printf_i+0xc8>
 8008904:	232d      	movs	r3, #45	; 0x2d
 8008906:	4276      	negs	r6, r6
 8008908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800890c:	230a      	movs	r3, #10
 800890e:	485e      	ldr	r0, [pc, #376]	; (8008a88 <_printf_i+0x244>)
 8008910:	e019      	b.n	8008946 <_printf_i+0x102>
 8008912:	680e      	ldr	r6, [r1, #0]
 8008914:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008918:	602b      	str	r3, [r5, #0]
 800891a:	bf18      	it	ne
 800891c:	b236      	sxthne	r6, r6
 800891e:	e7ef      	b.n	8008900 <_printf_i+0xbc>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	6820      	ldr	r0, [r4, #0]
 8008924:	1d19      	adds	r1, r3, #4
 8008926:	6029      	str	r1, [r5, #0]
 8008928:	0601      	lsls	r1, r0, #24
 800892a:	d501      	bpl.n	8008930 <_printf_i+0xec>
 800892c:	681e      	ldr	r6, [r3, #0]
 800892e:	e002      	b.n	8008936 <_printf_i+0xf2>
 8008930:	0646      	lsls	r6, r0, #25
 8008932:	d5fb      	bpl.n	800892c <_printf_i+0xe8>
 8008934:	881e      	ldrh	r6, [r3, #0]
 8008936:	2f6f      	cmp	r7, #111	; 0x6f
 8008938:	bf0c      	ite	eq
 800893a:	2308      	moveq	r3, #8
 800893c:	230a      	movne	r3, #10
 800893e:	4852      	ldr	r0, [pc, #328]	; (8008a88 <_printf_i+0x244>)
 8008940:	2100      	movs	r1, #0
 8008942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008946:	6865      	ldr	r5, [r4, #4]
 8008948:	2d00      	cmp	r5, #0
 800894a:	bfa8      	it	ge
 800894c:	6821      	ldrge	r1, [r4, #0]
 800894e:	60a5      	str	r5, [r4, #8]
 8008950:	bfa4      	itt	ge
 8008952:	f021 0104 	bicge.w	r1, r1, #4
 8008956:	6021      	strge	r1, [r4, #0]
 8008958:	b90e      	cbnz	r6, 800895e <_printf_i+0x11a>
 800895a:	2d00      	cmp	r5, #0
 800895c:	d04d      	beq.n	80089fa <_printf_i+0x1b6>
 800895e:	4615      	mov	r5, r2
 8008960:	fbb6 f1f3 	udiv	r1, r6, r3
 8008964:	fb03 6711 	mls	r7, r3, r1, r6
 8008968:	5dc7      	ldrb	r7, [r0, r7]
 800896a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800896e:	4637      	mov	r7, r6
 8008970:	42bb      	cmp	r3, r7
 8008972:	460e      	mov	r6, r1
 8008974:	d9f4      	bls.n	8008960 <_printf_i+0x11c>
 8008976:	2b08      	cmp	r3, #8
 8008978:	d10b      	bne.n	8008992 <_printf_i+0x14e>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	07de      	lsls	r6, r3, #31
 800897e:	d508      	bpl.n	8008992 <_printf_i+0x14e>
 8008980:	6923      	ldr	r3, [r4, #16]
 8008982:	6861      	ldr	r1, [r4, #4]
 8008984:	4299      	cmp	r1, r3
 8008986:	bfde      	ittt	le
 8008988:	2330      	movle	r3, #48	; 0x30
 800898a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800898e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008992:	1b52      	subs	r2, r2, r5
 8008994:	6122      	str	r2, [r4, #16]
 8008996:	464b      	mov	r3, r9
 8008998:	4621      	mov	r1, r4
 800899a:	4640      	mov	r0, r8
 800899c:	f8cd a000 	str.w	sl, [sp]
 80089a0:	aa03      	add	r2, sp, #12
 80089a2:	f7ff fedf 	bl	8008764 <_printf_common>
 80089a6:	3001      	adds	r0, #1
 80089a8:	d14c      	bne.n	8008a44 <_printf_i+0x200>
 80089aa:	f04f 30ff 	mov.w	r0, #4294967295
 80089ae:	b004      	add	sp, #16
 80089b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b4:	4834      	ldr	r0, [pc, #208]	; (8008a88 <_printf_i+0x244>)
 80089b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089ba:	6829      	ldr	r1, [r5, #0]
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	f851 6b04 	ldr.w	r6, [r1], #4
 80089c2:	6029      	str	r1, [r5, #0]
 80089c4:	061d      	lsls	r5, r3, #24
 80089c6:	d514      	bpl.n	80089f2 <_printf_i+0x1ae>
 80089c8:	07df      	lsls	r7, r3, #31
 80089ca:	bf44      	itt	mi
 80089cc:	f043 0320 	orrmi.w	r3, r3, #32
 80089d0:	6023      	strmi	r3, [r4, #0]
 80089d2:	b91e      	cbnz	r6, 80089dc <_printf_i+0x198>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	f023 0320 	bic.w	r3, r3, #32
 80089da:	6023      	str	r3, [r4, #0]
 80089dc:	2310      	movs	r3, #16
 80089de:	e7af      	b.n	8008940 <_printf_i+0xfc>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	f043 0320 	orr.w	r3, r3, #32
 80089e6:	6023      	str	r3, [r4, #0]
 80089e8:	2378      	movs	r3, #120	; 0x78
 80089ea:	4828      	ldr	r0, [pc, #160]	; (8008a8c <_printf_i+0x248>)
 80089ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089f0:	e7e3      	b.n	80089ba <_printf_i+0x176>
 80089f2:	0659      	lsls	r1, r3, #25
 80089f4:	bf48      	it	mi
 80089f6:	b2b6      	uxthmi	r6, r6
 80089f8:	e7e6      	b.n	80089c8 <_printf_i+0x184>
 80089fa:	4615      	mov	r5, r2
 80089fc:	e7bb      	b.n	8008976 <_printf_i+0x132>
 80089fe:	682b      	ldr	r3, [r5, #0]
 8008a00:	6826      	ldr	r6, [r4, #0]
 8008a02:	1d18      	adds	r0, r3, #4
 8008a04:	6961      	ldr	r1, [r4, #20]
 8008a06:	6028      	str	r0, [r5, #0]
 8008a08:	0635      	lsls	r5, r6, #24
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	d501      	bpl.n	8008a12 <_printf_i+0x1ce>
 8008a0e:	6019      	str	r1, [r3, #0]
 8008a10:	e002      	b.n	8008a18 <_printf_i+0x1d4>
 8008a12:	0670      	lsls	r0, r6, #25
 8008a14:	d5fb      	bpl.n	8008a0e <_printf_i+0x1ca>
 8008a16:	8019      	strh	r1, [r3, #0]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4615      	mov	r5, r2
 8008a1c:	6123      	str	r3, [r4, #16]
 8008a1e:	e7ba      	b.n	8008996 <_printf_i+0x152>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	2100      	movs	r1, #0
 8008a24:	1d1a      	adds	r2, r3, #4
 8008a26:	602a      	str	r2, [r5, #0]
 8008a28:	681d      	ldr	r5, [r3, #0]
 8008a2a:	6862      	ldr	r2, [r4, #4]
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 fed5 	bl	80097dc <memchr>
 8008a32:	b108      	cbz	r0, 8008a38 <_printf_i+0x1f4>
 8008a34:	1b40      	subs	r0, r0, r5
 8008a36:	6060      	str	r0, [r4, #4]
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	6123      	str	r3, [r4, #16]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a42:	e7a8      	b.n	8008996 <_printf_i+0x152>
 8008a44:	462a      	mov	r2, r5
 8008a46:	4649      	mov	r1, r9
 8008a48:	4640      	mov	r0, r8
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	47d0      	blx	sl
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0ab      	beq.n	80089aa <_printf_i+0x166>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	079b      	lsls	r3, r3, #30
 8008a56:	d413      	bmi.n	8008a80 <_printf_i+0x23c>
 8008a58:	68e0      	ldr	r0, [r4, #12]
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	4298      	cmp	r0, r3
 8008a5e:	bfb8      	it	lt
 8008a60:	4618      	movlt	r0, r3
 8008a62:	e7a4      	b.n	80089ae <_printf_i+0x16a>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4632      	mov	r2, r6
 8008a68:	4649      	mov	r1, r9
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	47d0      	blx	sl
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d09b      	beq.n	80089aa <_printf_i+0x166>
 8008a72:	3501      	adds	r5, #1
 8008a74:	68e3      	ldr	r3, [r4, #12]
 8008a76:	9903      	ldr	r1, [sp, #12]
 8008a78:	1a5b      	subs	r3, r3, r1
 8008a7a:	42ab      	cmp	r3, r5
 8008a7c:	dcf2      	bgt.n	8008a64 <_printf_i+0x220>
 8008a7e:	e7eb      	b.n	8008a58 <_printf_i+0x214>
 8008a80:	2500      	movs	r5, #0
 8008a82:	f104 0619 	add.w	r6, r4, #25
 8008a86:	e7f5      	b.n	8008a74 <_printf_i+0x230>
 8008a88:	0800befa 	.word	0x0800befa
 8008a8c:	0800bf0b 	.word	0x0800bf0b

08008a90 <siprintf>:
 8008a90:	b40e      	push	{r1, r2, r3}
 8008a92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a96:	b500      	push	{lr}
 8008a98:	b09c      	sub	sp, #112	; 0x70
 8008a9a:	ab1d      	add	r3, sp, #116	; 0x74
 8008a9c:	9002      	str	r0, [sp, #8]
 8008a9e:	9006      	str	r0, [sp, #24]
 8008aa0:	9107      	str	r1, [sp, #28]
 8008aa2:	9104      	str	r1, [sp, #16]
 8008aa4:	4808      	ldr	r0, [pc, #32]	; (8008ac8 <siprintf+0x38>)
 8008aa6:	4909      	ldr	r1, [pc, #36]	; (8008acc <siprintf+0x3c>)
 8008aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aac:	9105      	str	r1, [sp, #20]
 8008aae:	6800      	ldr	r0, [r0, #0]
 8008ab0:	a902      	add	r1, sp, #8
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	f001 fb7c 	bl	800a1b0 <_svfiprintf_r>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	9b02      	ldr	r3, [sp, #8]
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	b01c      	add	sp, #112	; 0x70
 8008ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ac4:	b003      	add	sp, #12
 8008ac6:	4770      	bx	lr
 8008ac8:	20000024 	.word	0x20000024
 8008acc:	ffff0208 	.word	0xffff0208

08008ad0 <quorem>:
 8008ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	6903      	ldr	r3, [r0, #16]
 8008ad6:	690c      	ldr	r4, [r1, #16]
 8008ad8:	4607      	mov	r7, r0
 8008ada:	42a3      	cmp	r3, r4
 8008adc:	f2c0 8082 	blt.w	8008be4 <quorem+0x114>
 8008ae0:	3c01      	subs	r4, #1
 8008ae2:	f100 0514 	add.w	r5, r0, #20
 8008ae6:	f101 0814 	add.w	r8, r1, #20
 8008aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008af4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008af8:	3301      	adds	r3, #1
 8008afa:	429a      	cmp	r2, r3
 8008afc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b08:	d331      	bcc.n	8008b6e <quorem+0x9e>
 8008b0a:	f04f 0e00 	mov.w	lr, #0
 8008b0e:	4640      	mov	r0, r8
 8008b10:	46ac      	mov	ip, r5
 8008b12:	46f2      	mov	sl, lr
 8008b14:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b18:	b293      	uxth	r3, r2
 8008b1a:	fb06 e303 	mla	r3, r6, r3, lr
 8008b1e:	0c12      	lsrs	r2, r2, #16
 8008b20:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	fb06 e202 	mla	r2, r6, r2, lr
 8008b2a:	ebaa 0303 	sub.w	r3, sl, r3
 8008b2e:	f8dc a000 	ldr.w	sl, [ip]
 8008b32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b36:	fa1f fa8a 	uxth.w	sl, sl
 8008b3a:	4453      	add	r3, sl
 8008b3c:	f8dc a000 	ldr.w	sl, [ip]
 8008b40:	b292      	uxth	r2, r2
 8008b42:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b50:	4581      	cmp	r9, r0
 8008b52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b56:	f84c 3b04 	str.w	r3, [ip], #4
 8008b5a:	d2db      	bcs.n	8008b14 <quorem+0x44>
 8008b5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b60:	b92b      	cbnz	r3, 8008b6e <quorem+0x9e>
 8008b62:	9b01      	ldr	r3, [sp, #4]
 8008b64:	3b04      	subs	r3, #4
 8008b66:	429d      	cmp	r5, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	d32f      	bcc.n	8008bcc <quorem+0xfc>
 8008b6c:	613c      	str	r4, [r7, #16]
 8008b6e:	4638      	mov	r0, r7
 8008b70:	f001 f8ce 	bl	8009d10 <__mcmp>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	db25      	blt.n	8008bc4 <quorem+0xf4>
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f04f 0c00 	mov.w	ip, #0
 8008b7e:	3601      	adds	r6, #1
 8008b80:	f858 1b04 	ldr.w	r1, [r8], #4
 8008b84:	f8d0 e000 	ldr.w	lr, [r0]
 8008b88:	b28b      	uxth	r3, r1
 8008b8a:	ebac 0303 	sub.w	r3, ip, r3
 8008b8e:	fa1f f28e 	uxth.w	r2, lr
 8008b92:	4413      	add	r3, r2
 8008b94:	0c0a      	lsrs	r2, r1, #16
 8008b96:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ba4:	45c1      	cmp	r9, r8
 8008ba6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008baa:	f840 3b04 	str.w	r3, [r0], #4
 8008bae:	d2e7      	bcs.n	8008b80 <quorem+0xb0>
 8008bb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bb8:	b922      	cbnz	r2, 8008bc4 <quorem+0xf4>
 8008bba:	3b04      	subs	r3, #4
 8008bbc:	429d      	cmp	r5, r3
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	d30a      	bcc.n	8008bd8 <quorem+0x108>
 8008bc2:	613c      	str	r4, [r7, #16]
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	b003      	add	sp, #12
 8008bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	3b04      	subs	r3, #4
 8008bd0:	2a00      	cmp	r2, #0
 8008bd2:	d1cb      	bne.n	8008b6c <quorem+0x9c>
 8008bd4:	3c01      	subs	r4, #1
 8008bd6:	e7c6      	b.n	8008b66 <quorem+0x96>
 8008bd8:	6812      	ldr	r2, [r2, #0]
 8008bda:	3b04      	subs	r3, #4
 8008bdc:	2a00      	cmp	r2, #0
 8008bde:	d1f0      	bne.n	8008bc2 <quorem+0xf2>
 8008be0:	3c01      	subs	r4, #1
 8008be2:	e7eb      	b.n	8008bbc <quorem+0xec>
 8008be4:	2000      	movs	r0, #0
 8008be6:	e7ee      	b.n	8008bc6 <quorem+0xf6>

08008be8 <_dtoa_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	4616      	mov	r6, r2
 8008bee:	461f      	mov	r7, r3
 8008bf0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008bf2:	b099      	sub	sp, #100	; 0x64
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008bfa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008bfe:	b974      	cbnz	r4, 8008c1e <_dtoa_r+0x36>
 8008c00:	2010      	movs	r0, #16
 8008c02:	f000 fde3 	bl	80097cc <malloc>
 8008c06:	4602      	mov	r2, r0
 8008c08:	6268      	str	r0, [r5, #36]	; 0x24
 8008c0a:	b920      	cbnz	r0, 8008c16 <_dtoa_r+0x2e>
 8008c0c:	21ea      	movs	r1, #234	; 0xea
 8008c0e:	4ba8      	ldr	r3, [pc, #672]	; (8008eb0 <_dtoa_r+0x2c8>)
 8008c10:	48a8      	ldr	r0, [pc, #672]	; (8008eb4 <_dtoa_r+0x2cc>)
 8008c12:	f001 fbdd 	bl	800a3d0 <__assert_func>
 8008c16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c1a:	6004      	str	r4, [r0, #0]
 8008c1c:	60c4      	str	r4, [r0, #12]
 8008c1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c20:	6819      	ldr	r1, [r3, #0]
 8008c22:	b151      	cbz	r1, 8008c3a <_dtoa_r+0x52>
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	2301      	movs	r3, #1
 8008c28:	4093      	lsls	r3, r2
 8008c2a:	604a      	str	r2, [r1, #4]
 8008c2c:	608b      	str	r3, [r1, #8]
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 fe30 	bl	8009894 <_Bfree>
 8008c34:	2200      	movs	r2, #0
 8008c36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	1e3b      	subs	r3, r7, #0
 8008c3c:	bfaf      	iteee	ge
 8008c3e:	2300      	movge	r3, #0
 8008c40:	2201      	movlt	r2, #1
 8008c42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c46:	9305      	strlt	r3, [sp, #20]
 8008c48:	bfa8      	it	ge
 8008c4a:	f8c8 3000 	strge.w	r3, [r8]
 8008c4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008c52:	4b99      	ldr	r3, [pc, #612]	; (8008eb8 <_dtoa_r+0x2d0>)
 8008c54:	bfb8      	it	lt
 8008c56:	f8c8 2000 	strlt.w	r2, [r8]
 8008c5a:	ea33 0309 	bics.w	r3, r3, r9
 8008c5e:	d119      	bne.n	8008c94 <_dtoa_r+0xac>
 8008c60:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c6c:	4333      	orrs	r3, r6
 8008c6e:	f000 857f 	beq.w	8009770 <_dtoa_r+0xb88>
 8008c72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c74:	b953      	cbnz	r3, 8008c8c <_dtoa_r+0xa4>
 8008c76:	4b91      	ldr	r3, [pc, #580]	; (8008ebc <_dtoa_r+0x2d4>)
 8008c78:	e022      	b.n	8008cc0 <_dtoa_r+0xd8>
 8008c7a:	4b91      	ldr	r3, [pc, #580]	; (8008ec0 <_dtoa_r+0x2d8>)
 8008c7c:	9303      	str	r3, [sp, #12]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	9803      	ldr	r0, [sp, #12]
 8008c86:	b019      	add	sp, #100	; 0x64
 8008c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8c:	4b8b      	ldr	r3, [pc, #556]	; (8008ebc <_dtoa_r+0x2d4>)
 8008c8e:	9303      	str	r3, [sp, #12]
 8008c90:	3303      	adds	r3, #3
 8008c92:	e7f5      	b.n	8008c80 <_dtoa_r+0x98>
 8008c94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008c98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008c9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f7f7 ff34 	bl	8000b10 <__aeabi_dcmpeq>
 8008ca8:	4680      	mov	r8, r0
 8008caa:	b158      	cbz	r0, 8008cc4 <_dtoa_r+0xdc>
 8008cac:	2301      	movs	r3, #1
 8008cae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8558 	beq.w	800976a <_dtoa_r+0xb82>
 8008cba:	4882      	ldr	r0, [pc, #520]	; (8008ec4 <_dtoa_r+0x2dc>)
 8008cbc:	6018      	str	r0, [r3, #0]
 8008cbe:	1e43      	subs	r3, r0, #1
 8008cc0:	9303      	str	r3, [sp, #12]
 8008cc2:	e7df      	b.n	8008c84 <_dtoa_r+0x9c>
 8008cc4:	ab16      	add	r3, sp, #88	; 0x58
 8008cc6:	9301      	str	r3, [sp, #4]
 8008cc8:	ab17      	add	r3, sp, #92	; 0x5c
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	4628      	mov	r0, r5
 8008cce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008cd2:	f001 f8c5 	bl	8009e60 <__d2b>
 8008cd6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008cda:	4683      	mov	fp, r0
 8008cdc:	2c00      	cmp	r4, #0
 8008cde:	d07f      	beq.n	8008de0 <_dtoa_r+0x1f8>
 8008ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ce6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008cea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008cf2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008cf6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	4b72      	ldr	r3, [pc, #456]	; (8008ec8 <_dtoa_r+0x2e0>)
 8008cfe:	f7f7 fae7 	bl	80002d0 <__aeabi_dsub>
 8008d02:	a365      	add	r3, pc, #404	; (adr r3, 8008e98 <_dtoa_r+0x2b0>)
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	f7f7 fc9a 	bl	8000640 <__aeabi_dmul>
 8008d0c:	a364      	add	r3, pc, #400	; (adr r3, 8008ea0 <_dtoa_r+0x2b8>)
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f7f7 fadf 	bl	80002d4 <__adddf3>
 8008d16:	4606      	mov	r6, r0
 8008d18:	4620      	mov	r0, r4
 8008d1a:	460f      	mov	r7, r1
 8008d1c:	f7f7 fc26 	bl	800056c <__aeabi_i2d>
 8008d20:	a361      	add	r3, pc, #388	; (adr r3, 8008ea8 <_dtoa_r+0x2c0>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fc8b 	bl	8000640 <__aeabi_dmul>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4630      	mov	r0, r6
 8008d30:	4639      	mov	r1, r7
 8008d32:	f7f7 facf 	bl	80002d4 <__adddf3>
 8008d36:	4606      	mov	r6, r0
 8008d38:	460f      	mov	r7, r1
 8008d3a:	f7f7 ff31 	bl	8000ba0 <__aeabi_d2iz>
 8008d3e:	2200      	movs	r2, #0
 8008d40:	4682      	mov	sl, r0
 8008d42:	2300      	movs	r3, #0
 8008d44:	4630      	mov	r0, r6
 8008d46:	4639      	mov	r1, r7
 8008d48:	f7f7 feec 	bl	8000b24 <__aeabi_dcmplt>
 8008d4c:	b148      	cbz	r0, 8008d62 <_dtoa_r+0x17a>
 8008d4e:	4650      	mov	r0, sl
 8008d50:	f7f7 fc0c 	bl	800056c <__aeabi_i2d>
 8008d54:	4632      	mov	r2, r6
 8008d56:	463b      	mov	r3, r7
 8008d58:	f7f7 feda 	bl	8000b10 <__aeabi_dcmpeq>
 8008d5c:	b908      	cbnz	r0, 8008d62 <_dtoa_r+0x17a>
 8008d5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d62:	f1ba 0f16 	cmp.w	sl, #22
 8008d66:	d858      	bhi.n	8008e1a <_dtoa_r+0x232>
 8008d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d6c:	4b57      	ldr	r3, [pc, #348]	; (8008ecc <_dtoa_r+0x2e4>)
 8008d6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f7f7 fed5 	bl	8000b24 <__aeabi_dcmplt>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d04f      	beq.n	8008e1e <_dtoa_r+0x236>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008d88:	1b1c      	subs	r4, r3, r4
 8008d8a:	1e63      	subs	r3, r4, #1
 8008d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d8e:	bf49      	itett	mi
 8008d90:	f1c4 0301 	rsbmi	r3, r4, #1
 8008d94:	2300      	movpl	r3, #0
 8008d96:	9306      	strmi	r3, [sp, #24]
 8008d98:	2300      	movmi	r3, #0
 8008d9a:	bf54      	ite	pl
 8008d9c:	9306      	strpl	r3, [sp, #24]
 8008d9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008da0:	f1ba 0f00 	cmp.w	sl, #0
 8008da4:	db3d      	blt.n	8008e22 <_dtoa_r+0x23a>
 8008da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008dac:	4453      	add	r3, sl
 8008dae:	9309      	str	r3, [sp, #36]	; 0x24
 8008db0:	2300      	movs	r3, #0
 8008db2:	930a      	str	r3, [sp, #40]	; 0x28
 8008db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008db6:	2b09      	cmp	r3, #9
 8008db8:	f200 808c 	bhi.w	8008ed4 <_dtoa_r+0x2ec>
 8008dbc:	2b05      	cmp	r3, #5
 8008dbe:	bfc4      	itt	gt
 8008dc0:	3b04      	subgt	r3, #4
 8008dc2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008dc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dc6:	bfc8      	it	gt
 8008dc8:	2400      	movgt	r4, #0
 8008dca:	f1a3 0302 	sub.w	r3, r3, #2
 8008dce:	bfd8      	it	le
 8008dd0:	2401      	movle	r4, #1
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	f200 808a 	bhi.w	8008eec <_dtoa_r+0x304>
 8008dd8:	e8df f003 	tbb	[pc, r3]
 8008ddc:	5b4d4f2d 	.word	0x5b4d4f2d
 8008de0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008de4:	441c      	add	r4, r3
 8008de6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	bfc3      	ittte	gt
 8008dee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008df2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008df6:	fa09 f303 	lslgt.w	r3, r9, r3
 8008dfa:	f1c3 0320 	rsble	r3, r3, #32
 8008dfe:	bfc6      	itte	gt
 8008e00:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e04:	4318      	orrgt	r0, r3
 8008e06:	fa06 f003 	lslle.w	r0, r6, r3
 8008e0a:	f7f7 fb9f 	bl	800054c <__aeabi_ui2d>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008e14:	3c01      	subs	r4, #1
 8008e16:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e18:	e76f      	b.n	8008cfa <_dtoa_r+0x112>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e7b2      	b.n	8008d84 <_dtoa_r+0x19c>
 8008e1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e20:	e7b1      	b.n	8008d86 <_dtoa_r+0x19e>
 8008e22:	9b06      	ldr	r3, [sp, #24]
 8008e24:	eba3 030a 	sub.w	r3, r3, sl
 8008e28:	9306      	str	r3, [sp, #24]
 8008e2a:	f1ca 0300 	rsb	r3, sl, #0
 8008e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e30:	2300      	movs	r3, #0
 8008e32:	930e      	str	r3, [sp, #56]	; 0x38
 8008e34:	e7be      	b.n	8008db4 <_dtoa_r+0x1cc>
 8008e36:	2300      	movs	r3, #0
 8008e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dc58      	bgt.n	8008ef2 <_dtoa_r+0x30a>
 8008e40:	f04f 0901 	mov.w	r9, #1
 8008e44:	464b      	mov	r3, r9
 8008e46:	f8cd 9020 	str.w	r9, [sp, #32]
 8008e4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008e4e:	2200      	movs	r2, #0
 8008e50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008e52:	6042      	str	r2, [r0, #4]
 8008e54:	2204      	movs	r2, #4
 8008e56:	f102 0614 	add.w	r6, r2, #20
 8008e5a:	429e      	cmp	r6, r3
 8008e5c:	6841      	ldr	r1, [r0, #4]
 8008e5e:	d94e      	bls.n	8008efe <_dtoa_r+0x316>
 8008e60:	4628      	mov	r0, r5
 8008e62:	f000 fcd7 	bl	8009814 <_Balloc>
 8008e66:	9003      	str	r0, [sp, #12]
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d14c      	bne.n	8008f06 <_dtoa_r+0x31e>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e72:	4b17      	ldr	r3, [pc, #92]	; (8008ed0 <_dtoa_r+0x2e8>)
 8008e74:	e6cc      	b.n	8008c10 <_dtoa_r+0x28>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e7de      	b.n	8008e38 <_dtoa_r+0x250>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e80:	eb0a 0903 	add.w	r9, sl, r3
 8008e84:	f109 0301 	add.w	r3, r9, #1
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	9308      	str	r3, [sp, #32]
 8008e8c:	bfb8      	it	lt
 8008e8e:	2301      	movlt	r3, #1
 8008e90:	e7dd      	b.n	8008e4e <_dtoa_r+0x266>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e7f2      	b.n	8008e7c <_dtoa_r+0x294>
 8008e96:	bf00      	nop
 8008e98:	636f4361 	.word	0x636f4361
 8008e9c:	3fd287a7 	.word	0x3fd287a7
 8008ea0:	8b60c8b3 	.word	0x8b60c8b3
 8008ea4:	3fc68a28 	.word	0x3fc68a28
 8008ea8:	509f79fb 	.word	0x509f79fb
 8008eac:	3fd34413 	.word	0x3fd34413
 8008eb0:	0800bf29 	.word	0x0800bf29
 8008eb4:	0800bf40 	.word	0x0800bf40
 8008eb8:	7ff00000 	.word	0x7ff00000
 8008ebc:	0800bf25 	.word	0x0800bf25
 8008ec0:	0800bf1c 	.word	0x0800bf1c
 8008ec4:	0800bef9 	.word	0x0800bef9
 8008ec8:	3ff80000 	.word	0x3ff80000
 8008ecc:	0800c030 	.word	0x0800c030
 8008ed0:	0800bf9b 	.word	0x0800bf9b
 8008ed4:	2401      	movs	r4, #1
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008eda:	9322      	str	r3, [sp, #136]	; 0x88
 8008edc:	f04f 39ff 	mov.w	r9, #4294967295
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2312      	movs	r3, #18
 8008ee4:	f8cd 9020 	str.w	r9, [sp, #32]
 8008ee8:	9223      	str	r2, [sp, #140]	; 0x8c
 8008eea:	e7b0      	b.n	8008e4e <_dtoa_r+0x266>
 8008eec:	2301      	movs	r3, #1
 8008eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ef0:	e7f4      	b.n	8008edc <_dtoa_r+0x2f4>
 8008ef2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	f8cd 9020 	str.w	r9, [sp, #32]
 8008efc:	e7a7      	b.n	8008e4e <_dtoa_r+0x266>
 8008efe:	3101      	adds	r1, #1
 8008f00:	6041      	str	r1, [r0, #4]
 8008f02:	0052      	lsls	r2, r2, #1
 8008f04:	e7a7      	b.n	8008e56 <_dtoa_r+0x26e>
 8008f06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f08:	9a03      	ldr	r2, [sp, #12]
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	9b08      	ldr	r3, [sp, #32]
 8008f0e:	2b0e      	cmp	r3, #14
 8008f10:	f200 80a8 	bhi.w	8009064 <_dtoa_r+0x47c>
 8008f14:	2c00      	cmp	r4, #0
 8008f16:	f000 80a5 	beq.w	8009064 <_dtoa_r+0x47c>
 8008f1a:	f1ba 0f00 	cmp.w	sl, #0
 8008f1e:	dd34      	ble.n	8008f8a <_dtoa_r+0x3a2>
 8008f20:	4a9a      	ldr	r2, [pc, #616]	; (800918c <_dtoa_r+0x5a4>)
 8008f22:	f00a 030f 	and.w	r3, sl, #15
 8008f26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008f2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008f36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008f3a:	d016      	beq.n	8008f6a <_dtoa_r+0x382>
 8008f3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f40:	4b93      	ldr	r3, [pc, #588]	; (8009190 <_dtoa_r+0x5a8>)
 8008f42:	2703      	movs	r7, #3
 8008f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f48:	f7f7 fca4 	bl	8000894 <__aeabi_ddiv>
 8008f4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f50:	f004 040f 	and.w	r4, r4, #15
 8008f54:	4e8e      	ldr	r6, [pc, #568]	; (8009190 <_dtoa_r+0x5a8>)
 8008f56:	b954      	cbnz	r4, 8008f6e <_dtoa_r+0x386>
 8008f58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f60:	f7f7 fc98 	bl	8000894 <__aeabi_ddiv>
 8008f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f68:	e029      	b.n	8008fbe <_dtoa_r+0x3d6>
 8008f6a:	2702      	movs	r7, #2
 8008f6c:	e7f2      	b.n	8008f54 <_dtoa_r+0x36c>
 8008f6e:	07e1      	lsls	r1, r4, #31
 8008f70:	d508      	bpl.n	8008f84 <_dtoa_r+0x39c>
 8008f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f7a:	f7f7 fb61 	bl	8000640 <__aeabi_dmul>
 8008f7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f82:	3701      	adds	r7, #1
 8008f84:	1064      	asrs	r4, r4, #1
 8008f86:	3608      	adds	r6, #8
 8008f88:	e7e5      	b.n	8008f56 <_dtoa_r+0x36e>
 8008f8a:	f000 80a5 	beq.w	80090d8 <_dtoa_r+0x4f0>
 8008f8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f92:	f1ca 0400 	rsb	r4, sl, #0
 8008f96:	4b7d      	ldr	r3, [pc, #500]	; (800918c <_dtoa_r+0x5a4>)
 8008f98:	f004 020f 	and.w	r2, r4, #15
 8008f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	f7f7 fb4c 	bl	8000640 <__aeabi_dmul>
 8008fa8:	2702      	movs	r7, #2
 8008faa:	2300      	movs	r3, #0
 8008fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fb0:	4e77      	ldr	r6, [pc, #476]	; (8009190 <_dtoa_r+0x5a8>)
 8008fb2:	1124      	asrs	r4, r4, #4
 8008fb4:	2c00      	cmp	r4, #0
 8008fb6:	f040 8084 	bne.w	80090c2 <_dtoa_r+0x4da>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1d2      	bne.n	8008f64 <_dtoa_r+0x37c>
 8008fbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 808b 	beq.w	80090dc <_dtoa_r+0x4f4>
 8008fc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008fca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008fce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	4b6f      	ldr	r3, [pc, #444]	; (8009194 <_dtoa_r+0x5ac>)
 8008fd6:	f7f7 fda5 	bl	8000b24 <__aeabi_dcmplt>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d07e      	beq.n	80090dc <_dtoa_r+0x4f4>
 8008fde:	9b08      	ldr	r3, [sp, #32]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d07b      	beq.n	80090dc <_dtoa_r+0x4f4>
 8008fe4:	f1b9 0f00 	cmp.w	r9, #0
 8008fe8:	dd38      	ble.n	800905c <_dtoa_r+0x474>
 8008fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fee:	2200      	movs	r2, #0
 8008ff0:	4b69      	ldr	r3, [pc, #420]	; (8009198 <_dtoa_r+0x5b0>)
 8008ff2:	f7f7 fb25 	bl	8000640 <__aeabi_dmul>
 8008ff6:	464c      	mov	r4, r9
 8008ff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ffc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009000:	3701      	adds	r7, #1
 8009002:	4638      	mov	r0, r7
 8009004:	f7f7 fab2 	bl	800056c <__aeabi_i2d>
 8009008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800900c:	f7f7 fb18 	bl	8000640 <__aeabi_dmul>
 8009010:	2200      	movs	r2, #0
 8009012:	4b62      	ldr	r3, [pc, #392]	; (800919c <_dtoa_r+0x5b4>)
 8009014:	f7f7 f95e 	bl	80002d4 <__adddf3>
 8009018:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800901c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009020:	9611      	str	r6, [sp, #68]	; 0x44
 8009022:	2c00      	cmp	r4, #0
 8009024:	d15d      	bne.n	80090e2 <_dtoa_r+0x4fa>
 8009026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800902a:	2200      	movs	r2, #0
 800902c:	4b5c      	ldr	r3, [pc, #368]	; (80091a0 <_dtoa_r+0x5b8>)
 800902e:	f7f7 f94f 	bl	80002d0 <__aeabi_dsub>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800903a:	4633      	mov	r3, r6
 800903c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800903e:	f7f7 fd8f 	bl	8000b60 <__aeabi_dcmpgt>
 8009042:	2800      	cmp	r0, #0
 8009044:	f040 829c 	bne.w	8009580 <_dtoa_r+0x998>
 8009048:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800904c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800904e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009052:	f7f7 fd67 	bl	8000b24 <__aeabi_dcmplt>
 8009056:	2800      	cmp	r0, #0
 8009058:	f040 8290 	bne.w	800957c <_dtoa_r+0x994>
 800905c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009060:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009066:	2b00      	cmp	r3, #0
 8009068:	f2c0 8152 	blt.w	8009310 <_dtoa_r+0x728>
 800906c:	f1ba 0f0e 	cmp.w	sl, #14
 8009070:	f300 814e 	bgt.w	8009310 <_dtoa_r+0x728>
 8009074:	4b45      	ldr	r3, [pc, #276]	; (800918c <_dtoa_r+0x5a4>)
 8009076:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800907a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800907e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009082:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009084:	2b00      	cmp	r3, #0
 8009086:	f280 80db 	bge.w	8009240 <_dtoa_r+0x658>
 800908a:	9b08      	ldr	r3, [sp, #32]
 800908c:	2b00      	cmp	r3, #0
 800908e:	f300 80d7 	bgt.w	8009240 <_dtoa_r+0x658>
 8009092:	f040 8272 	bne.w	800957a <_dtoa_r+0x992>
 8009096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800909a:	2200      	movs	r2, #0
 800909c:	4b40      	ldr	r3, [pc, #256]	; (80091a0 <_dtoa_r+0x5b8>)
 800909e:	f7f7 facf 	bl	8000640 <__aeabi_dmul>
 80090a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090a6:	f7f7 fd51 	bl	8000b4c <__aeabi_dcmpge>
 80090aa:	9c08      	ldr	r4, [sp, #32]
 80090ac:	4626      	mov	r6, r4
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f040 8248 	bne.w	8009544 <_dtoa_r+0x95c>
 80090b4:	2331      	movs	r3, #49	; 0x31
 80090b6:	9f03      	ldr	r7, [sp, #12]
 80090b8:	f10a 0a01 	add.w	sl, sl, #1
 80090bc:	f807 3b01 	strb.w	r3, [r7], #1
 80090c0:	e244      	b.n	800954c <_dtoa_r+0x964>
 80090c2:	07e2      	lsls	r2, r4, #31
 80090c4:	d505      	bpl.n	80090d2 <_dtoa_r+0x4ea>
 80090c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090ca:	f7f7 fab9 	bl	8000640 <__aeabi_dmul>
 80090ce:	2301      	movs	r3, #1
 80090d0:	3701      	adds	r7, #1
 80090d2:	1064      	asrs	r4, r4, #1
 80090d4:	3608      	adds	r6, #8
 80090d6:	e76d      	b.n	8008fb4 <_dtoa_r+0x3cc>
 80090d8:	2702      	movs	r7, #2
 80090da:	e770      	b.n	8008fbe <_dtoa_r+0x3d6>
 80090dc:	46d0      	mov	r8, sl
 80090de:	9c08      	ldr	r4, [sp, #32]
 80090e0:	e78f      	b.n	8009002 <_dtoa_r+0x41a>
 80090e2:	9903      	ldr	r1, [sp, #12]
 80090e4:	4b29      	ldr	r3, [pc, #164]	; (800918c <_dtoa_r+0x5a4>)
 80090e6:	4421      	add	r1, r4
 80090e8:	9112      	str	r1, [sp, #72]	; 0x48
 80090ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80090f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090f8:	2900      	cmp	r1, #0
 80090fa:	d055      	beq.n	80091a8 <_dtoa_r+0x5c0>
 80090fc:	2000      	movs	r0, #0
 80090fe:	4929      	ldr	r1, [pc, #164]	; (80091a4 <_dtoa_r+0x5bc>)
 8009100:	f7f7 fbc8 	bl	8000894 <__aeabi_ddiv>
 8009104:	463b      	mov	r3, r7
 8009106:	4632      	mov	r2, r6
 8009108:	f7f7 f8e2 	bl	80002d0 <__aeabi_dsub>
 800910c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009110:	9f03      	ldr	r7, [sp, #12]
 8009112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009116:	f7f7 fd43 	bl	8000ba0 <__aeabi_d2iz>
 800911a:	4604      	mov	r4, r0
 800911c:	f7f7 fa26 	bl	800056c <__aeabi_i2d>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009128:	f7f7 f8d2 	bl	80002d0 <__aeabi_dsub>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	3430      	adds	r4, #48	; 0x30
 8009132:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009136:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800913a:	f807 4b01 	strb.w	r4, [r7], #1
 800913e:	f7f7 fcf1 	bl	8000b24 <__aeabi_dcmplt>
 8009142:	2800      	cmp	r0, #0
 8009144:	d174      	bne.n	8009230 <_dtoa_r+0x648>
 8009146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800914a:	2000      	movs	r0, #0
 800914c:	4911      	ldr	r1, [pc, #68]	; (8009194 <_dtoa_r+0x5ac>)
 800914e:	f7f7 f8bf 	bl	80002d0 <__aeabi_dsub>
 8009152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009156:	f7f7 fce5 	bl	8000b24 <__aeabi_dcmplt>
 800915a:	2800      	cmp	r0, #0
 800915c:	f040 80b7 	bne.w	80092ce <_dtoa_r+0x6e6>
 8009160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009162:	429f      	cmp	r7, r3
 8009164:	f43f af7a 	beq.w	800905c <_dtoa_r+0x474>
 8009168:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800916c:	2200      	movs	r2, #0
 800916e:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <_dtoa_r+0x5b0>)
 8009170:	f7f7 fa66 	bl	8000640 <__aeabi_dmul>
 8009174:	2200      	movs	r2, #0
 8009176:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800917a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800917e:	4b06      	ldr	r3, [pc, #24]	; (8009198 <_dtoa_r+0x5b0>)
 8009180:	f7f7 fa5e 	bl	8000640 <__aeabi_dmul>
 8009184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009188:	e7c3      	b.n	8009112 <_dtoa_r+0x52a>
 800918a:	bf00      	nop
 800918c:	0800c030 	.word	0x0800c030
 8009190:	0800c008 	.word	0x0800c008
 8009194:	3ff00000 	.word	0x3ff00000
 8009198:	40240000 	.word	0x40240000
 800919c:	401c0000 	.word	0x401c0000
 80091a0:	40140000 	.word	0x40140000
 80091a4:	3fe00000 	.word	0x3fe00000
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 fa48 	bl	8000640 <__aeabi_dmul>
 80091b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80091b6:	9c03      	ldr	r4, [sp, #12]
 80091b8:	9314      	str	r3, [sp, #80]	; 0x50
 80091ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091be:	f7f7 fcef 	bl	8000ba0 <__aeabi_d2iz>
 80091c2:	9015      	str	r0, [sp, #84]	; 0x54
 80091c4:	f7f7 f9d2 	bl	800056c <__aeabi_i2d>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091d0:	f7f7 f87e 	bl	80002d0 <__aeabi_dsub>
 80091d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091d6:	4606      	mov	r6, r0
 80091d8:	3330      	adds	r3, #48	; 0x30
 80091da:	f804 3b01 	strb.w	r3, [r4], #1
 80091de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091e0:	460f      	mov	r7, r1
 80091e2:	429c      	cmp	r4, r3
 80091e4:	f04f 0200 	mov.w	r2, #0
 80091e8:	d124      	bne.n	8009234 <_dtoa_r+0x64c>
 80091ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091ee:	4bb0      	ldr	r3, [pc, #704]	; (80094b0 <_dtoa_r+0x8c8>)
 80091f0:	f7f7 f870 	bl	80002d4 <__adddf3>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 fcb0 	bl	8000b60 <__aeabi_dcmpgt>
 8009200:	2800      	cmp	r0, #0
 8009202:	d163      	bne.n	80092cc <_dtoa_r+0x6e4>
 8009204:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009208:	2000      	movs	r0, #0
 800920a:	49a9      	ldr	r1, [pc, #676]	; (80094b0 <_dtoa_r+0x8c8>)
 800920c:	f7f7 f860 	bl	80002d0 <__aeabi_dsub>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4630      	mov	r0, r6
 8009216:	4639      	mov	r1, r7
 8009218:	f7f7 fc84 	bl	8000b24 <__aeabi_dcmplt>
 800921c:	2800      	cmp	r0, #0
 800921e:	f43f af1d 	beq.w	800905c <_dtoa_r+0x474>
 8009222:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009224:	1e7b      	subs	r3, r7, #1
 8009226:	9314      	str	r3, [sp, #80]	; 0x50
 8009228:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800922c:	2b30      	cmp	r3, #48	; 0x30
 800922e:	d0f8      	beq.n	8009222 <_dtoa_r+0x63a>
 8009230:	46c2      	mov	sl, r8
 8009232:	e03b      	b.n	80092ac <_dtoa_r+0x6c4>
 8009234:	4b9f      	ldr	r3, [pc, #636]	; (80094b4 <_dtoa_r+0x8cc>)
 8009236:	f7f7 fa03 	bl	8000640 <__aeabi_dmul>
 800923a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800923e:	e7bc      	b.n	80091ba <_dtoa_r+0x5d2>
 8009240:	9f03      	ldr	r7, [sp, #12]
 8009242:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009246:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800924a:	4640      	mov	r0, r8
 800924c:	4649      	mov	r1, r9
 800924e:	f7f7 fb21 	bl	8000894 <__aeabi_ddiv>
 8009252:	f7f7 fca5 	bl	8000ba0 <__aeabi_d2iz>
 8009256:	4604      	mov	r4, r0
 8009258:	f7f7 f988 	bl	800056c <__aeabi_i2d>
 800925c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009260:	f7f7 f9ee 	bl	8000640 <__aeabi_dmul>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4640      	mov	r0, r8
 800926a:	4649      	mov	r1, r9
 800926c:	f7f7 f830 	bl	80002d0 <__aeabi_dsub>
 8009270:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009274:	f807 6b01 	strb.w	r6, [r7], #1
 8009278:	9e03      	ldr	r6, [sp, #12]
 800927a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800927e:	1bbe      	subs	r6, r7, r6
 8009280:	45b4      	cmp	ip, r6
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	d136      	bne.n	80092f6 <_dtoa_r+0x70e>
 8009288:	f7f7 f824 	bl	80002d4 <__adddf3>
 800928c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009290:	4680      	mov	r8, r0
 8009292:	4689      	mov	r9, r1
 8009294:	f7f7 fc64 	bl	8000b60 <__aeabi_dcmpgt>
 8009298:	bb58      	cbnz	r0, 80092f2 <_dtoa_r+0x70a>
 800929a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800929e:	4640      	mov	r0, r8
 80092a0:	4649      	mov	r1, r9
 80092a2:	f7f7 fc35 	bl	8000b10 <__aeabi_dcmpeq>
 80092a6:	b108      	cbz	r0, 80092ac <_dtoa_r+0x6c4>
 80092a8:	07e1      	lsls	r1, r4, #31
 80092aa:	d422      	bmi.n	80092f2 <_dtoa_r+0x70a>
 80092ac:	4628      	mov	r0, r5
 80092ae:	4659      	mov	r1, fp
 80092b0:	f000 faf0 	bl	8009894 <_Bfree>
 80092b4:	2300      	movs	r3, #0
 80092b6:	703b      	strb	r3, [r7, #0]
 80092b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80092ba:	f10a 0001 	add.w	r0, sl, #1
 80092be:	6018      	str	r0, [r3, #0]
 80092c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f43f acde 	beq.w	8008c84 <_dtoa_r+0x9c>
 80092c8:	601f      	str	r7, [r3, #0]
 80092ca:	e4db      	b.n	8008c84 <_dtoa_r+0x9c>
 80092cc:	4627      	mov	r7, r4
 80092ce:	463b      	mov	r3, r7
 80092d0:	461f      	mov	r7, r3
 80092d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092d6:	2a39      	cmp	r2, #57	; 0x39
 80092d8:	d107      	bne.n	80092ea <_dtoa_r+0x702>
 80092da:	9a03      	ldr	r2, [sp, #12]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d1f7      	bne.n	80092d0 <_dtoa_r+0x6e8>
 80092e0:	2230      	movs	r2, #48	; 0x30
 80092e2:	9903      	ldr	r1, [sp, #12]
 80092e4:	f108 0801 	add.w	r8, r8, #1
 80092e8:	700a      	strb	r2, [r1, #0]
 80092ea:	781a      	ldrb	r2, [r3, #0]
 80092ec:	3201      	adds	r2, #1
 80092ee:	701a      	strb	r2, [r3, #0]
 80092f0:	e79e      	b.n	8009230 <_dtoa_r+0x648>
 80092f2:	46d0      	mov	r8, sl
 80092f4:	e7eb      	b.n	80092ce <_dtoa_r+0x6e6>
 80092f6:	2200      	movs	r2, #0
 80092f8:	4b6e      	ldr	r3, [pc, #440]	; (80094b4 <_dtoa_r+0x8cc>)
 80092fa:	f7f7 f9a1 	bl	8000640 <__aeabi_dmul>
 80092fe:	2200      	movs	r2, #0
 8009300:	2300      	movs	r3, #0
 8009302:	4680      	mov	r8, r0
 8009304:	4689      	mov	r9, r1
 8009306:	f7f7 fc03 	bl	8000b10 <__aeabi_dcmpeq>
 800930a:	2800      	cmp	r0, #0
 800930c:	d09b      	beq.n	8009246 <_dtoa_r+0x65e>
 800930e:	e7cd      	b.n	80092ac <_dtoa_r+0x6c4>
 8009310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009312:	2a00      	cmp	r2, #0
 8009314:	f000 80d0 	beq.w	80094b8 <_dtoa_r+0x8d0>
 8009318:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800931a:	2a01      	cmp	r2, #1
 800931c:	f300 80ae 	bgt.w	800947c <_dtoa_r+0x894>
 8009320:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009322:	2a00      	cmp	r2, #0
 8009324:	f000 80a6 	beq.w	8009474 <_dtoa_r+0x88c>
 8009328:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800932c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800932e:	9f06      	ldr	r7, [sp, #24]
 8009330:	9a06      	ldr	r2, [sp, #24]
 8009332:	2101      	movs	r1, #1
 8009334:	441a      	add	r2, r3
 8009336:	9206      	str	r2, [sp, #24]
 8009338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800933a:	4628      	mov	r0, r5
 800933c:	441a      	add	r2, r3
 800933e:	9209      	str	r2, [sp, #36]	; 0x24
 8009340:	f000 fb5e 	bl	8009a00 <__i2b>
 8009344:	4606      	mov	r6, r0
 8009346:	2f00      	cmp	r7, #0
 8009348:	dd0c      	ble.n	8009364 <_dtoa_r+0x77c>
 800934a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934c:	2b00      	cmp	r3, #0
 800934e:	dd09      	ble.n	8009364 <_dtoa_r+0x77c>
 8009350:	42bb      	cmp	r3, r7
 8009352:	bfa8      	it	ge
 8009354:	463b      	movge	r3, r7
 8009356:	9a06      	ldr	r2, [sp, #24]
 8009358:	1aff      	subs	r7, r7, r3
 800935a:	1ad2      	subs	r2, r2, r3
 800935c:	9206      	str	r2, [sp, #24]
 800935e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	9309      	str	r3, [sp, #36]	; 0x24
 8009364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009366:	b1f3      	cbz	r3, 80093a6 <_dtoa_r+0x7be>
 8009368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 80a8 	beq.w	80094c0 <_dtoa_r+0x8d8>
 8009370:	2c00      	cmp	r4, #0
 8009372:	dd10      	ble.n	8009396 <_dtoa_r+0x7ae>
 8009374:	4631      	mov	r1, r6
 8009376:	4622      	mov	r2, r4
 8009378:	4628      	mov	r0, r5
 800937a:	f000 fbff 	bl	8009b7c <__pow5mult>
 800937e:	465a      	mov	r2, fp
 8009380:	4601      	mov	r1, r0
 8009382:	4606      	mov	r6, r0
 8009384:	4628      	mov	r0, r5
 8009386:	f000 fb51 	bl	8009a2c <__multiply>
 800938a:	4680      	mov	r8, r0
 800938c:	4659      	mov	r1, fp
 800938e:	4628      	mov	r0, r5
 8009390:	f000 fa80 	bl	8009894 <_Bfree>
 8009394:	46c3      	mov	fp, r8
 8009396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009398:	1b1a      	subs	r2, r3, r4
 800939a:	d004      	beq.n	80093a6 <_dtoa_r+0x7be>
 800939c:	4659      	mov	r1, fp
 800939e:	4628      	mov	r0, r5
 80093a0:	f000 fbec 	bl	8009b7c <__pow5mult>
 80093a4:	4683      	mov	fp, r0
 80093a6:	2101      	movs	r1, #1
 80093a8:	4628      	mov	r0, r5
 80093aa:	f000 fb29 	bl	8009a00 <__i2b>
 80093ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093b0:	4604      	mov	r4, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f340 8086 	ble.w	80094c4 <_dtoa_r+0x8dc>
 80093b8:	461a      	mov	r2, r3
 80093ba:	4601      	mov	r1, r0
 80093bc:	4628      	mov	r0, r5
 80093be:	f000 fbdd 	bl	8009b7c <__pow5mult>
 80093c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093c4:	4604      	mov	r4, r0
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	dd7f      	ble.n	80094ca <_dtoa_r+0x8e2>
 80093ca:	f04f 0800 	mov.w	r8, #0
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093d4:	6918      	ldr	r0, [r3, #16]
 80093d6:	f000 fac5 	bl	8009964 <__hi0bits>
 80093da:	f1c0 0020 	rsb	r0, r0, #32
 80093de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e0:	4418      	add	r0, r3
 80093e2:	f010 001f 	ands.w	r0, r0, #31
 80093e6:	f000 8092 	beq.w	800950e <_dtoa_r+0x926>
 80093ea:	f1c0 0320 	rsb	r3, r0, #32
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	f340 808a 	ble.w	8009508 <_dtoa_r+0x920>
 80093f4:	f1c0 001c 	rsb	r0, r0, #28
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	4407      	add	r7, r0
 80093fc:	4403      	add	r3, r0
 80093fe:	9306      	str	r3, [sp, #24]
 8009400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009402:	4403      	add	r3, r0
 8009404:	9309      	str	r3, [sp, #36]	; 0x24
 8009406:	9b06      	ldr	r3, [sp, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	dd05      	ble.n	8009418 <_dtoa_r+0x830>
 800940c:	4659      	mov	r1, fp
 800940e:	461a      	mov	r2, r3
 8009410:	4628      	mov	r0, r5
 8009412:	f000 fc0d 	bl	8009c30 <__lshift>
 8009416:	4683      	mov	fp, r0
 8009418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941a:	2b00      	cmp	r3, #0
 800941c:	dd05      	ble.n	800942a <_dtoa_r+0x842>
 800941e:	4621      	mov	r1, r4
 8009420:	461a      	mov	r2, r3
 8009422:	4628      	mov	r0, r5
 8009424:	f000 fc04 	bl	8009c30 <__lshift>
 8009428:	4604      	mov	r4, r0
 800942a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800942c:	2b00      	cmp	r3, #0
 800942e:	d070      	beq.n	8009512 <_dtoa_r+0x92a>
 8009430:	4621      	mov	r1, r4
 8009432:	4658      	mov	r0, fp
 8009434:	f000 fc6c 	bl	8009d10 <__mcmp>
 8009438:	2800      	cmp	r0, #0
 800943a:	da6a      	bge.n	8009512 <_dtoa_r+0x92a>
 800943c:	2300      	movs	r3, #0
 800943e:	4659      	mov	r1, fp
 8009440:	220a      	movs	r2, #10
 8009442:	4628      	mov	r0, r5
 8009444:	f000 fa48 	bl	80098d8 <__multadd>
 8009448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800944a:	4683      	mov	fp, r0
 800944c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8194 	beq.w	800977e <_dtoa_r+0xb96>
 8009456:	4631      	mov	r1, r6
 8009458:	2300      	movs	r3, #0
 800945a:	220a      	movs	r2, #10
 800945c:	4628      	mov	r0, r5
 800945e:	f000 fa3b 	bl	80098d8 <__multadd>
 8009462:	f1b9 0f00 	cmp.w	r9, #0
 8009466:	4606      	mov	r6, r0
 8009468:	f300 8093 	bgt.w	8009592 <_dtoa_r+0x9aa>
 800946c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800946e:	2b02      	cmp	r3, #2
 8009470:	dc57      	bgt.n	8009522 <_dtoa_r+0x93a>
 8009472:	e08e      	b.n	8009592 <_dtoa_r+0x9aa>
 8009474:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009476:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800947a:	e757      	b.n	800932c <_dtoa_r+0x744>
 800947c:	9b08      	ldr	r3, [sp, #32]
 800947e:	1e5c      	subs	r4, r3, #1
 8009480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009482:	42a3      	cmp	r3, r4
 8009484:	bfb7      	itett	lt
 8009486:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009488:	1b1c      	subge	r4, r3, r4
 800948a:	1ae2      	sublt	r2, r4, r3
 800948c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800948e:	bfbe      	ittt	lt
 8009490:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009492:	189b      	addlt	r3, r3, r2
 8009494:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009496:	9b08      	ldr	r3, [sp, #32]
 8009498:	bfb8      	it	lt
 800949a:	2400      	movlt	r4, #0
 800949c:	2b00      	cmp	r3, #0
 800949e:	bfbb      	ittet	lt
 80094a0:	9b06      	ldrlt	r3, [sp, #24]
 80094a2:	9a08      	ldrlt	r2, [sp, #32]
 80094a4:	9f06      	ldrge	r7, [sp, #24]
 80094a6:	1a9f      	sublt	r7, r3, r2
 80094a8:	bfac      	ite	ge
 80094aa:	9b08      	ldrge	r3, [sp, #32]
 80094ac:	2300      	movlt	r3, #0
 80094ae:	e73f      	b.n	8009330 <_dtoa_r+0x748>
 80094b0:	3fe00000 	.word	0x3fe00000
 80094b4:	40240000 	.word	0x40240000
 80094b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80094ba:	9f06      	ldr	r7, [sp, #24]
 80094bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80094be:	e742      	b.n	8009346 <_dtoa_r+0x75e>
 80094c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094c2:	e76b      	b.n	800939c <_dtoa_r+0x7b4>
 80094c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	dc19      	bgt.n	80094fe <_dtoa_r+0x916>
 80094ca:	9b04      	ldr	r3, [sp, #16]
 80094cc:	b9bb      	cbnz	r3, 80094fe <_dtoa_r+0x916>
 80094ce:	9b05      	ldr	r3, [sp, #20]
 80094d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094d4:	b99b      	cbnz	r3, 80094fe <_dtoa_r+0x916>
 80094d6:	9b05      	ldr	r3, [sp, #20]
 80094d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094dc:	0d1b      	lsrs	r3, r3, #20
 80094de:	051b      	lsls	r3, r3, #20
 80094e0:	b183      	cbz	r3, 8009504 <_dtoa_r+0x91c>
 80094e2:	f04f 0801 	mov.w	r8, #1
 80094e6:	9b06      	ldr	r3, [sp, #24]
 80094e8:	3301      	adds	r3, #1
 80094ea:	9306      	str	r3, [sp, #24]
 80094ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ee:	3301      	adds	r3, #1
 80094f0:	9309      	str	r3, [sp, #36]	; 0x24
 80094f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f47f af6a 	bne.w	80093ce <_dtoa_r+0x7e6>
 80094fa:	2001      	movs	r0, #1
 80094fc:	e76f      	b.n	80093de <_dtoa_r+0x7f6>
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	e7f6      	b.n	80094f2 <_dtoa_r+0x90a>
 8009504:	4698      	mov	r8, r3
 8009506:	e7f4      	b.n	80094f2 <_dtoa_r+0x90a>
 8009508:	f43f af7d 	beq.w	8009406 <_dtoa_r+0x81e>
 800950c:	4618      	mov	r0, r3
 800950e:	301c      	adds	r0, #28
 8009510:	e772      	b.n	80093f8 <_dtoa_r+0x810>
 8009512:	9b08      	ldr	r3, [sp, #32]
 8009514:	2b00      	cmp	r3, #0
 8009516:	dc36      	bgt.n	8009586 <_dtoa_r+0x99e>
 8009518:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800951a:	2b02      	cmp	r3, #2
 800951c:	dd33      	ble.n	8009586 <_dtoa_r+0x99e>
 800951e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009522:	f1b9 0f00 	cmp.w	r9, #0
 8009526:	d10d      	bne.n	8009544 <_dtoa_r+0x95c>
 8009528:	4621      	mov	r1, r4
 800952a:	464b      	mov	r3, r9
 800952c:	2205      	movs	r2, #5
 800952e:	4628      	mov	r0, r5
 8009530:	f000 f9d2 	bl	80098d8 <__multadd>
 8009534:	4601      	mov	r1, r0
 8009536:	4604      	mov	r4, r0
 8009538:	4658      	mov	r0, fp
 800953a:	f000 fbe9 	bl	8009d10 <__mcmp>
 800953e:	2800      	cmp	r0, #0
 8009540:	f73f adb8 	bgt.w	80090b4 <_dtoa_r+0x4cc>
 8009544:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009546:	9f03      	ldr	r7, [sp, #12]
 8009548:	ea6f 0a03 	mvn.w	sl, r3
 800954c:	f04f 0800 	mov.w	r8, #0
 8009550:	4621      	mov	r1, r4
 8009552:	4628      	mov	r0, r5
 8009554:	f000 f99e 	bl	8009894 <_Bfree>
 8009558:	2e00      	cmp	r6, #0
 800955a:	f43f aea7 	beq.w	80092ac <_dtoa_r+0x6c4>
 800955e:	f1b8 0f00 	cmp.w	r8, #0
 8009562:	d005      	beq.n	8009570 <_dtoa_r+0x988>
 8009564:	45b0      	cmp	r8, r6
 8009566:	d003      	beq.n	8009570 <_dtoa_r+0x988>
 8009568:	4641      	mov	r1, r8
 800956a:	4628      	mov	r0, r5
 800956c:	f000 f992 	bl	8009894 <_Bfree>
 8009570:	4631      	mov	r1, r6
 8009572:	4628      	mov	r0, r5
 8009574:	f000 f98e 	bl	8009894 <_Bfree>
 8009578:	e698      	b.n	80092ac <_dtoa_r+0x6c4>
 800957a:	2400      	movs	r4, #0
 800957c:	4626      	mov	r6, r4
 800957e:	e7e1      	b.n	8009544 <_dtoa_r+0x95c>
 8009580:	46c2      	mov	sl, r8
 8009582:	4626      	mov	r6, r4
 8009584:	e596      	b.n	80090b4 <_dtoa_r+0x4cc>
 8009586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80fd 	beq.w	800978c <_dtoa_r+0xba4>
 8009592:	2f00      	cmp	r7, #0
 8009594:	dd05      	ble.n	80095a2 <_dtoa_r+0x9ba>
 8009596:	4631      	mov	r1, r6
 8009598:	463a      	mov	r2, r7
 800959a:	4628      	mov	r0, r5
 800959c:	f000 fb48 	bl	8009c30 <__lshift>
 80095a0:	4606      	mov	r6, r0
 80095a2:	f1b8 0f00 	cmp.w	r8, #0
 80095a6:	d05c      	beq.n	8009662 <_dtoa_r+0xa7a>
 80095a8:	4628      	mov	r0, r5
 80095aa:	6871      	ldr	r1, [r6, #4]
 80095ac:	f000 f932 	bl	8009814 <_Balloc>
 80095b0:	4607      	mov	r7, r0
 80095b2:	b928      	cbnz	r0, 80095c0 <_dtoa_r+0x9d8>
 80095b4:	4602      	mov	r2, r0
 80095b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095ba:	4b7f      	ldr	r3, [pc, #508]	; (80097b8 <_dtoa_r+0xbd0>)
 80095bc:	f7ff bb28 	b.w	8008c10 <_dtoa_r+0x28>
 80095c0:	6932      	ldr	r2, [r6, #16]
 80095c2:	f106 010c 	add.w	r1, r6, #12
 80095c6:	3202      	adds	r2, #2
 80095c8:	0092      	lsls	r2, r2, #2
 80095ca:	300c      	adds	r0, #12
 80095cc:	f000 f914 	bl	80097f8 <memcpy>
 80095d0:	2201      	movs	r2, #1
 80095d2:	4639      	mov	r1, r7
 80095d4:	4628      	mov	r0, r5
 80095d6:	f000 fb2b 	bl	8009c30 <__lshift>
 80095da:	46b0      	mov	r8, r6
 80095dc:	4606      	mov	r6, r0
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	3301      	adds	r3, #1
 80095e2:	9308      	str	r3, [sp, #32]
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	444b      	add	r3, r9
 80095e8:	930a      	str	r3, [sp, #40]	; 0x28
 80095ea:	9b04      	ldr	r3, [sp, #16]
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	9309      	str	r3, [sp, #36]	; 0x24
 80095f2:	9b08      	ldr	r3, [sp, #32]
 80095f4:	4621      	mov	r1, r4
 80095f6:	3b01      	subs	r3, #1
 80095f8:	4658      	mov	r0, fp
 80095fa:	9304      	str	r3, [sp, #16]
 80095fc:	f7ff fa68 	bl	8008ad0 <quorem>
 8009600:	4603      	mov	r3, r0
 8009602:	4641      	mov	r1, r8
 8009604:	3330      	adds	r3, #48	; 0x30
 8009606:	9006      	str	r0, [sp, #24]
 8009608:	4658      	mov	r0, fp
 800960a:	930b      	str	r3, [sp, #44]	; 0x2c
 800960c:	f000 fb80 	bl	8009d10 <__mcmp>
 8009610:	4632      	mov	r2, r6
 8009612:	4681      	mov	r9, r0
 8009614:	4621      	mov	r1, r4
 8009616:	4628      	mov	r0, r5
 8009618:	f000 fb96 	bl	8009d48 <__mdiff>
 800961c:	68c2      	ldr	r2, [r0, #12]
 800961e:	4607      	mov	r7, r0
 8009620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009622:	bb02      	cbnz	r2, 8009666 <_dtoa_r+0xa7e>
 8009624:	4601      	mov	r1, r0
 8009626:	4658      	mov	r0, fp
 8009628:	f000 fb72 	bl	8009d10 <__mcmp>
 800962c:	4602      	mov	r2, r0
 800962e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009630:	4639      	mov	r1, r7
 8009632:	4628      	mov	r0, r5
 8009634:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009638:	f000 f92c 	bl	8009894 <_Bfree>
 800963c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800963e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009640:	9f08      	ldr	r7, [sp, #32]
 8009642:	ea43 0102 	orr.w	r1, r3, r2
 8009646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009648:	430b      	orrs	r3, r1
 800964a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800964c:	d10d      	bne.n	800966a <_dtoa_r+0xa82>
 800964e:	2b39      	cmp	r3, #57	; 0x39
 8009650:	d029      	beq.n	80096a6 <_dtoa_r+0xabe>
 8009652:	f1b9 0f00 	cmp.w	r9, #0
 8009656:	dd01      	ble.n	800965c <_dtoa_r+0xa74>
 8009658:	9b06      	ldr	r3, [sp, #24]
 800965a:	3331      	adds	r3, #49	; 0x31
 800965c:	9a04      	ldr	r2, [sp, #16]
 800965e:	7013      	strb	r3, [r2, #0]
 8009660:	e776      	b.n	8009550 <_dtoa_r+0x968>
 8009662:	4630      	mov	r0, r6
 8009664:	e7b9      	b.n	80095da <_dtoa_r+0x9f2>
 8009666:	2201      	movs	r2, #1
 8009668:	e7e2      	b.n	8009630 <_dtoa_r+0xa48>
 800966a:	f1b9 0f00 	cmp.w	r9, #0
 800966e:	db06      	blt.n	800967e <_dtoa_r+0xa96>
 8009670:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009672:	ea41 0909 	orr.w	r9, r1, r9
 8009676:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009678:	ea59 0101 	orrs.w	r1, r9, r1
 800967c:	d120      	bne.n	80096c0 <_dtoa_r+0xad8>
 800967e:	2a00      	cmp	r2, #0
 8009680:	ddec      	ble.n	800965c <_dtoa_r+0xa74>
 8009682:	4659      	mov	r1, fp
 8009684:	2201      	movs	r2, #1
 8009686:	4628      	mov	r0, r5
 8009688:	9308      	str	r3, [sp, #32]
 800968a:	f000 fad1 	bl	8009c30 <__lshift>
 800968e:	4621      	mov	r1, r4
 8009690:	4683      	mov	fp, r0
 8009692:	f000 fb3d 	bl	8009d10 <__mcmp>
 8009696:	2800      	cmp	r0, #0
 8009698:	9b08      	ldr	r3, [sp, #32]
 800969a:	dc02      	bgt.n	80096a2 <_dtoa_r+0xaba>
 800969c:	d1de      	bne.n	800965c <_dtoa_r+0xa74>
 800969e:	07da      	lsls	r2, r3, #31
 80096a0:	d5dc      	bpl.n	800965c <_dtoa_r+0xa74>
 80096a2:	2b39      	cmp	r3, #57	; 0x39
 80096a4:	d1d8      	bne.n	8009658 <_dtoa_r+0xa70>
 80096a6:	2339      	movs	r3, #57	; 0x39
 80096a8:	9a04      	ldr	r2, [sp, #16]
 80096aa:	7013      	strb	r3, [r2, #0]
 80096ac:	463b      	mov	r3, r7
 80096ae:	461f      	mov	r7, r3
 80096b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80096b4:	3b01      	subs	r3, #1
 80096b6:	2a39      	cmp	r2, #57	; 0x39
 80096b8:	d050      	beq.n	800975c <_dtoa_r+0xb74>
 80096ba:	3201      	adds	r2, #1
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	e747      	b.n	8009550 <_dtoa_r+0x968>
 80096c0:	2a00      	cmp	r2, #0
 80096c2:	dd03      	ble.n	80096cc <_dtoa_r+0xae4>
 80096c4:	2b39      	cmp	r3, #57	; 0x39
 80096c6:	d0ee      	beq.n	80096a6 <_dtoa_r+0xabe>
 80096c8:	3301      	adds	r3, #1
 80096ca:	e7c7      	b.n	800965c <_dtoa_r+0xa74>
 80096cc:	9a08      	ldr	r2, [sp, #32]
 80096ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80096d4:	428a      	cmp	r2, r1
 80096d6:	d02a      	beq.n	800972e <_dtoa_r+0xb46>
 80096d8:	4659      	mov	r1, fp
 80096da:	2300      	movs	r3, #0
 80096dc:	220a      	movs	r2, #10
 80096de:	4628      	mov	r0, r5
 80096e0:	f000 f8fa 	bl	80098d8 <__multadd>
 80096e4:	45b0      	cmp	r8, r6
 80096e6:	4683      	mov	fp, r0
 80096e8:	f04f 0300 	mov.w	r3, #0
 80096ec:	f04f 020a 	mov.w	r2, #10
 80096f0:	4641      	mov	r1, r8
 80096f2:	4628      	mov	r0, r5
 80096f4:	d107      	bne.n	8009706 <_dtoa_r+0xb1e>
 80096f6:	f000 f8ef 	bl	80098d8 <__multadd>
 80096fa:	4680      	mov	r8, r0
 80096fc:	4606      	mov	r6, r0
 80096fe:	9b08      	ldr	r3, [sp, #32]
 8009700:	3301      	adds	r3, #1
 8009702:	9308      	str	r3, [sp, #32]
 8009704:	e775      	b.n	80095f2 <_dtoa_r+0xa0a>
 8009706:	f000 f8e7 	bl	80098d8 <__multadd>
 800970a:	4631      	mov	r1, r6
 800970c:	4680      	mov	r8, r0
 800970e:	2300      	movs	r3, #0
 8009710:	220a      	movs	r2, #10
 8009712:	4628      	mov	r0, r5
 8009714:	f000 f8e0 	bl	80098d8 <__multadd>
 8009718:	4606      	mov	r6, r0
 800971a:	e7f0      	b.n	80096fe <_dtoa_r+0xb16>
 800971c:	f1b9 0f00 	cmp.w	r9, #0
 8009720:	bfcc      	ite	gt
 8009722:	464f      	movgt	r7, r9
 8009724:	2701      	movle	r7, #1
 8009726:	f04f 0800 	mov.w	r8, #0
 800972a:	9a03      	ldr	r2, [sp, #12]
 800972c:	4417      	add	r7, r2
 800972e:	4659      	mov	r1, fp
 8009730:	2201      	movs	r2, #1
 8009732:	4628      	mov	r0, r5
 8009734:	9308      	str	r3, [sp, #32]
 8009736:	f000 fa7b 	bl	8009c30 <__lshift>
 800973a:	4621      	mov	r1, r4
 800973c:	4683      	mov	fp, r0
 800973e:	f000 fae7 	bl	8009d10 <__mcmp>
 8009742:	2800      	cmp	r0, #0
 8009744:	dcb2      	bgt.n	80096ac <_dtoa_r+0xac4>
 8009746:	d102      	bne.n	800974e <_dtoa_r+0xb66>
 8009748:	9b08      	ldr	r3, [sp, #32]
 800974a:	07db      	lsls	r3, r3, #31
 800974c:	d4ae      	bmi.n	80096ac <_dtoa_r+0xac4>
 800974e:	463b      	mov	r3, r7
 8009750:	461f      	mov	r7, r3
 8009752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009756:	2a30      	cmp	r2, #48	; 0x30
 8009758:	d0fa      	beq.n	8009750 <_dtoa_r+0xb68>
 800975a:	e6f9      	b.n	8009550 <_dtoa_r+0x968>
 800975c:	9a03      	ldr	r2, [sp, #12]
 800975e:	429a      	cmp	r2, r3
 8009760:	d1a5      	bne.n	80096ae <_dtoa_r+0xac6>
 8009762:	2331      	movs	r3, #49	; 0x31
 8009764:	f10a 0a01 	add.w	sl, sl, #1
 8009768:	e779      	b.n	800965e <_dtoa_r+0xa76>
 800976a:	4b14      	ldr	r3, [pc, #80]	; (80097bc <_dtoa_r+0xbd4>)
 800976c:	f7ff baa8 	b.w	8008cc0 <_dtoa_r+0xd8>
 8009770:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009772:	2b00      	cmp	r3, #0
 8009774:	f47f aa81 	bne.w	8008c7a <_dtoa_r+0x92>
 8009778:	4b11      	ldr	r3, [pc, #68]	; (80097c0 <_dtoa_r+0xbd8>)
 800977a:	f7ff baa1 	b.w	8008cc0 <_dtoa_r+0xd8>
 800977e:	f1b9 0f00 	cmp.w	r9, #0
 8009782:	dc03      	bgt.n	800978c <_dtoa_r+0xba4>
 8009784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009786:	2b02      	cmp	r3, #2
 8009788:	f73f aecb 	bgt.w	8009522 <_dtoa_r+0x93a>
 800978c:	9f03      	ldr	r7, [sp, #12]
 800978e:	4621      	mov	r1, r4
 8009790:	4658      	mov	r0, fp
 8009792:	f7ff f99d 	bl	8008ad0 <quorem>
 8009796:	9a03      	ldr	r2, [sp, #12]
 8009798:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800979c:	f807 3b01 	strb.w	r3, [r7], #1
 80097a0:	1aba      	subs	r2, r7, r2
 80097a2:	4591      	cmp	r9, r2
 80097a4:	ddba      	ble.n	800971c <_dtoa_r+0xb34>
 80097a6:	4659      	mov	r1, fp
 80097a8:	2300      	movs	r3, #0
 80097aa:	220a      	movs	r2, #10
 80097ac:	4628      	mov	r0, r5
 80097ae:	f000 f893 	bl	80098d8 <__multadd>
 80097b2:	4683      	mov	fp, r0
 80097b4:	e7eb      	b.n	800978e <_dtoa_r+0xba6>
 80097b6:	bf00      	nop
 80097b8:	0800bf9b 	.word	0x0800bf9b
 80097bc:	0800bef8 	.word	0x0800bef8
 80097c0:	0800bf1c 	.word	0x0800bf1c

080097c4 <_localeconv_r>:
 80097c4:	4800      	ldr	r0, [pc, #0]	; (80097c8 <_localeconv_r+0x4>)
 80097c6:	4770      	bx	lr
 80097c8:	20000178 	.word	0x20000178

080097cc <malloc>:
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <malloc+0xc>)
 80097ce:	4601      	mov	r1, r0
 80097d0:	6818      	ldr	r0, [r3, #0]
 80097d2:	f000 bc1d 	b.w	800a010 <_malloc_r>
 80097d6:	bf00      	nop
 80097d8:	20000024 	.word	0x20000024

080097dc <memchr>:
 80097dc:	4603      	mov	r3, r0
 80097de:	b510      	push	{r4, lr}
 80097e0:	b2c9      	uxtb	r1, r1
 80097e2:	4402      	add	r2, r0
 80097e4:	4293      	cmp	r3, r2
 80097e6:	4618      	mov	r0, r3
 80097e8:	d101      	bne.n	80097ee <memchr+0x12>
 80097ea:	2000      	movs	r0, #0
 80097ec:	e003      	b.n	80097f6 <memchr+0x1a>
 80097ee:	7804      	ldrb	r4, [r0, #0]
 80097f0:	3301      	adds	r3, #1
 80097f2:	428c      	cmp	r4, r1
 80097f4:	d1f6      	bne.n	80097e4 <memchr+0x8>
 80097f6:	bd10      	pop	{r4, pc}

080097f8 <memcpy>:
 80097f8:	440a      	add	r2, r1
 80097fa:	4291      	cmp	r1, r2
 80097fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009800:	d100      	bne.n	8009804 <memcpy+0xc>
 8009802:	4770      	bx	lr
 8009804:	b510      	push	{r4, lr}
 8009806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800980a:	4291      	cmp	r1, r2
 800980c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009810:	d1f9      	bne.n	8009806 <memcpy+0xe>
 8009812:	bd10      	pop	{r4, pc}

08009814 <_Balloc>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009818:	4604      	mov	r4, r0
 800981a:	460d      	mov	r5, r1
 800981c:	b976      	cbnz	r6, 800983c <_Balloc+0x28>
 800981e:	2010      	movs	r0, #16
 8009820:	f7ff ffd4 	bl	80097cc <malloc>
 8009824:	4602      	mov	r2, r0
 8009826:	6260      	str	r0, [r4, #36]	; 0x24
 8009828:	b920      	cbnz	r0, 8009834 <_Balloc+0x20>
 800982a:	2166      	movs	r1, #102	; 0x66
 800982c:	4b17      	ldr	r3, [pc, #92]	; (800988c <_Balloc+0x78>)
 800982e:	4818      	ldr	r0, [pc, #96]	; (8009890 <_Balloc+0x7c>)
 8009830:	f000 fdce 	bl	800a3d0 <__assert_func>
 8009834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009838:	6006      	str	r6, [r0, #0]
 800983a:	60c6      	str	r6, [r0, #12]
 800983c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800983e:	68f3      	ldr	r3, [r6, #12]
 8009840:	b183      	cbz	r3, 8009864 <_Balloc+0x50>
 8009842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800984a:	b9b8      	cbnz	r0, 800987c <_Balloc+0x68>
 800984c:	2101      	movs	r1, #1
 800984e:	fa01 f605 	lsl.w	r6, r1, r5
 8009852:	1d72      	adds	r2, r6, #5
 8009854:	4620      	mov	r0, r4
 8009856:	0092      	lsls	r2, r2, #2
 8009858:	f000 fb5e 	bl	8009f18 <_calloc_r>
 800985c:	b160      	cbz	r0, 8009878 <_Balloc+0x64>
 800985e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009862:	e00e      	b.n	8009882 <_Balloc+0x6e>
 8009864:	2221      	movs	r2, #33	; 0x21
 8009866:	2104      	movs	r1, #4
 8009868:	4620      	mov	r0, r4
 800986a:	f000 fb55 	bl	8009f18 <_calloc_r>
 800986e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009870:	60f0      	str	r0, [r6, #12]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1e4      	bne.n	8009842 <_Balloc+0x2e>
 8009878:	2000      	movs	r0, #0
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	6802      	ldr	r2, [r0, #0]
 800987e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009882:	2300      	movs	r3, #0
 8009884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009888:	e7f7      	b.n	800987a <_Balloc+0x66>
 800988a:	bf00      	nop
 800988c:	0800bf29 	.word	0x0800bf29
 8009890:	0800bfac 	.word	0x0800bfac

08009894 <_Bfree>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009898:	4605      	mov	r5, r0
 800989a:	460c      	mov	r4, r1
 800989c:	b976      	cbnz	r6, 80098bc <_Bfree+0x28>
 800989e:	2010      	movs	r0, #16
 80098a0:	f7ff ff94 	bl	80097cc <malloc>
 80098a4:	4602      	mov	r2, r0
 80098a6:	6268      	str	r0, [r5, #36]	; 0x24
 80098a8:	b920      	cbnz	r0, 80098b4 <_Bfree+0x20>
 80098aa:	218a      	movs	r1, #138	; 0x8a
 80098ac:	4b08      	ldr	r3, [pc, #32]	; (80098d0 <_Bfree+0x3c>)
 80098ae:	4809      	ldr	r0, [pc, #36]	; (80098d4 <_Bfree+0x40>)
 80098b0:	f000 fd8e 	bl	800a3d0 <__assert_func>
 80098b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098b8:	6006      	str	r6, [r0, #0]
 80098ba:	60c6      	str	r6, [r0, #12]
 80098bc:	b13c      	cbz	r4, 80098ce <_Bfree+0x3a>
 80098be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098c0:	6862      	ldr	r2, [r4, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098c8:	6021      	str	r1, [r4, #0]
 80098ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	0800bf29 	.word	0x0800bf29
 80098d4:	0800bfac 	.word	0x0800bfac

080098d8 <__multadd>:
 80098d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098dc:	4607      	mov	r7, r0
 80098de:	460c      	mov	r4, r1
 80098e0:	461e      	mov	r6, r3
 80098e2:	2000      	movs	r0, #0
 80098e4:	690d      	ldr	r5, [r1, #16]
 80098e6:	f101 0c14 	add.w	ip, r1, #20
 80098ea:	f8dc 3000 	ldr.w	r3, [ip]
 80098ee:	3001      	adds	r0, #1
 80098f0:	b299      	uxth	r1, r3
 80098f2:	fb02 6101 	mla	r1, r2, r1, r6
 80098f6:	0c1e      	lsrs	r6, r3, #16
 80098f8:	0c0b      	lsrs	r3, r1, #16
 80098fa:	fb02 3306 	mla	r3, r2, r6, r3
 80098fe:	b289      	uxth	r1, r1
 8009900:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009904:	4285      	cmp	r5, r0
 8009906:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800990a:	f84c 1b04 	str.w	r1, [ip], #4
 800990e:	dcec      	bgt.n	80098ea <__multadd+0x12>
 8009910:	b30e      	cbz	r6, 8009956 <__multadd+0x7e>
 8009912:	68a3      	ldr	r3, [r4, #8]
 8009914:	42ab      	cmp	r3, r5
 8009916:	dc19      	bgt.n	800994c <__multadd+0x74>
 8009918:	6861      	ldr	r1, [r4, #4]
 800991a:	4638      	mov	r0, r7
 800991c:	3101      	adds	r1, #1
 800991e:	f7ff ff79 	bl	8009814 <_Balloc>
 8009922:	4680      	mov	r8, r0
 8009924:	b928      	cbnz	r0, 8009932 <__multadd+0x5a>
 8009926:	4602      	mov	r2, r0
 8009928:	21b5      	movs	r1, #181	; 0xb5
 800992a:	4b0c      	ldr	r3, [pc, #48]	; (800995c <__multadd+0x84>)
 800992c:	480c      	ldr	r0, [pc, #48]	; (8009960 <__multadd+0x88>)
 800992e:	f000 fd4f 	bl	800a3d0 <__assert_func>
 8009932:	6922      	ldr	r2, [r4, #16]
 8009934:	f104 010c 	add.w	r1, r4, #12
 8009938:	3202      	adds	r2, #2
 800993a:	0092      	lsls	r2, r2, #2
 800993c:	300c      	adds	r0, #12
 800993e:	f7ff ff5b 	bl	80097f8 <memcpy>
 8009942:	4621      	mov	r1, r4
 8009944:	4638      	mov	r0, r7
 8009946:	f7ff ffa5 	bl	8009894 <_Bfree>
 800994a:	4644      	mov	r4, r8
 800994c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009950:	3501      	adds	r5, #1
 8009952:	615e      	str	r6, [r3, #20]
 8009954:	6125      	str	r5, [r4, #16]
 8009956:	4620      	mov	r0, r4
 8009958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800995c:	0800bf9b 	.word	0x0800bf9b
 8009960:	0800bfac 	.word	0x0800bfac

08009964 <__hi0bits>:
 8009964:	0c02      	lsrs	r2, r0, #16
 8009966:	0412      	lsls	r2, r2, #16
 8009968:	4603      	mov	r3, r0
 800996a:	b9ca      	cbnz	r2, 80099a0 <__hi0bits+0x3c>
 800996c:	0403      	lsls	r3, r0, #16
 800996e:	2010      	movs	r0, #16
 8009970:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009974:	bf04      	itt	eq
 8009976:	021b      	lsleq	r3, r3, #8
 8009978:	3008      	addeq	r0, #8
 800997a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800997e:	bf04      	itt	eq
 8009980:	011b      	lsleq	r3, r3, #4
 8009982:	3004      	addeq	r0, #4
 8009984:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009988:	bf04      	itt	eq
 800998a:	009b      	lsleq	r3, r3, #2
 800998c:	3002      	addeq	r0, #2
 800998e:	2b00      	cmp	r3, #0
 8009990:	db05      	blt.n	800999e <__hi0bits+0x3a>
 8009992:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009996:	f100 0001 	add.w	r0, r0, #1
 800999a:	bf08      	it	eq
 800999c:	2020      	moveq	r0, #32
 800999e:	4770      	bx	lr
 80099a0:	2000      	movs	r0, #0
 80099a2:	e7e5      	b.n	8009970 <__hi0bits+0xc>

080099a4 <__lo0bits>:
 80099a4:	6803      	ldr	r3, [r0, #0]
 80099a6:	4602      	mov	r2, r0
 80099a8:	f013 0007 	ands.w	r0, r3, #7
 80099ac:	d00b      	beq.n	80099c6 <__lo0bits+0x22>
 80099ae:	07d9      	lsls	r1, r3, #31
 80099b0:	d421      	bmi.n	80099f6 <__lo0bits+0x52>
 80099b2:	0798      	lsls	r0, r3, #30
 80099b4:	bf49      	itett	mi
 80099b6:	085b      	lsrmi	r3, r3, #1
 80099b8:	089b      	lsrpl	r3, r3, #2
 80099ba:	2001      	movmi	r0, #1
 80099bc:	6013      	strmi	r3, [r2, #0]
 80099be:	bf5c      	itt	pl
 80099c0:	2002      	movpl	r0, #2
 80099c2:	6013      	strpl	r3, [r2, #0]
 80099c4:	4770      	bx	lr
 80099c6:	b299      	uxth	r1, r3
 80099c8:	b909      	cbnz	r1, 80099ce <__lo0bits+0x2a>
 80099ca:	2010      	movs	r0, #16
 80099cc:	0c1b      	lsrs	r3, r3, #16
 80099ce:	b2d9      	uxtb	r1, r3
 80099d0:	b909      	cbnz	r1, 80099d6 <__lo0bits+0x32>
 80099d2:	3008      	adds	r0, #8
 80099d4:	0a1b      	lsrs	r3, r3, #8
 80099d6:	0719      	lsls	r1, r3, #28
 80099d8:	bf04      	itt	eq
 80099da:	091b      	lsreq	r3, r3, #4
 80099dc:	3004      	addeq	r0, #4
 80099de:	0799      	lsls	r1, r3, #30
 80099e0:	bf04      	itt	eq
 80099e2:	089b      	lsreq	r3, r3, #2
 80099e4:	3002      	addeq	r0, #2
 80099e6:	07d9      	lsls	r1, r3, #31
 80099e8:	d403      	bmi.n	80099f2 <__lo0bits+0x4e>
 80099ea:	085b      	lsrs	r3, r3, #1
 80099ec:	f100 0001 	add.w	r0, r0, #1
 80099f0:	d003      	beq.n	80099fa <__lo0bits+0x56>
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	4770      	bx	lr
 80099f6:	2000      	movs	r0, #0
 80099f8:	4770      	bx	lr
 80099fa:	2020      	movs	r0, #32
 80099fc:	4770      	bx	lr
	...

08009a00 <__i2b>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	460c      	mov	r4, r1
 8009a04:	2101      	movs	r1, #1
 8009a06:	f7ff ff05 	bl	8009814 <_Balloc>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	b928      	cbnz	r0, 8009a1a <__i2b+0x1a>
 8009a0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a12:	4b04      	ldr	r3, [pc, #16]	; (8009a24 <__i2b+0x24>)
 8009a14:	4804      	ldr	r0, [pc, #16]	; (8009a28 <__i2b+0x28>)
 8009a16:	f000 fcdb 	bl	800a3d0 <__assert_func>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	6144      	str	r4, [r0, #20]
 8009a1e:	6103      	str	r3, [r0, #16]
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	bf00      	nop
 8009a24:	0800bf9b 	.word	0x0800bf9b
 8009a28:	0800bfac 	.word	0x0800bfac

08009a2c <__multiply>:
 8009a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a30:	4691      	mov	r9, r2
 8009a32:	690a      	ldr	r2, [r1, #16]
 8009a34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a38:	460c      	mov	r4, r1
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	bfbe      	ittt	lt
 8009a3e:	460b      	movlt	r3, r1
 8009a40:	464c      	movlt	r4, r9
 8009a42:	4699      	movlt	r9, r3
 8009a44:	6927      	ldr	r7, [r4, #16]
 8009a46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	6861      	ldr	r1, [r4, #4]
 8009a4e:	eb07 060a 	add.w	r6, r7, sl
 8009a52:	42b3      	cmp	r3, r6
 8009a54:	b085      	sub	sp, #20
 8009a56:	bfb8      	it	lt
 8009a58:	3101      	addlt	r1, #1
 8009a5a:	f7ff fedb 	bl	8009814 <_Balloc>
 8009a5e:	b930      	cbnz	r0, 8009a6e <__multiply+0x42>
 8009a60:	4602      	mov	r2, r0
 8009a62:	f240 115d 	movw	r1, #349	; 0x15d
 8009a66:	4b43      	ldr	r3, [pc, #268]	; (8009b74 <__multiply+0x148>)
 8009a68:	4843      	ldr	r0, [pc, #268]	; (8009b78 <__multiply+0x14c>)
 8009a6a:	f000 fcb1 	bl	800a3d0 <__assert_func>
 8009a6e:	f100 0514 	add.w	r5, r0, #20
 8009a72:	462b      	mov	r3, r5
 8009a74:	2200      	movs	r2, #0
 8009a76:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a7a:	4543      	cmp	r3, r8
 8009a7c:	d321      	bcc.n	8009ac2 <__multiply+0x96>
 8009a7e:	f104 0314 	add.w	r3, r4, #20
 8009a82:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a86:	f109 0314 	add.w	r3, r9, #20
 8009a8a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a8e:	9202      	str	r2, [sp, #8]
 8009a90:	1b3a      	subs	r2, r7, r4
 8009a92:	3a15      	subs	r2, #21
 8009a94:	f022 0203 	bic.w	r2, r2, #3
 8009a98:	3204      	adds	r2, #4
 8009a9a:	f104 0115 	add.w	r1, r4, #21
 8009a9e:	428f      	cmp	r7, r1
 8009aa0:	bf38      	it	cc
 8009aa2:	2204      	movcc	r2, #4
 8009aa4:	9201      	str	r2, [sp, #4]
 8009aa6:	9a02      	ldr	r2, [sp, #8]
 8009aa8:	9303      	str	r3, [sp, #12]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d80c      	bhi.n	8009ac8 <__multiply+0x9c>
 8009aae:	2e00      	cmp	r6, #0
 8009ab0:	dd03      	ble.n	8009aba <__multiply+0x8e>
 8009ab2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d059      	beq.n	8009b6e <__multiply+0x142>
 8009aba:	6106      	str	r6, [r0, #16]
 8009abc:	b005      	add	sp, #20
 8009abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac2:	f843 2b04 	str.w	r2, [r3], #4
 8009ac6:	e7d8      	b.n	8009a7a <__multiply+0x4e>
 8009ac8:	f8b3 a000 	ldrh.w	sl, [r3]
 8009acc:	f1ba 0f00 	cmp.w	sl, #0
 8009ad0:	d023      	beq.n	8009b1a <__multiply+0xee>
 8009ad2:	46a9      	mov	r9, r5
 8009ad4:	f04f 0c00 	mov.w	ip, #0
 8009ad8:	f104 0e14 	add.w	lr, r4, #20
 8009adc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ae0:	f8d9 1000 	ldr.w	r1, [r9]
 8009ae4:	fa1f fb82 	uxth.w	fp, r2
 8009ae8:	b289      	uxth	r1, r1
 8009aea:	fb0a 110b 	mla	r1, sl, fp, r1
 8009aee:	4461      	add	r1, ip
 8009af0:	f8d9 c000 	ldr.w	ip, [r9]
 8009af4:	0c12      	lsrs	r2, r2, #16
 8009af6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009afa:	fb0a c202 	mla	r2, sl, r2, ip
 8009afe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b02:	b289      	uxth	r1, r1
 8009b04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b08:	4577      	cmp	r7, lr
 8009b0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b0e:	f849 1b04 	str.w	r1, [r9], #4
 8009b12:	d8e3      	bhi.n	8009adc <__multiply+0xb0>
 8009b14:	9a01      	ldr	r2, [sp, #4]
 8009b16:	f845 c002 	str.w	ip, [r5, r2]
 8009b1a:	9a03      	ldr	r2, [sp, #12]
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b22:	f1b9 0f00 	cmp.w	r9, #0
 8009b26:	d020      	beq.n	8009b6a <__multiply+0x13e>
 8009b28:	46ae      	mov	lr, r5
 8009b2a:	f04f 0a00 	mov.w	sl, #0
 8009b2e:	6829      	ldr	r1, [r5, #0]
 8009b30:	f104 0c14 	add.w	ip, r4, #20
 8009b34:	f8bc b000 	ldrh.w	fp, [ip]
 8009b38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b3c:	b289      	uxth	r1, r1
 8009b3e:	fb09 220b 	mla	r2, r9, fp, r2
 8009b42:	4492      	add	sl, r2
 8009b44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b48:	f84e 1b04 	str.w	r1, [lr], #4
 8009b4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b50:	f8be 1000 	ldrh.w	r1, [lr]
 8009b54:	0c12      	lsrs	r2, r2, #16
 8009b56:	fb09 1102 	mla	r1, r9, r2, r1
 8009b5a:	4567      	cmp	r7, ip
 8009b5c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b64:	d8e6      	bhi.n	8009b34 <__multiply+0x108>
 8009b66:	9a01      	ldr	r2, [sp, #4]
 8009b68:	50a9      	str	r1, [r5, r2]
 8009b6a:	3504      	adds	r5, #4
 8009b6c:	e79b      	b.n	8009aa6 <__multiply+0x7a>
 8009b6e:	3e01      	subs	r6, #1
 8009b70:	e79d      	b.n	8009aae <__multiply+0x82>
 8009b72:	bf00      	nop
 8009b74:	0800bf9b 	.word	0x0800bf9b
 8009b78:	0800bfac 	.word	0x0800bfac

08009b7c <__pow5mult>:
 8009b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b80:	4615      	mov	r5, r2
 8009b82:	f012 0203 	ands.w	r2, r2, #3
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	d007      	beq.n	8009b9c <__pow5mult+0x20>
 8009b8c:	4c25      	ldr	r4, [pc, #148]	; (8009c24 <__pow5mult+0xa8>)
 8009b8e:	3a01      	subs	r2, #1
 8009b90:	2300      	movs	r3, #0
 8009b92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b96:	f7ff fe9f 	bl	80098d8 <__multadd>
 8009b9a:	4607      	mov	r7, r0
 8009b9c:	10ad      	asrs	r5, r5, #2
 8009b9e:	d03d      	beq.n	8009c1c <__pow5mult+0xa0>
 8009ba0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ba2:	b97c      	cbnz	r4, 8009bc4 <__pow5mult+0x48>
 8009ba4:	2010      	movs	r0, #16
 8009ba6:	f7ff fe11 	bl	80097cc <malloc>
 8009baa:	4602      	mov	r2, r0
 8009bac:	6270      	str	r0, [r6, #36]	; 0x24
 8009bae:	b928      	cbnz	r0, 8009bbc <__pow5mult+0x40>
 8009bb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009bb4:	4b1c      	ldr	r3, [pc, #112]	; (8009c28 <__pow5mult+0xac>)
 8009bb6:	481d      	ldr	r0, [pc, #116]	; (8009c2c <__pow5mult+0xb0>)
 8009bb8:	f000 fc0a 	bl	800a3d0 <__assert_func>
 8009bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bc0:	6004      	str	r4, [r0, #0]
 8009bc2:	60c4      	str	r4, [r0, #12]
 8009bc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bcc:	b94c      	cbnz	r4, 8009be2 <__pow5mult+0x66>
 8009bce:	f240 2171 	movw	r1, #625	; 0x271
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7ff ff14 	bl	8009a00 <__i2b>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	4604      	mov	r4, r0
 8009bdc:	f8c8 0008 	str.w	r0, [r8, #8]
 8009be0:	6003      	str	r3, [r0, #0]
 8009be2:	f04f 0900 	mov.w	r9, #0
 8009be6:	07eb      	lsls	r3, r5, #31
 8009be8:	d50a      	bpl.n	8009c00 <__pow5mult+0x84>
 8009bea:	4639      	mov	r1, r7
 8009bec:	4622      	mov	r2, r4
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f7ff ff1c 	bl	8009a2c <__multiply>
 8009bf4:	4680      	mov	r8, r0
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff fe4b 	bl	8009894 <_Bfree>
 8009bfe:	4647      	mov	r7, r8
 8009c00:	106d      	asrs	r5, r5, #1
 8009c02:	d00b      	beq.n	8009c1c <__pow5mult+0xa0>
 8009c04:	6820      	ldr	r0, [r4, #0]
 8009c06:	b938      	cbnz	r0, 8009c18 <__pow5mult+0x9c>
 8009c08:	4622      	mov	r2, r4
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f7ff ff0d 	bl	8009a2c <__multiply>
 8009c12:	6020      	str	r0, [r4, #0]
 8009c14:	f8c0 9000 	str.w	r9, [r0]
 8009c18:	4604      	mov	r4, r0
 8009c1a:	e7e4      	b.n	8009be6 <__pow5mult+0x6a>
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c22:	bf00      	nop
 8009c24:	0800c0f8 	.word	0x0800c0f8
 8009c28:	0800bf29 	.word	0x0800bf29
 8009c2c:	0800bfac 	.word	0x0800bfac

08009c30 <__lshift>:
 8009c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c34:	460c      	mov	r4, r1
 8009c36:	4607      	mov	r7, r0
 8009c38:	4691      	mov	r9, r2
 8009c3a:	6923      	ldr	r3, [r4, #16]
 8009c3c:	6849      	ldr	r1, [r1, #4]
 8009c3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c42:	68a3      	ldr	r3, [r4, #8]
 8009c44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c48:	f108 0601 	add.w	r6, r8, #1
 8009c4c:	42b3      	cmp	r3, r6
 8009c4e:	db0b      	blt.n	8009c68 <__lshift+0x38>
 8009c50:	4638      	mov	r0, r7
 8009c52:	f7ff fddf 	bl	8009814 <_Balloc>
 8009c56:	4605      	mov	r5, r0
 8009c58:	b948      	cbnz	r0, 8009c6e <__lshift+0x3e>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c60:	4b29      	ldr	r3, [pc, #164]	; (8009d08 <__lshift+0xd8>)
 8009c62:	482a      	ldr	r0, [pc, #168]	; (8009d0c <__lshift+0xdc>)
 8009c64:	f000 fbb4 	bl	800a3d0 <__assert_func>
 8009c68:	3101      	adds	r1, #1
 8009c6a:	005b      	lsls	r3, r3, #1
 8009c6c:	e7ee      	b.n	8009c4c <__lshift+0x1c>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f100 0114 	add.w	r1, r0, #20
 8009c74:	f100 0210 	add.w	r2, r0, #16
 8009c78:	4618      	mov	r0, r3
 8009c7a:	4553      	cmp	r3, sl
 8009c7c:	db37      	blt.n	8009cee <__lshift+0xbe>
 8009c7e:	6920      	ldr	r0, [r4, #16]
 8009c80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c84:	f104 0314 	add.w	r3, r4, #20
 8009c88:	f019 091f 	ands.w	r9, r9, #31
 8009c8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c94:	d02f      	beq.n	8009cf6 <__lshift+0xc6>
 8009c96:	468a      	mov	sl, r1
 8009c98:	f04f 0c00 	mov.w	ip, #0
 8009c9c:	f1c9 0e20 	rsb	lr, r9, #32
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	fa02 f209 	lsl.w	r2, r2, r9
 8009ca6:	ea42 020c 	orr.w	r2, r2, ip
 8009caa:	f84a 2b04 	str.w	r2, [sl], #4
 8009cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb2:	4298      	cmp	r0, r3
 8009cb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009cb8:	d8f2      	bhi.n	8009ca0 <__lshift+0x70>
 8009cba:	1b03      	subs	r3, r0, r4
 8009cbc:	3b15      	subs	r3, #21
 8009cbe:	f023 0303 	bic.w	r3, r3, #3
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	f104 0215 	add.w	r2, r4, #21
 8009cc8:	4290      	cmp	r0, r2
 8009cca:	bf38      	it	cc
 8009ccc:	2304      	movcc	r3, #4
 8009cce:	f841 c003 	str.w	ip, [r1, r3]
 8009cd2:	f1bc 0f00 	cmp.w	ip, #0
 8009cd6:	d001      	beq.n	8009cdc <__lshift+0xac>
 8009cd8:	f108 0602 	add.w	r6, r8, #2
 8009cdc:	3e01      	subs	r6, #1
 8009cde:	4638      	mov	r0, r7
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	612e      	str	r6, [r5, #16]
 8009ce4:	f7ff fdd6 	bl	8009894 <_Bfree>
 8009ce8:	4628      	mov	r0, r5
 8009cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cee:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	e7c1      	b.n	8009c7a <__lshift+0x4a>
 8009cf6:	3904      	subs	r1, #4
 8009cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cfc:	4298      	cmp	r0, r3
 8009cfe:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d02:	d8f9      	bhi.n	8009cf8 <__lshift+0xc8>
 8009d04:	e7ea      	b.n	8009cdc <__lshift+0xac>
 8009d06:	bf00      	nop
 8009d08:	0800bf9b 	.word	0x0800bf9b
 8009d0c:	0800bfac 	.word	0x0800bfac

08009d10 <__mcmp>:
 8009d10:	4603      	mov	r3, r0
 8009d12:	690a      	ldr	r2, [r1, #16]
 8009d14:	6900      	ldr	r0, [r0, #16]
 8009d16:	b530      	push	{r4, r5, lr}
 8009d18:	1a80      	subs	r0, r0, r2
 8009d1a:	d10d      	bne.n	8009d38 <__mcmp+0x28>
 8009d1c:	3314      	adds	r3, #20
 8009d1e:	3114      	adds	r1, #20
 8009d20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d30:	4295      	cmp	r5, r2
 8009d32:	d002      	beq.n	8009d3a <__mcmp+0x2a>
 8009d34:	d304      	bcc.n	8009d40 <__mcmp+0x30>
 8009d36:	2001      	movs	r0, #1
 8009d38:	bd30      	pop	{r4, r5, pc}
 8009d3a:	42a3      	cmp	r3, r4
 8009d3c:	d3f4      	bcc.n	8009d28 <__mcmp+0x18>
 8009d3e:	e7fb      	b.n	8009d38 <__mcmp+0x28>
 8009d40:	f04f 30ff 	mov.w	r0, #4294967295
 8009d44:	e7f8      	b.n	8009d38 <__mcmp+0x28>
	...

08009d48 <__mdiff>:
 8009d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	4607      	mov	r7, r0
 8009d50:	4611      	mov	r1, r2
 8009d52:	4628      	mov	r0, r5
 8009d54:	4614      	mov	r4, r2
 8009d56:	f7ff ffdb 	bl	8009d10 <__mcmp>
 8009d5a:	1e06      	subs	r6, r0, #0
 8009d5c:	d111      	bne.n	8009d82 <__mdiff+0x3a>
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4638      	mov	r0, r7
 8009d62:	f7ff fd57 	bl	8009814 <_Balloc>
 8009d66:	4602      	mov	r2, r0
 8009d68:	b928      	cbnz	r0, 8009d76 <__mdiff+0x2e>
 8009d6a:	f240 2132 	movw	r1, #562	; 0x232
 8009d6e:	4b3a      	ldr	r3, [pc, #232]	; (8009e58 <__mdiff+0x110>)
 8009d70:	483a      	ldr	r0, [pc, #232]	; (8009e5c <__mdiff+0x114>)
 8009d72:	f000 fb2d 	bl	800a3d0 <__assert_func>
 8009d76:	2301      	movs	r3, #1
 8009d78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d82:	bfa4      	itt	ge
 8009d84:	4623      	movge	r3, r4
 8009d86:	462c      	movge	r4, r5
 8009d88:	4638      	mov	r0, r7
 8009d8a:	6861      	ldr	r1, [r4, #4]
 8009d8c:	bfa6      	itte	ge
 8009d8e:	461d      	movge	r5, r3
 8009d90:	2600      	movge	r6, #0
 8009d92:	2601      	movlt	r6, #1
 8009d94:	f7ff fd3e 	bl	8009814 <_Balloc>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	b918      	cbnz	r0, 8009da4 <__mdiff+0x5c>
 8009d9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009da0:	4b2d      	ldr	r3, [pc, #180]	; (8009e58 <__mdiff+0x110>)
 8009da2:	e7e5      	b.n	8009d70 <__mdiff+0x28>
 8009da4:	f102 0814 	add.w	r8, r2, #20
 8009da8:	46c2      	mov	sl, r8
 8009daa:	f04f 0c00 	mov.w	ip, #0
 8009dae:	6927      	ldr	r7, [r4, #16]
 8009db0:	60c6      	str	r6, [r0, #12]
 8009db2:	692e      	ldr	r6, [r5, #16]
 8009db4:	f104 0014 	add.w	r0, r4, #20
 8009db8:	f105 0914 	add.w	r9, r5, #20
 8009dbc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009dc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009dc4:	3410      	adds	r4, #16
 8009dc6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009dca:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dce:	fa1f f18b 	uxth.w	r1, fp
 8009dd2:	448c      	add	ip, r1
 8009dd4:	b299      	uxth	r1, r3
 8009dd6:	0c1b      	lsrs	r3, r3, #16
 8009dd8:	ebac 0101 	sub.w	r1, ip, r1
 8009ddc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009de0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009de4:	b289      	uxth	r1, r1
 8009de6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009dea:	454e      	cmp	r6, r9
 8009dec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009df0:	f84a 3b04 	str.w	r3, [sl], #4
 8009df4:	d8e7      	bhi.n	8009dc6 <__mdiff+0x7e>
 8009df6:	1b73      	subs	r3, r6, r5
 8009df8:	3b15      	subs	r3, #21
 8009dfa:	f023 0303 	bic.w	r3, r3, #3
 8009dfe:	3515      	adds	r5, #21
 8009e00:	3304      	adds	r3, #4
 8009e02:	42ae      	cmp	r6, r5
 8009e04:	bf38      	it	cc
 8009e06:	2304      	movcc	r3, #4
 8009e08:	4418      	add	r0, r3
 8009e0a:	4443      	add	r3, r8
 8009e0c:	461e      	mov	r6, r3
 8009e0e:	4605      	mov	r5, r0
 8009e10:	4575      	cmp	r5, lr
 8009e12:	d30e      	bcc.n	8009e32 <__mdiff+0xea>
 8009e14:	f10e 0103 	add.w	r1, lr, #3
 8009e18:	1a09      	subs	r1, r1, r0
 8009e1a:	f021 0103 	bic.w	r1, r1, #3
 8009e1e:	3803      	subs	r0, #3
 8009e20:	4586      	cmp	lr, r0
 8009e22:	bf38      	it	cc
 8009e24:	2100      	movcc	r1, #0
 8009e26:	4419      	add	r1, r3
 8009e28:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009e2c:	b18b      	cbz	r3, 8009e52 <__mdiff+0x10a>
 8009e2e:	6117      	str	r7, [r2, #16]
 8009e30:	e7a4      	b.n	8009d7c <__mdiff+0x34>
 8009e32:	f855 8b04 	ldr.w	r8, [r5], #4
 8009e36:	fa1f f188 	uxth.w	r1, r8
 8009e3a:	4461      	add	r1, ip
 8009e3c:	140c      	asrs	r4, r1, #16
 8009e3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e42:	b289      	uxth	r1, r1
 8009e44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009e48:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009e4c:	f846 1b04 	str.w	r1, [r6], #4
 8009e50:	e7de      	b.n	8009e10 <__mdiff+0xc8>
 8009e52:	3f01      	subs	r7, #1
 8009e54:	e7e8      	b.n	8009e28 <__mdiff+0xe0>
 8009e56:	bf00      	nop
 8009e58:	0800bf9b 	.word	0x0800bf9b
 8009e5c:	0800bfac 	.word	0x0800bfac

08009e60 <__d2b>:
 8009e60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009e64:	2101      	movs	r1, #1
 8009e66:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009e6a:	4690      	mov	r8, r2
 8009e6c:	461d      	mov	r5, r3
 8009e6e:	f7ff fcd1 	bl	8009814 <_Balloc>
 8009e72:	4604      	mov	r4, r0
 8009e74:	b930      	cbnz	r0, 8009e84 <__d2b+0x24>
 8009e76:	4602      	mov	r2, r0
 8009e78:	f240 310a 	movw	r1, #778	; 0x30a
 8009e7c:	4b24      	ldr	r3, [pc, #144]	; (8009f10 <__d2b+0xb0>)
 8009e7e:	4825      	ldr	r0, [pc, #148]	; (8009f14 <__d2b+0xb4>)
 8009e80:	f000 faa6 	bl	800a3d0 <__assert_func>
 8009e84:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009e88:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009e8c:	bb2d      	cbnz	r5, 8009eda <__d2b+0x7a>
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	f1b8 0300 	subs.w	r3, r8, #0
 8009e94:	d026      	beq.n	8009ee4 <__d2b+0x84>
 8009e96:	4668      	mov	r0, sp
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	f7ff fd83 	bl	80099a4 <__lo0bits>
 8009e9e:	9900      	ldr	r1, [sp, #0]
 8009ea0:	b1f0      	cbz	r0, 8009ee0 <__d2b+0x80>
 8009ea2:	9a01      	ldr	r2, [sp, #4]
 8009ea4:	f1c0 0320 	rsb	r3, r0, #32
 8009ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eac:	430b      	orrs	r3, r1
 8009eae:	40c2      	lsrs	r2, r0
 8009eb0:	6163      	str	r3, [r4, #20]
 8009eb2:	9201      	str	r2, [sp, #4]
 8009eb4:	9b01      	ldr	r3, [sp, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bf14      	ite	ne
 8009eba:	2102      	movne	r1, #2
 8009ebc:	2101      	moveq	r1, #1
 8009ebe:	61a3      	str	r3, [r4, #24]
 8009ec0:	6121      	str	r1, [r4, #16]
 8009ec2:	b1c5      	cbz	r5, 8009ef6 <__d2b+0x96>
 8009ec4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ec8:	4405      	add	r5, r0
 8009eca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ece:	603d      	str	r5, [r7, #0]
 8009ed0:	6030      	str	r0, [r6, #0]
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	b002      	add	sp, #8
 8009ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ede:	e7d6      	b.n	8009e8e <__d2b+0x2e>
 8009ee0:	6161      	str	r1, [r4, #20]
 8009ee2:	e7e7      	b.n	8009eb4 <__d2b+0x54>
 8009ee4:	a801      	add	r0, sp, #4
 8009ee6:	f7ff fd5d 	bl	80099a4 <__lo0bits>
 8009eea:	2101      	movs	r1, #1
 8009eec:	9b01      	ldr	r3, [sp, #4]
 8009eee:	6121      	str	r1, [r4, #16]
 8009ef0:	6163      	str	r3, [r4, #20]
 8009ef2:	3020      	adds	r0, #32
 8009ef4:	e7e5      	b.n	8009ec2 <__d2b+0x62>
 8009ef6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009efa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009efe:	6038      	str	r0, [r7, #0]
 8009f00:	6918      	ldr	r0, [r3, #16]
 8009f02:	f7ff fd2f 	bl	8009964 <__hi0bits>
 8009f06:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009f0a:	6031      	str	r1, [r6, #0]
 8009f0c:	e7e1      	b.n	8009ed2 <__d2b+0x72>
 8009f0e:	bf00      	nop
 8009f10:	0800bf9b 	.word	0x0800bf9b
 8009f14:	0800bfac 	.word	0x0800bfac

08009f18 <_calloc_r>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	fba1 5402 	umull	r5, r4, r1, r2
 8009f1e:	b934      	cbnz	r4, 8009f2e <_calloc_r+0x16>
 8009f20:	4629      	mov	r1, r5
 8009f22:	f000 f875 	bl	800a010 <_malloc_r>
 8009f26:	4606      	mov	r6, r0
 8009f28:	b928      	cbnz	r0, 8009f36 <_calloc_r+0x1e>
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	bd70      	pop	{r4, r5, r6, pc}
 8009f2e:	220c      	movs	r2, #12
 8009f30:	2600      	movs	r6, #0
 8009f32:	6002      	str	r2, [r0, #0]
 8009f34:	e7f9      	b.n	8009f2a <_calloc_r+0x12>
 8009f36:	462a      	mov	r2, r5
 8009f38:	4621      	mov	r1, r4
 8009f3a:	f7fe f941 	bl	80081c0 <memset>
 8009f3e:	e7f4      	b.n	8009f2a <_calloc_r+0x12>

08009f40 <_free_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4605      	mov	r5, r0
 8009f44:	2900      	cmp	r1, #0
 8009f46:	d040      	beq.n	8009fca <_free_r+0x8a>
 8009f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f4c:	1f0c      	subs	r4, r1, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	bfb8      	it	lt
 8009f52:	18e4      	addlt	r4, r4, r3
 8009f54:	f000 fa98 	bl	800a488 <__malloc_lock>
 8009f58:	4a1c      	ldr	r2, [pc, #112]	; (8009fcc <_free_r+0x8c>)
 8009f5a:	6813      	ldr	r3, [r2, #0]
 8009f5c:	b933      	cbnz	r3, 8009f6c <_free_r+0x2c>
 8009f5e:	6063      	str	r3, [r4, #4]
 8009f60:	6014      	str	r4, [r2, #0]
 8009f62:	4628      	mov	r0, r5
 8009f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f68:	f000 ba94 	b.w	800a494 <__malloc_unlock>
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d908      	bls.n	8009f82 <_free_r+0x42>
 8009f70:	6820      	ldr	r0, [r4, #0]
 8009f72:	1821      	adds	r1, r4, r0
 8009f74:	428b      	cmp	r3, r1
 8009f76:	bf01      	itttt	eq
 8009f78:	6819      	ldreq	r1, [r3, #0]
 8009f7a:	685b      	ldreq	r3, [r3, #4]
 8009f7c:	1809      	addeq	r1, r1, r0
 8009f7e:	6021      	streq	r1, [r4, #0]
 8009f80:	e7ed      	b.n	8009f5e <_free_r+0x1e>
 8009f82:	461a      	mov	r2, r3
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	b10b      	cbz	r3, 8009f8c <_free_r+0x4c>
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	d9fa      	bls.n	8009f82 <_free_r+0x42>
 8009f8c:	6811      	ldr	r1, [r2, #0]
 8009f8e:	1850      	adds	r0, r2, r1
 8009f90:	42a0      	cmp	r0, r4
 8009f92:	d10b      	bne.n	8009fac <_free_r+0x6c>
 8009f94:	6820      	ldr	r0, [r4, #0]
 8009f96:	4401      	add	r1, r0
 8009f98:	1850      	adds	r0, r2, r1
 8009f9a:	4283      	cmp	r3, r0
 8009f9c:	6011      	str	r1, [r2, #0]
 8009f9e:	d1e0      	bne.n	8009f62 <_free_r+0x22>
 8009fa0:	6818      	ldr	r0, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	4401      	add	r1, r0
 8009fa6:	6011      	str	r1, [r2, #0]
 8009fa8:	6053      	str	r3, [r2, #4]
 8009faa:	e7da      	b.n	8009f62 <_free_r+0x22>
 8009fac:	d902      	bls.n	8009fb4 <_free_r+0x74>
 8009fae:	230c      	movs	r3, #12
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	e7d6      	b.n	8009f62 <_free_r+0x22>
 8009fb4:	6820      	ldr	r0, [r4, #0]
 8009fb6:	1821      	adds	r1, r4, r0
 8009fb8:	428b      	cmp	r3, r1
 8009fba:	bf01      	itttt	eq
 8009fbc:	6819      	ldreq	r1, [r3, #0]
 8009fbe:	685b      	ldreq	r3, [r3, #4]
 8009fc0:	1809      	addeq	r1, r1, r0
 8009fc2:	6021      	streq	r1, [r4, #0]
 8009fc4:	6063      	str	r3, [r4, #4]
 8009fc6:	6054      	str	r4, [r2, #4]
 8009fc8:	e7cb      	b.n	8009f62 <_free_r+0x22>
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	200023ec 	.word	0x200023ec

08009fd0 <sbrk_aligned>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	4e0e      	ldr	r6, [pc, #56]	; (800a00c <sbrk_aligned+0x3c>)
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	6831      	ldr	r1, [r6, #0]
 8009fd8:	4605      	mov	r5, r0
 8009fda:	b911      	cbnz	r1, 8009fe2 <sbrk_aligned+0x12>
 8009fdc:	f000 f9e8 	bl	800a3b0 <_sbrk_r>
 8009fe0:	6030      	str	r0, [r6, #0]
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f000 f9e3 	bl	800a3b0 <_sbrk_r>
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	d00a      	beq.n	800a004 <sbrk_aligned+0x34>
 8009fee:	1cc4      	adds	r4, r0, #3
 8009ff0:	f024 0403 	bic.w	r4, r4, #3
 8009ff4:	42a0      	cmp	r0, r4
 8009ff6:	d007      	beq.n	800a008 <sbrk_aligned+0x38>
 8009ff8:	1a21      	subs	r1, r4, r0
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f000 f9d8 	bl	800a3b0 <_sbrk_r>
 800a000:	3001      	adds	r0, #1
 800a002:	d101      	bne.n	800a008 <sbrk_aligned+0x38>
 800a004:	f04f 34ff 	mov.w	r4, #4294967295
 800a008:	4620      	mov	r0, r4
 800a00a:	bd70      	pop	{r4, r5, r6, pc}
 800a00c:	200023f0 	.word	0x200023f0

0800a010 <_malloc_r>:
 800a010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a014:	1ccd      	adds	r5, r1, #3
 800a016:	f025 0503 	bic.w	r5, r5, #3
 800a01a:	3508      	adds	r5, #8
 800a01c:	2d0c      	cmp	r5, #12
 800a01e:	bf38      	it	cc
 800a020:	250c      	movcc	r5, #12
 800a022:	2d00      	cmp	r5, #0
 800a024:	4607      	mov	r7, r0
 800a026:	db01      	blt.n	800a02c <_malloc_r+0x1c>
 800a028:	42a9      	cmp	r1, r5
 800a02a:	d905      	bls.n	800a038 <_malloc_r+0x28>
 800a02c:	230c      	movs	r3, #12
 800a02e:	2600      	movs	r6, #0
 800a030:	603b      	str	r3, [r7, #0]
 800a032:	4630      	mov	r0, r6
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	4e2e      	ldr	r6, [pc, #184]	; (800a0f4 <_malloc_r+0xe4>)
 800a03a:	f000 fa25 	bl	800a488 <__malloc_lock>
 800a03e:	6833      	ldr	r3, [r6, #0]
 800a040:	461c      	mov	r4, r3
 800a042:	bb34      	cbnz	r4, 800a092 <_malloc_r+0x82>
 800a044:	4629      	mov	r1, r5
 800a046:	4638      	mov	r0, r7
 800a048:	f7ff ffc2 	bl	8009fd0 <sbrk_aligned>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	4604      	mov	r4, r0
 800a050:	d14d      	bne.n	800a0ee <_malloc_r+0xde>
 800a052:	6834      	ldr	r4, [r6, #0]
 800a054:	4626      	mov	r6, r4
 800a056:	2e00      	cmp	r6, #0
 800a058:	d140      	bne.n	800a0dc <_malloc_r+0xcc>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	4631      	mov	r1, r6
 800a05e:	4638      	mov	r0, r7
 800a060:	eb04 0803 	add.w	r8, r4, r3
 800a064:	f000 f9a4 	bl	800a3b0 <_sbrk_r>
 800a068:	4580      	cmp	r8, r0
 800a06a:	d13a      	bne.n	800a0e2 <_malloc_r+0xd2>
 800a06c:	6821      	ldr	r1, [r4, #0]
 800a06e:	3503      	adds	r5, #3
 800a070:	1a6d      	subs	r5, r5, r1
 800a072:	f025 0503 	bic.w	r5, r5, #3
 800a076:	3508      	adds	r5, #8
 800a078:	2d0c      	cmp	r5, #12
 800a07a:	bf38      	it	cc
 800a07c:	250c      	movcc	r5, #12
 800a07e:	4638      	mov	r0, r7
 800a080:	4629      	mov	r1, r5
 800a082:	f7ff ffa5 	bl	8009fd0 <sbrk_aligned>
 800a086:	3001      	adds	r0, #1
 800a088:	d02b      	beq.n	800a0e2 <_malloc_r+0xd2>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	442b      	add	r3, r5
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	e00e      	b.n	800a0b0 <_malloc_r+0xa0>
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	1b52      	subs	r2, r2, r5
 800a096:	d41e      	bmi.n	800a0d6 <_malloc_r+0xc6>
 800a098:	2a0b      	cmp	r2, #11
 800a09a:	d916      	bls.n	800a0ca <_malloc_r+0xba>
 800a09c:	1961      	adds	r1, r4, r5
 800a09e:	42a3      	cmp	r3, r4
 800a0a0:	6025      	str	r5, [r4, #0]
 800a0a2:	bf18      	it	ne
 800a0a4:	6059      	strne	r1, [r3, #4]
 800a0a6:	6863      	ldr	r3, [r4, #4]
 800a0a8:	bf08      	it	eq
 800a0aa:	6031      	streq	r1, [r6, #0]
 800a0ac:	5162      	str	r2, [r4, r5]
 800a0ae:	604b      	str	r3, [r1, #4]
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	f104 060b 	add.w	r6, r4, #11
 800a0b6:	f000 f9ed 	bl	800a494 <__malloc_unlock>
 800a0ba:	f026 0607 	bic.w	r6, r6, #7
 800a0be:	1d23      	adds	r3, r4, #4
 800a0c0:	1af2      	subs	r2, r6, r3
 800a0c2:	d0b6      	beq.n	800a032 <_malloc_r+0x22>
 800a0c4:	1b9b      	subs	r3, r3, r6
 800a0c6:	50a3      	str	r3, [r4, r2]
 800a0c8:	e7b3      	b.n	800a032 <_malloc_r+0x22>
 800a0ca:	6862      	ldr	r2, [r4, #4]
 800a0cc:	42a3      	cmp	r3, r4
 800a0ce:	bf0c      	ite	eq
 800a0d0:	6032      	streq	r2, [r6, #0]
 800a0d2:	605a      	strne	r2, [r3, #4]
 800a0d4:	e7ec      	b.n	800a0b0 <_malloc_r+0xa0>
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	6864      	ldr	r4, [r4, #4]
 800a0da:	e7b2      	b.n	800a042 <_malloc_r+0x32>
 800a0dc:	4634      	mov	r4, r6
 800a0de:	6876      	ldr	r6, [r6, #4]
 800a0e0:	e7b9      	b.n	800a056 <_malloc_r+0x46>
 800a0e2:	230c      	movs	r3, #12
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	603b      	str	r3, [r7, #0]
 800a0e8:	f000 f9d4 	bl	800a494 <__malloc_unlock>
 800a0ec:	e7a1      	b.n	800a032 <_malloc_r+0x22>
 800a0ee:	6025      	str	r5, [r4, #0]
 800a0f0:	e7de      	b.n	800a0b0 <_malloc_r+0xa0>
 800a0f2:	bf00      	nop
 800a0f4:	200023ec 	.word	0x200023ec

0800a0f8 <__ssputs_r>:
 800a0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0fc:	688e      	ldr	r6, [r1, #8]
 800a0fe:	4682      	mov	sl, r0
 800a100:	429e      	cmp	r6, r3
 800a102:	460c      	mov	r4, r1
 800a104:	4690      	mov	r8, r2
 800a106:	461f      	mov	r7, r3
 800a108:	d838      	bhi.n	800a17c <__ssputs_r+0x84>
 800a10a:	898a      	ldrh	r2, [r1, #12]
 800a10c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a110:	d032      	beq.n	800a178 <__ssputs_r+0x80>
 800a112:	6825      	ldr	r5, [r4, #0]
 800a114:	6909      	ldr	r1, [r1, #16]
 800a116:	3301      	adds	r3, #1
 800a118:	eba5 0901 	sub.w	r9, r5, r1
 800a11c:	6965      	ldr	r5, [r4, #20]
 800a11e:	444b      	add	r3, r9
 800a120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a124:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a128:	106d      	asrs	r5, r5, #1
 800a12a:	429d      	cmp	r5, r3
 800a12c:	bf38      	it	cc
 800a12e:	461d      	movcc	r5, r3
 800a130:	0553      	lsls	r3, r2, #21
 800a132:	d531      	bpl.n	800a198 <__ssputs_r+0xa0>
 800a134:	4629      	mov	r1, r5
 800a136:	f7ff ff6b 	bl	800a010 <_malloc_r>
 800a13a:	4606      	mov	r6, r0
 800a13c:	b950      	cbnz	r0, 800a154 <__ssputs_r+0x5c>
 800a13e:	230c      	movs	r3, #12
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
 800a144:	f8ca 3000 	str.w	r3, [sl]
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a154:	464a      	mov	r2, r9
 800a156:	6921      	ldr	r1, [r4, #16]
 800a158:	f7ff fb4e 	bl	80097f8 <memcpy>
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a166:	81a3      	strh	r3, [r4, #12]
 800a168:	6126      	str	r6, [r4, #16]
 800a16a:	444e      	add	r6, r9
 800a16c:	6026      	str	r6, [r4, #0]
 800a16e:	463e      	mov	r6, r7
 800a170:	6165      	str	r5, [r4, #20]
 800a172:	eba5 0509 	sub.w	r5, r5, r9
 800a176:	60a5      	str	r5, [r4, #8]
 800a178:	42be      	cmp	r6, r7
 800a17a:	d900      	bls.n	800a17e <__ssputs_r+0x86>
 800a17c:	463e      	mov	r6, r7
 800a17e:	4632      	mov	r2, r6
 800a180:	4641      	mov	r1, r8
 800a182:	6820      	ldr	r0, [r4, #0]
 800a184:	f000 f966 	bl	800a454 <memmove>
 800a188:	68a3      	ldr	r3, [r4, #8]
 800a18a:	2000      	movs	r0, #0
 800a18c:	1b9b      	subs	r3, r3, r6
 800a18e:	60a3      	str	r3, [r4, #8]
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	4433      	add	r3, r6
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	e7db      	b.n	800a150 <__ssputs_r+0x58>
 800a198:	462a      	mov	r2, r5
 800a19a:	f000 f981 	bl	800a4a0 <_realloc_r>
 800a19e:	4606      	mov	r6, r0
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d1e1      	bne.n	800a168 <__ssputs_r+0x70>
 800a1a4:	4650      	mov	r0, sl
 800a1a6:	6921      	ldr	r1, [r4, #16]
 800a1a8:	f7ff feca 	bl	8009f40 <_free_r>
 800a1ac:	e7c7      	b.n	800a13e <__ssputs_r+0x46>
	...

0800a1b0 <_svfiprintf_r>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	4698      	mov	r8, r3
 800a1b6:	898b      	ldrh	r3, [r1, #12]
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	061b      	lsls	r3, r3, #24
 800a1bc:	460d      	mov	r5, r1
 800a1be:	4614      	mov	r4, r2
 800a1c0:	b09d      	sub	sp, #116	; 0x74
 800a1c2:	d50e      	bpl.n	800a1e2 <_svfiprintf_r+0x32>
 800a1c4:	690b      	ldr	r3, [r1, #16]
 800a1c6:	b963      	cbnz	r3, 800a1e2 <_svfiprintf_r+0x32>
 800a1c8:	2140      	movs	r1, #64	; 0x40
 800a1ca:	f7ff ff21 	bl	800a010 <_malloc_r>
 800a1ce:	6028      	str	r0, [r5, #0]
 800a1d0:	6128      	str	r0, [r5, #16]
 800a1d2:	b920      	cbnz	r0, 800a1de <_svfiprintf_r+0x2e>
 800a1d4:	230c      	movs	r3, #12
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1dc:	e0d1      	b.n	800a382 <_svfiprintf_r+0x1d2>
 800a1de:	2340      	movs	r3, #64	; 0x40
 800a1e0:	616b      	str	r3, [r5, #20]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e6:	2320      	movs	r3, #32
 800a1e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1ec:	2330      	movs	r3, #48	; 0x30
 800a1ee:	f04f 0901 	mov.w	r9, #1
 800a1f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a39c <_svfiprintf_r+0x1ec>
 800a1fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1fe:	4623      	mov	r3, r4
 800a200:	469a      	mov	sl, r3
 800a202:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a206:	b10a      	cbz	r2, 800a20c <_svfiprintf_r+0x5c>
 800a208:	2a25      	cmp	r2, #37	; 0x25
 800a20a:	d1f9      	bne.n	800a200 <_svfiprintf_r+0x50>
 800a20c:	ebba 0b04 	subs.w	fp, sl, r4
 800a210:	d00b      	beq.n	800a22a <_svfiprintf_r+0x7a>
 800a212:	465b      	mov	r3, fp
 800a214:	4622      	mov	r2, r4
 800a216:	4629      	mov	r1, r5
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff ff6d 	bl	800a0f8 <__ssputs_r>
 800a21e:	3001      	adds	r0, #1
 800a220:	f000 80aa 	beq.w	800a378 <_svfiprintf_r+0x1c8>
 800a224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a226:	445a      	add	r2, fp
 800a228:	9209      	str	r2, [sp, #36]	; 0x24
 800a22a:	f89a 3000 	ldrb.w	r3, [sl]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 80a2 	beq.w	800a378 <_svfiprintf_r+0x1c8>
 800a234:	2300      	movs	r3, #0
 800a236:	f04f 32ff 	mov.w	r2, #4294967295
 800a23a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a23e:	f10a 0a01 	add.w	sl, sl, #1
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	9307      	str	r3, [sp, #28]
 800a246:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a24a:	931a      	str	r3, [sp, #104]	; 0x68
 800a24c:	4654      	mov	r4, sl
 800a24e:	2205      	movs	r2, #5
 800a250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a254:	4851      	ldr	r0, [pc, #324]	; (800a39c <_svfiprintf_r+0x1ec>)
 800a256:	f7ff fac1 	bl	80097dc <memchr>
 800a25a:	9a04      	ldr	r2, [sp, #16]
 800a25c:	b9d8      	cbnz	r0, 800a296 <_svfiprintf_r+0xe6>
 800a25e:	06d0      	lsls	r0, r2, #27
 800a260:	bf44      	itt	mi
 800a262:	2320      	movmi	r3, #32
 800a264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a268:	0711      	lsls	r1, r2, #28
 800a26a:	bf44      	itt	mi
 800a26c:	232b      	movmi	r3, #43	; 0x2b
 800a26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a272:	f89a 3000 	ldrb.w	r3, [sl]
 800a276:	2b2a      	cmp	r3, #42	; 0x2a
 800a278:	d015      	beq.n	800a2a6 <_svfiprintf_r+0xf6>
 800a27a:	4654      	mov	r4, sl
 800a27c:	2000      	movs	r0, #0
 800a27e:	f04f 0c0a 	mov.w	ip, #10
 800a282:	9a07      	ldr	r2, [sp, #28]
 800a284:	4621      	mov	r1, r4
 800a286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a28a:	3b30      	subs	r3, #48	; 0x30
 800a28c:	2b09      	cmp	r3, #9
 800a28e:	d94e      	bls.n	800a32e <_svfiprintf_r+0x17e>
 800a290:	b1b0      	cbz	r0, 800a2c0 <_svfiprintf_r+0x110>
 800a292:	9207      	str	r2, [sp, #28]
 800a294:	e014      	b.n	800a2c0 <_svfiprintf_r+0x110>
 800a296:	eba0 0308 	sub.w	r3, r0, r8
 800a29a:	fa09 f303 	lsl.w	r3, r9, r3
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	46a2      	mov	sl, r4
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	e7d2      	b.n	800a24c <_svfiprintf_r+0x9c>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	1d19      	adds	r1, r3, #4
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	9103      	str	r1, [sp, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	bfbb      	ittet	lt
 800a2b2:	425b      	neglt	r3, r3
 800a2b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b8:	9307      	strge	r3, [sp, #28]
 800a2ba:	9307      	strlt	r3, [sp, #28]
 800a2bc:	bfb8      	it	lt
 800a2be:	9204      	strlt	r2, [sp, #16]
 800a2c0:	7823      	ldrb	r3, [r4, #0]
 800a2c2:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c4:	d10c      	bne.n	800a2e0 <_svfiprintf_r+0x130>
 800a2c6:	7863      	ldrb	r3, [r4, #1]
 800a2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ca:	d135      	bne.n	800a338 <_svfiprintf_r+0x188>
 800a2cc:	9b03      	ldr	r3, [sp, #12]
 800a2ce:	3402      	adds	r4, #2
 800a2d0:	1d1a      	adds	r2, r3, #4
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	9203      	str	r2, [sp, #12]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	bfb8      	it	lt
 800a2da:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2de:	9305      	str	r3, [sp, #20]
 800a2e0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a3a0 <_svfiprintf_r+0x1f0>
 800a2e4:	2203      	movs	r2, #3
 800a2e6:	4650      	mov	r0, sl
 800a2e8:	7821      	ldrb	r1, [r4, #0]
 800a2ea:	f7ff fa77 	bl	80097dc <memchr>
 800a2ee:	b140      	cbz	r0, 800a302 <_svfiprintf_r+0x152>
 800a2f0:	2340      	movs	r3, #64	; 0x40
 800a2f2:	eba0 000a 	sub.w	r0, r0, sl
 800a2f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a2fa:	9b04      	ldr	r3, [sp, #16]
 800a2fc:	3401      	adds	r4, #1
 800a2fe:	4303      	orrs	r3, r0
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a306:	2206      	movs	r2, #6
 800a308:	4826      	ldr	r0, [pc, #152]	; (800a3a4 <_svfiprintf_r+0x1f4>)
 800a30a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a30e:	f7ff fa65 	bl	80097dc <memchr>
 800a312:	2800      	cmp	r0, #0
 800a314:	d038      	beq.n	800a388 <_svfiprintf_r+0x1d8>
 800a316:	4b24      	ldr	r3, [pc, #144]	; (800a3a8 <_svfiprintf_r+0x1f8>)
 800a318:	bb1b      	cbnz	r3, 800a362 <_svfiprintf_r+0x1b2>
 800a31a:	9b03      	ldr	r3, [sp, #12]
 800a31c:	3307      	adds	r3, #7
 800a31e:	f023 0307 	bic.w	r3, r3, #7
 800a322:	3308      	adds	r3, #8
 800a324:	9303      	str	r3, [sp, #12]
 800a326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a328:	4433      	add	r3, r6
 800a32a:	9309      	str	r3, [sp, #36]	; 0x24
 800a32c:	e767      	b.n	800a1fe <_svfiprintf_r+0x4e>
 800a32e:	460c      	mov	r4, r1
 800a330:	2001      	movs	r0, #1
 800a332:	fb0c 3202 	mla	r2, ip, r2, r3
 800a336:	e7a5      	b.n	800a284 <_svfiprintf_r+0xd4>
 800a338:	2300      	movs	r3, #0
 800a33a:	f04f 0c0a 	mov.w	ip, #10
 800a33e:	4619      	mov	r1, r3
 800a340:	3401      	adds	r4, #1
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	4620      	mov	r0, r4
 800a346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a34a:	3a30      	subs	r2, #48	; 0x30
 800a34c:	2a09      	cmp	r2, #9
 800a34e:	d903      	bls.n	800a358 <_svfiprintf_r+0x1a8>
 800a350:	2b00      	cmp	r3, #0
 800a352:	d0c5      	beq.n	800a2e0 <_svfiprintf_r+0x130>
 800a354:	9105      	str	r1, [sp, #20]
 800a356:	e7c3      	b.n	800a2e0 <_svfiprintf_r+0x130>
 800a358:	4604      	mov	r4, r0
 800a35a:	2301      	movs	r3, #1
 800a35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a360:	e7f0      	b.n	800a344 <_svfiprintf_r+0x194>
 800a362:	ab03      	add	r3, sp, #12
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	462a      	mov	r2, r5
 800a368:	4638      	mov	r0, r7
 800a36a:	4b10      	ldr	r3, [pc, #64]	; (800a3ac <_svfiprintf_r+0x1fc>)
 800a36c:	a904      	add	r1, sp, #16
 800a36e:	f7fd ffcd 	bl	800830c <_printf_float>
 800a372:	1c42      	adds	r2, r0, #1
 800a374:	4606      	mov	r6, r0
 800a376:	d1d6      	bne.n	800a326 <_svfiprintf_r+0x176>
 800a378:	89ab      	ldrh	r3, [r5, #12]
 800a37a:	065b      	lsls	r3, r3, #25
 800a37c:	f53f af2c 	bmi.w	800a1d8 <_svfiprintf_r+0x28>
 800a380:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a382:	b01d      	add	sp, #116	; 0x74
 800a384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a388:	ab03      	add	r3, sp, #12
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	462a      	mov	r2, r5
 800a38e:	4638      	mov	r0, r7
 800a390:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <_svfiprintf_r+0x1fc>)
 800a392:	a904      	add	r1, sp, #16
 800a394:	f7fe fa56 	bl	8008844 <_printf_i>
 800a398:	e7eb      	b.n	800a372 <_svfiprintf_r+0x1c2>
 800a39a:	bf00      	nop
 800a39c:	0800c104 	.word	0x0800c104
 800a3a0:	0800c10a 	.word	0x0800c10a
 800a3a4:	0800c10e 	.word	0x0800c10e
 800a3a8:	0800830d 	.word	0x0800830d
 800a3ac:	0800a0f9 	.word	0x0800a0f9

0800a3b0 <_sbrk_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4d05      	ldr	r5, [pc, #20]	; (800a3cc <_sbrk_r+0x1c>)
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	602b      	str	r3, [r5, #0]
 800a3bc:	f7f8 fba0 	bl	8002b00 <_sbrk>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_sbrk_r+0x1a>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_sbrk_r+0x1a>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	200023f4 	.word	0x200023f4

0800a3d0 <__assert_func>:
 800a3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3d2:	4614      	mov	r4, r2
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <__assert_func+0x2c>)
 800a3d8:	4605      	mov	r5, r0
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68d8      	ldr	r0, [r3, #12]
 800a3de:	b14c      	cbz	r4, 800a3f4 <__assert_func+0x24>
 800a3e0:	4b07      	ldr	r3, [pc, #28]	; (800a400 <__assert_func+0x30>)
 800a3e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3e6:	9100      	str	r1, [sp, #0]
 800a3e8:	462b      	mov	r3, r5
 800a3ea:	4906      	ldr	r1, [pc, #24]	; (800a404 <__assert_func+0x34>)
 800a3ec:	f000 f80e 	bl	800a40c <fiprintf>
 800a3f0:	f000 faaa 	bl	800a948 <abort>
 800a3f4:	4b04      	ldr	r3, [pc, #16]	; (800a408 <__assert_func+0x38>)
 800a3f6:	461c      	mov	r4, r3
 800a3f8:	e7f3      	b.n	800a3e2 <__assert_func+0x12>
 800a3fa:	bf00      	nop
 800a3fc:	20000024 	.word	0x20000024
 800a400:	0800c115 	.word	0x0800c115
 800a404:	0800c122 	.word	0x0800c122
 800a408:	0800c150 	.word	0x0800c150

0800a40c <fiprintf>:
 800a40c:	b40e      	push	{r1, r2, r3}
 800a40e:	b503      	push	{r0, r1, lr}
 800a410:	4601      	mov	r1, r0
 800a412:	ab03      	add	r3, sp, #12
 800a414:	4805      	ldr	r0, [pc, #20]	; (800a42c <fiprintf+0x20>)
 800a416:	f853 2b04 	ldr.w	r2, [r3], #4
 800a41a:	6800      	ldr	r0, [r0, #0]
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	f000 f895 	bl	800a54c <_vfiprintf_r>
 800a422:	b002      	add	sp, #8
 800a424:	f85d eb04 	ldr.w	lr, [sp], #4
 800a428:	b003      	add	sp, #12
 800a42a:	4770      	bx	lr
 800a42c:	20000024 	.word	0x20000024

0800a430 <__ascii_mbtowc>:
 800a430:	b082      	sub	sp, #8
 800a432:	b901      	cbnz	r1, 800a436 <__ascii_mbtowc+0x6>
 800a434:	a901      	add	r1, sp, #4
 800a436:	b142      	cbz	r2, 800a44a <__ascii_mbtowc+0x1a>
 800a438:	b14b      	cbz	r3, 800a44e <__ascii_mbtowc+0x1e>
 800a43a:	7813      	ldrb	r3, [r2, #0]
 800a43c:	600b      	str	r3, [r1, #0]
 800a43e:	7812      	ldrb	r2, [r2, #0]
 800a440:	1e10      	subs	r0, r2, #0
 800a442:	bf18      	it	ne
 800a444:	2001      	movne	r0, #1
 800a446:	b002      	add	sp, #8
 800a448:	4770      	bx	lr
 800a44a:	4610      	mov	r0, r2
 800a44c:	e7fb      	b.n	800a446 <__ascii_mbtowc+0x16>
 800a44e:	f06f 0001 	mvn.w	r0, #1
 800a452:	e7f8      	b.n	800a446 <__ascii_mbtowc+0x16>

0800a454 <memmove>:
 800a454:	4288      	cmp	r0, r1
 800a456:	b510      	push	{r4, lr}
 800a458:	eb01 0402 	add.w	r4, r1, r2
 800a45c:	d902      	bls.n	800a464 <memmove+0x10>
 800a45e:	4284      	cmp	r4, r0
 800a460:	4623      	mov	r3, r4
 800a462:	d807      	bhi.n	800a474 <memmove+0x20>
 800a464:	1e43      	subs	r3, r0, #1
 800a466:	42a1      	cmp	r1, r4
 800a468:	d008      	beq.n	800a47c <memmove+0x28>
 800a46a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a46e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a472:	e7f8      	b.n	800a466 <memmove+0x12>
 800a474:	4601      	mov	r1, r0
 800a476:	4402      	add	r2, r0
 800a478:	428a      	cmp	r2, r1
 800a47a:	d100      	bne.n	800a47e <memmove+0x2a>
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a486:	e7f7      	b.n	800a478 <memmove+0x24>

0800a488 <__malloc_lock>:
 800a488:	4801      	ldr	r0, [pc, #4]	; (800a490 <__malloc_lock+0x8>)
 800a48a:	f000 bc19 	b.w	800acc0 <__retarget_lock_acquire_recursive>
 800a48e:	bf00      	nop
 800a490:	200023f8 	.word	0x200023f8

0800a494 <__malloc_unlock>:
 800a494:	4801      	ldr	r0, [pc, #4]	; (800a49c <__malloc_unlock+0x8>)
 800a496:	f000 bc14 	b.w	800acc2 <__retarget_lock_release_recursive>
 800a49a:	bf00      	nop
 800a49c:	200023f8 	.word	0x200023f8

0800a4a0 <_realloc_r>:
 800a4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	4614      	mov	r4, r2
 800a4a8:	460e      	mov	r6, r1
 800a4aa:	b921      	cbnz	r1, 800a4b6 <_realloc_r+0x16>
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b2:	f7ff bdad 	b.w	800a010 <_malloc_r>
 800a4b6:	b92a      	cbnz	r2, 800a4c4 <_realloc_r+0x24>
 800a4b8:	f7ff fd42 	bl	8009f40 <_free_r>
 800a4bc:	4625      	mov	r5, r4
 800a4be:	4628      	mov	r0, r5
 800a4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c4:	f000 fc64 	bl	800ad90 <_malloc_usable_size_r>
 800a4c8:	4284      	cmp	r4, r0
 800a4ca:	4607      	mov	r7, r0
 800a4cc:	d802      	bhi.n	800a4d4 <_realloc_r+0x34>
 800a4ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4d2:	d812      	bhi.n	800a4fa <_realloc_r+0x5a>
 800a4d4:	4621      	mov	r1, r4
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	f7ff fd9a 	bl	800a010 <_malloc_r>
 800a4dc:	4605      	mov	r5, r0
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d0ed      	beq.n	800a4be <_realloc_r+0x1e>
 800a4e2:	42bc      	cmp	r4, r7
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	bf28      	it	cs
 800a4ea:	463a      	movcs	r2, r7
 800a4ec:	f7ff f984 	bl	80097f8 <memcpy>
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	f7ff fd24 	bl	8009f40 <_free_r>
 800a4f8:	e7e1      	b.n	800a4be <_realloc_r+0x1e>
 800a4fa:	4635      	mov	r5, r6
 800a4fc:	e7df      	b.n	800a4be <_realloc_r+0x1e>

0800a4fe <__sfputc_r>:
 800a4fe:	6893      	ldr	r3, [r2, #8]
 800a500:	b410      	push	{r4}
 800a502:	3b01      	subs	r3, #1
 800a504:	2b00      	cmp	r3, #0
 800a506:	6093      	str	r3, [r2, #8]
 800a508:	da07      	bge.n	800a51a <__sfputc_r+0x1c>
 800a50a:	6994      	ldr	r4, [r2, #24]
 800a50c:	42a3      	cmp	r3, r4
 800a50e:	db01      	blt.n	800a514 <__sfputc_r+0x16>
 800a510:	290a      	cmp	r1, #10
 800a512:	d102      	bne.n	800a51a <__sfputc_r+0x1c>
 800a514:	bc10      	pop	{r4}
 800a516:	f000 b949 	b.w	800a7ac <__swbuf_r>
 800a51a:	6813      	ldr	r3, [r2, #0]
 800a51c:	1c58      	adds	r0, r3, #1
 800a51e:	6010      	str	r0, [r2, #0]
 800a520:	7019      	strb	r1, [r3, #0]
 800a522:	4608      	mov	r0, r1
 800a524:	bc10      	pop	{r4}
 800a526:	4770      	bx	lr

0800a528 <__sfputs_r>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	4606      	mov	r6, r0
 800a52c:	460f      	mov	r7, r1
 800a52e:	4614      	mov	r4, r2
 800a530:	18d5      	adds	r5, r2, r3
 800a532:	42ac      	cmp	r4, r5
 800a534:	d101      	bne.n	800a53a <__sfputs_r+0x12>
 800a536:	2000      	movs	r0, #0
 800a538:	e007      	b.n	800a54a <__sfputs_r+0x22>
 800a53a:	463a      	mov	r2, r7
 800a53c:	4630      	mov	r0, r6
 800a53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a542:	f7ff ffdc 	bl	800a4fe <__sfputc_r>
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	d1f3      	bne.n	800a532 <__sfputs_r+0xa>
 800a54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a54c <_vfiprintf_r>:
 800a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	460d      	mov	r5, r1
 800a552:	4614      	mov	r4, r2
 800a554:	4698      	mov	r8, r3
 800a556:	4606      	mov	r6, r0
 800a558:	b09d      	sub	sp, #116	; 0x74
 800a55a:	b118      	cbz	r0, 800a564 <_vfiprintf_r+0x18>
 800a55c:	6983      	ldr	r3, [r0, #24]
 800a55e:	b90b      	cbnz	r3, 800a564 <_vfiprintf_r+0x18>
 800a560:	f000 fb10 	bl	800ab84 <__sinit>
 800a564:	4b89      	ldr	r3, [pc, #548]	; (800a78c <_vfiprintf_r+0x240>)
 800a566:	429d      	cmp	r5, r3
 800a568:	d11b      	bne.n	800a5a2 <_vfiprintf_r+0x56>
 800a56a:	6875      	ldr	r5, [r6, #4]
 800a56c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a56e:	07d9      	lsls	r1, r3, #31
 800a570:	d405      	bmi.n	800a57e <_vfiprintf_r+0x32>
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	059a      	lsls	r2, r3, #22
 800a576:	d402      	bmi.n	800a57e <_vfiprintf_r+0x32>
 800a578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a57a:	f000 fba1 	bl	800acc0 <__retarget_lock_acquire_recursive>
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	071b      	lsls	r3, r3, #28
 800a582:	d501      	bpl.n	800a588 <_vfiprintf_r+0x3c>
 800a584:	692b      	ldr	r3, [r5, #16]
 800a586:	b9eb      	cbnz	r3, 800a5c4 <_vfiprintf_r+0x78>
 800a588:	4629      	mov	r1, r5
 800a58a:	4630      	mov	r0, r6
 800a58c:	f000 f96e 	bl	800a86c <__swsetup_r>
 800a590:	b1c0      	cbz	r0, 800a5c4 <_vfiprintf_r+0x78>
 800a592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a594:	07dc      	lsls	r4, r3, #31
 800a596:	d50e      	bpl.n	800a5b6 <_vfiprintf_r+0x6a>
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	b01d      	add	sp, #116	; 0x74
 800a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a2:	4b7b      	ldr	r3, [pc, #492]	; (800a790 <_vfiprintf_r+0x244>)
 800a5a4:	429d      	cmp	r5, r3
 800a5a6:	d101      	bne.n	800a5ac <_vfiprintf_r+0x60>
 800a5a8:	68b5      	ldr	r5, [r6, #8]
 800a5aa:	e7df      	b.n	800a56c <_vfiprintf_r+0x20>
 800a5ac:	4b79      	ldr	r3, [pc, #484]	; (800a794 <_vfiprintf_r+0x248>)
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	bf08      	it	eq
 800a5b2:	68f5      	ldreq	r5, [r6, #12]
 800a5b4:	e7da      	b.n	800a56c <_vfiprintf_r+0x20>
 800a5b6:	89ab      	ldrh	r3, [r5, #12]
 800a5b8:	0598      	lsls	r0, r3, #22
 800a5ba:	d4ed      	bmi.n	800a598 <_vfiprintf_r+0x4c>
 800a5bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5be:	f000 fb80 	bl	800acc2 <__retarget_lock_release_recursive>
 800a5c2:	e7e9      	b.n	800a598 <_vfiprintf_r+0x4c>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c8:	2320      	movs	r3, #32
 800a5ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5ce:	2330      	movs	r3, #48	; 0x30
 800a5d0:	f04f 0901 	mov.w	r9, #1
 800a5d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a798 <_vfiprintf_r+0x24c>
 800a5dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5e0:	4623      	mov	r3, r4
 800a5e2:	469a      	mov	sl, r3
 800a5e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e8:	b10a      	cbz	r2, 800a5ee <_vfiprintf_r+0xa2>
 800a5ea:	2a25      	cmp	r2, #37	; 0x25
 800a5ec:	d1f9      	bne.n	800a5e2 <_vfiprintf_r+0x96>
 800a5ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a5f2:	d00b      	beq.n	800a60c <_vfiprintf_r+0xc0>
 800a5f4:	465b      	mov	r3, fp
 800a5f6:	4622      	mov	r2, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7ff ff94 	bl	800a528 <__sfputs_r>
 800a600:	3001      	adds	r0, #1
 800a602:	f000 80aa 	beq.w	800a75a <_vfiprintf_r+0x20e>
 800a606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a608:	445a      	add	r2, fp
 800a60a:	9209      	str	r2, [sp, #36]	; 0x24
 800a60c:	f89a 3000 	ldrb.w	r3, [sl]
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 80a2 	beq.w	800a75a <_vfiprintf_r+0x20e>
 800a616:	2300      	movs	r3, #0
 800a618:	f04f 32ff 	mov.w	r2, #4294967295
 800a61c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a620:	f10a 0a01 	add.w	sl, sl, #1
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	9307      	str	r3, [sp, #28]
 800a628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a62c:	931a      	str	r3, [sp, #104]	; 0x68
 800a62e:	4654      	mov	r4, sl
 800a630:	2205      	movs	r2, #5
 800a632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a636:	4858      	ldr	r0, [pc, #352]	; (800a798 <_vfiprintf_r+0x24c>)
 800a638:	f7ff f8d0 	bl	80097dc <memchr>
 800a63c:	9a04      	ldr	r2, [sp, #16]
 800a63e:	b9d8      	cbnz	r0, 800a678 <_vfiprintf_r+0x12c>
 800a640:	06d1      	lsls	r1, r2, #27
 800a642:	bf44      	itt	mi
 800a644:	2320      	movmi	r3, #32
 800a646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a64a:	0713      	lsls	r3, r2, #28
 800a64c:	bf44      	itt	mi
 800a64e:	232b      	movmi	r3, #43	; 0x2b
 800a650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a654:	f89a 3000 	ldrb.w	r3, [sl]
 800a658:	2b2a      	cmp	r3, #42	; 0x2a
 800a65a:	d015      	beq.n	800a688 <_vfiprintf_r+0x13c>
 800a65c:	4654      	mov	r4, sl
 800a65e:	2000      	movs	r0, #0
 800a660:	f04f 0c0a 	mov.w	ip, #10
 800a664:	9a07      	ldr	r2, [sp, #28]
 800a666:	4621      	mov	r1, r4
 800a668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a66c:	3b30      	subs	r3, #48	; 0x30
 800a66e:	2b09      	cmp	r3, #9
 800a670:	d94e      	bls.n	800a710 <_vfiprintf_r+0x1c4>
 800a672:	b1b0      	cbz	r0, 800a6a2 <_vfiprintf_r+0x156>
 800a674:	9207      	str	r2, [sp, #28]
 800a676:	e014      	b.n	800a6a2 <_vfiprintf_r+0x156>
 800a678:	eba0 0308 	sub.w	r3, r0, r8
 800a67c:	fa09 f303 	lsl.w	r3, r9, r3
 800a680:	4313      	orrs	r3, r2
 800a682:	46a2      	mov	sl, r4
 800a684:	9304      	str	r3, [sp, #16]
 800a686:	e7d2      	b.n	800a62e <_vfiprintf_r+0xe2>
 800a688:	9b03      	ldr	r3, [sp, #12]
 800a68a:	1d19      	adds	r1, r3, #4
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	9103      	str	r1, [sp, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	bfbb      	ittet	lt
 800a694:	425b      	neglt	r3, r3
 800a696:	f042 0202 	orrlt.w	r2, r2, #2
 800a69a:	9307      	strge	r3, [sp, #28]
 800a69c:	9307      	strlt	r3, [sp, #28]
 800a69e:	bfb8      	it	lt
 800a6a0:	9204      	strlt	r2, [sp, #16]
 800a6a2:	7823      	ldrb	r3, [r4, #0]
 800a6a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a6a6:	d10c      	bne.n	800a6c2 <_vfiprintf_r+0x176>
 800a6a8:	7863      	ldrb	r3, [r4, #1]
 800a6aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ac:	d135      	bne.n	800a71a <_vfiprintf_r+0x1ce>
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	3402      	adds	r4, #2
 800a6b2:	1d1a      	adds	r2, r3, #4
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	9203      	str	r2, [sp, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	bfb8      	it	lt
 800a6bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6c0:	9305      	str	r3, [sp, #20]
 800a6c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a79c <_vfiprintf_r+0x250>
 800a6c6:	2203      	movs	r2, #3
 800a6c8:	4650      	mov	r0, sl
 800a6ca:	7821      	ldrb	r1, [r4, #0]
 800a6cc:	f7ff f886 	bl	80097dc <memchr>
 800a6d0:	b140      	cbz	r0, 800a6e4 <_vfiprintf_r+0x198>
 800a6d2:	2340      	movs	r3, #64	; 0x40
 800a6d4:	eba0 000a 	sub.w	r0, r0, sl
 800a6d8:	fa03 f000 	lsl.w	r0, r3, r0
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	3401      	adds	r4, #1
 800a6e0:	4303      	orrs	r3, r0
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e8:	2206      	movs	r2, #6
 800a6ea:	482d      	ldr	r0, [pc, #180]	; (800a7a0 <_vfiprintf_r+0x254>)
 800a6ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6f0:	f7ff f874 	bl	80097dc <memchr>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d03f      	beq.n	800a778 <_vfiprintf_r+0x22c>
 800a6f8:	4b2a      	ldr	r3, [pc, #168]	; (800a7a4 <_vfiprintf_r+0x258>)
 800a6fa:	bb1b      	cbnz	r3, 800a744 <_vfiprintf_r+0x1f8>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	3307      	adds	r3, #7
 800a700:	f023 0307 	bic.w	r3, r3, #7
 800a704:	3308      	adds	r3, #8
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70a:	443b      	add	r3, r7
 800a70c:	9309      	str	r3, [sp, #36]	; 0x24
 800a70e:	e767      	b.n	800a5e0 <_vfiprintf_r+0x94>
 800a710:	460c      	mov	r4, r1
 800a712:	2001      	movs	r0, #1
 800a714:	fb0c 3202 	mla	r2, ip, r2, r3
 800a718:	e7a5      	b.n	800a666 <_vfiprintf_r+0x11a>
 800a71a:	2300      	movs	r3, #0
 800a71c:	f04f 0c0a 	mov.w	ip, #10
 800a720:	4619      	mov	r1, r3
 800a722:	3401      	adds	r4, #1
 800a724:	9305      	str	r3, [sp, #20]
 800a726:	4620      	mov	r0, r4
 800a728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a72c:	3a30      	subs	r2, #48	; 0x30
 800a72e:	2a09      	cmp	r2, #9
 800a730:	d903      	bls.n	800a73a <_vfiprintf_r+0x1ee>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0c5      	beq.n	800a6c2 <_vfiprintf_r+0x176>
 800a736:	9105      	str	r1, [sp, #20]
 800a738:	e7c3      	b.n	800a6c2 <_vfiprintf_r+0x176>
 800a73a:	4604      	mov	r4, r0
 800a73c:	2301      	movs	r3, #1
 800a73e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a742:	e7f0      	b.n	800a726 <_vfiprintf_r+0x1da>
 800a744:	ab03      	add	r3, sp, #12
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	462a      	mov	r2, r5
 800a74a:	4630      	mov	r0, r6
 800a74c:	4b16      	ldr	r3, [pc, #88]	; (800a7a8 <_vfiprintf_r+0x25c>)
 800a74e:	a904      	add	r1, sp, #16
 800a750:	f7fd fddc 	bl	800830c <_printf_float>
 800a754:	4607      	mov	r7, r0
 800a756:	1c78      	adds	r0, r7, #1
 800a758:	d1d6      	bne.n	800a708 <_vfiprintf_r+0x1bc>
 800a75a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a75c:	07d9      	lsls	r1, r3, #31
 800a75e:	d405      	bmi.n	800a76c <_vfiprintf_r+0x220>
 800a760:	89ab      	ldrh	r3, [r5, #12]
 800a762:	059a      	lsls	r2, r3, #22
 800a764:	d402      	bmi.n	800a76c <_vfiprintf_r+0x220>
 800a766:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a768:	f000 faab 	bl	800acc2 <__retarget_lock_release_recursive>
 800a76c:	89ab      	ldrh	r3, [r5, #12]
 800a76e:	065b      	lsls	r3, r3, #25
 800a770:	f53f af12 	bmi.w	800a598 <_vfiprintf_r+0x4c>
 800a774:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a776:	e711      	b.n	800a59c <_vfiprintf_r+0x50>
 800a778:	ab03      	add	r3, sp, #12
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	462a      	mov	r2, r5
 800a77e:	4630      	mov	r0, r6
 800a780:	4b09      	ldr	r3, [pc, #36]	; (800a7a8 <_vfiprintf_r+0x25c>)
 800a782:	a904      	add	r1, sp, #16
 800a784:	f7fe f85e 	bl	8008844 <_printf_i>
 800a788:	e7e4      	b.n	800a754 <_vfiprintf_r+0x208>
 800a78a:	bf00      	nop
 800a78c:	0800c27c 	.word	0x0800c27c
 800a790:	0800c29c 	.word	0x0800c29c
 800a794:	0800c25c 	.word	0x0800c25c
 800a798:	0800c104 	.word	0x0800c104
 800a79c:	0800c10a 	.word	0x0800c10a
 800a7a0:	0800c10e 	.word	0x0800c10e
 800a7a4:	0800830d 	.word	0x0800830d
 800a7a8:	0800a529 	.word	0x0800a529

0800a7ac <__swbuf_r>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	460e      	mov	r6, r1
 800a7b0:	4614      	mov	r4, r2
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	b118      	cbz	r0, 800a7be <__swbuf_r+0x12>
 800a7b6:	6983      	ldr	r3, [r0, #24]
 800a7b8:	b90b      	cbnz	r3, 800a7be <__swbuf_r+0x12>
 800a7ba:	f000 f9e3 	bl	800ab84 <__sinit>
 800a7be:	4b21      	ldr	r3, [pc, #132]	; (800a844 <__swbuf_r+0x98>)
 800a7c0:	429c      	cmp	r4, r3
 800a7c2:	d12b      	bne.n	800a81c <__swbuf_r+0x70>
 800a7c4:	686c      	ldr	r4, [r5, #4]
 800a7c6:	69a3      	ldr	r3, [r4, #24]
 800a7c8:	60a3      	str	r3, [r4, #8]
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	071a      	lsls	r2, r3, #28
 800a7ce:	d52f      	bpl.n	800a830 <__swbuf_r+0x84>
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	b36b      	cbz	r3, 800a830 <__swbuf_r+0x84>
 800a7d4:	6923      	ldr	r3, [r4, #16]
 800a7d6:	6820      	ldr	r0, [r4, #0]
 800a7d8:	b2f6      	uxtb	r6, r6
 800a7da:	1ac0      	subs	r0, r0, r3
 800a7dc:	6963      	ldr	r3, [r4, #20]
 800a7de:	4637      	mov	r7, r6
 800a7e0:	4283      	cmp	r3, r0
 800a7e2:	dc04      	bgt.n	800a7ee <__swbuf_r+0x42>
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f000 f938 	bl	800aa5c <_fflush_r>
 800a7ec:	bb30      	cbnz	r0, 800a83c <__swbuf_r+0x90>
 800a7ee:	68a3      	ldr	r3, [r4, #8]
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	60a3      	str	r3, [r4, #8]
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	6022      	str	r2, [r4, #0]
 800a7fc:	701e      	strb	r6, [r3, #0]
 800a7fe:	6963      	ldr	r3, [r4, #20]
 800a800:	4283      	cmp	r3, r0
 800a802:	d004      	beq.n	800a80e <__swbuf_r+0x62>
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	07db      	lsls	r3, r3, #31
 800a808:	d506      	bpl.n	800a818 <__swbuf_r+0x6c>
 800a80a:	2e0a      	cmp	r6, #10
 800a80c:	d104      	bne.n	800a818 <__swbuf_r+0x6c>
 800a80e:	4621      	mov	r1, r4
 800a810:	4628      	mov	r0, r5
 800a812:	f000 f923 	bl	800aa5c <_fflush_r>
 800a816:	b988      	cbnz	r0, 800a83c <__swbuf_r+0x90>
 800a818:	4638      	mov	r0, r7
 800a81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a81c:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <__swbuf_r+0x9c>)
 800a81e:	429c      	cmp	r4, r3
 800a820:	d101      	bne.n	800a826 <__swbuf_r+0x7a>
 800a822:	68ac      	ldr	r4, [r5, #8]
 800a824:	e7cf      	b.n	800a7c6 <__swbuf_r+0x1a>
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <__swbuf_r+0xa0>)
 800a828:	429c      	cmp	r4, r3
 800a82a:	bf08      	it	eq
 800a82c:	68ec      	ldreq	r4, [r5, #12]
 800a82e:	e7ca      	b.n	800a7c6 <__swbuf_r+0x1a>
 800a830:	4621      	mov	r1, r4
 800a832:	4628      	mov	r0, r5
 800a834:	f000 f81a 	bl	800a86c <__swsetup_r>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d0cb      	beq.n	800a7d4 <__swbuf_r+0x28>
 800a83c:	f04f 37ff 	mov.w	r7, #4294967295
 800a840:	e7ea      	b.n	800a818 <__swbuf_r+0x6c>
 800a842:	bf00      	nop
 800a844:	0800c27c 	.word	0x0800c27c
 800a848:	0800c29c 	.word	0x0800c29c
 800a84c:	0800c25c 	.word	0x0800c25c

0800a850 <__ascii_wctomb>:
 800a850:	4603      	mov	r3, r0
 800a852:	4608      	mov	r0, r1
 800a854:	b141      	cbz	r1, 800a868 <__ascii_wctomb+0x18>
 800a856:	2aff      	cmp	r2, #255	; 0xff
 800a858:	d904      	bls.n	800a864 <__ascii_wctomb+0x14>
 800a85a:	228a      	movs	r2, #138	; 0x8a
 800a85c:	f04f 30ff 	mov.w	r0, #4294967295
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	4770      	bx	lr
 800a864:	2001      	movs	r0, #1
 800a866:	700a      	strb	r2, [r1, #0]
 800a868:	4770      	bx	lr
	...

0800a86c <__swsetup_r>:
 800a86c:	4b32      	ldr	r3, [pc, #200]	; (800a938 <__swsetup_r+0xcc>)
 800a86e:	b570      	push	{r4, r5, r6, lr}
 800a870:	681d      	ldr	r5, [r3, #0]
 800a872:	4606      	mov	r6, r0
 800a874:	460c      	mov	r4, r1
 800a876:	b125      	cbz	r5, 800a882 <__swsetup_r+0x16>
 800a878:	69ab      	ldr	r3, [r5, #24]
 800a87a:	b913      	cbnz	r3, 800a882 <__swsetup_r+0x16>
 800a87c:	4628      	mov	r0, r5
 800a87e:	f000 f981 	bl	800ab84 <__sinit>
 800a882:	4b2e      	ldr	r3, [pc, #184]	; (800a93c <__swsetup_r+0xd0>)
 800a884:	429c      	cmp	r4, r3
 800a886:	d10f      	bne.n	800a8a8 <__swsetup_r+0x3c>
 800a888:	686c      	ldr	r4, [r5, #4]
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a890:	0719      	lsls	r1, r3, #28
 800a892:	d42c      	bmi.n	800a8ee <__swsetup_r+0x82>
 800a894:	06dd      	lsls	r5, r3, #27
 800a896:	d411      	bmi.n	800a8bc <__swsetup_r+0x50>
 800a898:	2309      	movs	r3, #9
 800a89a:	6033      	str	r3, [r6, #0]
 800a89c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	e03e      	b.n	800a926 <__swsetup_r+0xba>
 800a8a8:	4b25      	ldr	r3, [pc, #148]	; (800a940 <__swsetup_r+0xd4>)
 800a8aa:	429c      	cmp	r4, r3
 800a8ac:	d101      	bne.n	800a8b2 <__swsetup_r+0x46>
 800a8ae:	68ac      	ldr	r4, [r5, #8]
 800a8b0:	e7eb      	b.n	800a88a <__swsetup_r+0x1e>
 800a8b2:	4b24      	ldr	r3, [pc, #144]	; (800a944 <__swsetup_r+0xd8>)
 800a8b4:	429c      	cmp	r4, r3
 800a8b6:	bf08      	it	eq
 800a8b8:	68ec      	ldreq	r4, [r5, #12]
 800a8ba:	e7e6      	b.n	800a88a <__swsetup_r+0x1e>
 800a8bc:	0758      	lsls	r0, r3, #29
 800a8be:	d512      	bpl.n	800a8e6 <__swsetup_r+0x7a>
 800a8c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8c2:	b141      	cbz	r1, 800a8d6 <__swsetup_r+0x6a>
 800a8c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8c8:	4299      	cmp	r1, r3
 800a8ca:	d002      	beq.n	800a8d2 <__swsetup_r+0x66>
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	f7ff fb37 	bl	8009f40 <_free_r>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	6063      	str	r3, [r4, #4]
 800a8e2:	6923      	ldr	r3, [r4, #16]
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	f043 0308 	orr.w	r3, r3, #8
 800a8ec:	81a3      	strh	r3, [r4, #12]
 800a8ee:	6923      	ldr	r3, [r4, #16]
 800a8f0:	b94b      	cbnz	r3, 800a906 <__swsetup_r+0x9a>
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8fc:	d003      	beq.n	800a906 <__swsetup_r+0x9a>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4630      	mov	r0, r6
 800a902:	f000 fa05 	bl	800ad10 <__smakebuf_r>
 800a906:	89a0      	ldrh	r0, [r4, #12]
 800a908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a90c:	f010 0301 	ands.w	r3, r0, #1
 800a910:	d00a      	beq.n	800a928 <__swsetup_r+0xbc>
 800a912:	2300      	movs	r3, #0
 800a914:	60a3      	str	r3, [r4, #8]
 800a916:	6963      	ldr	r3, [r4, #20]
 800a918:	425b      	negs	r3, r3
 800a91a:	61a3      	str	r3, [r4, #24]
 800a91c:	6923      	ldr	r3, [r4, #16]
 800a91e:	b943      	cbnz	r3, 800a932 <__swsetup_r+0xc6>
 800a920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a924:	d1ba      	bne.n	800a89c <__swsetup_r+0x30>
 800a926:	bd70      	pop	{r4, r5, r6, pc}
 800a928:	0781      	lsls	r1, r0, #30
 800a92a:	bf58      	it	pl
 800a92c:	6963      	ldrpl	r3, [r4, #20]
 800a92e:	60a3      	str	r3, [r4, #8]
 800a930:	e7f4      	b.n	800a91c <__swsetup_r+0xb0>
 800a932:	2000      	movs	r0, #0
 800a934:	e7f7      	b.n	800a926 <__swsetup_r+0xba>
 800a936:	bf00      	nop
 800a938:	20000024 	.word	0x20000024
 800a93c:	0800c27c 	.word	0x0800c27c
 800a940:	0800c29c 	.word	0x0800c29c
 800a944:	0800c25c 	.word	0x0800c25c

0800a948 <abort>:
 800a948:	2006      	movs	r0, #6
 800a94a:	b508      	push	{r3, lr}
 800a94c:	f000 fa50 	bl	800adf0 <raise>
 800a950:	2001      	movs	r0, #1
 800a952:	f7f8 f862 	bl	8002a1a <_exit>
	...

0800a958 <__sflush_r>:
 800a958:	898a      	ldrh	r2, [r1, #12]
 800a95a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95c:	4605      	mov	r5, r0
 800a95e:	0710      	lsls	r0, r2, #28
 800a960:	460c      	mov	r4, r1
 800a962:	d457      	bmi.n	800aa14 <__sflush_r+0xbc>
 800a964:	684b      	ldr	r3, [r1, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	dc04      	bgt.n	800a974 <__sflush_r+0x1c>
 800a96a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	dc01      	bgt.n	800a974 <__sflush_r+0x1c>
 800a970:	2000      	movs	r0, #0
 800a972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a976:	2e00      	cmp	r6, #0
 800a978:	d0fa      	beq.n	800a970 <__sflush_r+0x18>
 800a97a:	2300      	movs	r3, #0
 800a97c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a980:	682f      	ldr	r7, [r5, #0]
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	d032      	beq.n	800a9ec <__sflush_r+0x94>
 800a986:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	075a      	lsls	r2, r3, #29
 800a98c:	d505      	bpl.n	800a99a <__sflush_r+0x42>
 800a98e:	6863      	ldr	r3, [r4, #4]
 800a990:	1ac0      	subs	r0, r0, r3
 800a992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a994:	b10b      	cbz	r3, 800a99a <__sflush_r+0x42>
 800a996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a998:	1ac0      	subs	r0, r0, r3
 800a99a:	2300      	movs	r3, #0
 800a99c:	4602      	mov	r2, r0
 800a99e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	6a21      	ldr	r1, [r4, #32]
 800a9a4:	47b0      	blx	r6
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	d106      	bne.n	800a9ba <__sflush_r+0x62>
 800a9ac:	6829      	ldr	r1, [r5, #0]
 800a9ae:	291d      	cmp	r1, #29
 800a9b0:	d82c      	bhi.n	800aa0c <__sflush_r+0xb4>
 800a9b2:	4a29      	ldr	r2, [pc, #164]	; (800aa58 <__sflush_r+0x100>)
 800a9b4:	40ca      	lsrs	r2, r1
 800a9b6:	07d6      	lsls	r6, r2, #31
 800a9b8:	d528      	bpl.n	800aa0c <__sflush_r+0xb4>
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	6062      	str	r2, [r4, #4]
 800a9be:	6922      	ldr	r2, [r4, #16]
 800a9c0:	04d9      	lsls	r1, r3, #19
 800a9c2:	6022      	str	r2, [r4, #0]
 800a9c4:	d504      	bpl.n	800a9d0 <__sflush_r+0x78>
 800a9c6:	1c42      	adds	r2, r0, #1
 800a9c8:	d101      	bne.n	800a9ce <__sflush_r+0x76>
 800a9ca:	682b      	ldr	r3, [r5, #0]
 800a9cc:	b903      	cbnz	r3, 800a9d0 <__sflush_r+0x78>
 800a9ce:	6560      	str	r0, [r4, #84]	; 0x54
 800a9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9d2:	602f      	str	r7, [r5, #0]
 800a9d4:	2900      	cmp	r1, #0
 800a9d6:	d0cb      	beq.n	800a970 <__sflush_r+0x18>
 800a9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d002      	beq.n	800a9e6 <__sflush_r+0x8e>
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f7ff faad 	bl	8009f40 <_free_r>
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	6360      	str	r0, [r4, #52]	; 0x34
 800a9ea:	e7c2      	b.n	800a972 <__sflush_r+0x1a>
 800a9ec:	6a21      	ldr	r1, [r4, #32]
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	47b0      	blx	r6
 800a9f4:	1c41      	adds	r1, r0, #1
 800a9f6:	d1c7      	bne.n	800a988 <__sflush_r+0x30>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0c4      	beq.n	800a988 <__sflush_r+0x30>
 800a9fe:	2b1d      	cmp	r3, #29
 800aa00:	d001      	beq.n	800aa06 <__sflush_r+0xae>
 800aa02:	2b16      	cmp	r3, #22
 800aa04:	d101      	bne.n	800aa0a <__sflush_r+0xb2>
 800aa06:	602f      	str	r7, [r5, #0]
 800aa08:	e7b2      	b.n	800a970 <__sflush_r+0x18>
 800aa0a:	89a3      	ldrh	r3, [r4, #12]
 800aa0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	e7ae      	b.n	800a972 <__sflush_r+0x1a>
 800aa14:	690f      	ldr	r7, [r1, #16]
 800aa16:	2f00      	cmp	r7, #0
 800aa18:	d0aa      	beq.n	800a970 <__sflush_r+0x18>
 800aa1a:	0793      	lsls	r3, r2, #30
 800aa1c:	bf18      	it	ne
 800aa1e:	2300      	movne	r3, #0
 800aa20:	680e      	ldr	r6, [r1, #0]
 800aa22:	bf08      	it	eq
 800aa24:	694b      	ldreq	r3, [r1, #20]
 800aa26:	1bf6      	subs	r6, r6, r7
 800aa28:	600f      	str	r7, [r1, #0]
 800aa2a:	608b      	str	r3, [r1, #8]
 800aa2c:	2e00      	cmp	r6, #0
 800aa2e:	dd9f      	ble.n	800a970 <__sflush_r+0x18>
 800aa30:	4633      	mov	r3, r6
 800aa32:	463a      	mov	r2, r7
 800aa34:	4628      	mov	r0, r5
 800aa36:	6a21      	ldr	r1, [r4, #32]
 800aa38:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aa3c:	47e0      	blx	ip
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	dc06      	bgt.n	800aa50 <__sflush_r+0xf8>
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	f04f 30ff 	mov.w	r0, #4294967295
 800aa48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa4c:	81a3      	strh	r3, [r4, #12]
 800aa4e:	e790      	b.n	800a972 <__sflush_r+0x1a>
 800aa50:	4407      	add	r7, r0
 800aa52:	1a36      	subs	r6, r6, r0
 800aa54:	e7ea      	b.n	800aa2c <__sflush_r+0xd4>
 800aa56:	bf00      	nop
 800aa58:	20400001 	.word	0x20400001

0800aa5c <_fflush_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	690b      	ldr	r3, [r1, #16]
 800aa60:	4605      	mov	r5, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	b913      	cbnz	r3, 800aa6c <_fflush_r+0x10>
 800aa66:	2500      	movs	r5, #0
 800aa68:	4628      	mov	r0, r5
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	b118      	cbz	r0, 800aa76 <_fflush_r+0x1a>
 800aa6e:	6983      	ldr	r3, [r0, #24]
 800aa70:	b90b      	cbnz	r3, 800aa76 <_fflush_r+0x1a>
 800aa72:	f000 f887 	bl	800ab84 <__sinit>
 800aa76:	4b14      	ldr	r3, [pc, #80]	; (800aac8 <_fflush_r+0x6c>)
 800aa78:	429c      	cmp	r4, r3
 800aa7a:	d11b      	bne.n	800aab4 <_fflush_r+0x58>
 800aa7c:	686c      	ldr	r4, [r5, #4]
 800aa7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d0ef      	beq.n	800aa66 <_fflush_r+0xa>
 800aa86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa88:	07d0      	lsls	r0, r2, #31
 800aa8a:	d404      	bmi.n	800aa96 <_fflush_r+0x3a>
 800aa8c:	0599      	lsls	r1, r3, #22
 800aa8e:	d402      	bmi.n	800aa96 <_fflush_r+0x3a>
 800aa90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa92:	f000 f915 	bl	800acc0 <__retarget_lock_acquire_recursive>
 800aa96:	4628      	mov	r0, r5
 800aa98:	4621      	mov	r1, r4
 800aa9a:	f7ff ff5d 	bl	800a958 <__sflush_r>
 800aa9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	07da      	lsls	r2, r3, #31
 800aaa4:	d4e0      	bmi.n	800aa68 <_fflush_r+0xc>
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	059b      	lsls	r3, r3, #22
 800aaaa:	d4dd      	bmi.n	800aa68 <_fflush_r+0xc>
 800aaac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaae:	f000 f908 	bl	800acc2 <__retarget_lock_release_recursive>
 800aab2:	e7d9      	b.n	800aa68 <_fflush_r+0xc>
 800aab4:	4b05      	ldr	r3, [pc, #20]	; (800aacc <_fflush_r+0x70>)
 800aab6:	429c      	cmp	r4, r3
 800aab8:	d101      	bne.n	800aabe <_fflush_r+0x62>
 800aaba:	68ac      	ldr	r4, [r5, #8]
 800aabc:	e7df      	b.n	800aa7e <_fflush_r+0x22>
 800aabe:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <_fflush_r+0x74>)
 800aac0:	429c      	cmp	r4, r3
 800aac2:	bf08      	it	eq
 800aac4:	68ec      	ldreq	r4, [r5, #12]
 800aac6:	e7da      	b.n	800aa7e <_fflush_r+0x22>
 800aac8:	0800c27c 	.word	0x0800c27c
 800aacc:	0800c29c 	.word	0x0800c29c
 800aad0:	0800c25c 	.word	0x0800c25c

0800aad4 <std>:
 800aad4:	2300      	movs	r3, #0
 800aad6:	b510      	push	{r4, lr}
 800aad8:	4604      	mov	r4, r0
 800aada:	e9c0 3300 	strd	r3, r3, [r0]
 800aade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aae2:	6083      	str	r3, [r0, #8]
 800aae4:	8181      	strh	r1, [r0, #12]
 800aae6:	6643      	str	r3, [r0, #100]	; 0x64
 800aae8:	81c2      	strh	r2, [r0, #14]
 800aaea:	6183      	str	r3, [r0, #24]
 800aaec:	4619      	mov	r1, r3
 800aaee:	2208      	movs	r2, #8
 800aaf0:	305c      	adds	r0, #92	; 0x5c
 800aaf2:	f7fd fb65 	bl	80081c0 <memset>
 800aaf6:	4b05      	ldr	r3, [pc, #20]	; (800ab0c <std+0x38>)
 800aaf8:	6224      	str	r4, [r4, #32]
 800aafa:	6263      	str	r3, [r4, #36]	; 0x24
 800aafc:	4b04      	ldr	r3, [pc, #16]	; (800ab10 <std+0x3c>)
 800aafe:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab00:	4b04      	ldr	r3, [pc, #16]	; (800ab14 <std+0x40>)
 800ab02:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab04:	4b04      	ldr	r3, [pc, #16]	; (800ab18 <std+0x44>)
 800ab06:	6323      	str	r3, [r4, #48]	; 0x30
 800ab08:	bd10      	pop	{r4, pc}
 800ab0a:	bf00      	nop
 800ab0c:	0800ae29 	.word	0x0800ae29
 800ab10:	0800ae4b 	.word	0x0800ae4b
 800ab14:	0800ae83 	.word	0x0800ae83
 800ab18:	0800aea7 	.word	0x0800aea7

0800ab1c <_cleanup_r>:
 800ab1c:	4901      	ldr	r1, [pc, #4]	; (800ab24 <_cleanup_r+0x8>)
 800ab1e:	f000 b8af 	b.w	800ac80 <_fwalk_reent>
 800ab22:	bf00      	nop
 800ab24:	0800aa5d 	.word	0x0800aa5d

0800ab28 <__sfmoreglue>:
 800ab28:	2268      	movs	r2, #104	; 0x68
 800ab2a:	b570      	push	{r4, r5, r6, lr}
 800ab2c:	1e4d      	subs	r5, r1, #1
 800ab2e:	4355      	muls	r5, r2
 800ab30:	460e      	mov	r6, r1
 800ab32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab36:	f7ff fa6b 	bl	800a010 <_malloc_r>
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	b140      	cbz	r0, 800ab50 <__sfmoreglue+0x28>
 800ab3e:	2100      	movs	r1, #0
 800ab40:	e9c0 1600 	strd	r1, r6, [r0]
 800ab44:	300c      	adds	r0, #12
 800ab46:	60a0      	str	r0, [r4, #8]
 800ab48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab4c:	f7fd fb38 	bl	80081c0 <memset>
 800ab50:	4620      	mov	r0, r4
 800ab52:	bd70      	pop	{r4, r5, r6, pc}

0800ab54 <__sfp_lock_acquire>:
 800ab54:	4801      	ldr	r0, [pc, #4]	; (800ab5c <__sfp_lock_acquire+0x8>)
 800ab56:	f000 b8b3 	b.w	800acc0 <__retarget_lock_acquire_recursive>
 800ab5a:	bf00      	nop
 800ab5c:	200023f9 	.word	0x200023f9

0800ab60 <__sfp_lock_release>:
 800ab60:	4801      	ldr	r0, [pc, #4]	; (800ab68 <__sfp_lock_release+0x8>)
 800ab62:	f000 b8ae 	b.w	800acc2 <__retarget_lock_release_recursive>
 800ab66:	bf00      	nop
 800ab68:	200023f9 	.word	0x200023f9

0800ab6c <__sinit_lock_acquire>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	; (800ab74 <__sinit_lock_acquire+0x8>)
 800ab6e:	f000 b8a7 	b.w	800acc0 <__retarget_lock_acquire_recursive>
 800ab72:	bf00      	nop
 800ab74:	200023fa 	.word	0x200023fa

0800ab78 <__sinit_lock_release>:
 800ab78:	4801      	ldr	r0, [pc, #4]	; (800ab80 <__sinit_lock_release+0x8>)
 800ab7a:	f000 b8a2 	b.w	800acc2 <__retarget_lock_release_recursive>
 800ab7e:	bf00      	nop
 800ab80:	200023fa 	.word	0x200023fa

0800ab84 <__sinit>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	4604      	mov	r4, r0
 800ab88:	f7ff fff0 	bl	800ab6c <__sinit_lock_acquire>
 800ab8c:	69a3      	ldr	r3, [r4, #24]
 800ab8e:	b11b      	cbz	r3, 800ab98 <__sinit+0x14>
 800ab90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab94:	f7ff bff0 	b.w	800ab78 <__sinit_lock_release>
 800ab98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab9c:	6523      	str	r3, [r4, #80]	; 0x50
 800ab9e:	4b13      	ldr	r3, [pc, #76]	; (800abec <__sinit+0x68>)
 800aba0:	4a13      	ldr	r2, [pc, #76]	; (800abf0 <__sinit+0x6c>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	62a2      	str	r2, [r4, #40]	; 0x28
 800aba6:	42a3      	cmp	r3, r4
 800aba8:	bf08      	it	eq
 800abaa:	2301      	moveq	r3, #1
 800abac:	4620      	mov	r0, r4
 800abae:	bf08      	it	eq
 800abb0:	61a3      	streq	r3, [r4, #24]
 800abb2:	f000 f81f 	bl	800abf4 <__sfp>
 800abb6:	6060      	str	r0, [r4, #4]
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 f81b 	bl	800abf4 <__sfp>
 800abbe:	60a0      	str	r0, [r4, #8]
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 f817 	bl	800abf4 <__sfp>
 800abc6:	2200      	movs	r2, #0
 800abc8:	2104      	movs	r1, #4
 800abca:	60e0      	str	r0, [r4, #12]
 800abcc:	6860      	ldr	r0, [r4, #4]
 800abce:	f7ff ff81 	bl	800aad4 <std>
 800abd2:	2201      	movs	r2, #1
 800abd4:	2109      	movs	r1, #9
 800abd6:	68a0      	ldr	r0, [r4, #8]
 800abd8:	f7ff ff7c 	bl	800aad4 <std>
 800abdc:	2202      	movs	r2, #2
 800abde:	2112      	movs	r1, #18
 800abe0:	68e0      	ldr	r0, [r4, #12]
 800abe2:	f7ff ff77 	bl	800aad4 <std>
 800abe6:	2301      	movs	r3, #1
 800abe8:	61a3      	str	r3, [r4, #24]
 800abea:	e7d1      	b.n	800ab90 <__sinit+0xc>
 800abec:	0800bee4 	.word	0x0800bee4
 800abf0:	0800ab1d 	.word	0x0800ab1d

0800abf4 <__sfp>:
 800abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf6:	4607      	mov	r7, r0
 800abf8:	f7ff ffac 	bl	800ab54 <__sfp_lock_acquire>
 800abfc:	4b1e      	ldr	r3, [pc, #120]	; (800ac78 <__sfp+0x84>)
 800abfe:	681e      	ldr	r6, [r3, #0]
 800ac00:	69b3      	ldr	r3, [r6, #24]
 800ac02:	b913      	cbnz	r3, 800ac0a <__sfp+0x16>
 800ac04:	4630      	mov	r0, r6
 800ac06:	f7ff ffbd 	bl	800ab84 <__sinit>
 800ac0a:	3648      	adds	r6, #72	; 0x48
 800ac0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac10:	3b01      	subs	r3, #1
 800ac12:	d503      	bpl.n	800ac1c <__sfp+0x28>
 800ac14:	6833      	ldr	r3, [r6, #0]
 800ac16:	b30b      	cbz	r3, 800ac5c <__sfp+0x68>
 800ac18:	6836      	ldr	r6, [r6, #0]
 800ac1a:	e7f7      	b.n	800ac0c <__sfp+0x18>
 800ac1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac20:	b9d5      	cbnz	r5, 800ac58 <__sfp+0x64>
 800ac22:	4b16      	ldr	r3, [pc, #88]	; (800ac7c <__sfp+0x88>)
 800ac24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac28:	60e3      	str	r3, [r4, #12]
 800ac2a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac2c:	f000 f847 	bl	800acbe <__retarget_lock_init_recursive>
 800ac30:	f7ff ff96 	bl	800ab60 <__sfp_lock_release>
 800ac34:	2208      	movs	r2, #8
 800ac36:	4629      	mov	r1, r5
 800ac38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac40:	6025      	str	r5, [r4, #0]
 800ac42:	61a5      	str	r5, [r4, #24]
 800ac44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac48:	f7fd faba 	bl	80081c0 <memset>
 800ac4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac54:	4620      	mov	r0, r4
 800ac56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac58:	3468      	adds	r4, #104	; 0x68
 800ac5a:	e7d9      	b.n	800ac10 <__sfp+0x1c>
 800ac5c:	2104      	movs	r1, #4
 800ac5e:	4638      	mov	r0, r7
 800ac60:	f7ff ff62 	bl	800ab28 <__sfmoreglue>
 800ac64:	4604      	mov	r4, r0
 800ac66:	6030      	str	r0, [r6, #0]
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d1d5      	bne.n	800ac18 <__sfp+0x24>
 800ac6c:	f7ff ff78 	bl	800ab60 <__sfp_lock_release>
 800ac70:	230c      	movs	r3, #12
 800ac72:	603b      	str	r3, [r7, #0]
 800ac74:	e7ee      	b.n	800ac54 <__sfp+0x60>
 800ac76:	bf00      	nop
 800ac78:	0800bee4 	.word	0x0800bee4
 800ac7c:	ffff0001 	.word	0xffff0001

0800ac80 <_fwalk_reent>:
 800ac80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac84:	4606      	mov	r6, r0
 800ac86:	4688      	mov	r8, r1
 800ac88:	2700      	movs	r7, #0
 800ac8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac92:	f1b9 0901 	subs.w	r9, r9, #1
 800ac96:	d505      	bpl.n	800aca4 <_fwalk_reent+0x24>
 800ac98:	6824      	ldr	r4, [r4, #0]
 800ac9a:	2c00      	cmp	r4, #0
 800ac9c:	d1f7      	bne.n	800ac8e <_fwalk_reent+0xe>
 800ac9e:	4638      	mov	r0, r7
 800aca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca4:	89ab      	ldrh	r3, [r5, #12]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d907      	bls.n	800acba <_fwalk_reent+0x3a>
 800acaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acae:	3301      	adds	r3, #1
 800acb0:	d003      	beq.n	800acba <_fwalk_reent+0x3a>
 800acb2:	4629      	mov	r1, r5
 800acb4:	4630      	mov	r0, r6
 800acb6:	47c0      	blx	r8
 800acb8:	4307      	orrs	r7, r0
 800acba:	3568      	adds	r5, #104	; 0x68
 800acbc:	e7e9      	b.n	800ac92 <_fwalk_reent+0x12>

0800acbe <__retarget_lock_init_recursive>:
 800acbe:	4770      	bx	lr

0800acc0 <__retarget_lock_acquire_recursive>:
 800acc0:	4770      	bx	lr

0800acc2 <__retarget_lock_release_recursive>:
 800acc2:	4770      	bx	lr

0800acc4 <__swhatbuf_r>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	460e      	mov	r6, r1
 800acc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800accc:	4614      	mov	r4, r2
 800acce:	2900      	cmp	r1, #0
 800acd0:	461d      	mov	r5, r3
 800acd2:	b096      	sub	sp, #88	; 0x58
 800acd4:	da08      	bge.n	800ace8 <__swhatbuf_r+0x24>
 800acd6:	2200      	movs	r2, #0
 800acd8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800acdc:	602a      	str	r2, [r5, #0]
 800acde:	061a      	lsls	r2, r3, #24
 800ace0:	d410      	bmi.n	800ad04 <__swhatbuf_r+0x40>
 800ace2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ace6:	e00e      	b.n	800ad06 <__swhatbuf_r+0x42>
 800ace8:	466a      	mov	r2, sp
 800acea:	f000 f903 	bl	800aef4 <_fstat_r>
 800acee:	2800      	cmp	r0, #0
 800acf0:	dbf1      	blt.n	800acd6 <__swhatbuf_r+0x12>
 800acf2:	9a01      	ldr	r2, [sp, #4]
 800acf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acfc:	425a      	negs	r2, r3
 800acfe:	415a      	adcs	r2, r3
 800ad00:	602a      	str	r2, [r5, #0]
 800ad02:	e7ee      	b.n	800ace2 <__swhatbuf_r+0x1e>
 800ad04:	2340      	movs	r3, #64	; 0x40
 800ad06:	2000      	movs	r0, #0
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	b016      	add	sp, #88	; 0x58
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad10 <__smakebuf_r>:
 800ad10:	898b      	ldrh	r3, [r1, #12]
 800ad12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad14:	079d      	lsls	r5, r3, #30
 800ad16:	4606      	mov	r6, r0
 800ad18:	460c      	mov	r4, r1
 800ad1a:	d507      	bpl.n	800ad2c <__smakebuf_r+0x1c>
 800ad1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	6123      	str	r3, [r4, #16]
 800ad24:	2301      	movs	r3, #1
 800ad26:	6163      	str	r3, [r4, #20]
 800ad28:	b002      	add	sp, #8
 800ad2a:	bd70      	pop	{r4, r5, r6, pc}
 800ad2c:	466a      	mov	r2, sp
 800ad2e:	ab01      	add	r3, sp, #4
 800ad30:	f7ff ffc8 	bl	800acc4 <__swhatbuf_r>
 800ad34:	9900      	ldr	r1, [sp, #0]
 800ad36:	4605      	mov	r5, r0
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f7ff f969 	bl	800a010 <_malloc_r>
 800ad3e:	b948      	cbnz	r0, 800ad54 <__smakebuf_r+0x44>
 800ad40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad44:	059a      	lsls	r2, r3, #22
 800ad46:	d4ef      	bmi.n	800ad28 <__smakebuf_r+0x18>
 800ad48:	f023 0303 	bic.w	r3, r3, #3
 800ad4c:	f043 0302 	orr.w	r3, r3, #2
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	e7e3      	b.n	800ad1c <__smakebuf_r+0xc>
 800ad54:	4b0d      	ldr	r3, [pc, #52]	; (800ad8c <__smakebuf_r+0x7c>)
 800ad56:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	6020      	str	r0, [r4, #0]
 800ad5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad60:	81a3      	strh	r3, [r4, #12]
 800ad62:	9b00      	ldr	r3, [sp, #0]
 800ad64:	6120      	str	r0, [r4, #16]
 800ad66:	6163      	str	r3, [r4, #20]
 800ad68:	9b01      	ldr	r3, [sp, #4]
 800ad6a:	b15b      	cbz	r3, 800ad84 <__smakebuf_r+0x74>
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad72:	f000 f8d1 	bl	800af18 <_isatty_r>
 800ad76:	b128      	cbz	r0, 800ad84 <__smakebuf_r+0x74>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	f023 0303 	bic.w	r3, r3, #3
 800ad7e:	f043 0301 	orr.w	r3, r3, #1
 800ad82:	81a3      	strh	r3, [r4, #12]
 800ad84:	89a0      	ldrh	r0, [r4, #12]
 800ad86:	4305      	orrs	r5, r0
 800ad88:	81a5      	strh	r5, [r4, #12]
 800ad8a:	e7cd      	b.n	800ad28 <__smakebuf_r+0x18>
 800ad8c:	0800ab1d 	.word	0x0800ab1d

0800ad90 <_malloc_usable_size_r>:
 800ad90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad94:	1f18      	subs	r0, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bfbc      	itt	lt
 800ad9a:	580b      	ldrlt	r3, [r1, r0]
 800ad9c:	18c0      	addlt	r0, r0, r3
 800ad9e:	4770      	bx	lr

0800ada0 <_raise_r>:
 800ada0:	291f      	cmp	r1, #31
 800ada2:	b538      	push	{r3, r4, r5, lr}
 800ada4:	4604      	mov	r4, r0
 800ada6:	460d      	mov	r5, r1
 800ada8:	d904      	bls.n	800adb4 <_raise_r+0x14>
 800adaa:	2316      	movs	r3, #22
 800adac:	6003      	str	r3, [r0, #0]
 800adae:	f04f 30ff 	mov.w	r0, #4294967295
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adb6:	b112      	cbz	r2, 800adbe <_raise_r+0x1e>
 800adb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adbc:	b94b      	cbnz	r3, 800add2 <_raise_r+0x32>
 800adbe:	4620      	mov	r0, r4
 800adc0:	f000 f830 	bl	800ae24 <_getpid_r>
 800adc4:	462a      	mov	r2, r5
 800adc6:	4601      	mov	r1, r0
 800adc8:	4620      	mov	r0, r4
 800adca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adce:	f000 b817 	b.w	800ae00 <_kill_r>
 800add2:	2b01      	cmp	r3, #1
 800add4:	d00a      	beq.n	800adec <_raise_r+0x4c>
 800add6:	1c59      	adds	r1, r3, #1
 800add8:	d103      	bne.n	800ade2 <_raise_r+0x42>
 800adda:	2316      	movs	r3, #22
 800addc:	6003      	str	r3, [r0, #0]
 800adde:	2001      	movs	r0, #1
 800ade0:	e7e7      	b.n	800adb2 <_raise_r+0x12>
 800ade2:	2400      	movs	r4, #0
 800ade4:	4628      	mov	r0, r5
 800ade6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adea:	4798      	blx	r3
 800adec:	2000      	movs	r0, #0
 800adee:	e7e0      	b.n	800adb2 <_raise_r+0x12>

0800adf0 <raise>:
 800adf0:	4b02      	ldr	r3, [pc, #8]	; (800adfc <raise+0xc>)
 800adf2:	4601      	mov	r1, r0
 800adf4:	6818      	ldr	r0, [r3, #0]
 800adf6:	f7ff bfd3 	b.w	800ada0 <_raise_r>
 800adfa:	bf00      	nop
 800adfc:	20000024 	.word	0x20000024

0800ae00 <_kill_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	2300      	movs	r3, #0
 800ae04:	4d06      	ldr	r5, [pc, #24]	; (800ae20 <_kill_r+0x20>)
 800ae06:	4604      	mov	r4, r0
 800ae08:	4608      	mov	r0, r1
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	602b      	str	r3, [r5, #0]
 800ae0e:	f7f7 fdf4 	bl	80029fa <_kill>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	d102      	bne.n	800ae1c <_kill_r+0x1c>
 800ae16:	682b      	ldr	r3, [r5, #0]
 800ae18:	b103      	cbz	r3, 800ae1c <_kill_r+0x1c>
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	bd38      	pop	{r3, r4, r5, pc}
 800ae1e:	bf00      	nop
 800ae20:	200023f4 	.word	0x200023f4

0800ae24 <_getpid_r>:
 800ae24:	f7f7 bde2 	b.w	80029ec <_getpid>

0800ae28 <__sread>:
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae30:	f000 f894 	bl	800af5c <_read_r>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	bfab      	itete	ge
 800ae38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae3c:	181b      	addge	r3, r3, r0
 800ae3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae42:	bfac      	ite	ge
 800ae44:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae46:	81a3      	strhlt	r3, [r4, #12]
 800ae48:	bd10      	pop	{r4, pc}

0800ae4a <__swrite>:
 800ae4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4e:	461f      	mov	r7, r3
 800ae50:	898b      	ldrh	r3, [r1, #12]
 800ae52:	4605      	mov	r5, r0
 800ae54:	05db      	lsls	r3, r3, #23
 800ae56:	460c      	mov	r4, r1
 800ae58:	4616      	mov	r6, r2
 800ae5a:	d505      	bpl.n	800ae68 <__swrite+0x1e>
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae64:	f000 f868 	bl	800af38 <_lseek_r>
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae70:	81a3      	strh	r3, [r4, #12]
 800ae72:	4628      	mov	r0, r5
 800ae74:	463b      	mov	r3, r7
 800ae76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7e:	f000 b817 	b.w	800aeb0 <_write_r>

0800ae82 <__sseek>:
 800ae82:	b510      	push	{r4, lr}
 800ae84:	460c      	mov	r4, r1
 800ae86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8a:	f000 f855 	bl	800af38 <_lseek_r>
 800ae8e:	1c43      	adds	r3, r0, #1
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	bf15      	itete	ne
 800ae94:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae9e:	81a3      	strheq	r3, [r4, #12]
 800aea0:	bf18      	it	ne
 800aea2:	81a3      	strhne	r3, [r4, #12]
 800aea4:	bd10      	pop	{r4, pc}

0800aea6 <__sclose>:
 800aea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeaa:	f000 b813 	b.w	800aed4 <_close_r>
	...

0800aeb0 <_write_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	2200      	movs	r2, #0
 800aeba:	4d05      	ldr	r5, [pc, #20]	; (800aed0 <_write_r+0x20>)
 800aebc:	602a      	str	r2, [r5, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	f7f7 fdd2 	bl	8002a68 <_write>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_write_r+0x1e>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_write_r+0x1e>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	200023f4 	.word	0x200023f4

0800aed4 <_close_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	2300      	movs	r3, #0
 800aed8:	4d05      	ldr	r5, [pc, #20]	; (800aef0 <_close_r+0x1c>)
 800aeda:	4604      	mov	r4, r0
 800aedc:	4608      	mov	r0, r1
 800aede:	602b      	str	r3, [r5, #0]
 800aee0:	f7f7 fdde 	bl	8002aa0 <_close>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_close_r+0x1a>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_close_r+0x1a>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	200023f4 	.word	0x200023f4

0800aef4 <_fstat_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	2300      	movs	r3, #0
 800aef8:	4d06      	ldr	r5, [pc, #24]	; (800af14 <_fstat_r+0x20>)
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	4611      	mov	r1, r2
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	f7f7 fdd8 	bl	8002ab6 <_fstat>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d102      	bne.n	800af10 <_fstat_r+0x1c>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	b103      	cbz	r3, 800af10 <_fstat_r+0x1c>
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	bd38      	pop	{r3, r4, r5, pc}
 800af12:	bf00      	nop
 800af14:	200023f4 	.word	0x200023f4

0800af18 <_isatty_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	2300      	movs	r3, #0
 800af1c:	4d05      	ldr	r5, [pc, #20]	; (800af34 <_isatty_r+0x1c>)
 800af1e:	4604      	mov	r4, r0
 800af20:	4608      	mov	r0, r1
 800af22:	602b      	str	r3, [r5, #0]
 800af24:	f7f7 fdd6 	bl	8002ad4 <_isatty>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d102      	bne.n	800af32 <_isatty_r+0x1a>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	b103      	cbz	r3, 800af32 <_isatty_r+0x1a>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	200023f4 	.word	0x200023f4

0800af38 <_lseek_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	4611      	mov	r1, r2
 800af40:	2200      	movs	r2, #0
 800af42:	4d05      	ldr	r5, [pc, #20]	; (800af58 <_lseek_r+0x20>)
 800af44:	602a      	str	r2, [r5, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	f7f7 fdce 	bl	8002ae8 <_lseek>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_lseek_r+0x1e>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_lseek_r+0x1e>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	200023f4 	.word	0x200023f4

0800af5c <_read_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	4604      	mov	r4, r0
 800af60:	4608      	mov	r0, r1
 800af62:	4611      	mov	r1, r2
 800af64:	2200      	movs	r2, #0
 800af66:	4d05      	ldr	r5, [pc, #20]	; (800af7c <_read_r+0x20>)
 800af68:	602a      	str	r2, [r5, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	f7f7 fd5f 	bl	8002a2e <_read>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	d102      	bne.n	800af7a <_read_r+0x1e>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	b103      	cbz	r3, 800af7a <_read_r+0x1e>
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	200023f4 	.word	0x200023f4

0800af80 <pow>:
 800af80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af84:	4614      	mov	r4, r2
 800af86:	461d      	mov	r5, r3
 800af88:	4680      	mov	r8, r0
 800af8a:	4689      	mov	r9, r1
 800af8c:	f000 f860 	bl	800b050 <__ieee754_pow>
 800af90:	4622      	mov	r2, r4
 800af92:	4606      	mov	r6, r0
 800af94:	460f      	mov	r7, r1
 800af96:	462b      	mov	r3, r5
 800af98:	4620      	mov	r0, r4
 800af9a:	4629      	mov	r1, r5
 800af9c:	f7f5 fdea 	bl	8000b74 <__aeabi_dcmpun>
 800afa0:	bbc8      	cbnz	r0, 800b016 <pow+0x96>
 800afa2:	2200      	movs	r2, #0
 800afa4:	2300      	movs	r3, #0
 800afa6:	4640      	mov	r0, r8
 800afa8:	4649      	mov	r1, r9
 800afaa:	f7f5 fdb1 	bl	8000b10 <__aeabi_dcmpeq>
 800afae:	b1b8      	cbz	r0, 800afe0 <pow+0x60>
 800afb0:	2200      	movs	r2, #0
 800afb2:	2300      	movs	r3, #0
 800afb4:	4620      	mov	r0, r4
 800afb6:	4629      	mov	r1, r5
 800afb8:	f7f5 fdaa 	bl	8000b10 <__aeabi_dcmpeq>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d141      	bne.n	800b044 <pow+0xc4>
 800afc0:	4620      	mov	r0, r4
 800afc2:	4629      	mov	r1, r5
 800afc4:	f000 fe39 	bl	800bc3a <finite>
 800afc8:	b328      	cbz	r0, 800b016 <pow+0x96>
 800afca:	2200      	movs	r2, #0
 800afcc:	2300      	movs	r3, #0
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	f7f5 fda7 	bl	8000b24 <__aeabi_dcmplt>
 800afd6:	b1f0      	cbz	r0, 800b016 <pow+0x96>
 800afd8:	f7fd f8c8 	bl	800816c <__errno>
 800afdc:	2322      	movs	r3, #34	; 0x22
 800afde:	e019      	b.n	800b014 <pow+0x94>
 800afe0:	4630      	mov	r0, r6
 800afe2:	4639      	mov	r1, r7
 800afe4:	f000 fe29 	bl	800bc3a <finite>
 800afe8:	b9c8      	cbnz	r0, 800b01e <pow+0x9e>
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f000 fe24 	bl	800bc3a <finite>
 800aff2:	b1a0      	cbz	r0, 800b01e <pow+0x9e>
 800aff4:	4620      	mov	r0, r4
 800aff6:	4629      	mov	r1, r5
 800aff8:	f000 fe1f 	bl	800bc3a <finite>
 800affc:	b178      	cbz	r0, 800b01e <pow+0x9e>
 800affe:	4632      	mov	r2, r6
 800b000:	463b      	mov	r3, r7
 800b002:	4630      	mov	r0, r6
 800b004:	4639      	mov	r1, r7
 800b006:	f7f5 fdb5 	bl	8000b74 <__aeabi_dcmpun>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d0e4      	beq.n	800afd8 <pow+0x58>
 800b00e:	f7fd f8ad 	bl	800816c <__errno>
 800b012:	2321      	movs	r3, #33	; 0x21
 800b014:	6003      	str	r3, [r0, #0]
 800b016:	4630      	mov	r0, r6
 800b018:	4639      	mov	r1, r7
 800b01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01e:	2200      	movs	r2, #0
 800b020:	2300      	movs	r3, #0
 800b022:	4630      	mov	r0, r6
 800b024:	4639      	mov	r1, r7
 800b026:	f7f5 fd73 	bl	8000b10 <__aeabi_dcmpeq>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d0f3      	beq.n	800b016 <pow+0x96>
 800b02e:	4640      	mov	r0, r8
 800b030:	4649      	mov	r1, r9
 800b032:	f000 fe02 	bl	800bc3a <finite>
 800b036:	2800      	cmp	r0, #0
 800b038:	d0ed      	beq.n	800b016 <pow+0x96>
 800b03a:	4620      	mov	r0, r4
 800b03c:	4629      	mov	r1, r5
 800b03e:	f000 fdfc 	bl	800bc3a <finite>
 800b042:	e7c8      	b.n	800afd6 <pow+0x56>
 800b044:	2600      	movs	r6, #0
 800b046:	4f01      	ldr	r7, [pc, #4]	; (800b04c <pow+0xcc>)
 800b048:	e7e5      	b.n	800b016 <pow+0x96>
 800b04a:	bf00      	nop
 800b04c:	3ff00000 	.word	0x3ff00000

0800b050 <__ieee754_pow>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	b093      	sub	sp, #76	; 0x4c
 800b056:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b05a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800b05e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b062:	4689      	mov	r9, r1
 800b064:	ea56 0102 	orrs.w	r1, r6, r2
 800b068:	4680      	mov	r8, r0
 800b06a:	d111      	bne.n	800b090 <__ieee754_pow+0x40>
 800b06c:	1803      	adds	r3, r0, r0
 800b06e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b072:	4152      	adcs	r2, r2
 800b074:	4299      	cmp	r1, r3
 800b076:	4b82      	ldr	r3, [pc, #520]	; (800b280 <__ieee754_pow+0x230>)
 800b078:	4193      	sbcs	r3, r2
 800b07a:	f080 84b9 	bcs.w	800b9f0 <__ieee754_pow+0x9a0>
 800b07e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b082:	4640      	mov	r0, r8
 800b084:	4649      	mov	r1, r9
 800b086:	f7f5 f925 	bl	80002d4 <__adddf3>
 800b08a:	4683      	mov	fp, r0
 800b08c:	468c      	mov	ip, r1
 800b08e:	e06f      	b.n	800b170 <__ieee754_pow+0x120>
 800b090:	4b7c      	ldr	r3, [pc, #496]	; (800b284 <__ieee754_pow+0x234>)
 800b092:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b096:	429c      	cmp	r4, r3
 800b098:	464d      	mov	r5, r9
 800b09a:	4682      	mov	sl, r0
 800b09c:	dc06      	bgt.n	800b0ac <__ieee754_pow+0x5c>
 800b09e:	d101      	bne.n	800b0a4 <__ieee754_pow+0x54>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d1ec      	bne.n	800b07e <__ieee754_pow+0x2e>
 800b0a4:	429e      	cmp	r6, r3
 800b0a6:	dc01      	bgt.n	800b0ac <__ieee754_pow+0x5c>
 800b0a8:	d10f      	bne.n	800b0ca <__ieee754_pow+0x7a>
 800b0aa:	b172      	cbz	r2, 800b0ca <__ieee754_pow+0x7a>
 800b0ac:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b0b0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b0b4:	ea55 050a 	orrs.w	r5, r5, sl
 800b0b8:	d1e1      	bne.n	800b07e <__ieee754_pow+0x2e>
 800b0ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b0be:	18db      	adds	r3, r3, r3
 800b0c0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b0c4:	4152      	adcs	r2, r2
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	e7d5      	b.n	800b076 <__ieee754_pow+0x26>
 800b0ca:	2d00      	cmp	r5, #0
 800b0cc:	da39      	bge.n	800b142 <__ieee754_pow+0xf2>
 800b0ce:	4b6e      	ldr	r3, [pc, #440]	; (800b288 <__ieee754_pow+0x238>)
 800b0d0:	429e      	cmp	r6, r3
 800b0d2:	dc52      	bgt.n	800b17a <__ieee754_pow+0x12a>
 800b0d4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b0d8:	429e      	cmp	r6, r3
 800b0da:	f340 849c 	ble.w	800ba16 <__ieee754_pow+0x9c6>
 800b0de:	1533      	asrs	r3, r6, #20
 800b0e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b0e4:	2b14      	cmp	r3, #20
 800b0e6:	dd0f      	ble.n	800b108 <__ieee754_pow+0xb8>
 800b0e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b0ec:	fa22 f103 	lsr.w	r1, r2, r3
 800b0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	f040 848e 	bne.w	800ba16 <__ieee754_pow+0x9c6>
 800b0fa:	f001 0101 	and.w	r1, r1, #1
 800b0fe:	f1c1 0302 	rsb	r3, r1, #2
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	b182      	cbz	r2, 800b128 <__ieee754_pow+0xd8>
 800b106:	e05d      	b.n	800b1c4 <__ieee754_pow+0x174>
 800b108:	2a00      	cmp	r2, #0
 800b10a:	d159      	bne.n	800b1c0 <__ieee754_pow+0x170>
 800b10c:	f1c3 0314 	rsb	r3, r3, #20
 800b110:	fa46 f103 	asr.w	r1, r6, r3
 800b114:	fa01 f303 	lsl.w	r3, r1, r3
 800b118:	42b3      	cmp	r3, r6
 800b11a:	f040 8479 	bne.w	800ba10 <__ieee754_pow+0x9c0>
 800b11e:	f001 0101 	and.w	r1, r1, #1
 800b122:	f1c1 0302 	rsb	r3, r1, #2
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	4b58      	ldr	r3, [pc, #352]	; (800b28c <__ieee754_pow+0x23c>)
 800b12a:	429e      	cmp	r6, r3
 800b12c:	d132      	bne.n	800b194 <__ieee754_pow+0x144>
 800b12e:	2f00      	cmp	r7, #0
 800b130:	f280 846a 	bge.w	800ba08 <__ieee754_pow+0x9b8>
 800b134:	4642      	mov	r2, r8
 800b136:	464b      	mov	r3, r9
 800b138:	2000      	movs	r0, #0
 800b13a:	4954      	ldr	r1, [pc, #336]	; (800b28c <__ieee754_pow+0x23c>)
 800b13c:	f7f5 fbaa 	bl	8000894 <__aeabi_ddiv>
 800b140:	e7a3      	b.n	800b08a <__ieee754_pow+0x3a>
 800b142:	2300      	movs	r3, #0
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	2a00      	cmp	r2, #0
 800b148:	d13c      	bne.n	800b1c4 <__ieee754_pow+0x174>
 800b14a:	4b4e      	ldr	r3, [pc, #312]	; (800b284 <__ieee754_pow+0x234>)
 800b14c:	429e      	cmp	r6, r3
 800b14e:	d1eb      	bne.n	800b128 <__ieee754_pow+0xd8>
 800b150:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b154:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b158:	ea53 030a 	orrs.w	r3, r3, sl
 800b15c:	f000 8448 	beq.w	800b9f0 <__ieee754_pow+0x9a0>
 800b160:	4b4b      	ldr	r3, [pc, #300]	; (800b290 <__ieee754_pow+0x240>)
 800b162:	429c      	cmp	r4, r3
 800b164:	dd0b      	ble.n	800b17e <__ieee754_pow+0x12e>
 800b166:	2f00      	cmp	r7, #0
 800b168:	f2c0 8448 	blt.w	800b9fc <__ieee754_pow+0x9ac>
 800b16c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b170:	4658      	mov	r0, fp
 800b172:	4661      	mov	r1, ip
 800b174:	b013      	add	sp, #76	; 0x4c
 800b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17a:	2302      	movs	r3, #2
 800b17c:	e7e2      	b.n	800b144 <__ieee754_pow+0xf4>
 800b17e:	2f00      	cmp	r7, #0
 800b180:	f04f 0b00 	mov.w	fp, #0
 800b184:	f04f 0c00 	mov.w	ip, #0
 800b188:	daf2      	bge.n	800b170 <__ieee754_pow+0x120>
 800b18a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b18e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b192:	e7ed      	b.n	800b170 <__ieee754_pow+0x120>
 800b194:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b198:	d106      	bne.n	800b1a8 <__ieee754_pow+0x158>
 800b19a:	4642      	mov	r2, r8
 800b19c:	464b      	mov	r3, r9
 800b19e:	4640      	mov	r0, r8
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	f7f5 fa4d 	bl	8000640 <__aeabi_dmul>
 800b1a6:	e770      	b.n	800b08a <__ieee754_pow+0x3a>
 800b1a8:	4b3a      	ldr	r3, [pc, #232]	; (800b294 <__ieee754_pow+0x244>)
 800b1aa:	429f      	cmp	r7, r3
 800b1ac:	d10a      	bne.n	800b1c4 <__ieee754_pow+0x174>
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	db08      	blt.n	800b1c4 <__ieee754_pow+0x174>
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	b013      	add	sp, #76	; 0x4c
 800b1b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	f000 bc5e 	b.w	800ba7c <__ieee754_sqrt>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	f000 fd34 	bl	800bc34 <fabs>
 800b1cc:	4683      	mov	fp, r0
 800b1ce:	468c      	mov	ip, r1
 800b1d0:	f1ba 0f00 	cmp.w	sl, #0
 800b1d4:	d128      	bne.n	800b228 <__ieee754_pow+0x1d8>
 800b1d6:	b124      	cbz	r4, 800b1e2 <__ieee754_pow+0x192>
 800b1d8:	4b2c      	ldr	r3, [pc, #176]	; (800b28c <__ieee754_pow+0x23c>)
 800b1da:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d122      	bne.n	800b228 <__ieee754_pow+0x1d8>
 800b1e2:	2f00      	cmp	r7, #0
 800b1e4:	da07      	bge.n	800b1f6 <__ieee754_pow+0x1a6>
 800b1e6:	465a      	mov	r2, fp
 800b1e8:	4663      	mov	r3, ip
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	4927      	ldr	r1, [pc, #156]	; (800b28c <__ieee754_pow+0x23c>)
 800b1ee:	f7f5 fb51 	bl	8000894 <__aeabi_ddiv>
 800b1f2:	4683      	mov	fp, r0
 800b1f4:	468c      	mov	ip, r1
 800b1f6:	2d00      	cmp	r5, #0
 800b1f8:	daba      	bge.n	800b170 <__ieee754_pow+0x120>
 800b1fa:	9b00      	ldr	r3, [sp, #0]
 800b1fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b200:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b204:	4323      	orrs	r3, r4
 800b206:	d108      	bne.n	800b21a <__ieee754_pow+0x1ca>
 800b208:	465a      	mov	r2, fp
 800b20a:	4663      	mov	r3, ip
 800b20c:	4658      	mov	r0, fp
 800b20e:	4661      	mov	r1, ip
 800b210:	f7f5 f85e 	bl	80002d0 <__aeabi_dsub>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	e790      	b.n	800b13c <__ieee754_pow+0xec>
 800b21a:	9b00      	ldr	r3, [sp, #0]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d1a7      	bne.n	800b170 <__ieee754_pow+0x120>
 800b220:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b224:	469c      	mov	ip, r3
 800b226:	e7a3      	b.n	800b170 <__ieee754_pow+0x120>
 800b228:	0feb      	lsrs	r3, r5, #31
 800b22a:	3b01      	subs	r3, #1
 800b22c:	930c      	str	r3, [sp, #48]	; 0x30
 800b22e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b230:	9b00      	ldr	r3, [sp, #0]
 800b232:	4313      	orrs	r3, r2
 800b234:	d104      	bne.n	800b240 <__ieee754_pow+0x1f0>
 800b236:	4642      	mov	r2, r8
 800b238:	464b      	mov	r3, r9
 800b23a:	4640      	mov	r0, r8
 800b23c:	4649      	mov	r1, r9
 800b23e:	e7e7      	b.n	800b210 <__ieee754_pow+0x1c0>
 800b240:	4b15      	ldr	r3, [pc, #84]	; (800b298 <__ieee754_pow+0x248>)
 800b242:	429e      	cmp	r6, r3
 800b244:	f340 80f6 	ble.w	800b434 <__ieee754_pow+0x3e4>
 800b248:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b24c:	429e      	cmp	r6, r3
 800b24e:	4b10      	ldr	r3, [pc, #64]	; (800b290 <__ieee754_pow+0x240>)
 800b250:	dd09      	ble.n	800b266 <__ieee754_pow+0x216>
 800b252:	429c      	cmp	r4, r3
 800b254:	dc0c      	bgt.n	800b270 <__ieee754_pow+0x220>
 800b256:	2f00      	cmp	r7, #0
 800b258:	da0c      	bge.n	800b274 <__ieee754_pow+0x224>
 800b25a:	2000      	movs	r0, #0
 800b25c:	b013      	add	sp, #76	; 0x4c
 800b25e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b262:	f000 bce2 	b.w	800bc2a <__math_oflow>
 800b266:	429c      	cmp	r4, r3
 800b268:	dbf5      	blt.n	800b256 <__ieee754_pow+0x206>
 800b26a:	4b08      	ldr	r3, [pc, #32]	; (800b28c <__ieee754_pow+0x23c>)
 800b26c:	429c      	cmp	r4, r3
 800b26e:	dd15      	ble.n	800b29c <__ieee754_pow+0x24c>
 800b270:	2f00      	cmp	r7, #0
 800b272:	dcf2      	bgt.n	800b25a <__ieee754_pow+0x20a>
 800b274:	2000      	movs	r0, #0
 800b276:	b013      	add	sp, #76	; 0x4c
 800b278:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	f000 bcd0 	b.w	800bc20 <__math_uflow>
 800b280:	fff00000 	.word	0xfff00000
 800b284:	7ff00000 	.word	0x7ff00000
 800b288:	433fffff 	.word	0x433fffff
 800b28c:	3ff00000 	.word	0x3ff00000
 800b290:	3fefffff 	.word	0x3fefffff
 800b294:	3fe00000 	.word	0x3fe00000
 800b298:	41e00000 	.word	0x41e00000
 800b29c:	4661      	mov	r1, ip
 800b29e:	2200      	movs	r2, #0
 800b2a0:	4658      	mov	r0, fp
 800b2a2:	4b5f      	ldr	r3, [pc, #380]	; (800b420 <__ieee754_pow+0x3d0>)
 800b2a4:	f7f5 f814 	bl	80002d0 <__aeabi_dsub>
 800b2a8:	a355      	add	r3, pc, #340	; (adr r3, 800b400 <__ieee754_pow+0x3b0>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	460d      	mov	r5, r1
 800b2b2:	f7f5 f9c5 	bl	8000640 <__aeabi_dmul>
 800b2b6:	a354      	add	r3, pc, #336	; (adr r3, 800b408 <__ieee754_pow+0x3b8>)
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	4606      	mov	r6, r0
 800b2be:	460f      	mov	r7, r1
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	f7f5 f9bc 	bl	8000640 <__aeabi_dmul>
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	4682      	mov	sl, r0
 800b2cc:	468b      	mov	fp, r1
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4b54      	ldr	r3, [pc, #336]	; (800b424 <__ieee754_pow+0x3d4>)
 800b2d4:	f7f5 f9b4 	bl	8000640 <__aeabi_dmul>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	a14c      	add	r1, pc, #304	; (adr r1, 800b410 <__ieee754_pow+0x3c0>)
 800b2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e2:	f7f4 fff5 	bl	80002d0 <__aeabi_dsub>
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	462b      	mov	r3, r5
 800b2ea:	f7f5 f9a9 	bl	8000640 <__aeabi_dmul>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	494c      	ldr	r1, [pc, #304]	; (800b428 <__ieee754_pow+0x3d8>)
 800b2f6:	f7f4 ffeb 	bl	80002d0 <__aeabi_dsub>
 800b2fa:	4622      	mov	r2, r4
 800b2fc:	462b      	mov	r3, r5
 800b2fe:	4680      	mov	r8, r0
 800b300:	4689      	mov	r9, r1
 800b302:	4620      	mov	r0, r4
 800b304:	4629      	mov	r1, r5
 800b306:	f7f5 f99b 	bl	8000640 <__aeabi_dmul>
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	4640      	mov	r0, r8
 800b310:	4649      	mov	r1, r9
 800b312:	f7f5 f995 	bl	8000640 <__aeabi_dmul>
 800b316:	a340      	add	r3, pc, #256	; (adr r3, 800b418 <__ieee754_pow+0x3c8>)
 800b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31c:	f7f5 f990 	bl	8000640 <__aeabi_dmul>
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	4650      	mov	r0, sl
 800b326:	4659      	mov	r1, fp
 800b328:	f7f4 ffd2 	bl	80002d0 <__aeabi_dsub>
 800b32c:	f04f 0a00 	mov.w	sl, #0
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	4630      	mov	r0, r6
 800b33a:	4639      	mov	r1, r7
 800b33c:	f7f4 ffca 	bl	80002d4 <__adddf3>
 800b340:	4632      	mov	r2, r6
 800b342:	463b      	mov	r3, r7
 800b344:	4650      	mov	r0, sl
 800b346:	468b      	mov	fp, r1
 800b348:	f7f4 ffc2 	bl	80002d0 <__aeabi_dsub>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4620      	mov	r0, r4
 800b352:	4629      	mov	r1, r5
 800b354:	f7f4 ffbc 	bl	80002d0 <__aeabi_dsub>
 800b358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b35c:	9b00      	ldr	r3, [sp, #0]
 800b35e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b360:	3b01      	subs	r3, #1
 800b362:	4313      	orrs	r3, r2
 800b364:	f04f 0600 	mov.w	r6, #0
 800b368:	f04f 0200 	mov.w	r2, #0
 800b36c:	bf0c      	ite	eq
 800b36e:	4b2f      	ldreq	r3, [pc, #188]	; (800b42c <__ieee754_pow+0x3dc>)
 800b370:	4b2b      	ldrne	r3, [pc, #172]	; (800b420 <__ieee754_pow+0x3d0>)
 800b372:	4604      	mov	r4, r0
 800b374:	460d      	mov	r5, r1
 800b376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b37a:	e9cd 2300 	strd	r2, r3, [sp]
 800b37e:	4632      	mov	r2, r6
 800b380:	463b      	mov	r3, r7
 800b382:	f7f4 ffa5 	bl	80002d0 <__aeabi_dsub>
 800b386:	4652      	mov	r2, sl
 800b388:	465b      	mov	r3, fp
 800b38a:	f7f5 f959 	bl	8000640 <__aeabi_dmul>
 800b38e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b392:	4680      	mov	r8, r0
 800b394:	4689      	mov	r9, r1
 800b396:	4620      	mov	r0, r4
 800b398:	4629      	mov	r1, r5
 800b39a:	f7f5 f951 	bl	8000640 <__aeabi_dmul>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	f7f4 ff95 	bl	80002d4 <__adddf3>
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	463b      	mov	r3, r7
 800b3ae:	4680      	mov	r8, r0
 800b3b0:	4689      	mov	r9, r1
 800b3b2:	4650      	mov	r0, sl
 800b3b4:	4659      	mov	r1, fp
 800b3b6:	f7f5 f943 	bl	8000640 <__aeabi_dmul>
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	460d      	mov	r5, r1
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b3ca:	f7f4 ff83 	bl	80002d4 <__adddf3>
 800b3ce:	4b18      	ldr	r3, [pc, #96]	; (800b430 <__ieee754_pow+0x3e0>)
 800b3d0:	4682      	mov	sl, r0
 800b3d2:	4299      	cmp	r1, r3
 800b3d4:	460f      	mov	r7, r1
 800b3d6:	460e      	mov	r6, r1
 800b3d8:	f340 82e5 	ble.w	800b9a6 <__ieee754_pow+0x956>
 800b3dc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b3e0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b3e4:	4303      	orrs	r3, r0
 800b3e6:	f000 81df 	beq.w	800b7a8 <__ieee754_pow+0x758>
 800b3ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f7f5 fb97 	bl	8000b24 <__aeabi_dcmplt>
 800b3f6:	3800      	subs	r0, #0
 800b3f8:	bf18      	it	ne
 800b3fa:	2001      	movne	r0, #1
 800b3fc:	e72e      	b.n	800b25c <__ieee754_pow+0x20c>
 800b3fe:	bf00      	nop
 800b400:	60000000 	.word	0x60000000
 800b404:	3ff71547 	.word	0x3ff71547
 800b408:	f85ddf44 	.word	0xf85ddf44
 800b40c:	3e54ae0b 	.word	0x3e54ae0b
 800b410:	55555555 	.word	0x55555555
 800b414:	3fd55555 	.word	0x3fd55555
 800b418:	652b82fe 	.word	0x652b82fe
 800b41c:	3ff71547 	.word	0x3ff71547
 800b420:	3ff00000 	.word	0x3ff00000
 800b424:	3fd00000 	.word	0x3fd00000
 800b428:	3fe00000 	.word	0x3fe00000
 800b42c:	bff00000 	.word	0xbff00000
 800b430:	408fffff 	.word	0x408fffff
 800b434:	4bd2      	ldr	r3, [pc, #840]	; (800b780 <__ieee754_pow+0x730>)
 800b436:	2200      	movs	r2, #0
 800b438:	402b      	ands	r3, r5
 800b43a:	b943      	cbnz	r3, 800b44e <__ieee754_pow+0x3fe>
 800b43c:	4658      	mov	r0, fp
 800b43e:	4661      	mov	r1, ip
 800b440:	4bd0      	ldr	r3, [pc, #832]	; (800b784 <__ieee754_pow+0x734>)
 800b442:	f7f5 f8fd 	bl	8000640 <__aeabi_dmul>
 800b446:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b44a:	4683      	mov	fp, r0
 800b44c:	460c      	mov	r4, r1
 800b44e:	1523      	asrs	r3, r4, #20
 800b450:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b454:	4413      	add	r3, r2
 800b456:	930b      	str	r3, [sp, #44]	; 0x2c
 800b458:	4bcb      	ldr	r3, [pc, #812]	; (800b788 <__ieee754_pow+0x738>)
 800b45a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b45e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b462:	429c      	cmp	r4, r3
 800b464:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b468:	dd08      	ble.n	800b47c <__ieee754_pow+0x42c>
 800b46a:	4bc8      	ldr	r3, [pc, #800]	; (800b78c <__ieee754_pow+0x73c>)
 800b46c:	429c      	cmp	r4, r3
 800b46e:	f340 8199 	ble.w	800b7a4 <__ieee754_pow+0x754>
 800b472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b474:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b478:	3301      	adds	r3, #1
 800b47a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b47c:	2600      	movs	r6, #0
 800b47e:	00f3      	lsls	r3, r6, #3
 800b480:	930d      	str	r3, [sp, #52]	; 0x34
 800b482:	4bc3      	ldr	r3, [pc, #780]	; (800b790 <__ieee754_pow+0x740>)
 800b484:	4658      	mov	r0, fp
 800b486:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b48a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b48e:	4629      	mov	r1, r5
 800b490:	461a      	mov	r2, r3
 800b492:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b496:	4623      	mov	r3, r4
 800b498:	f7f4 ff1a 	bl	80002d0 <__aeabi_dsub>
 800b49c:	46da      	mov	sl, fp
 800b49e:	462b      	mov	r3, r5
 800b4a0:	4652      	mov	r2, sl
 800b4a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b4a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b4aa:	f7f4 ff13 	bl	80002d4 <__adddf3>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	49b7      	ldr	r1, [pc, #732]	; (800b794 <__ieee754_pow+0x744>)
 800b4b6:	f7f5 f9ed 	bl	8000894 <__aeabi_ddiv>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b4c6:	f7f5 f8bb 	bl	8000640 <__aeabi_dmul>
 800b4ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b4ce:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b4d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2200      	movs	r2, #0
 800b4da:	46ab      	mov	fp, r5
 800b4dc:	106d      	asrs	r5, r5, #1
 800b4de:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b4e2:	9304      	str	r3, [sp, #16]
 800b4e4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b4e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b4ec:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	4614      	mov	r4, r2
 800b4f6:	461d      	mov	r5, r3
 800b4f8:	f7f5 f8a2 	bl	8000640 <__aeabi_dmul>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b504:	f7f4 fee4 	bl	80002d0 <__aeabi_dsub>
 800b508:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b50c:	4606      	mov	r6, r0
 800b50e:	460f      	mov	r7, r1
 800b510:	4620      	mov	r0, r4
 800b512:	4629      	mov	r1, r5
 800b514:	f7f4 fedc 	bl	80002d0 <__aeabi_dsub>
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	4650      	mov	r0, sl
 800b51e:	4659      	mov	r1, fp
 800b520:	f7f4 fed6 	bl	80002d0 <__aeabi_dsub>
 800b524:	4642      	mov	r2, r8
 800b526:	464b      	mov	r3, r9
 800b528:	f7f5 f88a 	bl	8000640 <__aeabi_dmul>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f4 fecc 	bl	80002d0 <__aeabi_dsub>
 800b538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b53c:	f7f5 f880 	bl	8000640 <__aeabi_dmul>
 800b540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b544:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b548:	4610      	mov	r0, r2
 800b54a:	4619      	mov	r1, r3
 800b54c:	f7f5 f878 	bl	8000640 <__aeabi_dmul>
 800b550:	a379      	add	r3, pc, #484	; (adr r3, 800b738 <__ieee754_pow+0x6e8>)
 800b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b556:	4604      	mov	r4, r0
 800b558:	460d      	mov	r5, r1
 800b55a:	f7f5 f871 	bl	8000640 <__aeabi_dmul>
 800b55e:	a378      	add	r3, pc, #480	; (adr r3, 800b740 <__ieee754_pow+0x6f0>)
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f7f4 feb6 	bl	80002d4 <__adddf3>
 800b568:	4622      	mov	r2, r4
 800b56a:	462b      	mov	r3, r5
 800b56c:	f7f5 f868 	bl	8000640 <__aeabi_dmul>
 800b570:	a375      	add	r3, pc, #468	; (adr r3, 800b748 <__ieee754_pow+0x6f8>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	f7f4 fead 	bl	80002d4 <__adddf3>
 800b57a:	4622      	mov	r2, r4
 800b57c:	462b      	mov	r3, r5
 800b57e:	f7f5 f85f 	bl	8000640 <__aeabi_dmul>
 800b582:	a373      	add	r3, pc, #460	; (adr r3, 800b750 <__ieee754_pow+0x700>)
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f7f4 fea4 	bl	80002d4 <__adddf3>
 800b58c:	4622      	mov	r2, r4
 800b58e:	462b      	mov	r3, r5
 800b590:	f7f5 f856 	bl	8000640 <__aeabi_dmul>
 800b594:	a370      	add	r3, pc, #448	; (adr r3, 800b758 <__ieee754_pow+0x708>)
 800b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59a:	f7f4 fe9b 	bl	80002d4 <__adddf3>
 800b59e:	4622      	mov	r2, r4
 800b5a0:	462b      	mov	r3, r5
 800b5a2:	f7f5 f84d 	bl	8000640 <__aeabi_dmul>
 800b5a6:	a36e      	add	r3, pc, #440	; (adr r3, 800b760 <__ieee754_pow+0x710>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	f7f4 fe92 	bl	80002d4 <__adddf3>
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460f      	mov	r7, r1
 800b5b6:	462b      	mov	r3, r5
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	f7f5 f840 	bl	8000640 <__aeabi_dmul>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f7f5 f83a 	bl	8000640 <__aeabi_dmul>
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	460d      	mov	r5, r1
 800b5d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5d4:	4642      	mov	r2, r8
 800b5d6:	464b      	mov	r3, r9
 800b5d8:	f7f4 fe7c 	bl	80002d4 <__adddf3>
 800b5dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b5e0:	f7f5 f82e 	bl	8000640 <__aeabi_dmul>
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	462b      	mov	r3, r5
 800b5e8:	f7f4 fe74 	bl	80002d4 <__adddf3>
 800b5ec:	4642      	mov	r2, r8
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460f      	mov	r7, r1
 800b5f2:	464b      	mov	r3, r9
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	f7f5 f822 	bl	8000640 <__aeabi_dmul>
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4b66      	ldr	r3, [pc, #408]	; (800b798 <__ieee754_pow+0x748>)
 800b600:	4682      	mov	sl, r0
 800b602:	468b      	mov	fp, r1
 800b604:	f7f4 fe66 	bl	80002d4 <__adddf3>
 800b608:	4632      	mov	r2, r6
 800b60a:	463b      	mov	r3, r7
 800b60c:	f7f4 fe62 	bl	80002d4 <__adddf3>
 800b610:	2400      	movs	r4, #0
 800b612:	460d      	mov	r5, r1
 800b614:	4622      	mov	r2, r4
 800b616:	460b      	mov	r3, r1
 800b618:	4640      	mov	r0, r8
 800b61a:	4649      	mov	r1, r9
 800b61c:	f7f5 f810 	bl	8000640 <__aeabi_dmul>
 800b620:	2200      	movs	r2, #0
 800b622:	4680      	mov	r8, r0
 800b624:	4689      	mov	r9, r1
 800b626:	4620      	mov	r0, r4
 800b628:	4629      	mov	r1, r5
 800b62a:	4b5b      	ldr	r3, [pc, #364]	; (800b798 <__ieee754_pow+0x748>)
 800b62c:	f7f4 fe50 	bl	80002d0 <__aeabi_dsub>
 800b630:	4652      	mov	r2, sl
 800b632:	465b      	mov	r3, fp
 800b634:	f7f4 fe4c 	bl	80002d0 <__aeabi_dsub>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f4 fe46 	bl	80002d0 <__aeabi_dsub>
 800b644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b648:	f7f4 fffa 	bl	8000640 <__aeabi_dmul>
 800b64c:	4622      	mov	r2, r4
 800b64e:	4606      	mov	r6, r0
 800b650:	460f      	mov	r7, r1
 800b652:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b656:	462b      	mov	r3, r5
 800b658:	f7f4 fff2 	bl	8000640 <__aeabi_dmul>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	4630      	mov	r0, r6
 800b662:	4639      	mov	r1, r7
 800b664:	f7f4 fe36 	bl	80002d4 <__adddf3>
 800b668:	2400      	movs	r4, #0
 800b66a:	4606      	mov	r6, r0
 800b66c:	460f      	mov	r7, r1
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4640      	mov	r0, r8
 800b674:	4649      	mov	r1, r9
 800b676:	f7f4 fe2d 	bl	80002d4 <__adddf3>
 800b67a:	a33b      	add	r3, pc, #236	; (adr r3, 800b768 <__ieee754_pow+0x718>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	4620      	mov	r0, r4
 800b682:	460d      	mov	r5, r1
 800b684:	f7f4 ffdc 	bl	8000640 <__aeabi_dmul>
 800b688:	4642      	mov	r2, r8
 800b68a:	464b      	mov	r3, r9
 800b68c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b690:	4620      	mov	r0, r4
 800b692:	4629      	mov	r1, r5
 800b694:	f7f4 fe1c 	bl	80002d0 <__aeabi_dsub>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	4630      	mov	r0, r6
 800b69e:	4639      	mov	r1, r7
 800b6a0:	f7f4 fe16 	bl	80002d0 <__aeabi_dsub>
 800b6a4:	a332      	add	r3, pc, #200	; (adr r3, 800b770 <__ieee754_pow+0x720>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	f7f4 ffc9 	bl	8000640 <__aeabi_dmul>
 800b6ae:	a332      	add	r3, pc, #200	; (adr r3, 800b778 <__ieee754_pow+0x728>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	460f      	mov	r7, r1
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	f7f4 ffc0 	bl	8000640 <__aeabi_dmul>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	f7f4 fe04 	bl	80002d4 <__adddf3>
 800b6cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6ce:	4b33      	ldr	r3, [pc, #204]	; (800b79c <__ieee754_pow+0x74c>)
 800b6d0:	f04f 0a00 	mov.w	sl, #0
 800b6d4:	4413      	add	r3, r2
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f7f4 fdfb 	bl	80002d4 <__adddf3>
 800b6de:	4680      	mov	r8, r0
 800b6e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b6e2:	4689      	mov	r9, r1
 800b6e4:	f7f4 ff42 	bl	800056c <__aeabi_i2d>
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	460d      	mov	r5, r1
 800b6ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6ee:	4b2c      	ldr	r3, [pc, #176]	; (800b7a0 <__ieee754_pow+0x750>)
 800b6f0:	4413      	add	r3, r2
 800b6f2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b6f6:	4642      	mov	r2, r8
 800b6f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6fc:	464b      	mov	r3, r9
 800b6fe:	f7f4 fde9 	bl	80002d4 <__adddf3>
 800b702:	4632      	mov	r2, r6
 800b704:	463b      	mov	r3, r7
 800b706:	f7f4 fde5 	bl	80002d4 <__adddf3>
 800b70a:	4622      	mov	r2, r4
 800b70c:	462b      	mov	r3, r5
 800b70e:	f7f4 fde1 	bl	80002d4 <__adddf3>
 800b712:	4622      	mov	r2, r4
 800b714:	462b      	mov	r3, r5
 800b716:	4650      	mov	r0, sl
 800b718:	468b      	mov	fp, r1
 800b71a:	f7f4 fdd9 	bl	80002d0 <__aeabi_dsub>
 800b71e:	4632      	mov	r2, r6
 800b720:	463b      	mov	r3, r7
 800b722:	f7f4 fdd5 	bl	80002d0 <__aeabi_dsub>
 800b726:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b72a:	f7f4 fdd1 	bl	80002d0 <__aeabi_dsub>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	4640      	mov	r0, r8
 800b734:	4649      	mov	r1, r9
 800b736:	e60d      	b.n	800b354 <__ieee754_pow+0x304>
 800b738:	4a454eef 	.word	0x4a454eef
 800b73c:	3fca7e28 	.word	0x3fca7e28
 800b740:	93c9db65 	.word	0x93c9db65
 800b744:	3fcd864a 	.word	0x3fcd864a
 800b748:	a91d4101 	.word	0xa91d4101
 800b74c:	3fd17460 	.word	0x3fd17460
 800b750:	518f264d 	.word	0x518f264d
 800b754:	3fd55555 	.word	0x3fd55555
 800b758:	db6fabff 	.word	0xdb6fabff
 800b75c:	3fdb6db6 	.word	0x3fdb6db6
 800b760:	33333303 	.word	0x33333303
 800b764:	3fe33333 	.word	0x3fe33333
 800b768:	e0000000 	.word	0xe0000000
 800b76c:	3feec709 	.word	0x3feec709
 800b770:	dc3a03fd 	.word	0xdc3a03fd
 800b774:	3feec709 	.word	0x3feec709
 800b778:	145b01f5 	.word	0x145b01f5
 800b77c:	be3e2fe0 	.word	0xbe3e2fe0
 800b780:	7ff00000 	.word	0x7ff00000
 800b784:	43400000 	.word	0x43400000
 800b788:	0003988e 	.word	0x0003988e
 800b78c:	000bb679 	.word	0x000bb679
 800b790:	0800c2c0 	.word	0x0800c2c0
 800b794:	3ff00000 	.word	0x3ff00000
 800b798:	40080000 	.word	0x40080000
 800b79c:	0800c2e0 	.word	0x0800c2e0
 800b7a0:	0800c2d0 	.word	0x0800c2d0
 800b7a4:	2601      	movs	r6, #1
 800b7a6:	e66a      	b.n	800b47e <__ieee754_pow+0x42e>
 800b7a8:	a39d      	add	r3, pc, #628	; (adr r3, 800ba20 <__ieee754_pow+0x9d0>)
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	f7f4 fd8f 	bl	80002d4 <__adddf3>
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7bc:	462b      	mov	r3, r5
 800b7be:	4650      	mov	r0, sl
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	f7f4 fd85 	bl	80002d0 <__aeabi_dsub>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7ce:	f7f5 f9c7 	bl	8000b60 <__aeabi_dcmpgt>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	f47f ae09 	bne.w	800b3ea <__ieee754_pow+0x39a>
 800b7d8:	4aa3      	ldr	r2, [pc, #652]	; (800ba68 <__ieee754_pow+0xa18>)
 800b7da:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	f340 8101 	ble.w	800b9e6 <__ieee754_pow+0x996>
 800b7e4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	151b      	asrs	r3, r3, #20
 800b7ec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b7f0:	fa4a f303 	asr.w	r3, sl, r3
 800b7f4:	4433      	add	r3, r6
 800b7f6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b7fa:	4f9c      	ldr	r7, [pc, #624]	; (800ba6c <__ieee754_pow+0xa1c>)
 800b7fc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b800:	4117      	asrs	r7, r2
 800b802:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b806:	ea23 0107 	bic.w	r1, r3, r7
 800b80a:	f1c2 0214 	rsb	r2, r2, #20
 800b80e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b812:	460b      	mov	r3, r1
 800b814:	fa4a fa02 	asr.w	sl, sl, r2
 800b818:	2e00      	cmp	r6, #0
 800b81a:	4602      	mov	r2, r0
 800b81c:	4629      	mov	r1, r5
 800b81e:	4620      	mov	r0, r4
 800b820:	bfb8      	it	lt
 800b822:	f1ca 0a00 	rsblt	sl, sl, #0
 800b826:	f7f4 fd53 	bl	80002d0 <__aeabi_dsub>
 800b82a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b832:	2400      	movs	r4, #0
 800b834:	4642      	mov	r2, r8
 800b836:	464b      	mov	r3, r9
 800b838:	f7f4 fd4c 	bl	80002d4 <__adddf3>
 800b83c:	a37a      	add	r3, pc, #488	; (adr r3, 800ba28 <__ieee754_pow+0x9d8>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	4620      	mov	r0, r4
 800b844:	460d      	mov	r5, r1
 800b846:	f7f4 fefb 	bl	8000640 <__aeabi_dmul>
 800b84a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b84e:	4606      	mov	r6, r0
 800b850:	460f      	mov	r7, r1
 800b852:	4620      	mov	r0, r4
 800b854:	4629      	mov	r1, r5
 800b856:	f7f4 fd3b 	bl	80002d0 <__aeabi_dsub>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4640      	mov	r0, r8
 800b860:	4649      	mov	r1, r9
 800b862:	f7f4 fd35 	bl	80002d0 <__aeabi_dsub>
 800b866:	a372      	add	r3, pc, #456	; (adr r3, 800ba30 <__ieee754_pow+0x9e0>)
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	f7f4 fee8 	bl	8000640 <__aeabi_dmul>
 800b870:	a371      	add	r3, pc, #452	; (adr r3, 800ba38 <__ieee754_pow+0x9e8>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	4680      	mov	r8, r0
 800b878:	4689      	mov	r9, r1
 800b87a:	4620      	mov	r0, r4
 800b87c:	4629      	mov	r1, r5
 800b87e:	f7f4 fedf 	bl	8000640 <__aeabi_dmul>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4640      	mov	r0, r8
 800b888:	4649      	mov	r1, r9
 800b88a:	f7f4 fd23 	bl	80002d4 <__adddf3>
 800b88e:	4604      	mov	r4, r0
 800b890:	460d      	mov	r5, r1
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4630      	mov	r0, r6
 800b898:	4639      	mov	r1, r7
 800b89a:	f7f4 fd1b 	bl	80002d4 <__adddf3>
 800b89e:	4632      	mov	r2, r6
 800b8a0:	463b      	mov	r3, r7
 800b8a2:	4680      	mov	r8, r0
 800b8a4:	4689      	mov	r9, r1
 800b8a6:	f7f4 fd13 	bl	80002d0 <__aeabi_dsub>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f4 fd0d 	bl	80002d0 <__aeabi_dsub>
 800b8b6:	4642      	mov	r2, r8
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	460f      	mov	r7, r1
 800b8bc:	464b      	mov	r3, r9
 800b8be:	4640      	mov	r0, r8
 800b8c0:	4649      	mov	r1, r9
 800b8c2:	f7f4 febd 	bl	8000640 <__aeabi_dmul>
 800b8c6:	a35e      	add	r3, pc, #376	; (adr r3, 800ba40 <__ieee754_pow+0x9f0>)
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	460d      	mov	r5, r1
 800b8d0:	f7f4 feb6 	bl	8000640 <__aeabi_dmul>
 800b8d4:	a35c      	add	r3, pc, #368	; (adr r3, 800ba48 <__ieee754_pow+0x9f8>)
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	f7f4 fcf9 	bl	80002d0 <__aeabi_dsub>
 800b8de:	4622      	mov	r2, r4
 800b8e0:	462b      	mov	r3, r5
 800b8e2:	f7f4 fead 	bl	8000640 <__aeabi_dmul>
 800b8e6:	a35a      	add	r3, pc, #360	; (adr r3, 800ba50 <__ieee754_pow+0xa00>)
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	f7f4 fcf2 	bl	80002d4 <__adddf3>
 800b8f0:	4622      	mov	r2, r4
 800b8f2:	462b      	mov	r3, r5
 800b8f4:	f7f4 fea4 	bl	8000640 <__aeabi_dmul>
 800b8f8:	a357      	add	r3, pc, #348	; (adr r3, 800ba58 <__ieee754_pow+0xa08>)
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	f7f4 fce7 	bl	80002d0 <__aeabi_dsub>
 800b902:	4622      	mov	r2, r4
 800b904:	462b      	mov	r3, r5
 800b906:	f7f4 fe9b 	bl	8000640 <__aeabi_dmul>
 800b90a:	a355      	add	r3, pc, #340	; (adr r3, 800ba60 <__ieee754_pow+0xa10>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fce0 	bl	80002d4 <__adddf3>
 800b914:	4622      	mov	r2, r4
 800b916:	462b      	mov	r3, r5
 800b918:	f7f4 fe92 	bl	8000640 <__aeabi_dmul>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4640      	mov	r0, r8
 800b922:	4649      	mov	r1, r9
 800b924:	f7f4 fcd4 	bl	80002d0 <__aeabi_dsub>
 800b928:	4604      	mov	r4, r0
 800b92a:	460d      	mov	r5, r1
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4640      	mov	r0, r8
 800b932:	4649      	mov	r1, r9
 800b934:	f7f4 fe84 	bl	8000640 <__aeabi_dmul>
 800b938:	2200      	movs	r2, #0
 800b93a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b93e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b942:	4620      	mov	r0, r4
 800b944:	4629      	mov	r1, r5
 800b946:	f7f4 fcc3 	bl	80002d0 <__aeabi_dsub>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b952:	f7f4 ff9f 	bl	8000894 <__aeabi_ddiv>
 800b956:	4632      	mov	r2, r6
 800b958:	4604      	mov	r4, r0
 800b95a:	460d      	mov	r5, r1
 800b95c:	463b      	mov	r3, r7
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f4 fe6d 	bl	8000640 <__aeabi_dmul>
 800b966:	4632      	mov	r2, r6
 800b968:	463b      	mov	r3, r7
 800b96a:	f7f4 fcb3 	bl	80002d4 <__adddf3>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4620      	mov	r0, r4
 800b974:	4629      	mov	r1, r5
 800b976:	f7f4 fcab 	bl	80002d0 <__aeabi_dsub>
 800b97a:	4642      	mov	r2, r8
 800b97c:	464b      	mov	r3, r9
 800b97e:	f7f4 fca7 	bl	80002d0 <__aeabi_dsub>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	2000      	movs	r0, #0
 800b988:	4939      	ldr	r1, [pc, #228]	; (800ba70 <__ieee754_pow+0xa20>)
 800b98a:	f7f4 fca1 	bl	80002d0 <__aeabi_dsub>
 800b98e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b992:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b996:	da29      	bge.n	800b9ec <__ieee754_pow+0x99c>
 800b998:	4652      	mov	r2, sl
 800b99a:	f000 f955 	bl	800bc48 <scalbn>
 800b99e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9a2:	f7ff bbfe 	b.w	800b1a2 <__ieee754_pow+0x152>
 800b9a6:	4b33      	ldr	r3, [pc, #204]	; (800ba74 <__ieee754_pow+0xa24>)
 800b9a8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b9ac:	429f      	cmp	r7, r3
 800b9ae:	f77f af13 	ble.w	800b7d8 <__ieee754_pow+0x788>
 800b9b2:	4b31      	ldr	r3, [pc, #196]	; (800ba78 <__ieee754_pow+0xa28>)
 800b9b4:	440b      	add	r3, r1
 800b9b6:	4303      	orrs	r3, r0
 800b9b8:	d009      	beq.n	800b9ce <__ieee754_pow+0x97e>
 800b9ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f7f5 f8af 	bl	8000b24 <__aeabi_dcmplt>
 800b9c6:	3800      	subs	r0, #0
 800b9c8:	bf18      	it	ne
 800b9ca:	2001      	movne	r0, #1
 800b9cc:	e453      	b.n	800b276 <__ieee754_pow+0x226>
 800b9ce:	4622      	mov	r2, r4
 800b9d0:	462b      	mov	r3, r5
 800b9d2:	f7f4 fc7d 	bl	80002d0 <__aeabi_dsub>
 800b9d6:	4642      	mov	r2, r8
 800b9d8:	464b      	mov	r3, r9
 800b9da:	f7f5 f8b7 	bl	8000b4c <__aeabi_dcmpge>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f43f aefa 	beq.w	800b7d8 <__ieee754_pow+0x788>
 800b9e4:	e7e9      	b.n	800b9ba <__ieee754_pow+0x96a>
 800b9e6:	f04f 0a00 	mov.w	sl, #0
 800b9ea:	e720      	b.n	800b82e <__ieee754_pow+0x7de>
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	e7d6      	b.n	800b99e <__ieee754_pow+0x94e>
 800b9f0:	f04f 0b00 	mov.w	fp, #0
 800b9f4:	f8df c078 	ldr.w	ip, [pc, #120]	; 800ba70 <__ieee754_pow+0xa20>
 800b9f8:	f7ff bbba 	b.w	800b170 <__ieee754_pow+0x120>
 800b9fc:	f04f 0b00 	mov.w	fp, #0
 800ba00:	f04f 0c00 	mov.w	ip, #0
 800ba04:	f7ff bbb4 	b.w	800b170 <__ieee754_pow+0x120>
 800ba08:	4640      	mov	r0, r8
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f7ff bb3d 	b.w	800b08a <__ieee754_pow+0x3a>
 800ba10:	9200      	str	r2, [sp, #0]
 800ba12:	f7ff bb89 	b.w	800b128 <__ieee754_pow+0xd8>
 800ba16:	2300      	movs	r3, #0
 800ba18:	f7ff bb73 	b.w	800b102 <__ieee754_pow+0xb2>
 800ba1c:	f3af 8000 	nop.w
 800ba20:	652b82fe 	.word	0x652b82fe
 800ba24:	3c971547 	.word	0x3c971547
 800ba28:	00000000 	.word	0x00000000
 800ba2c:	3fe62e43 	.word	0x3fe62e43
 800ba30:	fefa39ef 	.word	0xfefa39ef
 800ba34:	3fe62e42 	.word	0x3fe62e42
 800ba38:	0ca86c39 	.word	0x0ca86c39
 800ba3c:	be205c61 	.word	0xbe205c61
 800ba40:	72bea4d0 	.word	0x72bea4d0
 800ba44:	3e663769 	.word	0x3e663769
 800ba48:	c5d26bf1 	.word	0xc5d26bf1
 800ba4c:	3ebbbd41 	.word	0x3ebbbd41
 800ba50:	af25de2c 	.word	0xaf25de2c
 800ba54:	3f11566a 	.word	0x3f11566a
 800ba58:	16bebd93 	.word	0x16bebd93
 800ba5c:	3f66c16c 	.word	0x3f66c16c
 800ba60:	5555553e 	.word	0x5555553e
 800ba64:	3fc55555 	.word	0x3fc55555
 800ba68:	3fe00000 	.word	0x3fe00000
 800ba6c:	000fffff 	.word	0x000fffff
 800ba70:	3ff00000 	.word	0x3ff00000
 800ba74:	4090cbff 	.word	0x4090cbff
 800ba78:	3f6f3400 	.word	0x3f6f3400

0800ba7c <__ieee754_sqrt>:
 800ba7c:	f8df c158 	ldr.w	ip, [pc, #344]	; 800bbd8 <__ieee754_sqrt+0x15c>
 800ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba84:	ea3c 0c01 	bics.w	ip, ip, r1
 800ba88:	4606      	mov	r6, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	460a      	mov	r2, r1
 800ba90:	4607      	mov	r7, r0
 800ba92:	4603      	mov	r3, r0
 800ba94:	d10f      	bne.n	800bab6 <__ieee754_sqrt+0x3a>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	f7f4 fdd1 	bl	8000640 <__aeabi_dmul>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4630      	mov	r0, r6
 800baa4:	4629      	mov	r1, r5
 800baa6:	f7f4 fc15 	bl	80002d4 <__adddf3>
 800baaa:	4606      	mov	r6, r0
 800baac:	460d      	mov	r5, r1
 800baae:	4630      	mov	r0, r6
 800bab0:	4629      	mov	r1, r5
 800bab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab6:	2900      	cmp	r1, #0
 800bab8:	dc0e      	bgt.n	800bad8 <__ieee754_sqrt+0x5c>
 800baba:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800babe:	ea5c 0707 	orrs.w	r7, ip, r7
 800bac2:	d0f4      	beq.n	800baae <__ieee754_sqrt+0x32>
 800bac4:	b141      	cbz	r1, 800bad8 <__ieee754_sqrt+0x5c>
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	f7f4 fc01 	bl	80002d0 <__aeabi_dsub>
 800bace:	4602      	mov	r2, r0
 800bad0:	460b      	mov	r3, r1
 800bad2:	f7f4 fedf 	bl	8000894 <__aeabi_ddiv>
 800bad6:	e7e8      	b.n	800baaa <__ieee754_sqrt+0x2e>
 800bad8:	1521      	asrs	r1, r4, #20
 800bada:	d075      	beq.n	800bbc8 <__ieee754_sqrt+0x14c>
 800badc:	07cc      	lsls	r4, r1, #31
 800bade:	f04f 0400 	mov.w	r4, #0
 800bae2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bae6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800baea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800baee:	bf5e      	ittt	pl
 800baf0:	0fd9      	lsrpl	r1, r3, #31
 800baf2:	005b      	lslpl	r3, r3, #1
 800baf4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800baf8:	0fd9      	lsrs	r1, r3, #31
 800bafa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bafe:	2516      	movs	r5, #22
 800bb00:	4620      	mov	r0, r4
 800bb02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb06:	107f      	asrs	r7, r7, #1
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	1846      	adds	r6, r0, r1
 800bb0c:	4296      	cmp	r6, r2
 800bb0e:	bfde      	ittt	le
 800bb10:	1b92      	suble	r2, r2, r6
 800bb12:	1870      	addle	r0, r6, r1
 800bb14:	1864      	addle	r4, r4, r1
 800bb16:	0052      	lsls	r2, r2, #1
 800bb18:	3d01      	subs	r5, #1
 800bb1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bb1e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bb22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb26:	d1f0      	bne.n	800bb0a <__ieee754_sqrt+0x8e>
 800bb28:	4629      	mov	r1, r5
 800bb2a:	f04f 0e20 	mov.w	lr, #32
 800bb2e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bb32:	4282      	cmp	r2, r0
 800bb34:	eb06 0c05 	add.w	ip, r6, r5
 800bb38:	dc02      	bgt.n	800bb40 <__ieee754_sqrt+0xc4>
 800bb3a:	d113      	bne.n	800bb64 <__ieee754_sqrt+0xe8>
 800bb3c:	459c      	cmp	ip, r3
 800bb3e:	d811      	bhi.n	800bb64 <__ieee754_sqrt+0xe8>
 800bb40:	f1bc 0f00 	cmp.w	ip, #0
 800bb44:	eb0c 0506 	add.w	r5, ip, r6
 800bb48:	da43      	bge.n	800bbd2 <__ieee754_sqrt+0x156>
 800bb4a:	2d00      	cmp	r5, #0
 800bb4c:	db41      	blt.n	800bbd2 <__ieee754_sqrt+0x156>
 800bb4e:	f100 0801 	add.w	r8, r0, #1
 800bb52:	1a12      	subs	r2, r2, r0
 800bb54:	4640      	mov	r0, r8
 800bb56:	459c      	cmp	ip, r3
 800bb58:	bf88      	it	hi
 800bb5a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bb5e:	eba3 030c 	sub.w	r3, r3, ip
 800bb62:	4431      	add	r1, r6
 800bb64:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bb68:	f1be 0e01 	subs.w	lr, lr, #1
 800bb6c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800bb70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb74:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bb78:	d1db      	bne.n	800bb32 <__ieee754_sqrt+0xb6>
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	d006      	beq.n	800bb8c <__ieee754_sqrt+0x110>
 800bb7e:	1c48      	adds	r0, r1, #1
 800bb80:	bf0b      	itete	eq
 800bb82:	4671      	moveq	r1, lr
 800bb84:	3101      	addne	r1, #1
 800bb86:	3401      	addeq	r4, #1
 800bb88:	f021 0101 	bicne.w	r1, r1, #1
 800bb8c:	1063      	asrs	r3, r4, #1
 800bb8e:	0849      	lsrs	r1, r1, #1
 800bb90:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bb94:	07e2      	lsls	r2, r4, #31
 800bb96:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bb9a:	bf48      	it	mi
 800bb9c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bba0:	460e      	mov	r6, r1
 800bba2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bba6:	e782      	b.n	800baae <__ieee754_sqrt+0x32>
 800bba8:	0ada      	lsrs	r2, r3, #11
 800bbaa:	3815      	subs	r0, #21
 800bbac:	055b      	lsls	r3, r3, #21
 800bbae:	2a00      	cmp	r2, #0
 800bbb0:	d0fa      	beq.n	800bba8 <__ieee754_sqrt+0x12c>
 800bbb2:	02d5      	lsls	r5, r2, #11
 800bbb4:	d50a      	bpl.n	800bbcc <__ieee754_sqrt+0x150>
 800bbb6:	f1c1 0420 	rsb	r4, r1, #32
 800bbba:	fa23 f404 	lsr.w	r4, r3, r4
 800bbbe:	1e4d      	subs	r5, r1, #1
 800bbc0:	408b      	lsls	r3, r1
 800bbc2:	4322      	orrs	r2, r4
 800bbc4:	1b41      	subs	r1, r0, r5
 800bbc6:	e789      	b.n	800badc <__ieee754_sqrt+0x60>
 800bbc8:	4608      	mov	r0, r1
 800bbca:	e7f0      	b.n	800bbae <__ieee754_sqrt+0x132>
 800bbcc:	0052      	lsls	r2, r2, #1
 800bbce:	3101      	adds	r1, #1
 800bbd0:	e7ef      	b.n	800bbb2 <__ieee754_sqrt+0x136>
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	e7bd      	b.n	800bb52 <__ieee754_sqrt+0xd6>
 800bbd6:	bf00      	nop
 800bbd8:	7ff00000 	.word	0x7ff00000

0800bbdc <with_errno>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	4604      	mov	r4, r0
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	4616      	mov	r6, r2
 800bbe4:	f7fc fac2 	bl	800816c <__errno>
 800bbe8:	4629      	mov	r1, r5
 800bbea:	6006      	str	r6, [r0, #0]
 800bbec:	4620      	mov	r0, r4
 800bbee:	bd70      	pop	{r4, r5, r6, pc}

0800bbf0 <xflow>:
 800bbf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbf2:	4615      	mov	r5, r2
 800bbf4:	461c      	mov	r4, r3
 800bbf6:	b180      	cbz	r0, 800bc1a <xflow+0x2a>
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bbfe:	e9cd 0100 	strd	r0, r1, [sp]
 800bc02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc06:	4628      	mov	r0, r5
 800bc08:	4621      	mov	r1, r4
 800bc0a:	f7f4 fd19 	bl	8000640 <__aeabi_dmul>
 800bc0e:	2222      	movs	r2, #34	; 0x22
 800bc10:	b003      	add	sp, #12
 800bc12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc16:	f7ff bfe1 	b.w	800bbdc <with_errno>
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	e7ee      	b.n	800bbfe <xflow+0xe>

0800bc20 <__math_uflow>:
 800bc20:	2200      	movs	r2, #0
 800bc22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc26:	f7ff bfe3 	b.w	800bbf0 <xflow>

0800bc2a <__math_oflow>:
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bc30:	f7ff bfde 	b.w	800bbf0 <xflow>

0800bc34 <fabs>:
 800bc34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bc38:	4770      	bx	lr

0800bc3a <finite>:
 800bc3a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800bc3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bc42:	0fc0      	lsrs	r0, r0, #31
 800bc44:	4770      	bx	lr
	...

0800bc48 <scalbn>:
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800bc4e:	4604      	mov	r4, r0
 800bc50:	460d      	mov	r5, r1
 800bc52:	4617      	mov	r7, r2
 800bc54:	460b      	mov	r3, r1
 800bc56:	b996      	cbnz	r6, 800bc7e <scalbn+0x36>
 800bc58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc5c:	4303      	orrs	r3, r0
 800bc5e:	d039      	beq.n	800bcd4 <scalbn+0x8c>
 800bc60:	4b33      	ldr	r3, [pc, #204]	; (800bd30 <scalbn+0xe8>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	f7f4 fcec 	bl	8000640 <__aeabi_dmul>
 800bc68:	4b32      	ldr	r3, [pc, #200]	; (800bd34 <scalbn+0xec>)
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	429f      	cmp	r7, r3
 800bc6e:	460d      	mov	r5, r1
 800bc70:	da0f      	bge.n	800bc92 <scalbn+0x4a>
 800bc72:	a32b      	add	r3, pc, #172	; (adr r3, 800bd20 <scalbn+0xd8>)
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	f7f4 fce2 	bl	8000640 <__aeabi_dmul>
 800bc7c:	e006      	b.n	800bc8c <scalbn+0x44>
 800bc7e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bc82:	4296      	cmp	r6, r2
 800bc84:	d10a      	bne.n	800bc9c <scalbn+0x54>
 800bc86:	4602      	mov	r2, r0
 800bc88:	f7f4 fb24 	bl	80002d4 <__adddf3>
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	460d      	mov	r5, r1
 800bc90:	e020      	b.n	800bcd4 <scalbn+0x8c>
 800bc92:	460b      	mov	r3, r1
 800bc94:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bc98:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800bc9c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800bca0:	19b9      	adds	r1, r7, r6
 800bca2:	4291      	cmp	r1, r2
 800bca4:	dd0e      	ble.n	800bcc4 <scalbn+0x7c>
 800bca6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800bcaa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800bcae:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800bcb2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800bcb6:	4820      	ldr	r0, [pc, #128]	; (800bd38 <scalbn+0xf0>)
 800bcb8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800bcbc:	a31a      	add	r3, pc, #104	; (adr r3, 800bd28 <scalbn+0xe0>)
 800bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc2:	e7d9      	b.n	800bc78 <scalbn+0x30>
 800bcc4:	2900      	cmp	r1, #0
 800bcc6:	dd08      	ble.n	800bcda <scalbn+0x92>
 800bcc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bccc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bcd0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcda:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800bcde:	da12      	bge.n	800bd06 <scalbn+0xbe>
 800bce0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bce4:	429f      	cmp	r7, r3
 800bce6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800bcea:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800bcee:	dcdc      	bgt.n	800bcaa <scalbn+0x62>
 800bcf0:	a30b      	add	r3, pc, #44	; (adr r3, 800bd20 <scalbn+0xd8>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800bcfa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800bcfe:	480f      	ldr	r0, [pc, #60]	; (800bd3c <scalbn+0xf4>)
 800bd00:	f041 011f 	orr.w	r1, r1, #31
 800bd04:	e7b8      	b.n	800bc78 <scalbn+0x30>
 800bd06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd0a:	3136      	adds	r1, #54	; 0x36
 800bd0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800bd14:	4620      	mov	r0, r4
 800bd16:	4629      	mov	r1, r5
 800bd18:	2200      	movs	r2, #0
 800bd1a:	4b09      	ldr	r3, [pc, #36]	; (800bd40 <scalbn+0xf8>)
 800bd1c:	e7ac      	b.n	800bc78 <scalbn+0x30>
 800bd1e:	bf00      	nop
 800bd20:	c2f8f359 	.word	0xc2f8f359
 800bd24:	01a56e1f 	.word	0x01a56e1f
 800bd28:	8800759c 	.word	0x8800759c
 800bd2c:	7e37e43c 	.word	0x7e37e43c
 800bd30:	43500000 	.word	0x43500000
 800bd34:	ffff3cb0 	.word	0xffff3cb0
 800bd38:	8800759c 	.word	0x8800759c
 800bd3c:	c2f8f359 	.word	0xc2f8f359
 800bd40:	3c900000 	.word	0x3c900000

0800bd44 <_init>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	bf00      	nop
 800bd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4a:	bc08      	pop	{r3}
 800bd4c:	469e      	mov	lr, r3
 800bd4e:	4770      	bx	lr

0800bd50 <_fini>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	bf00      	nop
 800bd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd56:	bc08      	pop	{r3}
 800bd58:	469e      	mov	lr, r3
 800bd5a:	4770      	bx	lr
