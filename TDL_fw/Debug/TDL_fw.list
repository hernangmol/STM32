
TDL_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001f10  08001f10  00011f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f94  08001f94  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001f94  08001f94  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f94  08001f94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  0800200c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800200c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034cc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010b8  00000000  00000000  00023565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  00024620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00024a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c86  00000000  00000000  00024e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056aa  00000000  00000000  0003baae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ffb7  00000000  00000000  00041158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c110f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001324  00000000  00000000  000c1160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ef8 	.word	0x08001ef8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001ef8 	.word	0x08001ef8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800016a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800016e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000176:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800017a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800017c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800017e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000188:	68bb      	ldr	r3, [r7, #8]
 800018a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	4618      	mov	r0, r3
 8000192:	f000 f80e 	bl	80001b2 <Lcd_init>

	return lcd;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	461d      	mov	r5, r3
 800019a:	f107 0410 	add.w	r4, r7, #16
 800019e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001aa:	68f8      	ldr	r0, [r7, #12]
 80001ac:	3728      	adds	r7, #40	; 0x28
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bdb0      	pop	{r4, r5, r7, pc}

080001b2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	7d9b      	ldrb	r3, [r3, #22]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d10c      	bne.n	80001dc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80001c2:	2133      	movs	r1, #51	; 0x33
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f000 f86f 	bl	80002a8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80001ca:	2132      	movs	r1, #50	; 0x32
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f000 f86b 	bl	80002a8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80001d2:	2128      	movs	r1, #40	; 0x28
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f000 f867 	bl	80002a8 <lcd_write_command>
 80001da:	e003      	b.n	80001e4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80001dc:	2138      	movs	r1, #56	; 0x38
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 f862 	bl	80002a8 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80001e4:	2101      	movs	r1, #1
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f000 f85e 	bl	80002a8 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001ec:	210c      	movs	r1, #12
 80001ee:	6878      	ldr	r0, [r7, #4]
 80001f0:	f000 f85a 	bl	80002a8 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80001f4:	2106      	movs	r1, #6
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f856 	bl	80002a8 <lcd_write_command>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800020e:	f107 030c 	add.w	r3, r7, #12
 8000212:	683a      	ldr	r2, [r7, #0]
 8000214:	4906      	ldr	r1, [pc, #24]	; (8000230 <Lcd_int+0x2c>)
 8000216:	4618      	mov	r0, r3
 8000218:	f001 f9f4 	bl	8001604 <siprintf>

	Lcd_string(lcd, buffer);
 800021c:	f107 030c 	add.w	r3, r7, #12
 8000220:	4619      	mov	r1, r3
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f806 	bl	8000234 <Lcd_string>
}
 8000228:	bf00      	nop
 800022a:	3718      	adds	r7, #24
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	08001f10 	.word	0x08001f10

08000234 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
 8000242:	e00a      	b.n	800025a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4619      	mov	r1, r3
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f858 	bl	8000304 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	3301      	adds	r3, #1
 8000258:	73fb      	strb	r3, [r7, #15]
 800025a:	7bfc      	ldrb	r4, [r7, #15]
 800025c:	6838      	ldr	r0, [r7, #0]
 800025e:	f7ff ff75 	bl	800014c <strlen>
 8000262:	4603      	mov	r3, r0
 8000264:	429c      	cmp	r4, r3
 8000266:	d3ed      	bcc.n	8000244 <Lcd_string+0x10>
	}
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	bd90      	pop	{r4, r7, pc}
	...

08000274 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
 8000280:	4613      	mov	r3, r2
 8000282:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000284:	78fb      	ldrb	r3, [r7, #3]
 8000286:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <Lcd_cursor+0x30>)
 8000288:	5cd2      	ldrb	r2, [r2, r3]
 800028a:	78bb      	ldrb	r3, [r7, #2]
 800028c:	4413      	add	r3, r2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	3b80      	subs	r3, #128	; 0x80
 8000292:	b2db      	uxtb	r3, r3
 8000294:	4619      	mov	r1, r3
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 f806 	bl	80002a8 <lcd_write_command>
	#endif
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08001f38 	.word	0x08001f38

080002a8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6898      	ldr	r0, [r3, #8]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	899b      	ldrh	r3, [r3, #12]
 80002bc:	2200      	movs	r2, #0
 80002be:	4619      	mov	r1, r3
 80002c0:	f000 fd5e 	bl	8000d80 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	7d9b      	ldrb	r3, [r3, #22]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d111      	bne.n	80002f0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	091b      	lsrs	r3, r3, #4
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2204      	movs	r2, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f000 f842 	bl	8000360 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80002dc:	78fb      	ldrb	r3, [r7, #3]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2204      	movs	r2, #4
 80002e6:	4619      	mov	r1, r3
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f839 	bl	8000360 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80002ee:	e005      	b.n	80002fc <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2208      	movs	r2, #8
 80002f4:	4619      	mov	r1, r3
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f000 f832 	bl	8000360 <lcd_write>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6898      	ldr	r0, [r3, #8]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	899b      	ldrh	r3, [r3, #12]
 8000318:	2201      	movs	r2, #1
 800031a:	4619      	mov	r1, r3
 800031c:	f000 fd30 	bl	8000d80 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	7d9b      	ldrb	r3, [r3, #22]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	091b      	lsrs	r3, r3, #4
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2204      	movs	r2, #4
 8000330:	4619      	mov	r1, r3
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f000 f814 	bl	8000360 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	f003 030f 	and.w	r3, r3, #15
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2204      	movs	r2, #4
 8000342:	4619      	mov	r1, r3
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f000 f80b 	bl	8000360 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800034a:	e005      	b.n	8000358 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2208      	movs	r2, #8
 8000350:	4619      	mov	r1, r3
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 f804 	bl	8000360 <lcd_write>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
 800036c:	4613      	mov	r3, r2
 800036e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000370:	2300      	movs	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
 8000374:	e019      	b.n	80003aa <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	6818      	ldr	r0, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	4413      	add	r3, r2
 800038c:	8819      	ldrh	r1, [r3, #0]
 800038e:	78fa      	ldrb	r2, [r7, #3]
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	fa42 f303 	asr.w	r3, r2, r3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	b2db      	uxtb	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	f000 fcee 	bl	8000d80 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80003a4:	7bfb      	ldrb	r3, [r7, #15]
 80003a6:	3301      	adds	r3, #1
 80003a8:	73fb      	strb	r3, [r7, #15]
 80003aa:	7bfa      	ldrb	r2, [r7, #15]
 80003ac:	78bb      	ldrb	r3, [r7, #2]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d3e1      	bcc.n	8000376 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6918      	ldr	r0, [r3, #16]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	8a9b      	ldrh	r3, [r3, #20]
 80003ba:	2201      	movs	r2, #1
 80003bc:	4619      	mov	r1, r3
 80003be:	f000 fcdf 	bl	8000d80 <HAL_GPIO_WritePin>
	DELAY(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fa50 	bl	8000868 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	6918      	ldr	r0, [r3, #16]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	8a9b      	ldrh	r3, [r3, #20]
 80003d0:	2200      	movs	r2, #0
 80003d2:	4619      	mov	r1, r3
 80003d4:	f000 fcd4 	bl	8000d80 <HAL_GPIO_WritePin>
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b5b0      	push	{r4, r5, r7, lr}
 80003e2:	b09a      	sub	sp, #104	; 0x68
 80003e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e6:	f000 f9dd 	bl	80007a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ea:	f000 f87d 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ee:	f000 f8b7 	bl	8000560 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 80003f2:	4b38      	ldr	r3, [pc, #224]	; (80004d4 <main+0xf4>)
 80003f4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80003f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 80003fe:	4a36      	ldr	r2, [pc, #216]	; (80004d8 <main+0xf8>)
 8000400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000408:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_1, LCD_4_BIT_MODE);
 800040c:	4638      	mov	r0, r7
 800040e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000412:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000416:	2300      	movs	r3, #0
 8000418:	9303      	str	r3, [sp, #12]
 800041a:	2302      	movs	r3, #2
 800041c:	9302      	str	r3, [sp, #8]
 800041e:	4b2f      	ldr	r3, [pc, #188]	; (80004dc <main+0xfc>)
 8000420:	9301      	str	r3, [sp, #4]
 8000422:	2340      	movs	r3, #64	; 0x40
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <main+0xfc>)
 8000428:	f7ff fe98 	bl	800015c <Lcd_create>
 800042c:	f107 041c 	add.w	r4, r7, #28
 8000430:	463d      	mov	r5, r7
 8000432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000436:	e895 0003 	ldmia.w	r5, {r0, r1}
 800043a:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd, 0,0);
 800043e:	f107 031c 	add.w	r3, r7, #28
 8000442:	2200      	movs	r2, #0
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff14 	bl	8000274 <Lcd_cursor>
  Lcd_string(&lcd, "Racing Club");
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	4923      	ldr	r1, [pc, #140]	; (80004e0 <main+0x100>)
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff feee 	bl	8000234 <Lcd_string>
  for ( int x = 1; x <= 200 ; x++ )
 8000458:	2301      	movs	r3, #1
 800045a:	657b      	str	r3, [r7, #84]	; 0x54
 800045c:	e013      	b.n	8000486 <main+0xa6>
  {
    Lcd_cursor(&lcd, 1,7);
 800045e:	f107 031c 	add.w	r3, r7, #28
 8000462:	2207      	movs	r2, #7
 8000464:	2101      	movs	r1, #1
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ff04 	bl	8000274 <Lcd_cursor>
    Lcd_int(&lcd, x);
 800046c:	f107 031c 	add.w	r3, r7, #28
 8000470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff fec6 	bl	8000204 <Lcd_int>
    HAL_Delay (1000);
 8000478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047c:	f000 f9f4 	bl	8000868 <HAL_Delay>
  for ( int x = 1; x <= 200 ; x++ )
 8000480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000482:	3301      	adds	r3, #1
 8000484:	657b      	str	r3, [r7, #84]	; 0x54
 8000486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000488:	2bc8      	cmp	r3, #200	; 0xc8
 800048a:	dde8      	ble.n	800045e <main+0x7e>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i=0;i<10;i++)
 800048c:	2300      	movs	r3, #0
 800048e:	653b      	str	r3, [r7, #80]	; 0x50
 8000490:	e00a      	b.n	80004a8 <main+0xc8>
	  {
		  HAL_GPIO_TogglePin (GPIOC, LED_Pin);
 8000492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000496:	4813      	ldr	r0, [pc, #76]	; (80004e4 <main+0x104>)
 8000498:	f000 fc8a 	bl	8000db0 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(200);
 800049c:	20c8      	movs	r0, #200	; 0xc8
 800049e:	f000 f9e3 	bl	8000868 <HAL_Delay>
	  for(int i=0;i<10;i++)
 80004a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004a4:	3301      	adds	r3, #1
 80004a6:	653b      	str	r3, [r7, #80]	; 0x50
 80004a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004aa:	2b09      	cmp	r3, #9
 80004ac:	ddf1      	ble.n	8000492 <main+0xb2>
	  }
	  for(int i=0;i<10;i++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80004b2:	e00b      	b.n	80004cc <main+0xec>
	  {
		  HAL_GPIO_TogglePin (GPIOC, LED_Pin);
 80004b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b8:	480a      	ldr	r0, [pc, #40]	; (80004e4 <main+0x104>)
 80004ba:	f000 fc79 	bl	8000db0 <HAL_GPIO_TogglePin>
		  HAL_Delay(2000);
 80004be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004c2:	f000 f9d1 	bl	8000868 <HAL_Delay>
	  for(int i=0;i<10;i++)
 80004c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004c8:	3301      	adds	r3, #1
 80004ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80004cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004ce:	2b09      	cmp	r3, #9
 80004d0:	ddf0      	ble.n	80004b4 <main+0xd4>
	  for(int i=0;i<10;i++)
 80004d2:	e7db      	b.n	800048c <main+0xac>
 80004d4:	08001f20 	.word	0x08001f20
 80004d8:	08001f30 	.word	0x08001f30
 80004dc:	40010800 	.word	0x40010800
 80004e0:	08001f14 	.word	0x08001f14
 80004e4:	40011000 	.word	0x40011000

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b090      	sub	sp, #64	; 0x40
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0318 	add.w	r3, r7, #24
 80004f2:	2228      	movs	r2, #40	; 0x28
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 f87c 	bl	80015f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	2310      	movs	r3, #16
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000516:	2300      	movs	r3, #0
 8000518:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fc60 	bl	8000de4 <HAL_RCC_OscConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800052a:	f000 f879 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052e:	230f      	movs	r3, #15
 8000530:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fece 	bl	80012e8 <HAL_RCC_ClockConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000552:	f000 f865 	bl	8000620 <Error_Handler>
  }
}
 8000556:	bf00      	nop
 8000558:	3740      	adds	r7, #64	; 0x40
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MX_GPIO_Init+0xb4>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a26      	ldr	r2, [pc, #152]	; (8000614 <MX_GPIO_Init+0xb4>)
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <MX_GPIO_Init+0xb4>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0310 	and.w	r3, r3, #16
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <MX_GPIO_Init+0xb4>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a20      	ldr	r2, [pc, #128]	; (8000614 <MX_GPIO_Init+0xb4>)
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <MX_GPIO_Init+0xb4>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0320 	and.w	r3, r3, #32
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <MX_GPIO_Init+0xb4>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a1a      	ldr	r2, [pc, #104]	; (8000614 <MX_GPIO_Init+0xb4>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_GPIO_Init+0xb4>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <MX_GPIO_Init+0xb8>)
 80005c4:	f000 fbdc 	bl	8000d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80005c8:	2200      	movs	r2, #0
 80005ca:	217e      	movs	r1, #126	; 0x7e
 80005cc:	4813      	ldr	r0, [pc, #76]	; (800061c <MX_GPIO_Init+0xbc>)
 80005ce:	f000 fbd7 	bl	8000d80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <MX_GPIO_Init+0xb8>)
 80005ec:	f000 fa44 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80005f0:	237e      	movs	r3, #126	; 0x7e
 80005f2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_GPIO_Init+0xbc>)
 8000608:	f000 fa36 	bl	8000a78 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	40011000 	.word	0x40011000
 800061c:	40010800 	.word	0x40010800

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_MspInit+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <HAL_MspInit+0x5c>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_MspInit+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_MspInit+0x5c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_MspInit+0x5c>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_MspInit+0x5c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_MspInit+0x60>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <HAL_MspInit+0x60>)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	40021000 	.word	0x40021000
 800068c:	40010000 	.word	0x40010000

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <NMI_Handler+0x4>

08000696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <HardFault_Handler+0x4>

0800069c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <MemManage_Handler+0x4>

080006a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <BusFault_Handler+0x4>

080006a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <UsageFault_Handler+0x4>

080006ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d6:	f000 f8ab 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <_sbrk+0x5c>)
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <_sbrk+0x60>)
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d102      	bne.n	8000702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <_sbrk+0x64>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <_sbrk+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	429a      	cmp	r2, r3
 800070e:	d207      	bcs.n	8000720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000710:	f000 ff46 	bl	80015a0 <__errno>
 8000714:	4603      	mov	r3, r0
 8000716:	220c      	movs	r2, #12
 8000718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e009      	b.n	8000734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <_sbrk+0x64>)
 8000730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20005000 	.word	0x20005000
 8000740:	00000400 	.word	0x00000400
 8000744:	2000008c 	.word	0x2000008c
 8000748:	200000a8 	.word	0x200000a8

0800074c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000758:	f7ff fff8 	bl	800074c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800075e:	490c      	ldr	r1, [pc, #48]	; (8000790 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000774:	4c09      	ldr	r4, [pc, #36]	; (800079c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f000 ff13 	bl	80015ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000786:	f7ff fe2b 	bl	80003e0 <main>
  bx lr
 800078a:	4770      	bx	lr
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000794:	08001f9c 	.word	0x08001f9c
  ldr r2, =_sbss
 8000798:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800079c:	200000a4 	.word	0x200000a4

080007a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC1_2_IRQHandler>
	...

080007a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_Init+0x28>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_Init+0x28>)
 80007ae:	f043 0310 	orr.w	r3, r3, #16
 80007b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 f92b 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ba:	200f      	movs	r0, #15
 80007bc:	f000 f808 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c0:	f7ff ff34 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40022000 	.word	0x40022000

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x54>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_InitTick+0x58>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f935 	bl	8000a5e <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00e      	b.n	800081c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d80a      	bhi.n	800081a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f000 f90b 	bl	8000a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <HAL_InitTick+0x5c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x1c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_IncTick+0x20>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a03      	ldr	r2, [pc, #12]	; (8000850 <HAL_IncTick+0x20>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	20000008 	.word	0x20000008
 8000850:	20000090 	.word	0x20000090

08000854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b02      	ldr	r3, [pc, #8]	; (8000864 <HAL_GetTick+0x10>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000090 	.word	0x20000090

08000868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff fff0 	bl	8000854 <HAL_GetTick>
 8000874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000880:	d005      	beq.n	800088e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_Delay+0x44>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800088e:	bf00      	nop
 8000890:	f7ff ffe0 	bl	8000854 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f7      	bhi.n	8000890 <HAL_Delay+0x28>
  {
  }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db0a      	blt.n	800093e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	490c      	ldr	r1, [pc, #48]	; (8000960 <__NVIC_SetPriority+0x4c>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	440b      	add	r3, r1
 8000938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800093c:	e00a      	b.n	8000954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4908      	ldr	r1, [pc, #32]	; (8000964 <__NVIC_SetPriority+0x50>)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	3b04      	subs	r3, #4
 800094c:	0112      	lsls	r2, r2, #4
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	440b      	add	r3, r1
 8000952:	761a      	strb	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f1c3 0307 	rsb	r3, r3, #7
 8000982:	2b04      	cmp	r3, #4
 8000984:	bf28      	it	cs
 8000986:	2304      	movcs	r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3304      	adds	r3, #4
 800098e:	2b06      	cmp	r3, #6
 8000990:	d902      	bls.n	8000998 <NVIC_EncodePriority+0x30>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3b03      	subs	r3, #3
 8000996:	e000      	b.n	800099a <NVIC_EncodePriority+0x32>
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	f04f 32ff 	mov.w	r2, #4294967295
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43d9      	mvns	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	4313      	orrs	r3, r2
         );
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3724      	adds	r7, #36	; 0x24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009dc:	d301      	bcc.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e00f      	b.n	8000a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <SysTick_Config+0x40>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	210f      	movs	r1, #15
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f7ff ff90 	bl	8000914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <SysTick_Config+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SysTick_Config+0x40>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff49 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff5e 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff90 	bl	8000968 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5f 	bl	8000914 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffb0 	bl	80009cc <SysTick_Config>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b08b      	sub	sp, #44	; 0x2c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8a:	e169      	b.n	8000d60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	f040 8158 	bne.w	8000d5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a9a      	ldr	r2, [pc, #616]	; (8000d18 <HAL_GPIO_Init+0x2a0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d05e      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ab4:	4a98      	ldr	r2, [pc, #608]	; (8000d18 <HAL_GPIO_Init+0x2a0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d875      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000aba:	4a98      	ldr	r2, [pc, #608]	; (8000d1c <HAL_GPIO_Init+0x2a4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d058      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ac0:	4a96      	ldr	r2, [pc, #600]	; (8000d1c <HAL_GPIO_Init+0x2a4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d86f      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000ac6:	4a96      	ldr	r2, [pc, #600]	; (8000d20 <HAL_GPIO_Init+0x2a8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d052      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000acc:	4a94      	ldr	r2, [pc, #592]	; (8000d20 <HAL_GPIO_Init+0x2a8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d869      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000ad2:	4a94      	ldr	r2, [pc, #592]	; (8000d24 <HAL_GPIO_Init+0x2ac>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d04c      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ad8:	4a92      	ldr	r2, [pc, #584]	; (8000d24 <HAL_GPIO_Init+0x2ac>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d863      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000ade:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d046      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ae4:	4a90      	ldr	r2, [pc, #576]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d85d      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000aea:	2b12      	cmp	r3, #18
 8000aec:	d82a      	bhi.n	8000b44 <HAL_GPIO_Init+0xcc>
 8000aee:	2b12      	cmp	r3, #18
 8000af0:	d859      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000af2:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <HAL_GPIO_Init+0x80>)
 8000af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af8:	08000b73 	.word	0x08000b73
 8000afc:	08000b4d 	.word	0x08000b4d
 8000b00:	08000b5f 	.word	0x08000b5f
 8000b04:	08000ba1 	.word	0x08000ba1
 8000b08:	08000ba7 	.word	0x08000ba7
 8000b0c:	08000ba7 	.word	0x08000ba7
 8000b10:	08000ba7 	.word	0x08000ba7
 8000b14:	08000ba7 	.word	0x08000ba7
 8000b18:	08000ba7 	.word	0x08000ba7
 8000b1c:	08000ba7 	.word	0x08000ba7
 8000b20:	08000ba7 	.word	0x08000ba7
 8000b24:	08000ba7 	.word	0x08000ba7
 8000b28:	08000ba7 	.word	0x08000ba7
 8000b2c:	08000ba7 	.word	0x08000ba7
 8000b30:	08000ba7 	.word	0x08000ba7
 8000b34:	08000ba7 	.word	0x08000ba7
 8000b38:	08000ba7 	.word	0x08000ba7
 8000b3c:	08000b55 	.word	0x08000b55
 8000b40:	08000b69 	.word	0x08000b69
 8000b44:	4a79      	ldr	r2, [pc, #484]	; (8000d2c <HAL_GPIO_Init+0x2b4>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d013      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b4a:	e02c      	b.n	8000ba6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	623b      	str	r3, [r7, #32]
          break;
 8000b52:	e029      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	623b      	str	r3, [r7, #32]
          break;
 8000b5c:	e024      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	3308      	adds	r3, #8
 8000b64:	623b      	str	r3, [r7, #32]
          break;
 8000b66:	e01f      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	330c      	adds	r3, #12
 8000b6e:	623b      	str	r3, [r7, #32]
          break;
 8000b70:	e01a      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	623b      	str	r3, [r7, #32]
          break;
 8000b7e:	e013      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d105      	bne.n	8000b94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69fa      	ldr	r2, [r7, #28]
 8000b90:	611a      	str	r2, [r3, #16]
          break;
 8000b92:	e009      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b94:	2308      	movs	r3, #8
 8000b96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	69fa      	ldr	r2, [r7, #28]
 8000b9c:	615a      	str	r2, [r3, #20]
          break;
 8000b9e:	e003      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
          break;
 8000ba4:	e000      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          break;
 8000ba6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2bff      	cmp	r3, #255	; 0xff
 8000bac:	d801      	bhi.n	8000bb2 <HAL_GPIO_Init+0x13a>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	e001      	b.n	8000bb6 <HAL_GPIO_Init+0x13e>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2bff      	cmp	r3, #255	; 0xff
 8000bbc:	d802      	bhi.n	8000bc4 <HAL_GPIO_Init+0x14c>
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	e002      	b.n	8000bca <HAL_GPIO_Init+0x152>
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	3b08      	subs	r3, #8
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	401a      	ands	r2, r3
 8000bdc:	6a39      	ldr	r1, [r7, #32]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	431a      	orrs	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 80b1 	beq.w	8000d5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf8:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a4c      	ldr	r2, [pc, #304]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c10:	4a48      	ldr	r2, [pc, #288]	; (8000d34 <HAL_GPIO_Init+0x2bc>)
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	3302      	adds	r3, #2
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	220f      	movs	r2, #15
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a40      	ldr	r2, [pc, #256]	; (8000d38 <HAL_GPIO_Init+0x2c0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d013      	beq.n	8000c64 <HAL_GPIO_Init+0x1ec>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a3f      	ldr	r2, [pc, #252]	; (8000d3c <HAL_GPIO_Init+0x2c4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d00d      	beq.n	8000c60 <HAL_GPIO_Init+0x1e8>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3e      	ldr	r2, [pc, #248]	; (8000d40 <HAL_GPIO_Init+0x2c8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d007      	beq.n	8000c5c <HAL_GPIO_Init+0x1e4>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3d      	ldr	r2, [pc, #244]	; (8000d44 <HAL_GPIO_Init+0x2cc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d101      	bne.n	8000c58 <HAL_GPIO_Init+0x1e0>
 8000c54:	2303      	movs	r3, #3
 8000c56:	e006      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c58:	2304      	movs	r3, #4
 8000c5a:	e004      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c64:	2300      	movs	r3, #0
 8000c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c68:	f002 0203 	and.w	r2, r2, #3
 8000c6c:	0092      	lsls	r2, r2, #2
 8000c6e:	4093      	lsls	r3, r2
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c76:	492f      	ldr	r1, [pc, #188]	; (8000d34 <HAL_GPIO_Init+0x2bc>)
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	492c      	ldr	r1, [pc, #176]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	608b      	str	r3, [r1, #8]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4928      	ldr	r1, [pc, #160]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	4922      	ldr	r1, [pc, #136]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	60cb      	str	r3, [r1, #12]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	491e      	ldr	r1, [pc, #120]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4918      	ldr	r1, [pc, #96]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4914      	ldr	r1, [pc, #80]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d021      	beq.n	8000d4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	490e      	ldr	r1, [pc, #56]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
 8000d14:	e021      	b.n	8000d5a <HAL_GPIO_Init+0x2e2>
 8000d16:	bf00      	nop
 8000d18:	10320000 	.word	0x10320000
 8000d1c:	10310000 	.word	0x10310000
 8000d20:	10220000 	.word	0x10220000
 8000d24:	10210000 	.word	0x10210000
 8000d28:	10120000 	.word	0x10120000
 8000d2c:	10110000 	.word	0x10110000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40011400 	.word	0x40011400
 8000d48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_GPIO_Init+0x304>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4909      	ldr	r1, [pc, #36]	; (8000d7c <HAL_GPIO_Init+0x304>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f47f ae8e 	bne.w	8000a8c <HAL_GPIO_Init+0x14>
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	372c      	adds	r7, #44	; 0x2c
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40010400 	.word	0x40010400

08000d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d90:	787b      	ldrb	r3, [r7, #1]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d9c:	e003      	b.n	8000da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	041a      	lsls	r2, r3, #16
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	611a      	str	r2, [r3, #16]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	041a      	lsls	r2, r3, #16
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43d9      	mvns	r1, r3
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	400b      	ands	r3, r1
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	611a      	str	r2, [r3, #16]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
	...

08000de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e272      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8087 	beq.w	8000f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e04:	4b92      	ldr	r3, [pc, #584]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d00c      	beq.n	8000e2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e10:	4b8f      	ldr	r3, [pc, #572]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 030c 	and.w	r3, r3, #12
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d112      	bne.n	8000e42 <HAL_RCC_OscConfig+0x5e>
 8000e1c:	4b8c      	ldr	r3, [pc, #560]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e28:	d10b      	bne.n	8000e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2a:	4b89      	ldr	r3, [pc, #548]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d06c      	beq.n	8000f10 <HAL_RCC_OscConfig+0x12c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d168      	bne.n	8000f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e24c      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e4a:	d106      	bne.n	8000e5a <HAL_RCC_OscConfig+0x76>
 8000e4c:	4b80      	ldr	r3, [pc, #512]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a7f      	ldr	r2, [pc, #508]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e02e      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10c      	bne.n	8000e7c <HAL_RCC_OscConfig+0x98>
 8000e62:	4b7b      	ldr	r3, [pc, #492]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7a      	ldr	r2, [pc, #488]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b78      	ldr	r3, [pc, #480]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a77      	ldr	r2, [pc, #476]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e01d      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0xbc>
 8000e86:	4b72      	ldr	r3, [pc, #456]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a71      	ldr	r2, [pc, #452]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b6f      	ldr	r3, [pc, #444]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a6e      	ldr	r2, [pc, #440]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e00b      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000ea0:	4b6b      	ldr	r3, [pc, #428]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a6a      	ldr	r2, [pc, #424]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b68      	ldr	r3, [pc, #416]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a67      	ldr	r2, [pc, #412]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fcc8 	bl	8000854 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fcc4 	bl	8000854 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e200      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eda:	4b5d      	ldr	r3, [pc, #372]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0xe4>
 8000ee6:	e014      	b.n	8000f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fcb4 	bl	8000854 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fcb0 	bl	8000854 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e1ec      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f02:	4b53      	ldr	r3, [pc, #332]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x10c>
 8000f0e:	e000      	b.n	8000f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d063      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f1e:	4b4c      	ldr	r3, [pc, #304]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f2a:	4b49      	ldr	r3, [pc, #292]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d11c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x18c>
 8000f36:	4b46      	ldr	r3, [pc, #280]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d116      	bne.n	8000f70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	4b43      	ldr	r3, [pc, #268]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <HAL_RCC_OscConfig+0x176>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d001      	beq.n	8000f5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e1c0      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4939      	ldr	r1, [pc, #228]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	e03a      	b.n	8000fe6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d020      	beq.n	8000fba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fc69 	bl	8000854 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff fc65 	bl	8000854 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e1a1      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	4927      	ldr	r1, [pc, #156]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	600b      	str	r3, [r1, #0]
 8000fb8:	e015      	b.n	8000fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fc48 	bl	8000854 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc8:	f7ff fc44 	bl	8000854 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e180      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d03a      	beq.n	8001068 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d019      	beq.n	800102e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_RCC_OscConfig+0x274>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001000:	f7ff fc28 	bl	8000854 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fc24 	bl	8000854 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e160      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f000 fa9c 	bl	8001564 <RCC_Delay>
 800102c:	e01c      	b.n	8001068 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_RCC_OscConfig+0x274>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001034:	f7ff fc0e 	bl	8000854 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103a:	e00f      	b.n	800105c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fc0a 	bl	8000854 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d908      	bls.n	800105c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e146      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	42420000 	.word	0x42420000
 8001058:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105c:	4b92      	ldr	r3, [pc, #584]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e9      	bne.n	800103c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80a6 	beq.w	80011c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107a:	4b8b      	ldr	r3, [pc, #556]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a87      	ldr	r2, [pc, #540]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b85      	ldr	r3, [pc, #532]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109e:	2301      	movs	r3, #1
 80010a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a2:	4b82      	ldr	r3, [pc, #520]	; (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ae:	4b7f      	ldr	r3, [pc, #508]	; (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a7e      	ldr	r2, [pc, #504]	; (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fbcb 	bl	8000854 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fbc7 	bl	8000854 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e103      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b75      	ldr	r3, [pc, #468]	; (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x312>
 80010e8:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4a6e      	ldr	r2, [pc, #440]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6213      	str	r3, [r2, #32]
 80010f4:	e02d      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x334>
 80010fe:	4b6a      	ldr	r3, [pc, #424]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a69      	ldr	r2, [pc, #420]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b67      	ldr	r3, [pc, #412]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a66      	ldr	r2, [pc, #408]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	e01c      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x356>
 8001120:	4b61      	ldr	r3, [pc, #388]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a60      	ldr	r2, [pc, #384]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6213      	str	r3, [r2, #32]
 800112c:	4b5e      	ldr	r3, [pc, #376]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4a5d      	ldr	r2, [pc, #372]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6213      	str	r3, [r2, #32]
 8001138:	e00b      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 800113a:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4a5a      	ldr	r2, [pc, #360]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	6213      	str	r3, [r2, #32]
 8001146:	4b58      	ldr	r3, [pc, #352]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	4a57      	ldr	r2, [pc, #348]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	f023 0304 	bic.w	r3, r3, #4
 8001150:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d015      	beq.n	8001186 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb7b 	bl	8000854 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fb77 	bl	8000854 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001170:	4293      	cmp	r3, r2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e0b1      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001178:	4b4b      	ldr	r3, [pc, #300]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0ee      	beq.n	8001162 <HAL_RCC_OscConfig+0x37e>
 8001184:	e014      	b.n	80011b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fb65 	bl	8000854 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff fb61 	bl	8000854 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	; 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e09b      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ee      	bne.n	800118e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d105      	bne.n	80011c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b6:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a3b      	ldr	r2, [pc, #236]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8087 	beq.w	80012da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011cc:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d061      	beq.n	800129c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d146      	bne.n	800126e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e0:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fb35 	bl	8000854 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ee:	f7ff fb31 	bl	8000854 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e06d      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d108      	bne.n	8001228 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	4921      	ldr	r1, [pc, #132]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a19      	ldr	r1, [r3, #32]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	430b      	orrs	r3, r1
 800123a:	491b      	ldr	r1, [pc, #108]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fb05 	bl	8000854 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff fb01 	bl	8000854 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e03d      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x46a>
 800126c:	e035      	b.n	80012da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff faee 	bl	8000854 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff faea 	bl	8000854 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e026      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x498>
 800129a:	e01e      	b.n	80012da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d107      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e019      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40007000 	.word	0x40007000
 80012b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_RCC_OscConfig+0x500>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0d0      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012fc:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d910      	bls.n	800132c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130a:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 0207 	bic.w	r2, r3, #7
 8001312:	4965      	ldr	r1, [pc, #404]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800131a:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d001      	beq.n	800132c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e0b8      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d020      	beq.n	800137a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001344:	4b59      	ldr	r3, [pc, #356]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a58      	ldr	r2, [pc, #352]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800134e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800135c:	4b53      	ldr	r3, [pc, #332]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a52      	ldr	r2, [pc, #328]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001366:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001368:	4b50      	ldr	r3, [pc, #320]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	494d      	ldr	r1, [pc, #308]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d040      	beq.n	8001408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d107      	bne.n	800139e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b47      	ldr	r3, [pc, #284]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d115      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e07f      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a6:	4b41      	ldr	r3, [pc, #260]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e073      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e06b      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f023 0203 	bic.w	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4936      	ldr	r1, [pc, #216]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d8:	f7ff fa3c 	bl	8000854 <HAL_GetTick>
 80013dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e0:	f7ff fa38 	bl	8000854 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e053      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 020c 	and.w	r2, r3, #12
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	429a      	cmp	r2, r3
 8001406:	d1eb      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d210      	bcs.n	8001438 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 0207 	bic.w	r2, r3, #7
 800141e:	4922      	ldr	r1, [pc, #136]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e032      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4916      	ldr	r1, [pc, #88]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	490e      	ldr	r1, [pc, #56]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001476:	f000 f821 	bl	80014bc <HAL_RCC_GetSysClockFreq>
 800147a:	4602      	mov	r2, r0
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	490a      	ldr	r1, [pc, #40]	; (80014b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001488:	5ccb      	ldrb	r3, [r1, r3]
 800148a:	fa22 f303 	lsr.w	r3, r2, r3
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f99a 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000
 80014ac:	40021000 	.word	0x40021000
 80014b0:	08001f3c 	.word	0x08001f3c
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_RCC_GetSysClockFreq+0x94>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d002      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x30>
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d003      	beq.n	80014f2 <HAL_RCC_GetSysClockFreq+0x36>
 80014ea:	e027      	b.n	800153c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ee:	613b      	str	r3, [r7, #16]
      break;
 80014f0:	e027      	b.n	8001542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	0c9b      	lsrs	r3, r3, #18
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d010      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_RCC_GetSysClockFreq+0x94>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	0c5b      	lsrs	r3, r3, #17
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001516:	5cd3      	ldrb	r3, [r2, r3]
 8001518:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <HAL_RCC_GetSysClockFreq+0x98>)
 800151e:	fb03 f202 	mul.w	r2, r3, r2
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e004      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	613b      	str	r3, [r7, #16]
      break;
 800153a:	e002      	b.n	8001542 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_RCC_GetSysClockFreq+0x98>)
 800153e:	613b      	str	r3, [r7, #16]
      break;
 8001540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001542:	693b      	ldr	r3, [r7, #16]
}
 8001544:	4618      	mov	r0, r3
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	007a1200 	.word	0x007a1200
 8001558:	08001f4c 	.word	0x08001f4c
 800155c:	08001f5c 	.word	0x08001f5c
 8001560:	003d0900 	.word	0x003d0900

08001564 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <RCC_Delay+0x34>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <RCC_Delay+0x38>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0a5b      	lsrs	r3, r3, #9
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001580:	bf00      	nop
  }
  while (Delay --);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	60fa      	str	r2, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f9      	bne.n	8001580 <RCC_Delay+0x1c>
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000000 	.word	0x20000000
 800159c:	10624dd3 	.word	0x10624dd3

080015a0 <__errno>:
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <__errno+0x8>)
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	2000000c 	.word	0x2000000c

080015ac <__libc_init_array>:
 80015ac:	b570      	push	{r4, r5, r6, lr}
 80015ae:	2600      	movs	r6, #0
 80015b0:	4d0c      	ldr	r5, [pc, #48]	; (80015e4 <__libc_init_array+0x38>)
 80015b2:	4c0d      	ldr	r4, [pc, #52]	; (80015e8 <__libc_init_array+0x3c>)
 80015b4:	1b64      	subs	r4, r4, r5
 80015b6:	10a4      	asrs	r4, r4, #2
 80015b8:	42a6      	cmp	r6, r4
 80015ba:	d109      	bne.n	80015d0 <__libc_init_array+0x24>
 80015bc:	f000 fc9c 	bl	8001ef8 <_init>
 80015c0:	2600      	movs	r6, #0
 80015c2:	4d0a      	ldr	r5, [pc, #40]	; (80015ec <__libc_init_array+0x40>)
 80015c4:	4c0a      	ldr	r4, [pc, #40]	; (80015f0 <__libc_init_array+0x44>)
 80015c6:	1b64      	subs	r4, r4, r5
 80015c8:	10a4      	asrs	r4, r4, #2
 80015ca:	42a6      	cmp	r6, r4
 80015cc:	d105      	bne.n	80015da <__libc_init_array+0x2e>
 80015ce:	bd70      	pop	{r4, r5, r6, pc}
 80015d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d4:	4798      	blx	r3
 80015d6:	3601      	adds	r6, #1
 80015d8:	e7ee      	b.n	80015b8 <__libc_init_array+0xc>
 80015da:	f855 3b04 	ldr.w	r3, [r5], #4
 80015de:	4798      	blx	r3
 80015e0:	3601      	adds	r6, #1
 80015e2:	e7f2      	b.n	80015ca <__libc_init_array+0x1e>
 80015e4:	08001f94 	.word	0x08001f94
 80015e8:	08001f94 	.word	0x08001f94
 80015ec:	08001f94 	.word	0x08001f94
 80015f0:	08001f98 	.word	0x08001f98

080015f4 <memset>:
 80015f4:	4603      	mov	r3, r0
 80015f6:	4402      	add	r2, r0
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d100      	bne.n	80015fe <memset+0xa>
 80015fc:	4770      	bx	lr
 80015fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001602:	e7f9      	b.n	80015f8 <memset+0x4>

08001604 <siprintf>:
 8001604:	b40e      	push	{r1, r2, r3}
 8001606:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800160a:	b500      	push	{lr}
 800160c:	b09c      	sub	sp, #112	; 0x70
 800160e:	ab1d      	add	r3, sp, #116	; 0x74
 8001610:	9002      	str	r0, [sp, #8]
 8001612:	9006      	str	r0, [sp, #24]
 8001614:	9107      	str	r1, [sp, #28]
 8001616:	9104      	str	r1, [sp, #16]
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <siprintf+0x38>)
 800161a:	4909      	ldr	r1, [pc, #36]	; (8001640 <siprintf+0x3c>)
 800161c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001620:	9105      	str	r1, [sp, #20]
 8001622:	6800      	ldr	r0, [r0, #0]
 8001624:	a902      	add	r1, sp, #8
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	f000 f868 	bl	80016fc <_svfiprintf_r>
 800162c:	2200      	movs	r2, #0
 800162e:	9b02      	ldr	r3, [sp, #8]
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	b01c      	add	sp, #112	; 0x70
 8001634:	f85d eb04 	ldr.w	lr, [sp], #4
 8001638:	b003      	add	sp, #12
 800163a:	4770      	bx	lr
 800163c:	2000000c 	.word	0x2000000c
 8001640:	ffff0208 	.word	0xffff0208

08001644 <__ssputs_r>:
 8001644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001648:	688e      	ldr	r6, [r1, #8]
 800164a:	4682      	mov	sl, r0
 800164c:	429e      	cmp	r6, r3
 800164e:	460c      	mov	r4, r1
 8001650:	4690      	mov	r8, r2
 8001652:	461f      	mov	r7, r3
 8001654:	d838      	bhi.n	80016c8 <__ssputs_r+0x84>
 8001656:	898a      	ldrh	r2, [r1, #12]
 8001658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800165c:	d032      	beq.n	80016c4 <__ssputs_r+0x80>
 800165e:	6825      	ldr	r5, [r4, #0]
 8001660:	6909      	ldr	r1, [r1, #16]
 8001662:	3301      	adds	r3, #1
 8001664:	eba5 0901 	sub.w	r9, r5, r1
 8001668:	6965      	ldr	r5, [r4, #20]
 800166a:	444b      	add	r3, r9
 800166c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001674:	106d      	asrs	r5, r5, #1
 8001676:	429d      	cmp	r5, r3
 8001678:	bf38      	it	cc
 800167a:	461d      	movcc	r5, r3
 800167c:	0553      	lsls	r3, r2, #21
 800167e:	d531      	bpl.n	80016e4 <__ssputs_r+0xa0>
 8001680:	4629      	mov	r1, r5
 8001682:	f000 fb6f 	bl	8001d64 <_malloc_r>
 8001686:	4606      	mov	r6, r0
 8001688:	b950      	cbnz	r0, 80016a0 <__ssputs_r+0x5c>
 800168a:	230c      	movs	r3, #12
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f8ca 3000 	str.w	r3, [sl]
 8001694:	89a3      	ldrh	r3, [r4, #12]
 8001696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169a:	81a3      	strh	r3, [r4, #12]
 800169c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016a0:	464a      	mov	r2, r9
 80016a2:	6921      	ldr	r1, [r4, #16]
 80016a4:	f000 face 	bl	8001c44 <memcpy>
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80016ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b2:	81a3      	strh	r3, [r4, #12]
 80016b4:	6126      	str	r6, [r4, #16]
 80016b6:	444e      	add	r6, r9
 80016b8:	6026      	str	r6, [r4, #0]
 80016ba:	463e      	mov	r6, r7
 80016bc:	6165      	str	r5, [r4, #20]
 80016be:	eba5 0509 	sub.w	r5, r5, r9
 80016c2:	60a5      	str	r5, [r4, #8]
 80016c4:	42be      	cmp	r6, r7
 80016c6:	d900      	bls.n	80016ca <__ssputs_r+0x86>
 80016c8:	463e      	mov	r6, r7
 80016ca:	4632      	mov	r2, r6
 80016cc:	4641      	mov	r1, r8
 80016ce:	6820      	ldr	r0, [r4, #0]
 80016d0:	f000 fac6 	bl	8001c60 <memmove>
 80016d4:	68a3      	ldr	r3, [r4, #8]
 80016d6:	2000      	movs	r0, #0
 80016d8:	1b9b      	subs	r3, r3, r6
 80016da:	60a3      	str	r3, [r4, #8]
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	4433      	add	r3, r6
 80016e0:	6023      	str	r3, [r4, #0]
 80016e2:	e7db      	b.n	800169c <__ssputs_r+0x58>
 80016e4:	462a      	mov	r2, r5
 80016e6:	f000 fbb1 	bl	8001e4c <_realloc_r>
 80016ea:	4606      	mov	r6, r0
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d1e1      	bne.n	80016b4 <__ssputs_r+0x70>
 80016f0:	4650      	mov	r0, sl
 80016f2:	6921      	ldr	r1, [r4, #16]
 80016f4:	f000 face 	bl	8001c94 <_free_r>
 80016f8:	e7c7      	b.n	800168a <__ssputs_r+0x46>
	...

080016fc <_svfiprintf_r>:
 80016fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001700:	4698      	mov	r8, r3
 8001702:	898b      	ldrh	r3, [r1, #12]
 8001704:	4607      	mov	r7, r0
 8001706:	061b      	lsls	r3, r3, #24
 8001708:	460d      	mov	r5, r1
 800170a:	4614      	mov	r4, r2
 800170c:	b09d      	sub	sp, #116	; 0x74
 800170e:	d50e      	bpl.n	800172e <_svfiprintf_r+0x32>
 8001710:	690b      	ldr	r3, [r1, #16]
 8001712:	b963      	cbnz	r3, 800172e <_svfiprintf_r+0x32>
 8001714:	2140      	movs	r1, #64	; 0x40
 8001716:	f000 fb25 	bl	8001d64 <_malloc_r>
 800171a:	6028      	str	r0, [r5, #0]
 800171c:	6128      	str	r0, [r5, #16]
 800171e:	b920      	cbnz	r0, 800172a <_svfiprintf_r+0x2e>
 8001720:	230c      	movs	r3, #12
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	e0d1      	b.n	80018ce <_svfiprintf_r+0x1d2>
 800172a:	2340      	movs	r3, #64	; 0x40
 800172c:	616b      	str	r3, [r5, #20]
 800172e:	2300      	movs	r3, #0
 8001730:	9309      	str	r3, [sp, #36]	; 0x24
 8001732:	2320      	movs	r3, #32
 8001734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001738:	2330      	movs	r3, #48	; 0x30
 800173a:	f04f 0901 	mov.w	r9, #1
 800173e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001742:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80018e8 <_svfiprintf_r+0x1ec>
 8001746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800174a:	4623      	mov	r3, r4
 800174c:	469a      	mov	sl, r3
 800174e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001752:	b10a      	cbz	r2, 8001758 <_svfiprintf_r+0x5c>
 8001754:	2a25      	cmp	r2, #37	; 0x25
 8001756:	d1f9      	bne.n	800174c <_svfiprintf_r+0x50>
 8001758:	ebba 0b04 	subs.w	fp, sl, r4
 800175c:	d00b      	beq.n	8001776 <_svfiprintf_r+0x7a>
 800175e:	465b      	mov	r3, fp
 8001760:	4622      	mov	r2, r4
 8001762:	4629      	mov	r1, r5
 8001764:	4638      	mov	r0, r7
 8001766:	f7ff ff6d 	bl	8001644 <__ssputs_r>
 800176a:	3001      	adds	r0, #1
 800176c:	f000 80aa 	beq.w	80018c4 <_svfiprintf_r+0x1c8>
 8001770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001772:	445a      	add	r2, fp
 8001774:	9209      	str	r2, [sp, #36]	; 0x24
 8001776:	f89a 3000 	ldrb.w	r3, [sl]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80a2 	beq.w	80018c4 <_svfiprintf_r+0x1c8>
 8001780:	2300      	movs	r3, #0
 8001782:	f04f 32ff 	mov.w	r2, #4294967295
 8001786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800178a:	f10a 0a01 	add.w	sl, sl, #1
 800178e:	9304      	str	r3, [sp, #16]
 8001790:	9307      	str	r3, [sp, #28]
 8001792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001796:	931a      	str	r3, [sp, #104]	; 0x68
 8001798:	4654      	mov	r4, sl
 800179a:	2205      	movs	r2, #5
 800179c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017a0:	4851      	ldr	r0, [pc, #324]	; (80018e8 <_svfiprintf_r+0x1ec>)
 80017a2:	f000 fa41 	bl	8001c28 <memchr>
 80017a6:	9a04      	ldr	r2, [sp, #16]
 80017a8:	b9d8      	cbnz	r0, 80017e2 <_svfiprintf_r+0xe6>
 80017aa:	06d0      	lsls	r0, r2, #27
 80017ac:	bf44      	itt	mi
 80017ae:	2320      	movmi	r3, #32
 80017b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017b4:	0711      	lsls	r1, r2, #28
 80017b6:	bf44      	itt	mi
 80017b8:	232b      	movmi	r3, #43	; 0x2b
 80017ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017be:	f89a 3000 	ldrb.w	r3, [sl]
 80017c2:	2b2a      	cmp	r3, #42	; 0x2a
 80017c4:	d015      	beq.n	80017f2 <_svfiprintf_r+0xf6>
 80017c6:	4654      	mov	r4, sl
 80017c8:	2000      	movs	r0, #0
 80017ca:	f04f 0c0a 	mov.w	ip, #10
 80017ce:	9a07      	ldr	r2, [sp, #28]
 80017d0:	4621      	mov	r1, r4
 80017d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017d6:	3b30      	subs	r3, #48	; 0x30
 80017d8:	2b09      	cmp	r3, #9
 80017da:	d94e      	bls.n	800187a <_svfiprintf_r+0x17e>
 80017dc:	b1b0      	cbz	r0, 800180c <_svfiprintf_r+0x110>
 80017de:	9207      	str	r2, [sp, #28]
 80017e0:	e014      	b.n	800180c <_svfiprintf_r+0x110>
 80017e2:	eba0 0308 	sub.w	r3, r0, r8
 80017e6:	fa09 f303 	lsl.w	r3, r9, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	46a2      	mov	sl, r4
 80017ee:	9304      	str	r3, [sp, #16]
 80017f0:	e7d2      	b.n	8001798 <_svfiprintf_r+0x9c>
 80017f2:	9b03      	ldr	r3, [sp, #12]
 80017f4:	1d19      	adds	r1, r3, #4
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	9103      	str	r1, [sp, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bfbb      	ittet	lt
 80017fe:	425b      	neglt	r3, r3
 8001800:	f042 0202 	orrlt.w	r2, r2, #2
 8001804:	9307      	strge	r3, [sp, #28]
 8001806:	9307      	strlt	r3, [sp, #28]
 8001808:	bfb8      	it	lt
 800180a:	9204      	strlt	r2, [sp, #16]
 800180c:	7823      	ldrb	r3, [r4, #0]
 800180e:	2b2e      	cmp	r3, #46	; 0x2e
 8001810:	d10c      	bne.n	800182c <_svfiprintf_r+0x130>
 8001812:	7863      	ldrb	r3, [r4, #1]
 8001814:	2b2a      	cmp	r3, #42	; 0x2a
 8001816:	d135      	bne.n	8001884 <_svfiprintf_r+0x188>
 8001818:	9b03      	ldr	r3, [sp, #12]
 800181a:	3402      	adds	r4, #2
 800181c:	1d1a      	adds	r2, r3, #4
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	9203      	str	r2, [sp, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	bfb8      	it	lt
 8001826:	f04f 33ff 	movlt.w	r3, #4294967295
 800182a:	9305      	str	r3, [sp, #20]
 800182c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80018ec <_svfiprintf_r+0x1f0>
 8001830:	2203      	movs	r2, #3
 8001832:	4650      	mov	r0, sl
 8001834:	7821      	ldrb	r1, [r4, #0]
 8001836:	f000 f9f7 	bl	8001c28 <memchr>
 800183a:	b140      	cbz	r0, 800184e <_svfiprintf_r+0x152>
 800183c:	2340      	movs	r3, #64	; 0x40
 800183e:	eba0 000a 	sub.w	r0, r0, sl
 8001842:	fa03 f000 	lsl.w	r0, r3, r0
 8001846:	9b04      	ldr	r3, [sp, #16]
 8001848:	3401      	adds	r4, #1
 800184a:	4303      	orrs	r3, r0
 800184c:	9304      	str	r3, [sp, #16]
 800184e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001852:	2206      	movs	r2, #6
 8001854:	4826      	ldr	r0, [pc, #152]	; (80018f0 <_svfiprintf_r+0x1f4>)
 8001856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800185a:	f000 f9e5 	bl	8001c28 <memchr>
 800185e:	2800      	cmp	r0, #0
 8001860:	d038      	beq.n	80018d4 <_svfiprintf_r+0x1d8>
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <_svfiprintf_r+0x1f8>)
 8001864:	bb1b      	cbnz	r3, 80018ae <_svfiprintf_r+0x1b2>
 8001866:	9b03      	ldr	r3, [sp, #12]
 8001868:	3307      	adds	r3, #7
 800186a:	f023 0307 	bic.w	r3, r3, #7
 800186e:	3308      	adds	r3, #8
 8001870:	9303      	str	r3, [sp, #12]
 8001872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001874:	4433      	add	r3, r6
 8001876:	9309      	str	r3, [sp, #36]	; 0x24
 8001878:	e767      	b.n	800174a <_svfiprintf_r+0x4e>
 800187a:	460c      	mov	r4, r1
 800187c:	2001      	movs	r0, #1
 800187e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001882:	e7a5      	b.n	80017d0 <_svfiprintf_r+0xd4>
 8001884:	2300      	movs	r3, #0
 8001886:	f04f 0c0a 	mov.w	ip, #10
 800188a:	4619      	mov	r1, r3
 800188c:	3401      	adds	r4, #1
 800188e:	9305      	str	r3, [sp, #20]
 8001890:	4620      	mov	r0, r4
 8001892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001896:	3a30      	subs	r2, #48	; 0x30
 8001898:	2a09      	cmp	r2, #9
 800189a:	d903      	bls.n	80018a4 <_svfiprintf_r+0x1a8>
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0c5      	beq.n	800182c <_svfiprintf_r+0x130>
 80018a0:	9105      	str	r1, [sp, #20]
 80018a2:	e7c3      	b.n	800182c <_svfiprintf_r+0x130>
 80018a4:	4604      	mov	r4, r0
 80018a6:	2301      	movs	r3, #1
 80018a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80018ac:	e7f0      	b.n	8001890 <_svfiprintf_r+0x194>
 80018ae:	ab03      	add	r3, sp, #12
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	462a      	mov	r2, r5
 80018b4:	4638      	mov	r0, r7
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <_svfiprintf_r+0x1fc>)
 80018b8:	a904      	add	r1, sp, #16
 80018ba:	f3af 8000 	nop.w
 80018be:	1c42      	adds	r2, r0, #1
 80018c0:	4606      	mov	r6, r0
 80018c2:	d1d6      	bne.n	8001872 <_svfiprintf_r+0x176>
 80018c4:	89ab      	ldrh	r3, [r5, #12]
 80018c6:	065b      	lsls	r3, r3, #25
 80018c8:	f53f af2c 	bmi.w	8001724 <_svfiprintf_r+0x28>
 80018cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018ce:	b01d      	add	sp, #116	; 0x74
 80018d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018d4:	ab03      	add	r3, sp, #12
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	462a      	mov	r2, r5
 80018da:	4638      	mov	r0, r7
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <_svfiprintf_r+0x1fc>)
 80018de:	a904      	add	r1, sp, #16
 80018e0:	f000 f87c 	bl	80019dc <_printf_i>
 80018e4:	e7eb      	b.n	80018be <_svfiprintf_r+0x1c2>
 80018e6:	bf00      	nop
 80018e8:	08001f5e 	.word	0x08001f5e
 80018ec:	08001f64 	.word	0x08001f64
 80018f0:	08001f68 	.word	0x08001f68
 80018f4:	00000000 	.word	0x00000000
 80018f8:	08001645 	.word	0x08001645

080018fc <_printf_common>:
 80018fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001900:	4616      	mov	r6, r2
 8001902:	4699      	mov	r9, r3
 8001904:	688a      	ldr	r2, [r1, #8]
 8001906:	690b      	ldr	r3, [r1, #16]
 8001908:	4607      	mov	r7, r0
 800190a:	4293      	cmp	r3, r2
 800190c:	bfb8      	it	lt
 800190e:	4613      	movlt	r3, r2
 8001910:	6033      	str	r3, [r6, #0]
 8001912:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001916:	460c      	mov	r4, r1
 8001918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800191c:	b10a      	cbz	r2, 8001922 <_printf_common+0x26>
 800191e:	3301      	adds	r3, #1
 8001920:	6033      	str	r3, [r6, #0]
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	0699      	lsls	r1, r3, #26
 8001926:	bf42      	ittt	mi
 8001928:	6833      	ldrmi	r3, [r6, #0]
 800192a:	3302      	addmi	r3, #2
 800192c:	6033      	strmi	r3, [r6, #0]
 800192e:	6825      	ldr	r5, [r4, #0]
 8001930:	f015 0506 	ands.w	r5, r5, #6
 8001934:	d106      	bne.n	8001944 <_printf_common+0x48>
 8001936:	f104 0a19 	add.w	sl, r4, #25
 800193a:	68e3      	ldr	r3, [r4, #12]
 800193c:	6832      	ldr	r2, [r6, #0]
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	42ab      	cmp	r3, r5
 8001942:	dc28      	bgt.n	8001996 <_printf_common+0x9a>
 8001944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001948:	1e13      	subs	r3, r2, #0
 800194a:	6822      	ldr	r2, [r4, #0]
 800194c:	bf18      	it	ne
 800194e:	2301      	movne	r3, #1
 8001950:	0692      	lsls	r2, r2, #26
 8001952:	d42d      	bmi.n	80019b0 <_printf_common+0xb4>
 8001954:	4649      	mov	r1, r9
 8001956:	4638      	mov	r0, r7
 8001958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800195c:	47c0      	blx	r8
 800195e:	3001      	adds	r0, #1
 8001960:	d020      	beq.n	80019a4 <_printf_common+0xa8>
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	68e5      	ldr	r5, [r4, #12]
 8001966:	f003 0306 	and.w	r3, r3, #6
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf18      	it	ne
 800196e:	2500      	movne	r5, #0
 8001970:	6832      	ldr	r2, [r6, #0]
 8001972:	f04f 0600 	mov.w	r6, #0
 8001976:	68a3      	ldr	r3, [r4, #8]
 8001978:	bf08      	it	eq
 800197a:	1aad      	subeq	r5, r5, r2
 800197c:	6922      	ldr	r2, [r4, #16]
 800197e:	bf08      	it	eq
 8001980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001984:	4293      	cmp	r3, r2
 8001986:	bfc4      	itt	gt
 8001988:	1a9b      	subgt	r3, r3, r2
 800198a:	18ed      	addgt	r5, r5, r3
 800198c:	341a      	adds	r4, #26
 800198e:	42b5      	cmp	r5, r6
 8001990:	d11a      	bne.n	80019c8 <_printf_common+0xcc>
 8001992:	2000      	movs	r0, #0
 8001994:	e008      	b.n	80019a8 <_printf_common+0xac>
 8001996:	2301      	movs	r3, #1
 8001998:	4652      	mov	r2, sl
 800199a:	4649      	mov	r1, r9
 800199c:	4638      	mov	r0, r7
 800199e:	47c0      	blx	r8
 80019a0:	3001      	adds	r0, #1
 80019a2:	d103      	bne.n	80019ac <_printf_common+0xb0>
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ac:	3501      	adds	r5, #1
 80019ae:	e7c4      	b.n	800193a <_printf_common+0x3e>
 80019b0:	2030      	movs	r0, #48	; 0x30
 80019b2:	18e1      	adds	r1, r4, r3
 80019b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019be:	4422      	add	r2, r4
 80019c0:	3302      	adds	r3, #2
 80019c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019c6:	e7c5      	b.n	8001954 <_printf_common+0x58>
 80019c8:	2301      	movs	r3, #1
 80019ca:	4622      	mov	r2, r4
 80019cc:	4649      	mov	r1, r9
 80019ce:	4638      	mov	r0, r7
 80019d0:	47c0      	blx	r8
 80019d2:	3001      	adds	r0, #1
 80019d4:	d0e6      	beq.n	80019a4 <_printf_common+0xa8>
 80019d6:	3601      	adds	r6, #1
 80019d8:	e7d9      	b.n	800198e <_printf_common+0x92>
	...

080019dc <_printf_i>:
 80019dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019e0:	7e0f      	ldrb	r7, [r1, #24]
 80019e2:	4691      	mov	r9, r2
 80019e4:	2f78      	cmp	r7, #120	; 0x78
 80019e6:	4680      	mov	r8, r0
 80019e8:	460c      	mov	r4, r1
 80019ea:	469a      	mov	sl, r3
 80019ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80019ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80019f2:	d807      	bhi.n	8001a04 <_printf_i+0x28>
 80019f4:	2f62      	cmp	r7, #98	; 0x62
 80019f6:	d80a      	bhi.n	8001a0e <_printf_i+0x32>
 80019f8:	2f00      	cmp	r7, #0
 80019fa:	f000 80d9 	beq.w	8001bb0 <_printf_i+0x1d4>
 80019fe:	2f58      	cmp	r7, #88	; 0x58
 8001a00:	f000 80a4 	beq.w	8001b4c <_printf_i+0x170>
 8001a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a0c:	e03a      	b.n	8001a84 <_printf_i+0xa8>
 8001a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a12:	2b15      	cmp	r3, #21
 8001a14:	d8f6      	bhi.n	8001a04 <_printf_i+0x28>
 8001a16:	a101      	add	r1, pc, #4	; (adr r1, 8001a1c <_printf_i+0x40>)
 8001a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a1c:	08001a75 	.word	0x08001a75
 8001a20:	08001a89 	.word	0x08001a89
 8001a24:	08001a05 	.word	0x08001a05
 8001a28:	08001a05 	.word	0x08001a05
 8001a2c:	08001a05 	.word	0x08001a05
 8001a30:	08001a05 	.word	0x08001a05
 8001a34:	08001a89 	.word	0x08001a89
 8001a38:	08001a05 	.word	0x08001a05
 8001a3c:	08001a05 	.word	0x08001a05
 8001a40:	08001a05 	.word	0x08001a05
 8001a44:	08001a05 	.word	0x08001a05
 8001a48:	08001b97 	.word	0x08001b97
 8001a4c:	08001ab9 	.word	0x08001ab9
 8001a50:	08001b79 	.word	0x08001b79
 8001a54:	08001a05 	.word	0x08001a05
 8001a58:	08001a05 	.word	0x08001a05
 8001a5c:	08001bb9 	.word	0x08001bb9
 8001a60:	08001a05 	.word	0x08001a05
 8001a64:	08001ab9 	.word	0x08001ab9
 8001a68:	08001a05 	.word	0x08001a05
 8001a6c:	08001a05 	.word	0x08001a05
 8001a70:	08001b81 	.word	0x08001b81
 8001a74:	682b      	ldr	r3, [r5, #0]
 8001a76:	1d1a      	adds	r2, r3, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	602a      	str	r2, [r5, #0]
 8001a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0a4      	b.n	8001bd2 <_printf_i+0x1f6>
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	6829      	ldr	r1, [r5, #0]
 8001a8c:	0606      	lsls	r6, r0, #24
 8001a8e:	f101 0304 	add.w	r3, r1, #4
 8001a92:	d50a      	bpl.n	8001aaa <_printf_i+0xce>
 8001a94:	680e      	ldr	r6, [r1, #0]
 8001a96:	602b      	str	r3, [r5, #0]
 8001a98:	2e00      	cmp	r6, #0
 8001a9a:	da03      	bge.n	8001aa4 <_printf_i+0xc8>
 8001a9c:	232d      	movs	r3, #45	; 0x2d
 8001a9e:	4276      	negs	r6, r6
 8001aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	485e      	ldr	r0, [pc, #376]	; (8001c20 <_printf_i+0x244>)
 8001aa8:	e019      	b.n	8001ade <_printf_i+0x102>
 8001aaa:	680e      	ldr	r6, [r1, #0]
 8001aac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ab0:	602b      	str	r3, [r5, #0]
 8001ab2:	bf18      	it	ne
 8001ab4:	b236      	sxthne	r6, r6
 8001ab6:	e7ef      	b.n	8001a98 <_printf_i+0xbc>
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	6820      	ldr	r0, [r4, #0]
 8001abc:	1d19      	adds	r1, r3, #4
 8001abe:	6029      	str	r1, [r5, #0]
 8001ac0:	0601      	lsls	r1, r0, #24
 8001ac2:	d501      	bpl.n	8001ac8 <_printf_i+0xec>
 8001ac4:	681e      	ldr	r6, [r3, #0]
 8001ac6:	e002      	b.n	8001ace <_printf_i+0xf2>
 8001ac8:	0646      	lsls	r6, r0, #25
 8001aca:	d5fb      	bpl.n	8001ac4 <_printf_i+0xe8>
 8001acc:	881e      	ldrh	r6, [r3, #0]
 8001ace:	2f6f      	cmp	r7, #111	; 0x6f
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2308      	moveq	r3, #8
 8001ad4:	230a      	movne	r3, #10
 8001ad6:	4852      	ldr	r0, [pc, #328]	; (8001c20 <_printf_i+0x244>)
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ade:	6865      	ldr	r5, [r4, #4]
 8001ae0:	2d00      	cmp	r5, #0
 8001ae2:	bfa8      	it	ge
 8001ae4:	6821      	ldrge	r1, [r4, #0]
 8001ae6:	60a5      	str	r5, [r4, #8]
 8001ae8:	bfa4      	itt	ge
 8001aea:	f021 0104 	bicge.w	r1, r1, #4
 8001aee:	6021      	strge	r1, [r4, #0]
 8001af0:	b90e      	cbnz	r6, 8001af6 <_printf_i+0x11a>
 8001af2:	2d00      	cmp	r5, #0
 8001af4:	d04d      	beq.n	8001b92 <_printf_i+0x1b6>
 8001af6:	4615      	mov	r5, r2
 8001af8:	fbb6 f1f3 	udiv	r1, r6, r3
 8001afc:	fb03 6711 	mls	r7, r3, r1, r6
 8001b00:	5dc7      	ldrb	r7, [r0, r7]
 8001b02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b06:	4637      	mov	r7, r6
 8001b08:	42bb      	cmp	r3, r7
 8001b0a:	460e      	mov	r6, r1
 8001b0c:	d9f4      	bls.n	8001af8 <_printf_i+0x11c>
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d10b      	bne.n	8001b2a <_printf_i+0x14e>
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	07de      	lsls	r6, r3, #31
 8001b16:	d508      	bpl.n	8001b2a <_printf_i+0x14e>
 8001b18:	6923      	ldr	r3, [r4, #16]
 8001b1a:	6861      	ldr	r1, [r4, #4]
 8001b1c:	4299      	cmp	r1, r3
 8001b1e:	bfde      	ittt	le
 8001b20:	2330      	movle	r3, #48	; 0x30
 8001b22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b2a:	1b52      	subs	r2, r2, r5
 8001b2c:	6122      	str	r2, [r4, #16]
 8001b2e:	464b      	mov	r3, r9
 8001b30:	4621      	mov	r1, r4
 8001b32:	4640      	mov	r0, r8
 8001b34:	f8cd a000 	str.w	sl, [sp]
 8001b38:	aa03      	add	r2, sp, #12
 8001b3a:	f7ff fedf 	bl	80018fc <_printf_common>
 8001b3e:	3001      	adds	r0, #1
 8001b40:	d14c      	bne.n	8001bdc <_printf_i+0x200>
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295
 8001b46:	b004      	add	sp, #16
 8001b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b4c:	4834      	ldr	r0, [pc, #208]	; (8001c20 <_printf_i+0x244>)
 8001b4e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001b52:	6829      	ldr	r1, [r5, #0]
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b5a:	6029      	str	r1, [r5, #0]
 8001b5c:	061d      	lsls	r5, r3, #24
 8001b5e:	d514      	bpl.n	8001b8a <_printf_i+0x1ae>
 8001b60:	07df      	lsls	r7, r3, #31
 8001b62:	bf44      	itt	mi
 8001b64:	f043 0320 	orrmi.w	r3, r3, #32
 8001b68:	6023      	strmi	r3, [r4, #0]
 8001b6a:	b91e      	cbnz	r6, 8001b74 <_printf_i+0x198>
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	f023 0320 	bic.w	r3, r3, #32
 8001b72:	6023      	str	r3, [r4, #0]
 8001b74:	2310      	movs	r3, #16
 8001b76:	e7af      	b.n	8001ad8 <_printf_i+0xfc>
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	6023      	str	r3, [r4, #0]
 8001b80:	2378      	movs	r3, #120	; 0x78
 8001b82:	4828      	ldr	r0, [pc, #160]	; (8001c24 <_printf_i+0x248>)
 8001b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b88:	e7e3      	b.n	8001b52 <_printf_i+0x176>
 8001b8a:	0659      	lsls	r1, r3, #25
 8001b8c:	bf48      	it	mi
 8001b8e:	b2b6      	uxthmi	r6, r6
 8001b90:	e7e6      	b.n	8001b60 <_printf_i+0x184>
 8001b92:	4615      	mov	r5, r2
 8001b94:	e7bb      	b.n	8001b0e <_printf_i+0x132>
 8001b96:	682b      	ldr	r3, [r5, #0]
 8001b98:	6826      	ldr	r6, [r4, #0]
 8001b9a:	1d18      	adds	r0, r3, #4
 8001b9c:	6961      	ldr	r1, [r4, #20]
 8001b9e:	6028      	str	r0, [r5, #0]
 8001ba0:	0635      	lsls	r5, r6, #24
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	d501      	bpl.n	8001baa <_printf_i+0x1ce>
 8001ba6:	6019      	str	r1, [r3, #0]
 8001ba8:	e002      	b.n	8001bb0 <_printf_i+0x1d4>
 8001baa:	0670      	lsls	r0, r6, #25
 8001bac:	d5fb      	bpl.n	8001ba6 <_printf_i+0x1ca>
 8001bae:	8019      	strh	r1, [r3, #0]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4615      	mov	r5, r2
 8001bb4:	6123      	str	r3, [r4, #16]
 8001bb6:	e7ba      	b.n	8001b2e <_printf_i+0x152>
 8001bb8:	682b      	ldr	r3, [r5, #0]
 8001bba:	2100      	movs	r1, #0
 8001bbc:	1d1a      	adds	r2, r3, #4
 8001bbe:	602a      	str	r2, [r5, #0]
 8001bc0:	681d      	ldr	r5, [r3, #0]
 8001bc2:	6862      	ldr	r2, [r4, #4]
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f000 f82f 	bl	8001c28 <memchr>
 8001bca:	b108      	cbz	r0, 8001bd0 <_printf_i+0x1f4>
 8001bcc:	1b40      	subs	r0, r0, r5
 8001bce:	6060      	str	r0, [r4, #4]
 8001bd0:	6863      	ldr	r3, [r4, #4]
 8001bd2:	6123      	str	r3, [r4, #16]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bda:	e7a8      	b.n	8001b2e <_printf_i+0x152>
 8001bdc:	462a      	mov	r2, r5
 8001bde:	4649      	mov	r1, r9
 8001be0:	4640      	mov	r0, r8
 8001be2:	6923      	ldr	r3, [r4, #16]
 8001be4:	47d0      	blx	sl
 8001be6:	3001      	adds	r0, #1
 8001be8:	d0ab      	beq.n	8001b42 <_printf_i+0x166>
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	079b      	lsls	r3, r3, #30
 8001bee:	d413      	bmi.n	8001c18 <_printf_i+0x23c>
 8001bf0:	68e0      	ldr	r0, [r4, #12]
 8001bf2:	9b03      	ldr	r3, [sp, #12]
 8001bf4:	4298      	cmp	r0, r3
 8001bf6:	bfb8      	it	lt
 8001bf8:	4618      	movlt	r0, r3
 8001bfa:	e7a4      	b.n	8001b46 <_printf_i+0x16a>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	4632      	mov	r2, r6
 8001c00:	4649      	mov	r1, r9
 8001c02:	4640      	mov	r0, r8
 8001c04:	47d0      	blx	sl
 8001c06:	3001      	adds	r0, #1
 8001c08:	d09b      	beq.n	8001b42 <_printf_i+0x166>
 8001c0a:	3501      	adds	r5, #1
 8001c0c:	68e3      	ldr	r3, [r4, #12]
 8001c0e:	9903      	ldr	r1, [sp, #12]
 8001c10:	1a5b      	subs	r3, r3, r1
 8001c12:	42ab      	cmp	r3, r5
 8001c14:	dcf2      	bgt.n	8001bfc <_printf_i+0x220>
 8001c16:	e7eb      	b.n	8001bf0 <_printf_i+0x214>
 8001c18:	2500      	movs	r5, #0
 8001c1a:	f104 0619 	add.w	r6, r4, #25
 8001c1e:	e7f5      	b.n	8001c0c <_printf_i+0x230>
 8001c20:	08001f6f 	.word	0x08001f6f
 8001c24:	08001f80 	.word	0x08001f80

08001c28 <memchr>:
 8001c28:	4603      	mov	r3, r0
 8001c2a:	b510      	push	{r4, lr}
 8001c2c:	b2c9      	uxtb	r1, r1
 8001c2e:	4402      	add	r2, r0
 8001c30:	4293      	cmp	r3, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	d101      	bne.n	8001c3a <memchr+0x12>
 8001c36:	2000      	movs	r0, #0
 8001c38:	e003      	b.n	8001c42 <memchr+0x1a>
 8001c3a:	7804      	ldrb	r4, [r0, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	428c      	cmp	r4, r1
 8001c40:	d1f6      	bne.n	8001c30 <memchr+0x8>
 8001c42:	bd10      	pop	{r4, pc}

08001c44 <memcpy>:
 8001c44:	440a      	add	r2, r1
 8001c46:	4291      	cmp	r1, r2
 8001c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c4c:	d100      	bne.n	8001c50 <memcpy+0xc>
 8001c4e:	4770      	bx	lr
 8001c50:	b510      	push	{r4, lr}
 8001c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c56:	4291      	cmp	r1, r2
 8001c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c5c:	d1f9      	bne.n	8001c52 <memcpy+0xe>
 8001c5e:	bd10      	pop	{r4, pc}

08001c60 <memmove>:
 8001c60:	4288      	cmp	r0, r1
 8001c62:	b510      	push	{r4, lr}
 8001c64:	eb01 0402 	add.w	r4, r1, r2
 8001c68:	d902      	bls.n	8001c70 <memmove+0x10>
 8001c6a:	4284      	cmp	r4, r0
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	d807      	bhi.n	8001c80 <memmove+0x20>
 8001c70:	1e43      	subs	r3, r0, #1
 8001c72:	42a1      	cmp	r1, r4
 8001c74:	d008      	beq.n	8001c88 <memmove+0x28>
 8001c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c7e:	e7f8      	b.n	8001c72 <memmove+0x12>
 8001c80:	4601      	mov	r1, r0
 8001c82:	4402      	add	r2, r0
 8001c84:	428a      	cmp	r2, r1
 8001c86:	d100      	bne.n	8001c8a <memmove+0x2a>
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c92:	e7f7      	b.n	8001c84 <memmove+0x24>

08001c94 <_free_r>:
 8001c94:	b538      	push	{r3, r4, r5, lr}
 8001c96:	4605      	mov	r5, r0
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	d040      	beq.n	8001d1e <_free_r+0x8a>
 8001c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ca0:	1f0c      	subs	r4, r1, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bfb8      	it	lt
 8001ca6:	18e4      	addlt	r4, r4, r3
 8001ca8:	f000 f910 	bl	8001ecc <__malloc_lock>
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <_free_r+0x8c>)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	b933      	cbnz	r3, 8001cc0 <_free_r+0x2c>
 8001cb2:	6063      	str	r3, [r4, #4]
 8001cb4:	6014      	str	r4, [r2, #0]
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cbc:	f000 b90c 	b.w	8001ed8 <__malloc_unlock>
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	d908      	bls.n	8001cd6 <_free_r+0x42>
 8001cc4:	6820      	ldr	r0, [r4, #0]
 8001cc6:	1821      	adds	r1, r4, r0
 8001cc8:	428b      	cmp	r3, r1
 8001cca:	bf01      	itttt	eq
 8001ccc:	6819      	ldreq	r1, [r3, #0]
 8001cce:	685b      	ldreq	r3, [r3, #4]
 8001cd0:	1809      	addeq	r1, r1, r0
 8001cd2:	6021      	streq	r1, [r4, #0]
 8001cd4:	e7ed      	b.n	8001cb2 <_free_r+0x1e>
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	b10b      	cbz	r3, 8001ce0 <_free_r+0x4c>
 8001cdc:	42a3      	cmp	r3, r4
 8001cde:	d9fa      	bls.n	8001cd6 <_free_r+0x42>
 8001ce0:	6811      	ldr	r1, [r2, #0]
 8001ce2:	1850      	adds	r0, r2, r1
 8001ce4:	42a0      	cmp	r0, r4
 8001ce6:	d10b      	bne.n	8001d00 <_free_r+0x6c>
 8001ce8:	6820      	ldr	r0, [r4, #0]
 8001cea:	4401      	add	r1, r0
 8001cec:	1850      	adds	r0, r2, r1
 8001cee:	4283      	cmp	r3, r0
 8001cf0:	6011      	str	r1, [r2, #0]
 8001cf2:	d1e0      	bne.n	8001cb6 <_free_r+0x22>
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4401      	add	r1, r0
 8001cfa:	6011      	str	r1, [r2, #0]
 8001cfc:	6053      	str	r3, [r2, #4]
 8001cfe:	e7da      	b.n	8001cb6 <_free_r+0x22>
 8001d00:	d902      	bls.n	8001d08 <_free_r+0x74>
 8001d02:	230c      	movs	r3, #12
 8001d04:	602b      	str	r3, [r5, #0]
 8001d06:	e7d6      	b.n	8001cb6 <_free_r+0x22>
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	1821      	adds	r1, r4, r0
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	bf01      	itttt	eq
 8001d10:	6819      	ldreq	r1, [r3, #0]
 8001d12:	685b      	ldreq	r3, [r3, #4]
 8001d14:	1809      	addeq	r1, r1, r0
 8001d16:	6021      	streq	r1, [r4, #0]
 8001d18:	6063      	str	r3, [r4, #4]
 8001d1a:	6054      	str	r4, [r2, #4]
 8001d1c:	e7cb      	b.n	8001cb6 <_free_r+0x22>
 8001d1e:	bd38      	pop	{r3, r4, r5, pc}
 8001d20:	20000094 	.word	0x20000094

08001d24 <sbrk_aligned>:
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	4e0e      	ldr	r6, [pc, #56]	; (8001d60 <sbrk_aligned+0x3c>)
 8001d28:	460c      	mov	r4, r1
 8001d2a:	6831      	ldr	r1, [r6, #0]
 8001d2c:	4605      	mov	r5, r0
 8001d2e:	b911      	cbnz	r1, 8001d36 <sbrk_aligned+0x12>
 8001d30:	f000 f8bc 	bl	8001eac <_sbrk_r>
 8001d34:	6030      	str	r0, [r6, #0]
 8001d36:	4621      	mov	r1, r4
 8001d38:	4628      	mov	r0, r5
 8001d3a:	f000 f8b7 	bl	8001eac <_sbrk_r>
 8001d3e:	1c43      	adds	r3, r0, #1
 8001d40:	d00a      	beq.n	8001d58 <sbrk_aligned+0x34>
 8001d42:	1cc4      	adds	r4, r0, #3
 8001d44:	f024 0403 	bic.w	r4, r4, #3
 8001d48:	42a0      	cmp	r0, r4
 8001d4a:	d007      	beq.n	8001d5c <sbrk_aligned+0x38>
 8001d4c:	1a21      	subs	r1, r4, r0
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f000 f8ac 	bl	8001eac <_sbrk_r>
 8001d54:	3001      	adds	r0, #1
 8001d56:	d101      	bne.n	8001d5c <sbrk_aligned+0x38>
 8001d58:	f04f 34ff 	mov.w	r4, #4294967295
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}
 8001d60:	20000098 	.word	0x20000098

08001d64 <_malloc_r>:
 8001d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d68:	1ccd      	adds	r5, r1, #3
 8001d6a:	f025 0503 	bic.w	r5, r5, #3
 8001d6e:	3508      	adds	r5, #8
 8001d70:	2d0c      	cmp	r5, #12
 8001d72:	bf38      	it	cc
 8001d74:	250c      	movcc	r5, #12
 8001d76:	2d00      	cmp	r5, #0
 8001d78:	4607      	mov	r7, r0
 8001d7a:	db01      	blt.n	8001d80 <_malloc_r+0x1c>
 8001d7c:	42a9      	cmp	r1, r5
 8001d7e:	d905      	bls.n	8001d8c <_malloc_r+0x28>
 8001d80:	230c      	movs	r3, #12
 8001d82:	2600      	movs	r6, #0
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	4630      	mov	r0, r6
 8001d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d8c:	4e2e      	ldr	r6, [pc, #184]	; (8001e48 <_malloc_r+0xe4>)
 8001d8e:	f000 f89d 	bl	8001ecc <__malloc_lock>
 8001d92:	6833      	ldr	r3, [r6, #0]
 8001d94:	461c      	mov	r4, r3
 8001d96:	bb34      	cbnz	r4, 8001de6 <_malloc_r+0x82>
 8001d98:	4629      	mov	r1, r5
 8001d9a:	4638      	mov	r0, r7
 8001d9c:	f7ff ffc2 	bl	8001d24 <sbrk_aligned>
 8001da0:	1c43      	adds	r3, r0, #1
 8001da2:	4604      	mov	r4, r0
 8001da4:	d14d      	bne.n	8001e42 <_malloc_r+0xde>
 8001da6:	6834      	ldr	r4, [r6, #0]
 8001da8:	4626      	mov	r6, r4
 8001daa:	2e00      	cmp	r6, #0
 8001dac:	d140      	bne.n	8001e30 <_malloc_r+0xcc>
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	4631      	mov	r1, r6
 8001db2:	4638      	mov	r0, r7
 8001db4:	eb04 0803 	add.w	r8, r4, r3
 8001db8:	f000 f878 	bl	8001eac <_sbrk_r>
 8001dbc:	4580      	cmp	r8, r0
 8001dbe:	d13a      	bne.n	8001e36 <_malloc_r+0xd2>
 8001dc0:	6821      	ldr	r1, [r4, #0]
 8001dc2:	3503      	adds	r5, #3
 8001dc4:	1a6d      	subs	r5, r5, r1
 8001dc6:	f025 0503 	bic.w	r5, r5, #3
 8001dca:	3508      	adds	r5, #8
 8001dcc:	2d0c      	cmp	r5, #12
 8001dce:	bf38      	it	cc
 8001dd0:	250c      	movcc	r5, #12
 8001dd2:	4638      	mov	r0, r7
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7ff ffa5 	bl	8001d24 <sbrk_aligned>
 8001dda:	3001      	adds	r0, #1
 8001ddc:	d02b      	beq.n	8001e36 <_malloc_r+0xd2>
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	442b      	add	r3, r5
 8001de2:	6023      	str	r3, [r4, #0]
 8001de4:	e00e      	b.n	8001e04 <_malloc_r+0xa0>
 8001de6:	6822      	ldr	r2, [r4, #0]
 8001de8:	1b52      	subs	r2, r2, r5
 8001dea:	d41e      	bmi.n	8001e2a <_malloc_r+0xc6>
 8001dec:	2a0b      	cmp	r2, #11
 8001dee:	d916      	bls.n	8001e1e <_malloc_r+0xba>
 8001df0:	1961      	adds	r1, r4, r5
 8001df2:	42a3      	cmp	r3, r4
 8001df4:	6025      	str	r5, [r4, #0]
 8001df6:	bf18      	it	ne
 8001df8:	6059      	strne	r1, [r3, #4]
 8001dfa:	6863      	ldr	r3, [r4, #4]
 8001dfc:	bf08      	it	eq
 8001dfe:	6031      	streq	r1, [r6, #0]
 8001e00:	5162      	str	r2, [r4, r5]
 8001e02:	604b      	str	r3, [r1, #4]
 8001e04:	4638      	mov	r0, r7
 8001e06:	f104 060b 	add.w	r6, r4, #11
 8001e0a:	f000 f865 	bl	8001ed8 <__malloc_unlock>
 8001e0e:	f026 0607 	bic.w	r6, r6, #7
 8001e12:	1d23      	adds	r3, r4, #4
 8001e14:	1af2      	subs	r2, r6, r3
 8001e16:	d0b6      	beq.n	8001d86 <_malloc_r+0x22>
 8001e18:	1b9b      	subs	r3, r3, r6
 8001e1a:	50a3      	str	r3, [r4, r2]
 8001e1c:	e7b3      	b.n	8001d86 <_malloc_r+0x22>
 8001e1e:	6862      	ldr	r2, [r4, #4]
 8001e20:	42a3      	cmp	r3, r4
 8001e22:	bf0c      	ite	eq
 8001e24:	6032      	streq	r2, [r6, #0]
 8001e26:	605a      	strne	r2, [r3, #4]
 8001e28:	e7ec      	b.n	8001e04 <_malloc_r+0xa0>
 8001e2a:	4623      	mov	r3, r4
 8001e2c:	6864      	ldr	r4, [r4, #4]
 8001e2e:	e7b2      	b.n	8001d96 <_malloc_r+0x32>
 8001e30:	4634      	mov	r4, r6
 8001e32:	6876      	ldr	r6, [r6, #4]
 8001e34:	e7b9      	b.n	8001daa <_malloc_r+0x46>
 8001e36:	230c      	movs	r3, #12
 8001e38:	4638      	mov	r0, r7
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	f000 f84c 	bl	8001ed8 <__malloc_unlock>
 8001e40:	e7a1      	b.n	8001d86 <_malloc_r+0x22>
 8001e42:	6025      	str	r5, [r4, #0]
 8001e44:	e7de      	b.n	8001e04 <_malloc_r+0xa0>
 8001e46:	bf00      	nop
 8001e48:	20000094 	.word	0x20000094

08001e4c <_realloc_r>:
 8001e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e50:	4680      	mov	r8, r0
 8001e52:	4614      	mov	r4, r2
 8001e54:	460e      	mov	r6, r1
 8001e56:	b921      	cbnz	r1, 8001e62 <_realloc_r+0x16>
 8001e58:	4611      	mov	r1, r2
 8001e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e5e:	f7ff bf81 	b.w	8001d64 <_malloc_r>
 8001e62:	b92a      	cbnz	r2, 8001e70 <_realloc_r+0x24>
 8001e64:	f7ff ff16 	bl	8001c94 <_free_r>
 8001e68:	4625      	mov	r5, r4
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e70:	f000 f838 	bl	8001ee4 <_malloc_usable_size_r>
 8001e74:	4284      	cmp	r4, r0
 8001e76:	4607      	mov	r7, r0
 8001e78:	d802      	bhi.n	8001e80 <_realloc_r+0x34>
 8001e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001e7e:	d812      	bhi.n	8001ea6 <_realloc_r+0x5a>
 8001e80:	4621      	mov	r1, r4
 8001e82:	4640      	mov	r0, r8
 8001e84:	f7ff ff6e 	bl	8001d64 <_malloc_r>
 8001e88:	4605      	mov	r5, r0
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d0ed      	beq.n	8001e6a <_realloc_r+0x1e>
 8001e8e:	42bc      	cmp	r4, r7
 8001e90:	4622      	mov	r2, r4
 8001e92:	4631      	mov	r1, r6
 8001e94:	bf28      	it	cs
 8001e96:	463a      	movcs	r2, r7
 8001e98:	f7ff fed4 	bl	8001c44 <memcpy>
 8001e9c:	4631      	mov	r1, r6
 8001e9e:	4640      	mov	r0, r8
 8001ea0:	f7ff fef8 	bl	8001c94 <_free_r>
 8001ea4:	e7e1      	b.n	8001e6a <_realloc_r+0x1e>
 8001ea6:	4635      	mov	r5, r6
 8001ea8:	e7df      	b.n	8001e6a <_realloc_r+0x1e>
	...

08001eac <_sbrk_r>:
 8001eac:	b538      	push	{r3, r4, r5, lr}
 8001eae:	2300      	movs	r3, #0
 8001eb0:	4d05      	ldr	r5, [pc, #20]	; (8001ec8 <_sbrk_r+0x1c>)
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	602b      	str	r3, [r5, #0]
 8001eb8:	f7fe fc12 	bl	80006e0 <_sbrk>
 8001ebc:	1c43      	adds	r3, r0, #1
 8001ebe:	d102      	bne.n	8001ec6 <_sbrk_r+0x1a>
 8001ec0:	682b      	ldr	r3, [r5, #0]
 8001ec2:	b103      	cbz	r3, 8001ec6 <_sbrk_r+0x1a>
 8001ec4:	6023      	str	r3, [r4, #0]
 8001ec6:	bd38      	pop	{r3, r4, r5, pc}
 8001ec8:	2000009c 	.word	0x2000009c

08001ecc <__malloc_lock>:
 8001ecc:	4801      	ldr	r0, [pc, #4]	; (8001ed4 <__malloc_lock+0x8>)
 8001ece:	f000 b811 	b.w	8001ef4 <__retarget_lock_acquire_recursive>
 8001ed2:	bf00      	nop
 8001ed4:	200000a0 	.word	0x200000a0

08001ed8 <__malloc_unlock>:
 8001ed8:	4801      	ldr	r0, [pc, #4]	; (8001ee0 <__malloc_unlock+0x8>)
 8001eda:	f000 b80c 	b.w	8001ef6 <__retarget_lock_release_recursive>
 8001ede:	bf00      	nop
 8001ee0:	200000a0 	.word	0x200000a0

08001ee4 <_malloc_usable_size_r>:
 8001ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ee8:	1f18      	subs	r0, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bfbc      	itt	lt
 8001eee:	580b      	ldrlt	r3, [r1, r0]
 8001ef0:	18c0      	addlt	r0, r0, r3
 8001ef2:	4770      	bx	lr

08001ef4 <__retarget_lock_acquire_recursive>:
 8001ef4:	4770      	bx	lr

08001ef6 <__retarget_lock_release_recursive>:
 8001ef6:	4770      	bx	lr

08001ef8 <_init>:
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	bf00      	nop
 8001efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efe:	bc08      	pop	{r3}
 8001f00:	469e      	mov	lr, r3
 8001f02:	4770      	bx	lr

08001f04 <_fini>:
 8001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f06:	bf00      	nop
 8001f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f0a:	bc08      	pop	{r3}
 8001f0c:	469e      	mov	lr, r3
 8001f0e:	4770      	bx	lr
