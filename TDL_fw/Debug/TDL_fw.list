
TDL_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080057e8  080057e8  000157e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c14  08005c14  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005c14  08005c14  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c14  08005c14  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c18  08005c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001dc  08005df8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08005df8  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c32  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bf  00000000  00000000  00028e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002b190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ac  00000000  00000000  0002bb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae77  00000000  00000000  00043efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008988b  00000000  00000000  0004ed73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d85fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d14  00000000  00000000  000d8650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080057d0 	.word	0x080057d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080057d0 	.word	0x080057d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000a96:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000a9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000a9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000aa2:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aa6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000aa8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000aaa:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f80e 	bl	8000ade <Lcd_init>

	return lcd;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	461d      	mov	r5, r3
 8000ac6:	f107 0410 	add.w	r4, r7, #16
 8000aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ace:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ad2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bdb0      	pop	{r4, r5, r7, pc}

08000ade <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7d9b      	ldrb	r3, [r3, #22]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10c      	bne.n	8000b08 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000aee:	2133      	movs	r1, #51	; 0x33
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f88b 	bl	8000c0c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000af6:	2132      	movs	r1, #50	; 0x32
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f887 	bl	8000c0c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000afe:	2128      	movs	r1, #40	; 0x28
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 f883 	bl	8000c0c <lcd_write_command>
 8000b06:	e003      	b.n	8000b10 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000b08:	2138      	movs	r1, #56	; 0x38
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f000 f87e 	bl	8000c0c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000b10:	2101      	movs	r1, #1
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f87a 	bl	8000c0c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000b18:	210c      	movs	r1, #12
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f000 f876 	bl	8000c0c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000b20:	2106      	movs	r1, #6
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f872 	bl	8000c0c <lcd_write_command>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	4906      	ldr	r1, [pc, #24]	; (8000b5c <Lcd_int+0x2c>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 fbca 	bl	80032dc <siprintf>

	Lcd_string(lcd, buffer);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f822 	bl	8000b98 <Lcd_string>
}
 8000b54:	bf00      	nop
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	080057e8 	.word	0x080057e8

08000b60 <Lcd_float>:

/**
 * Write a number on the current position
 */
void Lcd_float(Lcd_HandleTypeDef * lcd, float number)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%f", number);
 8000b6a:	6838      	ldr	r0, [r7, #0]
 8000b6c:	f7ff fc5c 	bl	8000428 <__aeabi_f2d>
 8000b70:	4602      	mov	r2, r0
 8000b72:	460b      	mov	r3, r1
 8000b74:	f107 000c 	add.w	r0, r7, #12
 8000b78:	4906      	ldr	r1, [pc, #24]	; (8000b94 <Lcd_float+0x34>)
 8000b7a:	f002 fbaf 	bl	80032dc <siprintf>

	Lcd_string(lcd, buffer);
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4619      	mov	r1, r3
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f000 f807 	bl	8000b98 <Lcd_string>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	080057ec 	.word	0x080057ec

08000b98 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	e00a      	b.n	8000bbe <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f858 	bl	8000c68 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	7bfc      	ldrb	r4, [r7, #15]
 8000bc0:	6838      	ldr	r0, [r7, #0]
 8000bc2:	f7ff fac5 	bl	8000150 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	d3ed      	bcc.n	8000ba8 <Lcd_string+0x10>
	}
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}
	...

08000bd8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
 8000be4:	4613      	mov	r3, r2
 8000be6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <Lcd_cursor+0x30>)
 8000bec:	5cd2      	ldrb	r2, [r2, r3]
 8000bee:	78bb      	ldrb	r3, [r7, #2]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	3b80      	subs	r3, #128	; 0x80
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f806 	bl	8000c0c <lcd_write_command>
	#endif
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08005810 	.word	0x08005810

08000c0c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6898      	ldr	r0, [r3, #8]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	899b      	ldrh	r3, [r3, #12]
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	f001 f801 	bl	8001c2a <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7d9b      	ldrb	r3, [r3, #22]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d111      	bne.n	8000c54 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	091b      	lsrs	r3, r3, #4
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2204      	movs	r2, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 f842 	bl	8000cc4 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2204      	movs	r2, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f839 	bl	8000cc4 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000c52:	e005      	b.n	8000c60 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	2208      	movs	r2, #8
 8000c58:	4619      	mov	r1, r3
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f832 	bl	8000cc4 <lcd_write>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6898      	ldr	r0, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	899b      	ldrh	r3, [r3, #12]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f000 ffd3 	bl	8001c2a <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7d9b      	ldrb	r3, [r3, #22]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d111      	bne.n	8000cb0 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2204      	movs	r2, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f814 	bl	8000cc4 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 f80b 	bl	8000cc4 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000cae:	e005      	b.n	8000cbc <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 f804 	bl	8000cc4 <lcd_write>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e019      	b.n	8000d0e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	8819      	ldrh	r1, [r3, #0]
 8000cf2:	78fa      	ldrb	r2, [r7, #3]
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	fa42 f303 	asr.w	r3, r2, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	f000 ff91 	bl	8001c2a <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	7bfa      	ldrb	r2, [r7, #15]
 8000d10:	78bb      	ldrb	r3, [r7, #2]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d3e1      	bcc.n	8000cda <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6918      	ldr	r0, [r3, #16]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	8a9b      	ldrh	r3, [r3, #20]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4619      	mov	r1, r3
 8000d22:	f000 ff82 	bl	8001c2a <HAL_GPIO_WritePin>
	DELAY(1);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 fcdc 	bl	80016e4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6918      	ldr	r0, [r3, #16]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	8a9b      	ldrh	r3, [r3, #20]
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	f000 ff77 	bl	8001c2a <HAL_GPIO_WritePin>
}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <delay_us+0x2c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000d56:	bf00      	nop
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <delay_us+0x2c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d3f9      	bcc.n	8000d58 <delay_us+0x14>
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	200001f8 	.word	0x200001f8

08000d74 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2302      	movs	r3, #2
 8000d98:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	4619      	mov	r1, r3
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 fda7 	bl	80018f4 <HAL_GPIO_Init>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4619      	mov	r1, r3
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 fd8a 	bl	80018f4 <HAL_GPIO_Init>
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8000df2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <DS18B20_Start+0x64>)
 8000df8:	f7ff ffbc 	bl	8000d74 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <DS18B20_Start+0x64>)
 8000e04:	f000 ff11 	bl	8001c2a <HAL_GPIO_WritePin>
	delay_us (480);   // delay according to datasheet
 8000e08:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000e0c:	f7ff ff9a 	bl	8000d44 <delay_us>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8000e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <DS18B20_Start+0x64>)
 8000e16:	f7ff ffca 	bl	8000dae <Set_Pin_Input>
	delay_us (80);    // delay according to datasheet
 8000e1a:	2050      	movs	r0, #80	; 0x50
 8000e1c:	f7ff ff92 	bl	8000d44 <delay_us>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8000e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <DS18B20_Start+0x64>)
 8000e26:	f000 fee9 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <DS18B20_Start+0x4e>
 8000e30:	2301      	movs	r3, #1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	e001      	b.n	8000e3a <DS18B20_Start+0x52>
	else Response = -1;
 8000e36:	23ff      	movs	r3, #255	; 0xff
 8000e38:	71fb      	strb	r3, [r7, #7]

	delay_us (400); // 480 us delay totally.
 8000e3a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e3e:	f7ff ff81 	bl	8000d44 <delay_us>

	return Response;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40010c00 	.word	0x40010c00

08000e50 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8000e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5e:	4821      	ldr	r0, [pc, #132]	; (8000ee4 <DS18B20_Write+0x94>)
 8000e60:	f7ff ff88 	bl	8000d74 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e034      	b.n	8000ed4 <DS18B20_Write+0x84>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8000e6a:	79fa      	ldrb	r2, [r7, #7]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	fa42 f303 	asr.w	r3, r2, r3
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d016      	beq.n	8000ea8 <DS18B20_Write+0x58>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8000e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7e:	4819      	ldr	r0, [pc, #100]	; (8000ee4 <DS18B20_Write+0x94>)
 8000e80:	f7ff ff78 	bl	8000d74 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8a:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <DS18B20_Write+0x94>)
 8000e8c:	f000 fecd 	bl	8001c2a <HAL_GPIO_WritePin>
			delay_us (1);  // wait for 1 us
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff ff57 	bl	8000d44 <delay_us>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8000e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9a:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <DS18B20_Write+0x94>)
 8000e9c:	f7ff ff87 	bl	8000dae <Set_Pin_Input>
			delay_us (50);  // wait for 60 us
 8000ea0:	2032      	movs	r0, #50	; 0x32
 8000ea2:	f7ff ff4f 	bl	8000d44 <delay_us>
 8000ea6:	e012      	b.n	8000ece <DS18B20_Write+0x7e>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <DS18B20_Write+0x94>)
 8000eae:	f7ff ff61 	bl	8000d74 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <DS18B20_Write+0x94>)
 8000eba:	f000 feb6 	bl	8001c2a <HAL_GPIO_WritePin>
			delay_us (50);  // wait for 60 us
 8000ebe:	2032      	movs	r0, #50	; 0x32
 8000ec0:	f7ff ff40 	bl	8000d44 <delay_us>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <DS18B20_Write+0x94>)
 8000eca:	f7ff ff70 	bl	8000dae <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b07      	cmp	r3, #7
 8000ed8:	ddc7      	ble.n	8000e6a <DS18B20_Write+0x1a>
		}
	}
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8000ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef6:	481c      	ldr	r0, [pc, #112]	; (8000f68 <DS18B20_Read+0x80>)
 8000ef8:	f7ff ff59 	bl	8000dae <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	e02a      	b.n	8000f58 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8000f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f06:	4818      	ldr	r0, [pc, #96]	; (8000f68 <DS18B20_Read+0x80>)
 8000f08:	f7ff ff34 	bl	8000d74 <Set_Pin_Output>

		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, 0);  // pull the data pin LOW
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	4815      	ldr	r0, [pc, #84]	; (8000f68 <DS18B20_Read+0x80>)
 8000f14:	f000 fe89 	bl	8001c2a <HAL_GPIO_WritePin>
		delay_us (2);  // wait for 2 us
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f7ff ff13 	bl	8000d44 <delay_us>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8000f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f22:	4811      	ldr	r0, [pc, #68]	; (8000f68 <DS18B20_Read+0x80>)
 8000f24:	f7ff ff43 	bl	8000dae <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_9))  // if the pin is HIGH
 8000f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2c:	480e      	ldr	r0, [pc, #56]	; (8000f68 <DS18B20_Read+0x80>)
 8000f2e:	f000 fe65 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d009      	beq.n	8000f4c <DS18B20_Read+0x64>
		{
			value |= 1<<i;  // read = 1
 8000f38:	2201      	movs	r2, #1
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	71fb      	strb	r3, [r7, #7]
		}
		delay_us (60);  // wait for 60 us
 8000f4c:	203c      	movs	r0, #60	; 0x3c
 8000f4e:	f7ff fef9 	bl	8000d44 <delay_us>
	for (int i=0;i<8;i++)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	ddd1      	ble.n	8000f02 <DS18B20_Read+0x1a>
	}
	return value;
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40010c00 	.word	0x40010c00

08000f6c <DS18B20_Temp2Float>:

float DS18B20_Temp2Float(uint16_t number)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
	return 123.5;
 8000f76:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <DS18B20_Temp2Float+0x18>)
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	42f70000 	.word	0x42f70000

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b09c      	sub	sp, #112	; 0x70
 8000f8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 fb47 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f8c1 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 f955 	bl	8001244 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f9a:	f000 f903 	bl	80011a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f9e:	4859      	ldr	r0, [pc, #356]	; (8001104 <main+0x17c>)
 8000fa0:	f001 faa2 	bl	80024e8 <HAL_TIM_Base_Start>
  uint8_t Presence;
  uint8_t scratchPad[8];
  float temperature;

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8000fa4:	4b58      	ldr	r3, [pc, #352]	; (8001108 <main+0x180>)
 8000fa6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8000fb0:	4a56      	ldr	r2, [pc, #344]	; (800110c <main+0x184>)
 8000fb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fba:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_1, LCD_4_BIT_MODE);
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fc4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9303      	str	r3, [sp, #12]
 8000fcc:	2302      	movs	r3, #2
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <main+0x188>)
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <main+0x188>)
 8000fda:	f7ff fd55 	bl	8000a88 <Lcd_create>
 8000fde:	f107 041c 	add.w	r4, r7, #28
 8000fe2:	463d      	mov	r5, r7
 8000fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fec:	e884 0003 	stmia.w	r4, {r0, r1}
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Presence = DS18B20_Start ();
 8000ff0:	f7ff fefa 	bl	8000de8 <DS18B20_Start>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	  HAL_Delay (1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 fb72 	bl	80016e4 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8001000:	20cc      	movs	r0, #204	; 0xcc
 8001002:	f7ff ff25 	bl	8000e50 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8001006:	2044      	movs	r0, #68	; 0x44
 8001008:	f7ff ff22 	bl	8000e50 <DS18B20_Write>
	  HAL_Delay (800);
 800100c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001010:	f000 fb68 	bl	80016e4 <HAL_Delay>

	  Presence = DS18B20_Start ();
 8001014:	f7ff fee8 	bl	8000de8 <DS18B20_Start>
 8001018:	4603      	mov	r3, r0
 800101a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	  HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 fb60 	bl	80016e4 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8001024:	20cc      	movs	r0, #204	; 0xcc
 8001026:	f7ff ff13 	bl	8000e50 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 800102a:	20be      	movs	r0, #190	; 0xbe
 800102c:	f7ff ff10 	bl	8000e50 <DS18B20_Write>

	  for(int i = 0; i<8; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001034:	e00c      	b.n	8001050 <main+0xc8>
		  scratchPad[i] = DS18B20_Read();
 8001036:	f7ff ff57 	bl	8000ee8 <DS18B20_Read>
 800103a:	4603      	mov	r3, r0
 800103c:	4619      	mov	r1, r3
 800103e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001044:	4413      	add	r3, r2
 8001046:	460a      	mov	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i<8; i++)
 800104a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800104c:	3301      	adds	r3, #1
 800104e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001052:	2b07      	cmp	r3, #7
 8001054:	ddef      	ble.n	8001036 <main+0xae>
	  uint16_t buffer = scratchPad[0];
 8001056:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800105a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	  buffer = (buffer << 8) + scratchPad[1];
 800105e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b29a      	uxth	r2, r3
 8001066:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800106a:	b29b      	uxth	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	  temperature = DS18B20_Temp2Float(buffer);
 8001072:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff78 	bl	8000f6c <DS18B20_Temp2Float>
 800107c:	6578      	str	r0, [r7, #84]	; 0x54

	  Lcd_cursor(&lcd, 0,0);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fda6 	bl	8000bd8 <Lcd_cursor>
	  Lcd_int(&lcd, Presence);
 800108c:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fd4a 	bl	8000b30 <Lcd_int>
	  Lcd_cursor(&lcd, 0,5);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2205      	movs	r2, #5
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fd97 	bl	8000bd8 <Lcd_cursor>
	  Lcd_int(&lcd, scratchPad[0]);
 80010aa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80010ae:	461a      	mov	r2, r3
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fd3a 	bl	8000b30 <Lcd_int>
	  Lcd_cursor(&lcd, 0,10);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	220a      	movs	r2, #10
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fd87 	bl	8000bd8 <Lcd_cursor>
	  Lcd_int(&lcd, scratchPad[1]);
 80010ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010ce:	461a      	mov	r2, r3
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fd2a 	bl	8000b30 <Lcd_int>
	  Lcd_cursor(&lcd, 1,0);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	2200      	movs	r2, #0
 80010e2:	2101      	movs	r1, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fd77 	bl	8000bd8 <Lcd_cursor>
	  Lcd_float(&lcd, temperature);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fd35 	bl	8000b60 <Lcd_float>

	  HAL_GPIO_TogglePin (GPIOC, LED_Pin);
 80010f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <main+0x18c>)
 80010fc:	f000 fdad 	bl	8001c5a <HAL_GPIO_TogglePin>
  {
 8001100:	e776      	b.n	8000ff0 <main+0x68>
 8001102:	bf00      	nop
 8001104:	200001f8 	.word	0x200001f8
 8001108:	080057f8 	.word	0x080057f8
 800110c:	08005808 	.word	0x08005808
 8001110:	40010800 	.word	0x40010800
 8001114:	40011000 	.word	0x40011000

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b090      	sub	sp, #64	; 0x40
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	2228      	movs	r2, #40	; 0x28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fc70 	bl	8002a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001142:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001156:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fd93 	bl	8001c8c <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800116c:	f000 f8ee 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2302      	movs	r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2102      	movs	r1, #2
 800118a:	4618      	mov	r0, r3
 800118c:	f001 f800 	bl	8002190 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001196:	f000 f8d9 	bl	800134c <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3740      	adds	r7, #64	; 0x40
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_TIM1_Init+0x98>)
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <MX_TIM1_Init+0x9c>)
 80011c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_TIM1_Init+0x98>)
 80011c8:	2247      	movs	r2, #71	; 0x47
 80011ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_TIM1_Init+0x98>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_TIM1_Init+0x98>)
 80011d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_TIM1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_TIM1_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_TIM1_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <MX_TIM1_Init+0x98>)
 80011ee:	f001 f92b 	bl	8002448 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011f8:	f000 f8a8 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_TIM1_Init+0x98>)
 800120a:	f001 f9b7 	bl	800257c <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001214:	f000 f89a 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_TIM1_Init+0x98>)
 8001226:	f001 fb69 	bl	80028fc <HAL_TIMEx_MasterConfigSynchronization>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001230:	f000 f88c 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001f8 	.word	0x200001f8
 8001240:	40012c00 	.word	0x40012c00

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b38      	ldr	r3, [pc, #224]	; (800133c <MX_GPIO_Init+0xf8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a37      	ldr	r2, [pc, #220]	; (800133c <MX_GPIO_Init+0xf8>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <MX_GPIO_Init+0xf8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001270:	4b32      	ldr	r3, [pc, #200]	; (800133c <MX_GPIO_Init+0xf8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a31      	ldr	r2, [pc, #196]	; (800133c <MX_GPIO_Init+0xf8>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b2f      	ldr	r3, [pc, #188]	; (800133c <MX_GPIO_Init+0xf8>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <MX_GPIO_Init+0xf8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a2b      	ldr	r2, [pc, #172]	; (800133c <MX_GPIO_Init+0xf8>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <MX_GPIO_Init+0xf8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <MX_GPIO_Init+0xf8>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a25      	ldr	r2, [pc, #148]	; (800133c <MX_GPIO_Init+0xf8>)
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <MX_GPIO_Init+0xf8>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	4820      	ldr	r0, [pc, #128]	; (8001340 <MX_GPIO_Init+0xfc>)
 80012c0:	f000 fcb3 	bl	8001c2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012c4:	2200      	movs	r2, #0
 80012c6:	217e      	movs	r1, #126	; 0x7e
 80012c8:	481e      	ldr	r0, [pc, #120]	; (8001344 <MX_GPIO_Init+0x100>)
 80012ca:	f000 fcae 	bl	8001c2a <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d4:	481c      	ldr	r0, [pc, #112]	; (8001348 <MX_GPIO_Init+0x104>)
 80012d6:	f000 fca8 	bl	8001c2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	4813      	ldr	r0, [pc, #76]	; (8001340 <MX_GPIO_Init+0xfc>)
 80012f4:	f000 fafe 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012f8:	237e      	movs	r3, #126	; 0x7e
 80012fa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2302      	movs	r3, #2
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_GPIO_Init+0x100>)
 8001310:	f000 faf0 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2302      	movs	r3, #2
 8001324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4619      	mov	r1, r3
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_GPIO_Init+0x104>)
 800132e:	f000 fae1 	bl	80018f4 <HAL_GPIO_Init>

}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	40011000 	.word	0x40011000
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_MspInit+0x5c>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_MspInit+0x5c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_MspInit+0x5c>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x5c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x5c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x5c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_MspInit+0x60>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_MspInit+0x60>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000

080013bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_TIM_Base_MspInit+0x34>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d10b      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_TIM_Base_MspInit+0x38>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_TIM_Base_MspInit+0x38>)
 80013d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_TIM_Base_MspInit+0x38>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40012c00 	.word	0x40012c00
 80013f4:	40021000 	.word	0x40021000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143e:	f000 f935 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}

08001446 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  return 1;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <_kill>:

int _kill(int pid, int sig)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800145e:	f001 faab 	bl	80029b8 <__errno>
 8001462:	4603      	mov	r3, r0
 8001464:	2216      	movs	r2, #22
 8001466:	601a      	str	r2, [r3, #0]
  return -1;
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_exit>:

void _exit (int status)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ffe7 	bl	8001454 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001486:	e7fe      	b.n	8001486 <_exit+0x12>

08001488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e00a      	b.n	80014b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800149a:	f3af 8000 	nop.w
 800149e:	4601      	mov	r1, r0
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	60ba      	str	r2, [r7, #8]
 80014a6:	b2ca      	uxtb	r2, r1
 80014a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf0      	blt.n	800149a <_read+0x12>
  }

  return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e009      	b.n	80014e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	60ba      	str	r2, [r7, #8]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf1      	blt.n	80014d4 <_write+0x12>
  }
  return len;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_close>:

int _close(int file)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001520:	605a      	str	r2, [r3, #4]
  return 0;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <_isatty>:

int _isatty(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f001 fa14 	bl	80029b8 <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20005000 	.word	0x20005000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	20000240 	.word	0x20000240
 80015c4:	20000258 	.word	0x20000258

080015c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d4:	f7ff fff8 	bl	80015c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015da:	490c      	ldr	r1, [pc, #48]	; (800160c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015f0:	4c09      	ldr	r4, [pc, #36]	; (8001618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fe:	f001 f9e1 	bl	80029c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001602:	f7ff fcc1 	bl	8000f88 <main>
  bx lr
 8001606:	4770      	bx	lr
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001610:	08005c1c 	.word	0x08005c1c
  ldr r2, =_sbss
 8001614:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001618:	20000258 	.word	0x20000258

0800161c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC1_2_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_Init+0x28>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_Init+0x28>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f92b 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	200f      	movs	r0, #15
 8001638:	f000 f808 	bl	800164c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fe8c 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40022000 	.word	0x40022000

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x54>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f935 	bl	80018da <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 f90b 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_InitTick+0x5c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_IncTick+0x1c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x20>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a03      	ldr	r2, [pc, #12]	; (80016cc <HAL_IncTick+0x20>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000244 	.word	0x20000244

080016d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b02      	ldr	r3, [pc, #8]	; (80016e0 <HAL_GetTick+0x10>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000244 	.word	0x20000244

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff fff0 	bl	80016d0 <HAL_GetTick>
 80016f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_Delay+0x44>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170a:	bf00      	nop
 800170c:	f7ff ffe0 	bl	80016d0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008

0800172c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff90 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff49 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff5e 	bl	8001774 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff90 	bl	80017e4 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5f 	bl	8001790 <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffb0 	bl	8001848 <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b08b      	sub	sp, #44	; 0x2c
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001906:	e169      	b.n	8001bdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001908:	2201      	movs	r2, #1
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8158 	bne.w	8001bd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a9a      	ldr	r2, [pc, #616]	; (8001b94 <HAL_GPIO_Init+0x2a0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d05e      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001930:	4a98      	ldr	r2, [pc, #608]	; (8001b94 <HAL_GPIO_Init+0x2a0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d875      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 8001936:	4a98      	ldr	r2, [pc, #608]	; (8001b98 <HAL_GPIO_Init+0x2a4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d058      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 800193c:	4a96      	ldr	r2, [pc, #600]	; (8001b98 <HAL_GPIO_Init+0x2a4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d86f      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 8001942:	4a96      	ldr	r2, [pc, #600]	; (8001b9c <HAL_GPIO_Init+0x2a8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d052      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001948:	4a94      	ldr	r2, [pc, #592]	; (8001b9c <HAL_GPIO_Init+0x2a8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d869      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 800194e:	4a94      	ldr	r2, [pc, #592]	; (8001ba0 <HAL_GPIO_Init+0x2ac>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d04c      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001954:	4a92      	ldr	r2, [pc, #584]	; (8001ba0 <HAL_GPIO_Init+0x2ac>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d863      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 800195a:	4a92      	ldr	r2, [pc, #584]	; (8001ba4 <HAL_GPIO_Init+0x2b0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d046      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
 8001960:	4a90      	ldr	r2, [pc, #576]	; (8001ba4 <HAL_GPIO_Init+0x2b0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d85d      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 8001966:	2b12      	cmp	r3, #18
 8001968:	d82a      	bhi.n	80019c0 <HAL_GPIO_Init+0xcc>
 800196a:	2b12      	cmp	r3, #18
 800196c:	d859      	bhi.n	8001a22 <HAL_GPIO_Init+0x12e>
 800196e:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <HAL_GPIO_Init+0x80>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	080019ef 	.word	0x080019ef
 8001978:	080019c9 	.word	0x080019c9
 800197c:	080019db 	.word	0x080019db
 8001980:	08001a1d 	.word	0x08001a1d
 8001984:	08001a23 	.word	0x08001a23
 8001988:	08001a23 	.word	0x08001a23
 800198c:	08001a23 	.word	0x08001a23
 8001990:	08001a23 	.word	0x08001a23
 8001994:	08001a23 	.word	0x08001a23
 8001998:	08001a23 	.word	0x08001a23
 800199c:	08001a23 	.word	0x08001a23
 80019a0:	08001a23 	.word	0x08001a23
 80019a4:	08001a23 	.word	0x08001a23
 80019a8:	08001a23 	.word	0x08001a23
 80019ac:	08001a23 	.word	0x08001a23
 80019b0:	08001a23 	.word	0x08001a23
 80019b4:	08001a23 	.word	0x08001a23
 80019b8:	080019d1 	.word	0x080019d1
 80019bc:	080019e5 	.word	0x080019e5
 80019c0:	4a79      	ldr	r2, [pc, #484]	; (8001ba8 <HAL_GPIO_Init+0x2b4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019c6:	e02c      	b.n	8001a22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e029      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	3304      	adds	r3, #4
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	e024      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	3308      	adds	r3, #8
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e01f      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	330c      	adds	r3, #12
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e01a      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d102      	bne.n	80019fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019f6:	2304      	movs	r3, #4
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e013      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d105      	bne.n	8001a10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a04:	2308      	movs	r3, #8
 8001a06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	611a      	str	r2, [r3, #16]
          break;
 8001a0e:	e009      	b.n	8001a24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a10:	2308      	movs	r3, #8
 8001a12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	615a      	str	r2, [r3, #20]
          break;
 8001a1a:	e003      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x130>
          break;
 8001a22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2bff      	cmp	r3, #255	; 0xff
 8001a28:	d801      	bhi.n	8001a2e <HAL_GPIO_Init+0x13a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	e001      	b.n	8001a32 <HAL_GPIO_Init+0x13e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3304      	adds	r3, #4
 8001a32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2bff      	cmp	r3, #255	; 0xff
 8001a38:	d802      	bhi.n	8001a40 <HAL_GPIO_Init+0x14c>
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_Init+0x152>
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	3b08      	subs	r3, #8
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	401a      	ands	r2, r3
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	431a      	orrs	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80b1 	beq.w	8001bd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a74:	4b4d      	ldr	r3, [pc, #308]	; (8001bac <HAL_GPIO_Init+0x2b8>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a4c      	ldr	r2, [pc, #304]	; (8001bac <HAL_GPIO_Init+0x2b8>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b4a      	ldr	r3, [pc, #296]	; (8001bac <HAL_GPIO_Init+0x2b8>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a8c:	4a48      	ldr	r2, [pc, #288]	; (8001bb0 <HAL_GPIO_Init+0x2bc>)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a40      	ldr	r2, [pc, #256]	; (8001bb4 <HAL_GPIO_Init+0x2c0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d013      	beq.n	8001ae0 <HAL_GPIO_Init+0x1ec>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a3f      	ldr	r2, [pc, #252]	; (8001bb8 <HAL_GPIO_Init+0x2c4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00d      	beq.n	8001adc <HAL_GPIO_Init+0x1e8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a3e      	ldr	r2, [pc, #248]	; (8001bbc <HAL_GPIO_Init+0x2c8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d007      	beq.n	8001ad8 <HAL_GPIO_Init+0x1e4>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a3d      	ldr	r2, [pc, #244]	; (8001bc0 <HAL_GPIO_Init+0x2cc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_GPIO_Init+0x1e0>
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e006      	b.n	8001ae2 <HAL_GPIO_Init+0x1ee>
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	e004      	b.n	8001ae2 <HAL_GPIO_Init+0x1ee>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e002      	b.n	8001ae2 <HAL_GPIO_Init+0x1ee>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_GPIO_Init+0x1ee>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae4:	f002 0203 	and.w	r2, r2, #3
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	4093      	lsls	r3, r2
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001af2:	492f      	ldr	r1, [pc, #188]	; (8001bb0 <HAL_GPIO_Init+0x2bc>)
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	492c      	ldr	r1, [pc, #176]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	4928      	ldr	r1, [pc, #160]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	4922      	ldr	r1, [pc, #136]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60cb      	str	r3, [r1, #12]
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	491e      	ldr	r1, [pc, #120]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4918      	ldr	r1, [pc, #96]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b6a:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4914      	ldr	r1, [pc, #80]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d021      	beq.n	8001bc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
 8001b90:	e021      	b.n	8001bd6 <HAL_GPIO_Init+0x2e2>
 8001b92:	bf00      	nop
 8001b94:	10320000 	.word	0x10320000
 8001b98:	10310000 	.word	0x10310000
 8001b9c:	10220000 	.word	0x10220000
 8001ba0:	10210000 	.word	0x10210000
 8001ba4:	10120000 	.word	0x10120000
 8001ba8:	10110000 	.word	0x10110000
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40010800 	.word	0x40010800
 8001bb8:	40010c00 	.word	0x40010c00
 8001bbc:	40011000 	.word	0x40011000
 8001bc0:	40011400 	.word	0x40011400
 8001bc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_GPIO_Init+0x304>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <HAL_GPIO_Init+0x304>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	3301      	adds	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f47f ae8e 	bne.w	8001908 <HAL_GPIO_Init+0x14>
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	372c      	adds	r7, #44	; 0x2c
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e001      	b.n	8001c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	807b      	strh	r3, [r7, #2]
 8001c36:	4613      	mov	r3, r2
 8001c38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3a:	787b      	ldrb	r3, [r7, #1]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c46:	e003      	b.n	8001c50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	041a      	lsls	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	041a      	lsls	r2, r3, #16
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e272      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8087 	beq.w	8001dba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cac:	4b92      	ldr	r3, [pc, #584]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb8:	4b8f      	ldr	r3, [pc, #572]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d112      	bne.n	8001cea <HAL_RCC_OscConfig+0x5e>
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d06c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x12c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d168      	bne.n	8001db8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e24c      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x76>
 8001cf4:	4b80      	ldr	r3, [pc, #512]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a7f      	ldr	r2, [pc, #508]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e02e      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x98>
 8001d0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a7a      	ldr	r2, [pc, #488]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b78      	ldr	r3, [pc, #480]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a77      	ldr	r2, [pc, #476]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0xbc>
 8001d2e:	4b72      	ldr	r3, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a71      	ldr	r2, [pc, #452]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d48:	4b6b      	ldr	r3, [pc, #428]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a6a      	ldr	r2, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a67      	ldr	r2, [pc, #412]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fcb2 	bl	80016d0 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fcae 	bl	80016d0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e200      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b5d      	ldr	r3, [pc, #372]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0xe4>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc9e 	bl	80016d0 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fc9a 	bl	80016d0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1ec      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x10c>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d063      	beq.n	8001e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc6:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dd2:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d11c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x18c>
 8001dde:	4b46      	ldr	r3, [pc, #280]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d116      	bne.n	8001e18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	4b43      	ldr	r3, [pc, #268]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x176>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e1c0      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4939      	ldr	r1, [pc, #228]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	e03a      	b.n	8001e8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d020      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e20:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff fc53 	bl	80016d0 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fc4f 	bl	80016d0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e1a1      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4927      	ldr	r1, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]
 8001e60:	e015      	b.n	8001e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fc32 	bl	80016d0 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e70:	f7ff fc2e 	bl	80016d0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e180      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d03a      	beq.n	8001f10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d019      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fc12 	bl	80016d0 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fc0e 	bl	80016d0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e160      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f000 fa9c 	bl	800240c <RCC_Delay>
 8001ed4:	e01c      	b.n	8001f10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7ff fbf8 	bl	80016d0 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee2:	e00f      	b.n	8001f04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fbf4 	bl	80016d0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d908      	bls.n	8001f04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e146      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	42420000 	.word	0x42420000
 8001f00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	4b92      	ldr	r3, [pc, #584]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e9      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a6 	beq.w	800206a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f22:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10d      	bne.n	8001f4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b88      	ldr	r3, [pc, #544]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a87      	ldr	r2, [pc, #540]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b85      	ldr	r3, [pc, #532]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f46:	2301      	movs	r3, #1
 8001f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d118      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f56:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7e      	ldr	r2, [pc, #504]	; (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fbb5 	bl	80016d0 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6a:	f7ff fbb1 	bl	80016d0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	; 0x64
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e103      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b75      	ldr	r3, [pc, #468]	; (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x312>
 8001f90:	4b6f      	ldr	r3, [pc, #444]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a6e      	ldr	r2, [pc, #440]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e02d      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x334>
 8001fa6:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a69      	ldr	r2, [pc, #420]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	4b67      	ldr	r3, [pc, #412]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a66      	ldr	r2, [pc, #408]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	e01c      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x356>
 8001fc8:	4b61      	ldr	r3, [pc, #388]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a60      	ldr	r2, [pc, #384]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	4b5e      	ldr	r3, [pc, #376]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4a5d      	ldr	r2, [pc, #372]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	e00b      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a5a      	ldr	r2, [pc, #360]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4b58      	ldr	r3, [pc, #352]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a57      	ldr	r2, [pc, #348]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d015      	beq.n	800202e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002002:	f7ff fb65 	bl	80016d0 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff fb61 	bl	80016d0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	; 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e0b1      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ee      	beq.n	800200a <HAL_RCC_OscConfig+0x37e>
 800202c:	e014      	b.n	8002058 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7ff fb4f 	bl	80016d0 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff fb4b 	bl	80016d0 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e09b      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204c:	4b40      	ldr	r3, [pc, #256]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ee      	bne.n	8002036 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205e:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a3b      	ldr	r2, [pc, #236]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002068:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8087 	beq.w	8002182 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002074:	4b36      	ldr	r3, [pc, #216]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d061      	beq.n	8002144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d146      	bne.n	8002116 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002088:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_RCC_OscConfig+0x4cc>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff fb1f 	bl	80016d0 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff fb1b 	bl	80016d0 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e06d      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020bc:	d108      	bne.n	80020d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4921      	ldr	r1, [pc, #132]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a19      	ldr	r1, [r3, #32]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	430b      	orrs	r3, r1
 80020e2:	491b      	ldr	r1, [pc, #108]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_RCC_OscConfig+0x4cc>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff faef 	bl	80016d0 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f6:	f7ff faeb 	bl	80016d0 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e03d      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x46a>
 8002114:	e035      	b.n	8002182 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_RCC_OscConfig+0x4cc>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fad8 	bl	80016d0 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff fad4 	bl	80016d0 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e026      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x498>
 8002142:	e01e      	b.n	8002182 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e019      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
 8002158:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x500>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0d0      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a4:	4b6a      	ldr	r3, [pc, #424]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d910      	bls.n	80021d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b67      	ldr	r3, [pc, #412]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4965      	ldr	r1, [pc, #404]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0b8      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ec:	4b59      	ldr	r3, [pc, #356]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a58      	ldr	r2, [pc, #352]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002204:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800220e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002210:	4b50      	ldr	r3, [pc, #320]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	494d      	ldr	r1, [pc, #308]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d040      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d115      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e07f      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e073      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e06b      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f023 0203 	bic.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4936      	ldr	r1, [pc, #216]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002280:	f7ff fa26 	bl	80016d0 <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	e00a      	b.n	800229e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002288:	f7ff fa22 	bl	80016d0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e053      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 020c 	and.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d1eb      	bne.n	8002288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d210      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4922      	ldr	r1, [pc, #136]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e032      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4916      	ldr	r1, [pc, #88]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	490e      	ldr	r1, [pc, #56]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231e:	f000 f821 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8002322:	4602      	mov	r2, r0
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	490a      	ldr	r1, [pc, #40]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	5ccb      	ldrb	r3, [r1, r3]
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	4a09      	ldr	r2, [pc, #36]	; (800235c <HAL_RCC_ClockConfig+0x1cc>)
 8002338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1d0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff f984 	bl	800164c <HAL_InitTick>

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000
 8002358:	08005814 	.word	0x08005814
 800235c:	20000000 	.word	0x20000000
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d002      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x30>
 800238e:	2b08      	cmp	r3, #8
 8002390:	d003      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x36>
 8002392:	e027      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002396:	613b      	str	r3, [r7, #16]
      break;
 8002398:	e027      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	0c9b      	lsrs	r3, r3, #18
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023a4:	5cd3      	ldrb	r3, [r2, r3]
 80023a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d010      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	0c5b      	lsrs	r3, r3, #17
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 80023c6:	fb03 f202 	mul.w	r2, r3, r2
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e004      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	613b      	str	r3, [r7, #16]
      break;
 80023e2:	e002      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 80023e6:	613b      	str	r3, [r7, #16]
      break;
 80023e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ea:	693b      	ldr	r3, [r7, #16]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	007a1200 	.word	0x007a1200
 8002400:	08005824 	.word	0x08005824
 8002404:	08005834 	.word	0x08005834
 8002408:	003d0900 	.word	0x003d0900

0800240c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <RCC_Delay+0x34>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <RCC_Delay+0x38>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002428:	bf00      	nop
  }
  while (Delay --);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <RCC_Delay+0x1c>
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000000 	.word	0x20000000
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e041      	b.n	80024de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe ffa4 	bl	80013bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f000 f940 	bl	800270c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d001      	beq.n	8002500 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e032      	b.n	8002566 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a18      	ldr	r2, [pc, #96]	; (8002570 <HAL_TIM_Base_Start+0x88>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <HAL_TIM_Base_Start+0x48>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d009      	beq.n	8002530 <HAL_TIM_Base_Start+0x48>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <HAL_TIM_Base_Start+0x8c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_TIM_Base_Start+0x48>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a13      	ldr	r2, [pc, #76]	; (8002578 <HAL_TIM_Base_Start+0x90>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d111      	bne.n	8002554 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b06      	cmp	r3, #6
 8002540:	d010      	beq.n	8002564 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002552:	e007      	b.n	8002564 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40000400 	.word	0x40000400
 8002578:	40000800 	.word	0x40000800

0800257c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_TIM_ConfigClockSource+0x1c>
 8002594:	2302      	movs	r3, #2
 8002596:	e0b4      	b.n	8002702 <HAL_TIM_ConfigClockSource+0x186>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d0:	d03e      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0xd4>
 80025d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d6:	f200 8087 	bhi.w	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025de:	f000 8086 	beq.w	80026ee <HAL_TIM_ConfigClockSource+0x172>
 80025e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e6:	d87f      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b70      	cmp	r3, #112	; 0x70
 80025ea:	d01a      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0xa6>
 80025ec:	2b70      	cmp	r3, #112	; 0x70
 80025ee:	d87b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b60      	cmp	r3, #96	; 0x60
 80025f2:	d050      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x11a>
 80025f4:	2b60      	cmp	r3, #96	; 0x60
 80025f6:	d877      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b50      	cmp	r3, #80	; 0x50
 80025fa:	d03c      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0xfa>
 80025fc:	2b50      	cmp	r3, #80	; 0x50
 80025fe:	d873      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d058      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d86f      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b30      	cmp	r3, #48	; 0x30
 800260a:	d064      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	2b30      	cmp	r3, #48	; 0x30
 800260e:	d86b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002610:	2b20      	cmp	r3, #32
 8002612:	d060      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002614:	2b20      	cmp	r3, #32
 8002616:	d867      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05c      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 800261c:	2b10      	cmp	r3, #16
 800261e:	d05a      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002620:	e062      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f000 f944 	bl	80028be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	609a      	str	r2, [r3, #8]
      break;
 800264e:	e04f      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f000 f92d 	bl	80028be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002672:	609a      	str	r2, [r3, #8]
      break;
 8002674:	e03c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	461a      	mov	r2, r3
 8002684:	f000 f8a4 	bl	80027d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2150      	movs	r1, #80	; 0x50
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f8fb 	bl	800288a <TIM_ITRx_SetConfig>
      break;
 8002694:	e02c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f000 f8c2 	bl	800282c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2160      	movs	r1, #96	; 0x60
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f8eb 	bl	800288a <TIM_ITRx_SetConfig>
      break;
 80026b4:	e01c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f000 f884 	bl	80027d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f8db 	bl	800288a <TIM_ITRx_SetConfig>
      break;
 80026d4:	e00c      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 f8d2 	bl	800288a <TIM_ITRx_SetConfig>
      break;
 80026e6:	e003      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
      break;
 80026ec:	e000      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <TIM_Base_SetConfig+0xb8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00b      	beq.n	800273c <TIM_Base_SetConfig+0x30>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272a:	d007      	beq.n	800273c <TIM_Base_SetConfig+0x30>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <TIM_Base_SetConfig+0xbc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <TIM_Base_SetConfig+0x30>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a25      	ldr	r2, [pc, #148]	; (80027cc <TIM_Base_SetConfig+0xc0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d108      	bne.n	800274e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <TIM_Base_SetConfig+0xb8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00b      	beq.n	800276e <TIM_Base_SetConfig+0x62>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d007      	beq.n	800276e <TIM_Base_SetConfig+0x62>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <TIM_Base_SetConfig+0xbc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0x62>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a18      	ldr	r2, [pc, #96]	; (80027cc <TIM_Base_SetConfig+0xc0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <TIM_Base_SetConfig+0xb8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d103      	bne.n	80027b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	615a      	str	r2, [r3, #20]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40000400 	.word	0x40000400
 80027cc:	40000800 	.word	0x40000800

080027d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	f023 0201 	bic.w	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f023 030a 	bic.w	r3, r3, #10
 800280c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	621a      	str	r2, [r3, #32]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f023 0210 	bic.w	r2, r3, #16
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	031b      	lsls	r3, r3, #12
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002868:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	621a      	str	r2, [r3, #32]
}
 8002880:	bf00      	nop
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f043 0307 	orr.w	r3, r3, #7
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028be:	b480      	push	{r7}
 80028c0:	b087      	sub	sp, #28
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	021a      	lsls	r2, r3, #8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	609a      	str	r2, [r3, #8]
}
 80028f2:	bf00      	nop
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002910:	2302      	movs	r3, #2
 8002912:	e046      	b.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a16      	ldr	r2, [pc, #88]	; (80029ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d009      	beq.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10c      	bne.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800297c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	4313      	orrs	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40000800 	.word	0x40000800

080029b8 <__errno>:
 80029b8:	4b01      	ldr	r3, [pc, #4]	; (80029c0 <__errno+0x8>)
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	2000000c 	.word	0x2000000c

080029c4 <__libc_init_array>:
 80029c4:	b570      	push	{r4, r5, r6, lr}
 80029c6:	2600      	movs	r6, #0
 80029c8:	4d0c      	ldr	r5, [pc, #48]	; (80029fc <__libc_init_array+0x38>)
 80029ca:	4c0d      	ldr	r4, [pc, #52]	; (8002a00 <__libc_init_array+0x3c>)
 80029cc:	1b64      	subs	r4, r4, r5
 80029ce:	10a4      	asrs	r4, r4, #2
 80029d0:	42a6      	cmp	r6, r4
 80029d2:	d109      	bne.n	80029e8 <__libc_init_array+0x24>
 80029d4:	f002 fefc 	bl	80057d0 <_init>
 80029d8:	2600      	movs	r6, #0
 80029da:	4d0a      	ldr	r5, [pc, #40]	; (8002a04 <__libc_init_array+0x40>)
 80029dc:	4c0a      	ldr	r4, [pc, #40]	; (8002a08 <__libc_init_array+0x44>)
 80029de:	1b64      	subs	r4, r4, r5
 80029e0:	10a4      	asrs	r4, r4, #2
 80029e2:	42a6      	cmp	r6, r4
 80029e4:	d105      	bne.n	80029f2 <__libc_init_array+0x2e>
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
 80029e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ec:	4798      	blx	r3
 80029ee:	3601      	adds	r6, #1
 80029f0:	e7ee      	b.n	80029d0 <__libc_init_array+0xc>
 80029f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f6:	4798      	blx	r3
 80029f8:	3601      	adds	r6, #1
 80029fa:	e7f2      	b.n	80029e2 <__libc_init_array+0x1e>
 80029fc:	08005c14 	.word	0x08005c14
 8002a00:	08005c14 	.word	0x08005c14
 8002a04:	08005c14 	.word	0x08005c14
 8002a08:	08005c18 	.word	0x08005c18

08002a0c <memset>:
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4402      	add	r2, r0
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d100      	bne.n	8002a16 <memset+0xa>
 8002a14:	4770      	bx	lr
 8002a16:	f803 1b01 	strb.w	r1, [r3], #1
 8002a1a:	e7f9      	b.n	8002a10 <memset+0x4>

08002a1c <__cvt>:
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a22:	461f      	mov	r7, r3
 8002a24:	bfbb      	ittet	lt
 8002a26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002a2a:	461f      	movlt	r7, r3
 8002a2c:	2300      	movge	r3, #0
 8002a2e:	232d      	movlt	r3, #45	; 0x2d
 8002a30:	b088      	sub	sp, #32
 8002a32:	4614      	mov	r4, r2
 8002a34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002a36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002a38:	7013      	strb	r3, [r2, #0]
 8002a3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002a3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002a40:	f023 0820 	bic.w	r8, r3, #32
 8002a44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a48:	d005      	beq.n	8002a56 <__cvt+0x3a>
 8002a4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002a4e:	d100      	bne.n	8002a52 <__cvt+0x36>
 8002a50:	3501      	adds	r5, #1
 8002a52:	2302      	movs	r3, #2
 8002a54:	e000      	b.n	8002a58 <__cvt+0x3c>
 8002a56:	2303      	movs	r3, #3
 8002a58:	aa07      	add	r2, sp, #28
 8002a5a:	9204      	str	r2, [sp, #16]
 8002a5c:	aa06      	add	r2, sp, #24
 8002a5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002a62:	e9cd 3500 	strd	r3, r5, [sp]
 8002a66:	4622      	mov	r2, r4
 8002a68:	463b      	mov	r3, r7
 8002a6a:	f000 fce5 	bl	8003438 <_dtoa_r>
 8002a6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002a72:	4606      	mov	r6, r0
 8002a74:	d102      	bne.n	8002a7c <__cvt+0x60>
 8002a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a78:	07db      	lsls	r3, r3, #31
 8002a7a:	d522      	bpl.n	8002ac2 <__cvt+0xa6>
 8002a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a80:	eb06 0905 	add.w	r9, r6, r5
 8002a84:	d110      	bne.n	8002aa8 <__cvt+0x8c>
 8002a86:	7833      	ldrb	r3, [r6, #0]
 8002a88:	2b30      	cmp	r3, #48	; 0x30
 8002a8a:	d10a      	bne.n	8002aa2 <__cvt+0x86>
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2300      	movs	r3, #0
 8002a90:	4620      	mov	r0, r4
 8002a92:	4639      	mov	r1, r7
 8002a94:	f7fd ff88 	bl	80009a8 <__aeabi_dcmpeq>
 8002a98:	b918      	cbnz	r0, 8002aa2 <__cvt+0x86>
 8002a9a:	f1c5 0501 	rsb	r5, r5, #1
 8002a9e:	f8ca 5000 	str.w	r5, [sl]
 8002aa2:	f8da 3000 	ldr.w	r3, [sl]
 8002aa6:	4499      	add	r9, r3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4620      	mov	r0, r4
 8002aae:	4639      	mov	r1, r7
 8002ab0:	f7fd ff7a 	bl	80009a8 <__aeabi_dcmpeq>
 8002ab4:	b108      	cbz	r0, 8002aba <__cvt+0x9e>
 8002ab6:	f8cd 901c 	str.w	r9, [sp, #28]
 8002aba:	2230      	movs	r2, #48	; 0x30
 8002abc:	9b07      	ldr	r3, [sp, #28]
 8002abe:	454b      	cmp	r3, r9
 8002ac0:	d307      	bcc.n	8002ad2 <__cvt+0xb6>
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	9b07      	ldr	r3, [sp, #28]
 8002ac6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002ac8:	1b9b      	subs	r3, r3, r6
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	b008      	add	sp, #32
 8002ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad2:	1c59      	adds	r1, r3, #1
 8002ad4:	9107      	str	r1, [sp, #28]
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e7f0      	b.n	8002abc <__cvt+0xa0>

08002ada <__exponent>:
 8002ada:	4603      	mov	r3, r0
 8002adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ade:	2900      	cmp	r1, #0
 8002ae0:	f803 2b02 	strb.w	r2, [r3], #2
 8002ae4:	bfb6      	itet	lt
 8002ae6:	222d      	movlt	r2, #45	; 0x2d
 8002ae8:	222b      	movge	r2, #43	; 0x2b
 8002aea:	4249      	neglt	r1, r1
 8002aec:	2909      	cmp	r1, #9
 8002aee:	7042      	strb	r2, [r0, #1]
 8002af0:	dd2b      	ble.n	8002b4a <__exponent+0x70>
 8002af2:	f10d 0407 	add.w	r4, sp, #7
 8002af6:	46a4      	mov	ip, r4
 8002af8:	270a      	movs	r7, #10
 8002afa:	fb91 f6f7 	sdiv	r6, r1, r7
 8002afe:	460a      	mov	r2, r1
 8002b00:	46a6      	mov	lr, r4
 8002b02:	fb07 1516 	mls	r5, r7, r6, r1
 8002b06:	2a63      	cmp	r2, #99	; 0x63
 8002b08:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002b0c:	4631      	mov	r1, r6
 8002b0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002b12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002b16:	dcf0      	bgt.n	8002afa <__exponent+0x20>
 8002b18:	3130      	adds	r1, #48	; 0x30
 8002b1a:	f1ae 0502 	sub.w	r5, lr, #2
 8002b1e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002b22:	4629      	mov	r1, r5
 8002b24:	1c44      	adds	r4, r0, #1
 8002b26:	4561      	cmp	r1, ip
 8002b28:	d30a      	bcc.n	8002b40 <__exponent+0x66>
 8002b2a:	f10d 0209 	add.w	r2, sp, #9
 8002b2e:	eba2 020e 	sub.w	r2, r2, lr
 8002b32:	4565      	cmp	r5, ip
 8002b34:	bf88      	it	hi
 8002b36:	2200      	movhi	r2, #0
 8002b38:	4413      	add	r3, r2
 8002b3a:	1a18      	subs	r0, r3, r0
 8002b3c:	b003      	add	sp, #12
 8002b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b44:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002b48:	e7ed      	b.n	8002b26 <__exponent+0x4c>
 8002b4a:	2330      	movs	r3, #48	; 0x30
 8002b4c:	3130      	adds	r1, #48	; 0x30
 8002b4e:	7083      	strb	r3, [r0, #2]
 8002b50:	70c1      	strb	r1, [r0, #3]
 8002b52:	1d03      	adds	r3, r0, #4
 8002b54:	e7f1      	b.n	8002b3a <__exponent+0x60>
	...

08002b58 <_printf_float>:
 8002b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b5c:	b091      	sub	sp, #68	; 0x44
 8002b5e:	460c      	mov	r4, r1
 8002b60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002b64:	4616      	mov	r6, r2
 8002b66:	461f      	mov	r7, r3
 8002b68:	4605      	mov	r5, r0
 8002b6a:	f001 fa53 	bl	8004014 <_localeconv_r>
 8002b6e:	6803      	ldr	r3, [r0, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	9309      	str	r3, [sp, #36]	; 0x24
 8002b74:	f7fd faec 	bl	8000150 <strlen>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	930e      	str	r3, [sp, #56]	; 0x38
 8002b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b80:	900a      	str	r0, [sp, #40]	; 0x28
 8002b82:	3307      	adds	r3, #7
 8002b84:	f023 0307 	bic.w	r3, r3, #7
 8002b88:	f103 0208 	add.w	r2, r3, #8
 8002b8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002b90:	f8d4 b000 	ldr.w	fp, [r4]
 8002b94:	f8c8 2000 	str.w	r2, [r8]
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002ba0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002ba4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002baa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bae:	4640      	mov	r0, r8
 8002bb0:	4b9c      	ldr	r3, [pc, #624]	; (8002e24 <_printf_float+0x2cc>)
 8002bb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bb4:	f7fd ff2a 	bl	8000a0c <__aeabi_dcmpun>
 8002bb8:	bb70      	cbnz	r0, 8002c18 <_printf_float+0xc0>
 8002bba:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbe:	4640      	mov	r0, r8
 8002bc0:	4b98      	ldr	r3, [pc, #608]	; (8002e24 <_printf_float+0x2cc>)
 8002bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bc4:	f7fd ff04 	bl	80009d0 <__aeabi_dcmple>
 8002bc8:	bb30      	cbnz	r0, 8002c18 <_printf_float+0xc0>
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2300      	movs	r3, #0
 8002bce:	4640      	mov	r0, r8
 8002bd0:	4651      	mov	r1, sl
 8002bd2:	f7fd fef3 	bl	80009bc <__aeabi_dcmplt>
 8002bd6:	b110      	cbz	r0, 8002bde <_printf_float+0x86>
 8002bd8:	232d      	movs	r3, #45	; 0x2d
 8002bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bde:	4b92      	ldr	r3, [pc, #584]	; (8002e28 <_printf_float+0x2d0>)
 8002be0:	4892      	ldr	r0, [pc, #584]	; (8002e2c <_printf_float+0x2d4>)
 8002be2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002be6:	bf94      	ite	ls
 8002be8:	4698      	movls	r8, r3
 8002bea:	4680      	movhi	r8, r0
 8002bec:	2303      	movs	r3, #3
 8002bee:	f04f 0a00 	mov.w	sl, #0
 8002bf2:	6123      	str	r3, [r4, #16]
 8002bf4:	f02b 0304 	bic.w	r3, fp, #4
 8002bf8:	6023      	str	r3, [r4, #0]
 8002bfa:	4633      	mov	r3, r6
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	4628      	mov	r0, r5
 8002c00:	9700      	str	r7, [sp, #0]
 8002c02:	aa0f      	add	r2, sp, #60	; 0x3c
 8002c04:	f000 f9d4 	bl	8002fb0 <_printf_common>
 8002c08:	3001      	adds	r0, #1
 8002c0a:	f040 8090 	bne.w	8002d2e <_printf_float+0x1d6>
 8002c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c12:	b011      	add	sp, #68	; 0x44
 8002c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c18:	4642      	mov	r2, r8
 8002c1a:	4653      	mov	r3, sl
 8002c1c:	4640      	mov	r0, r8
 8002c1e:	4651      	mov	r1, sl
 8002c20:	f7fd fef4 	bl	8000a0c <__aeabi_dcmpun>
 8002c24:	b148      	cbz	r0, 8002c3a <_printf_float+0xe2>
 8002c26:	f1ba 0f00 	cmp.w	sl, #0
 8002c2a:	bfb8      	it	lt
 8002c2c:	232d      	movlt	r3, #45	; 0x2d
 8002c2e:	4880      	ldr	r0, [pc, #512]	; (8002e30 <_printf_float+0x2d8>)
 8002c30:	bfb8      	it	lt
 8002c32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002c36:	4b7f      	ldr	r3, [pc, #508]	; (8002e34 <_printf_float+0x2dc>)
 8002c38:	e7d3      	b.n	8002be2 <_printf_float+0x8a>
 8002c3a:	6863      	ldr	r3, [r4, #4]
 8002c3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	d142      	bne.n	8002cca <_printf_float+0x172>
 8002c44:	2306      	movs	r3, #6
 8002c46:	6063      	str	r3, [r4, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	9206      	str	r2, [sp, #24]
 8002c4c:	aa0e      	add	r2, sp, #56	; 0x38
 8002c4e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002c52:	aa0d      	add	r2, sp, #52	; 0x34
 8002c54:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002c58:	9203      	str	r2, [sp, #12]
 8002c5a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002c5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002c62:	6023      	str	r3, [r4, #0]
 8002c64:	6863      	ldr	r3, [r4, #4]
 8002c66:	4642      	mov	r2, r8
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	4653      	mov	r3, sl
 8002c6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002c70:	f7ff fed4 	bl	8002a1c <__cvt>
 8002c74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c76:	4680      	mov	r8, r0
 8002c78:	2947      	cmp	r1, #71	; 0x47
 8002c7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c7c:	d108      	bne.n	8002c90 <_printf_float+0x138>
 8002c7e:	1cc8      	adds	r0, r1, #3
 8002c80:	db02      	blt.n	8002c88 <_printf_float+0x130>
 8002c82:	6863      	ldr	r3, [r4, #4]
 8002c84:	4299      	cmp	r1, r3
 8002c86:	dd40      	ble.n	8002d0a <_printf_float+0x1b2>
 8002c88:	f1a9 0902 	sub.w	r9, r9, #2
 8002c8c:	fa5f f989 	uxtb.w	r9, r9
 8002c90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002c94:	d81f      	bhi.n	8002cd6 <_printf_float+0x17e>
 8002c96:	464a      	mov	r2, r9
 8002c98:	3901      	subs	r1, #1
 8002c9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c9e:	910d      	str	r1, [sp, #52]	; 0x34
 8002ca0:	f7ff ff1b 	bl	8002ada <__exponent>
 8002ca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ca6:	4682      	mov	sl, r0
 8002ca8:	1813      	adds	r3, r2, r0
 8002caa:	2a01      	cmp	r2, #1
 8002cac:	6123      	str	r3, [r4, #16]
 8002cae:	dc02      	bgt.n	8002cb6 <_printf_float+0x15e>
 8002cb0:	6822      	ldr	r2, [r4, #0]
 8002cb2:	07d2      	lsls	r2, r2, #31
 8002cb4:	d501      	bpl.n	8002cba <_printf_float+0x162>
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	6123      	str	r3, [r4, #16]
 8002cba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d09b      	beq.n	8002bfa <_printf_float+0xa2>
 8002cc2:	232d      	movs	r3, #45	; 0x2d
 8002cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cc8:	e797      	b.n	8002bfa <_printf_float+0xa2>
 8002cca:	2947      	cmp	r1, #71	; 0x47
 8002ccc:	d1bc      	bne.n	8002c48 <_printf_float+0xf0>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1ba      	bne.n	8002c48 <_printf_float+0xf0>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e7b7      	b.n	8002c46 <_printf_float+0xee>
 8002cd6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002cda:	d118      	bne.n	8002d0e <_printf_float+0x1b6>
 8002cdc:	2900      	cmp	r1, #0
 8002cde:	6863      	ldr	r3, [r4, #4]
 8002ce0:	dd0b      	ble.n	8002cfa <_printf_float+0x1a2>
 8002ce2:	6121      	str	r1, [r4, #16]
 8002ce4:	b913      	cbnz	r3, 8002cec <_printf_float+0x194>
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	07d0      	lsls	r0, r2, #31
 8002cea:	d502      	bpl.n	8002cf2 <_printf_float+0x19a>
 8002cec:	3301      	adds	r3, #1
 8002cee:	440b      	add	r3, r1
 8002cf0:	6123      	str	r3, [r4, #16]
 8002cf2:	f04f 0a00 	mov.w	sl, #0
 8002cf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8002cf8:	e7df      	b.n	8002cba <_printf_float+0x162>
 8002cfa:	b913      	cbnz	r3, 8002d02 <_printf_float+0x1aa>
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	07d2      	lsls	r2, r2, #31
 8002d00:	d501      	bpl.n	8002d06 <_printf_float+0x1ae>
 8002d02:	3302      	adds	r3, #2
 8002d04:	e7f4      	b.n	8002cf0 <_printf_float+0x198>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e7f2      	b.n	8002cf0 <_printf_float+0x198>
 8002d0a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d10:	4299      	cmp	r1, r3
 8002d12:	db05      	blt.n	8002d20 <_printf_float+0x1c8>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	6121      	str	r1, [r4, #16]
 8002d18:	07d8      	lsls	r0, r3, #31
 8002d1a:	d5ea      	bpl.n	8002cf2 <_printf_float+0x19a>
 8002d1c:	1c4b      	adds	r3, r1, #1
 8002d1e:	e7e7      	b.n	8002cf0 <_printf_float+0x198>
 8002d20:	2900      	cmp	r1, #0
 8002d22:	bfcc      	ite	gt
 8002d24:	2201      	movgt	r2, #1
 8002d26:	f1c1 0202 	rsble	r2, r1, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	e7e0      	b.n	8002cf0 <_printf_float+0x198>
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	055a      	lsls	r2, r3, #21
 8002d32:	d407      	bmi.n	8002d44 <_printf_float+0x1ec>
 8002d34:	6923      	ldr	r3, [r4, #16]
 8002d36:	4642      	mov	r2, r8
 8002d38:	4631      	mov	r1, r6
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	47b8      	blx	r7
 8002d3e:	3001      	adds	r0, #1
 8002d40:	d12b      	bne.n	8002d9a <_printf_float+0x242>
 8002d42:	e764      	b.n	8002c0e <_printf_float+0xb6>
 8002d44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002d48:	f240 80dd 	bls.w	8002f06 <_printf_float+0x3ae>
 8002d4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d50:	2200      	movs	r2, #0
 8002d52:	2300      	movs	r3, #0
 8002d54:	f7fd fe28 	bl	80009a8 <__aeabi_dcmpeq>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d033      	beq.n	8002dc4 <_printf_float+0x26c>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	4631      	mov	r1, r6
 8002d60:	4628      	mov	r0, r5
 8002d62:	4a35      	ldr	r2, [pc, #212]	; (8002e38 <_printf_float+0x2e0>)
 8002d64:	47b8      	blx	r7
 8002d66:	3001      	adds	r0, #1
 8002d68:	f43f af51 	beq.w	8002c0e <_printf_float+0xb6>
 8002d6c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d70:	429a      	cmp	r2, r3
 8002d72:	db02      	blt.n	8002d7a <_printf_float+0x222>
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	07d8      	lsls	r0, r3, #31
 8002d78:	d50f      	bpl.n	8002d9a <_printf_float+0x242>
 8002d7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d7e:	4631      	mov	r1, r6
 8002d80:	4628      	mov	r0, r5
 8002d82:	47b8      	blx	r7
 8002d84:	3001      	adds	r0, #1
 8002d86:	f43f af42 	beq.w	8002c0e <_printf_float+0xb6>
 8002d8a:	f04f 0800 	mov.w	r8, #0
 8002d8e:	f104 091a 	add.w	r9, r4, #26
 8002d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d94:	3b01      	subs	r3, #1
 8002d96:	4543      	cmp	r3, r8
 8002d98:	dc09      	bgt.n	8002dae <_printf_float+0x256>
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	079b      	lsls	r3, r3, #30
 8002d9e:	f100 8102 	bmi.w	8002fa6 <_printf_float+0x44e>
 8002da2:	68e0      	ldr	r0, [r4, #12]
 8002da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002da6:	4298      	cmp	r0, r3
 8002da8:	bfb8      	it	lt
 8002daa:	4618      	movlt	r0, r3
 8002dac:	e731      	b.n	8002c12 <_printf_float+0xba>
 8002dae:	2301      	movs	r3, #1
 8002db0:	464a      	mov	r2, r9
 8002db2:	4631      	mov	r1, r6
 8002db4:	4628      	mov	r0, r5
 8002db6:	47b8      	blx	r7
 8002db8:	3001      	adds	r0, #1
 8002dba:	f43f af28 	beq.w	8002c0e <_printf_float+0xb6>
 8002dbe:	f108 0801 	add.w	r8, r8, #1
 8002dc2:	e7e6      	b.n	8002d92 <_printf_float+0x23a>
 8002dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	dc38      	bgt.n	8002e3c <_printf_float+0x2e4>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	4631      	mov	r1, r6
 8002dce:	4628      	mov	r0, r5
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <_printf_float+0x2e0>)
 8002dd2:	47b8      	blx	r7
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	f43f af1a 	beq.w	8002c0e <_printf_float+0xb6>
 8002dda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002dde:	4313      	orrs	r3, r2
 8002de0:	d102      	bne.n	8002de8 <_printf_float+0x290>
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	07d9      	lsls	r1, r3, #31
 8002de6:	d5d8      	bpl.n	8002d9a <_printf_float+0x242>
 8002de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002dec:	4631      	mov	r1, r6
 8002dee:	4628      	mov	r0, r5
 8002df0:	47b8      	blx	r7
 8002df2:	3001      	adds	r0, #1
 8002df4:	f43f af0b 	beq.w	8002c0e <_printf_float+0xb6>
 8002df8:	f04f 0900 	mov.w	r9, #0
 8002dfc:	f104 0a1a 	add.w	sl, r4, #26
 8002e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e02:	425b      	negs	r3, r3
 8002e04:	454b      	cmp	r3, r9
 8002e06:	dc01      	bgt.n	8002e0c <_printf_float+0x2b4>
 8002e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e0a:	e794      	b.n	8002d36 <_printf_float+0x1de>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	4652      	mov	r2, sl
 8002e10:	4631      	mov	r1, r6
 8002e12:	4628      	mov	r0, r5
 8002e14:	47b8      	blx	r7
 8002e16:	3001      	adds	r0, #1
 8002e18:	f43f aef9 	beq.w	8002c0e <_printf_float+0xb6>
 8002e1c:	f109 0901 	add.w	r9, r9, #1
 8002e20:	e7ee      	b.n	8002e00 <_printf_float+0x2a8>
 8002e22:	bf00      	nop
 8002e24:	7fefffff 	.word	0x7fefffff
 8002e28:	0800583c 	.word	0x0800583c
 8002e2c:	08005840 	.word	0x08005840
 8002e30:	08005848 	.word	0x08005848
 8002e34:	08005844 	.word	0x08005844
 8002e38:	0800584c 	.word	0x0800584c
 8002e3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e40:	429a      	cmp	r2, r3
 8002e42:	bfa8      	it	ge
 8002e44:	461a      	movge	r2, r3
 8002e46:	2a00      	cmp	r2, #0
 8002e48:	4691      	mov	r9, r2
 8002e4a:	dc37      	bgt.n	8002ebc <_printf_float+0x364>
 8002e4c:	f04f 0b00 	mov.w	fp, #0
 8002e50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e54:	f104 021a 	add.w	r2, r4, #26
 8002e58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002e5c:	ebaa 0309 	sub.w	r3, sl, r9
 8002e60:	455b      	cmp	r3, fp
 8002e62:	dc33      	bgt.n	8002ecc <_printf_float+0x374>
 8002e64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	db3b      	blt.n	8002ee4 <_printf_float+0x38c>
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	07da      	lsls	r2, r3, #31
 8002e70:	d438      	bmi.n	8002ee4 <_printf_float+0x38c>
 8002e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002e76:	eba3 020a 	sub.w	r2, r3, sl
 8002e7a:	eba3 0901 	sub.w	r9, r3, r1
 8002e7e:	4591      	cmp	r9, r2
 8002e80:	bfa8      	it	ge
 8002e82:	4691      	movge	r9, r2
 8002e84:	f1b9 0f00 	cmp.w	r9, #0
 8002e88:	dc34      	bgt.n	8002ef4 <_printf_float+0x39c>
 8002e8a:	f04f 0800 	mov.w	r8, #0
 8002e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e92:	f104 0a1a 	add.w	sl, r4, #26
 8002e96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	eba3 0309 	sub.w	r3, r3, r9
 8002ea0:	4543      	cmp	r3, r8
 8002ea2:	f77f af7a 	ble.w	8002d9a <_printf_float+0x242>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	4652      	mov	r2, sl
 8002eaa:	4631      	mov	r1, r6
 8002eac:	4628      	mov	r0, r5
 8002eae:	47b8      	blx	r7
 8002eb0:	3001      	adds	r0, #1
 8002eb2:	f43f aeac 	beq.w	8002c0e <_printf_float+0xb6>
 8002eb6:	f108 0801 	add.w	r8, r8, #1
 8002eba:	e7ec      	b.n	8002e96 <_printf_float+0x33e>
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	4631      	mov	r1, r6
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	47b8      	blx	r7
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	d1c0      	bne.n	8002e4c <_printf_float+0x2f4>
 8002eca:	e6a0      	b.n	8002c0e <_printf_float+0xb6>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	4631      	mov	r1, r6
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	920b      	str	r2, [sp, #44]	; 0x2c
 8002ed4:	47b8      	blx	r7
 8002ed6:	3001      	adds	r0, #1
 8002ed8:	f43f ae99 	beq.w	8002c0e <_printf_float+0xb6>
 8002edc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ede:	f10b 0b01 	add.w	fp, fp, #1
 8002ee2:	e7b9      	b.n	8002e58 <_printf_float+0x300>
 8002ee4:	4631      	mov	r1, r6
 8002ee6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002eea:	4628      	mov	r0, r5
 8002eec:	47b8      	blx	r7
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d1bf      	bne.n	8002e72 <_printf_float+0x31a>
 8002ef2:	e68c      	b.n	8002c0e <_printf_float+0xb6>
 8002ef4:	464b      	mov	r3, r9
 8002ef6:	4631      	mov	r1, r6
 8002ef8:	4628      	mov	r0, r5
 8002efa:	eb08 020a 	add.w	r2, r8, sl
 8002efe:	47b8      	blx	r7
 8002f00:	3001      	adds	r0, #1
 8002f02:	d1c2      	bne.n	8002e8a <_printf_float+0x332>
 8002f04:	e683      	b.n	8002c0e <_printf_float+0xb6>
 8002f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f08:	2a01      	cmp	r2, #1
 8002f0a:	dc01      	bgt.n	8002f10 <_printf_float+0x3b8>
 8002f0c:	07db      	lsls	r3, r3, #31
 8002f0e:	d537      	bpl.n	8002f80 <_printf_float+0x428>
 8002f10:	2301      	movs	r3, #1
 8002f12:	4642      	mov	r2, r8
 8002f14:	4631      	mov	r1, r6
 8002f16:	4628      	mov	r0, r5
 8002f18:	47b8      	blx	r7
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	f43f ae77 	beq.w	8002c0e <_printf_float+0xb6>
 8002f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f24:	4631      	mov	r1, r6
 8002f26:	4628      	mov	r0, r5
 8002f28:	47b8      	blx	r7
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	f43f ae6f 	beq.w	8002c0e <_printf_float+0xb6>
 8002f30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f34:	2200      	movs	r2, #0
 8002f36:	2300      	movs	r3, #0
 8002f38:	f7fd fd36 	bl	80009a8 <__aeabi_dcmpeq>
 8002f3c:	b9d8      	cbnz	r0, 8002f76 <_printf_float+0x41e>
 8002f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f40:	f108 0201 	add.w	r2, r8, #1
 8002f44:	3b01      	subs	r3, #1
 8002f46:	4631      	mov	r1, r6
 8002f48:	4628      	mov	r0, r5
 8002f4a:	47b8      	blx	r7
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	d10e      	bne.n	8002f6e <_printf_float+0x416>
 8002f50:	e65d      	b.n	8002c0e <_printf_float+0xb6>
 8002f52:	2301      	movs	r3, #1
 8002f54:	464a      	mov	r2, r9
 8002f56:	4631      	mov	r1, r6
 8002f58:	4628      	mov	r0, r5
 8002f5a:	47b8      	blx	r7
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	f43f ae56 	beq.w	8002c0e <_printf_float+0xb6>
 8002f62:	f108 0801 	add.w	r8, r8, #1
 8002f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	4543      	cmp	r3, r8
 8002f6c:	dcf1      	bgt.n	8002f52 <_printf_float+0x3fa>
 8002f6e:	4653      	mov	r3, sl
 8002f70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f74:	e6e0      	b.n	8002d38 <_printf_float+0x1e0>
 8002f76:	f04f 0800 	mov.w	r8, #0
 8002f7a:	f104 091a 	add.w	r9, r4, #26
 8002f7e:	e7f2      	b.n	8002f66 <_printf_float+0x40e>
 8002f80:	2301      	movs	r3, #1
 8002f82:	4642      	mov	r2, r8
 8002f84:	e7df      	b.n	8002f46 <_printf_float+0x3ee>
 8002f86:	2301      	movs	r3, #1
 8002f88:	464a      	mov	r2, r9
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	47b8      	blx	r7
 8002f90:	3001      	adds	r0, #1
 8002f92:	f43f ae3c 	beq.w	8002c0e <_printf_float+0xb6>
 8002f96:	f108 0801 	add.w	r8, r8, #1
 8002f9a:	68e3      	ldr	r3, [r4, #12]
 8002f9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002f9e:	1a5b      	subs	r3, r3, r1
 8002fa0:	4543      	cmp	r3, r8
 8002fa2:	dcf0      	bgt.n	8002f86 <_printf_float+0x42e>
 8002fa4:	e6fd      	b.n	8002da2 <_printf_float+0x24a>
 8002fa6:	f04f 0800 	mov.w	r8, #0
 8002faa:	f104 0919 	add.w	r9, r4, #25
 8002fae:	e7f4      	b.n	8002f9a <_printf_float+0x442>

08002fb0 <_printf_common>:
 8002fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb4:	4616      	mov	r6, r2
 8002fb6:	4699      	mov	r9, r3
 8002fb8:	688a      	ldr	r2, [r1, #8]
 8002fba:	690b      	ldr	r3, [r1, #16]
 8002fbc:	4607      	mov	r7, r0
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	bfb8      	it	lt
 8002fc2:	4613      	movlt	r3, r2
 8002fc4:	6033      	str	r3, [r6, #0]
 8002fc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fca:	460c      	mov	r4, r1
 8002fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fd0:	b10a      	cbz	r2, 8002fd6 <_printf_common+0x26>
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	6033      	str	r3, [r6, #0]
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	0699      	lsls	r1, r3, #26
 8002fda:	bf42      	ittt	mi
 8002fdc:	6833      	ldrmi	r3, [r6, #0]
 8002fde:	3302      	addmi	r3, #2
 8002fe0:	6033      	strmi	r3, [r6, #0]
 8002fe2:	6825      	ldr	r5, [r4, #0]
 8002fe4:	f015 0506 	ands.w	r5, r5, #6
 8002fe8:	d106      	bne.n	8002ff8 <_printf_common+0x48>
 8002fea:	f104 0a19 	add.w	sl, r4, #25
 8002fee:	68e3      	ldr	r3, [r4, #12]
 8002ff0:	6832      	ldr	r2, [r6, #0]
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	42ab      	cmp	r3, r5
 8002ff6:	dc28      	bgt.n	800304a <_printf_common+0x9a>
 8002ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ffc:	1e13      	subs	r3, r2, #0
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	bf18      	it	ne
 8003002:	2301      	movne	r3, #1
 8003004:	0692      	lsls	r2, r2, #26
 8003006:	d42d      	bmi.n	8003064 <_printf_common+0xb4>
 8003008:	4649      	mov	r1, r9
 800300a:	4638      	mov	r0, r7
 800300c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003010:	47c0      	blx	r8
 8003012:	3001      	adds	r0, #1
 8003014:	d020      	beq.n	8003058 <_printf_common+0xa8>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	68e5      	ldr	r5, [r4, #12]
 800301a:	f003 0306 	and.w	r3, r3, #6
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf18      	it	ne
 8003022:	2500      	movne	r5, #0
 8003024:	6832      	ldr	r2, [r6, #0]
 8003026:	f04f 0600 	mov.w	r6, #0
 800302a:	68a3      	ldr	r3, [r4, #8]
 800302c:	bf08      	it	eq
 800302e:	1aad      	subeq	r5, r5, r2
 8003030:	6922      	ldr	r2, [r4, #16]
 8003032:	bf08      	it	eq
 8003034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003038:	4293      	cmp	r3, r2
 800303a:	bfc4      	itt	gt
 800303c:	1a9b      	subgt	r3, r3, r2
 800303e:	18ed      	addgt	r5, r5, r3
 8003040:	341a      	adds	r4, #26
 8003042:	42b5      	cmp	r5, r6
 8003044:	d11a      	bne.n	800307c <_printf_common+0xcc>
 8003046:	2000      	movs	r0, #0
 8003048:	e008      	b.n	800305c <_printf_common+0xac>
 800304a:	2301      	movs	r3, #1
 800304c:	4652      	mov	r2, sl
 800304e:	4649      	mov	r1, r9
 8003050:	4638      	mov	r0, r7
 8003052:	47c0      	blx	r8
 8003054:	3001      	adds	r0, #1
 8003056:	d103      	bne.n	8003060 <_printf_common+0xb0>
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003060:	3501      	adds	r5, #1
 8003062:	e7c4      	b.n	8002fee <_printf_common+0x3e>
 8003064:	2030      	movs	r0, #48	; 0x30
 8003066:	18e1      	adds	r1, r4, r3
 8003068:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003072:	4422      	add	r2, r4
 8003074:	3302      	adds	r3, #2
 8003076:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800307a:	e7c5      	b.n	8003008 <_printf_common+0x58>
 800307c:	2301      	movs	r3, #1
 800307e:	4622      	mov	r2, r4
 8003080:	4649      	mov	r1, r9
 8003082:	4638      	mov	r0, r7
 8003084:	47c0      	blx	r8
 8003086:	3001      	adds	r0, #1
 8003088:	d0e6      	beq.n	8003058 <_printf_common+0xa8>
 800308a:	3601      	adds	r6, #1
 800308c:	e7d9      	b.n	8003042 <_printf_common+0x92>
	...

08003090 <_printf_i>:
 8003090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003094:	7e0f      	ldrb	r7, [r1, #24]
 8003096:	4691      	mov	r9, r2
 8003098:	2f78      	cmp	r7, #120	; 0x78
 800309a:	4680      	mov	r8, r0
 800309c:	460c      	mov	r4, r1
 800309e:	469a      	mov	sl, r3
 80030a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030a6:	d807      	bhi.n	80030b8 <_printf_i+0x28>
 80030a8:	2f62      	cmp	r7, #98	; 0x62
 80030aa:	d80a      	bhi.n	80030c2 <_printf_i+0x32>
 80030ac:	2f00      	cmp	r7, #0
 80030ae:	f000 80d9 	beq.w	8003264 <_printf_i+0x1d4>
 80030b2:	2f58      	cmp	r7, #88	; 0x58
 80030b4:	f000 80a4 	beq.w	8003200 <_printf_i+0x170>
 80030b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030c0:	e03a      	b.n	8003138 <_printf_i+0xa8>
 80030c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030c6:	2b15      	cmp	r3, #21
 80030c8:	d8f6      	bhi.n	80030b8 <_printf_i+0x28>
 80030ca:	a101      	add	r1, pc, #4	; (adr r1, 80030d0 <_printf_i+0x40>)
 80030cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030d0:	08003129 	.word	0x08003129
 80030d4:	0800313d 	.word	0x0800313d
 80030d8:	080030b9 	.word	0x080030b9
 80030dc:	080030b9 	.word	0x080030b9
 80030e0:	080030b9 	.word	0x080030b9
 80030e4:	080030b9 	.word	0x080030b9
 80030e8:	0800313d 	.word	0x0800313d
 80030ec:	080030b9 	.word	0x080030b9
 80030f0:	080030b9 	.word	0x080030b9
 80030f4:	080030b9 	.word	0x080030b9
 80030f8:	080030b9 	.word	0x080030b9
 80030fc:	0800324b 	.word	0x0800324b
 8003100:	0800316d 	.word	0x0800316d
 8003104:	0800322d 	.word	0x0800322d
 8003108:	080030b9 	.word	0x080030b9
 800310c:	080030b9 	.word	0x080030b9
 8003110:	0800326d 	.word	0x0800326d
 8003114:	080030b9 	.word	0x080030b9
 8003118:	0800316d 	.word	0x0800316d
 800311c:	080030b9 	.word	0x080030b9
 8003120:	080030b9 	.word	0x080030b9
 8003124:	08003235 	.word	0x08003235
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	1d1a      	adds	r2, r3, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	602a      	str	r2, [r5, #0]
 8003130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003138:	2301      	movs	r3, #1
 800313a:	e0a4      	b.n	8003286 <_printf_i+0x1f6>
 800313c:	6820      	ldr	r0, [r4, #0]
 800313e:	6829      	ldr	r1, [r5, #0]
 8003140:	0606      	lsls	r6, r0, #24
 8003142:	f101 0304 	add.w	r3, r1, #4
 8003146:	d50a      	bpl.n	800315e <_printf_i+0xce>
 8003148:	680e      	ldr	r6, [r1, #0]
 800314a:	602b      	str	r3, [r5, #0]
 800314c:	2e00      	cmp	r6, #0
 800314e:	da03      	bge.n	8003158 <_printf_i+0xc8>
 8003150:	232d      	movs	r3, #45	; 0x2d
 8003152:	4276      	negs	r6, r6
 8003154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003158:	230a      	movs	r3, #10
 800315a:	485e      	ldr	r0, [pc, #376]	; (80032d4 <_printf_i+0x244>)
 800315c:	e019      	b.n	8003192 <_printf_i+0x102>
 800315e:	680e      	ldr	r6, [r1, #0]
 8003160:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003164:	602b      	str	r3, [r5, #0]
 8003166:	bf18      	it	ne
 8003168:	b236      	sxthne	r6, r6
 800316a:	e7ef      	b.n	800314c <_printf_i+0xbc>
 800316c:	682b      	ldr	r3, [r5, #0]
 800316e:	6820      	ldr	r0, [r4, #0]
 8003170:	1d19      	adds	r1, r3, #4
 8003172:	6029      	str	r1, [r5, #0]
 8003174:	0601      	lsls	r1, r0, #24
 8003176:	d501      	bpl.n	800317c <_printf_i+0xec>
 8003178:	681e      	ldr	r6, [r3, #0]
 800317a:	e002      	b.n	8003182 <_printf_i+0xf2>
 800317c:	0646      	lsls	r6, r0, #25
 800317e:	d5fb      	bpl.n	8003178 <_printf_i+0xe8>
 8003180:	881e      	ldrh	r6, [r3, #0]
 8003182:	2f6f      	cmp	r7, #111	; 0x6f
 8003184:	bf0c      	ite	eq
 8003186:	2308      	moveq	r3, #8
 8003188:	230a      	movne	r3, #10
 800318a:	4852      	ldr	r0, [pc, #328]	; (80032d4 <_printf_i+0x244>)
 800318c:	2100      	movs	r1, #0
 800318e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003192:	6865      	ldr	r5, [r4, #4]
 8003194:	2d00      	cmp	r5, #0
 8003196:	bfa8      	it	ge
 8003198:	6821      	ldrge	r1, [r4, #0]
 800319a:	60a5      	str	r5, [r4, #8]
 800319c:	bfa4      	itt	ge
 800319e:	f021 0104 	bicge.w	r1, r1, #4
 80031a2:	6021      	strge	r1, [r4, #0]
 80031a4:	b90e      	cbnz	r6, 80031aa <_printf_i+0x11a>
 80031a6:	2d00      	cmp	r5, #0
 80031a8:	d04d      	beq.n	8003246 <_printf_i+0x1b6>
 80031aa:	4615      	mov	r5, r2
 80031ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80031b0:	fb03 6711 	mls	r7, r3, r1, r6
 80031b4:	5dc7      	ldrb	r7, [r0, r7]
 80031b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031ba:	4637      	mov	r7, r6
 80031bc:	42bb      	cmp	r3, r7
 80031be:	460e      	mov	r6, r1
 80031c0:	d9f4      	bls.n	80031ac <_printf_i+0x11c>
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d10b      	bne.n	80031de <_printf_i+0x14e>
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	07de      	lsls	r6, r3, #31
 80031ca:	d508      	bpl.n	80031de <_printf_i+0x14e>
 80031cc:	6923      	ldr	r3, [r4, #16]
 80031ce:	6861      	ldr	r1, [r4, #4]
 80031d0:	4299      	cmp	r1, r3
 80031d2:	bfde      	ittt	le
 80031d4:	2330      	movle	r3, #48	; 0x30
 80031d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031de:	1b52      	subs	r2, r2, r5
 80031e0:	6122      	str	r2, [r4, #16]
 80031e2:	464b      	mov	r3, r9
 80031e4:	4621      	mov	r1, r4
 80031e6:	4640      	mov	r0, r8
 80031e8:	f8cd a000 	str.w	sl, [sp]
 80031ec:	aa03      	add	r2, sp, #12
 80031ee:	f7ff fedf 	bl	8002fb0 <_printf_common>
 80031f2:	3001      	adds	r0, #1
 80031f4:	d14c      	bne.n	8003290 <_printf_i+0x200>
 80031f6:	f04f 30ff 	mov.w	r0, #4294967295
 80031fa:	b004      	add	sp, #16
 80031fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003200:	4834      	ldr	r0, [pc, #208]	; (80032d4 <_printf_i+0x244>)
 8003202:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003206:	6829      	ldr	r1, [r5, #0]
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	f851 6b04 	ldr.w	r6, [r1], #4
 800320e:	6029      	str	r1, [r5, #0]
 8003210:	061d      	lsls	r5, r3, #24
 8003212:	d514      	bpl.n	800323e <_printf_i+0x1ae>
 8003214:	07df      	lsls	r7, r3, #31
 8003216:	bf44      	itt	mi
 8003218:	f043 0320 	orrmi.w	r3, r3, #32
 800321c:	6023      	strmi	r3, [r4, #0]
 800321e:	b91e      	cbnz	r6, 8003228 <_printf_i+0x198>
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	f023 0320 	bic.w	r3, r3, #32
 8003226:	6023      	str	r3, [r4, #0]
 8003228:	2310      	movs	r3, #16
 800322a:	e7af      	b.n	800318c <_printf_i+0xfc>
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	f043 0320 	orr.w	r3, r3, #32
 8003232:	6023      	str	r3, [r4, #0]
 8003234:	2378      	movs	r3, #120	; 0x78
 8003236:	4828      	ldr	r0, [pc, #160]	; (80032d8 <_printf_i+0x248>)
 8003238:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800323c:	e7e3      	b.n	8003206 <_printf_i+0x176>
 800323e:	0659      	lsls	r1, r3, #25
 8003240:	bf48      	it	mi
 8003242:	b2b6      	uxthmi	r6, r6
 8003244:	e7e6      	b.n	8003214 <_printf_i+0x184>
 8003246:	4615      	mov	r5, r2
 8003248:	e7bb      	b.n	80031c2 <_printf_i+0x132>
 800324a:	682b      	ldr	r3, [r5, #0]
 800324c:	6826      	ldr	r6, [r4, #0]
 800324e:	1d18      	adds	r0, r3, #4
 8003250:	6961      	ldr	r1, [r4, #20]
 8003252:	6028      	str	r0, [r5, #0]
 8003254:	0635      	lsls	r5, r6, #24
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	d501      	bpl.n	800325e <_printf_i+0x1ce>
 800325a:	6019      	str	r1, [r3, #0]
 800325c:	e002      	b.n	8003264 <_printf_i+0x1d4>
 800325e:	0670      	lsls	r0, r6, #25
 8003260:	d5fb      	bpl.n	800325a <_printf_i+0x1ca>
 8003262:	8019      	strh	r1, [r3, #0]
 8003264:	2300      	movs	r3, #0
 8003266:	4615      	mov	r5, r2
 8003268:	6123      	str	r3, [r4, #16]
 800326a:	e7ba      	b.n	80031e2 <_printf_i+0x152>
 800326c:	682b      	ldr	r3, [r5, #0]
 800326e:	2100      	movs	r1, #0
 8003270:	1d1a      	adds	r2, r3, #4
 8003272:	602a      	str	r2, [r5, #0]
 8003274:	681d      	ldr	r5, [r3, #0]
 8003276:	6862      	ldr	r2, [r4, #4]
 8003278:	4628      	mov	r0, r5
 800327a:	f000 fed7 	bl	800402c <memchr>
 800327e:	b108      	cbz	r0, 8003284 <_printf_i+0x1f4>
 8003280:	1b40      	subs	r0, r0, r5
 8003282:	6060      	str	r0, [r4, #4]
 8003284:	6863      	ldr	r3, [r4, #4]
 8003286:	6123      	str	r3, [r4, #16]
 8003288:	2300      	movs	r3, #0
 800328a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800328e:	e7a8      	b.n	80031e2 <_printf_i+0x152>
 8003290:	462a      	mov	r2, r5
 8003292:	4649      	mov	r1, r9
 8003294:	4640      	mov	r0, r8
 8003296:	6923      	ldr	r3, [r4, #16]
 8003298:	47d0      	blx	sl
 800329a:	3001      	adds	r0, #1
 800329c:	d0ab      	beq.n	80031f6 <_printf_i+0x166>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	079b      	lsls	r3, r3, #30
 80032a2:	d413      	bmi.n	80032cc <_printf_i+0x23c>
 80032a4:	68e0      	ldr	r0, [r4, #12]
 80032a6:	9b03      	ldr	r3, [sp, #12]
 80032a8:	4298      	cmp	r0, r3
 80032aa:	bfb8      	it	lt
 80032ac:	4618      	movlt	r0, r3
 80032ae:	e7a4      	b.n	80031fa <_printf_i+0x16a>
 80032b0:	2301      	movs	r3, #1
 80032b2:	4632      	mov	r2, r6
 80032b4:	4649      	mov	r1, r9
 80032b6:	4640      	mov	r0, r8
 80032b8:	47d0      	blx	sl
 80032ba:	3001      	adds	r0, #1
 80032bc:	d09b      	beq.n	80031f6 <_printf_i+0x166>
 80032be:	3501      	adds	r5, #1
 80032c0:	68e3      	ldr	r3, [r4, #12]
 80032c2:	9903      	ldr	r1, [sp, #12]
 80032c4:	1a5b      	subs	r3, r3, r1
 80032c6:	42ab      	cmp	r3, r5
 80032c8:	dcf2      	bgt.n	80032b0 <_printf_i+0x220>
 80032ca:	e7eb      	b.n	80032a4 <_printf_i+0x214>
 80032cc:	2500      	movs	r5, #0
 80032ce:	f104 0619 	add.w	r6, r4, #25
 80032d2:	e7f5      	b.n	80032c0 <_printf_i+0x230>
 80032d4:	0800584e 	.word	0x0800584e
 80032d8:	0800585f 	.word	0x0800585f

080032dc <siprintf>:
 80032dc:	b40e      	push	{r1, r2, r3}
 80032de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032e2:	b500      	push	{lr}
 80032e4:	b09c      	sub	sp, #112	; 0x70
 80032e6:	ab1d      	add	r3, sp, #116	; 0x74
 80032e8:	9002      	str	r0, [sp, #8]
 80032ea:	9006      	str	r0, [sp, #24]
 80032ec:	9107      	str	r1, [sp, #28]
 80032ee:	9104      	str	r1, [sp, #16]
 80032f0:	4808      	ldr	r0, [pc, #32]	; (8003314 <siprintf+0x38>)
 80032f2:	4909      	ldr	r1, [pc, #36]	; (8003318 <siprintf+0x3c>)
 80032f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80032f8:	9105      	str	r1, [sp, #20]
 80032fa:	6800      	ldr	r0, [r0, #0]
 80032fc:	a902      	add	r1, sp, #8
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	f001 fb7e 	bl	8004a00 <_svfiprintf_r>
 8003304:	2200      	movs	r2, #0
 8003306:	9b02      	ldr	r3, [sp, #8]
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	b01c      	add	sp, #112	; 0x70
 800330c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003310:	b003      	add	sp, #12
 8003312:	4770      	bx	lr
 8003314:	2000000c 	.word	0x2000000c
 8003318:	ffff0208 	.word	0xffff0208

0800331c <quorem>:
 800331c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003320:	6903      	ldr	r3, [r0, #16]
 8003322:	690c      	ldr	r4, [r1, #16]
 8003324:	4607      	mov	r7, r0
 8003326:	42a3      	cmp	r3, r4
 8003328:	f2c0 8082 	blt.w	8003430 <quorem+0x114>
 800332c:	3c01      	subs	r4, #1
 800332e:	f100 0514 	add.w	r5, r0, #20
 8003332:	f101 0814 	add.w	r8, r1, #20
 8003336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003344:	3301      	adds	r3, #1
 8003346:	429a      	cmp	r2, r3
 8003348:	fbb2 f6f3 	udiv	r6, r2, r3
 800334c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003354:	d331      	bcc.n	80033ba <quorem+0x9e>
 8003356:	f04f 0e00 	mov.w	lr, #0
 800335a:	4640      	mov	r0, r8
 800335c:	46ac      	mov	ip, r5
 800335e:	46f2      	mov	sl, lr
 8003360:	f850 2b04 	ldr.w	r2, [r0], #4
 8003364:	b293      	uxth	r3, r2
 8003366:	fb06 e303 	mla	r3, r6, r3, lr
 800336a:	0c12      	lsrs	r2, r2, #16
 800336c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003370:	b29b      	uxth	r3, r3
 8003372:	fb06 e202 	mla	r2, r6, r2, lr
 8003376:	ebaa 0303 	sub.w	r3, sl, r3
 800337a:	f8dc a000 	ldr.w	sl, [ip]
 800337e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003382:	fa1f fa8a 	uxth.w	sl, sl
 8003386:	4453      	add	r3, sl
 8003388:	f8dc a000 	ldr.w	sl, [ip]
 800338c:	b292      	uxth	r2, r2
 800338e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003392:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003396:	b29b      	uxth	r3, r3
 8003398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800339c:	4581      	cmp	r9, r0
 800339e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80033a2:	f84c 3b04 	str.w	r3, [ip], #4
 80033a6:	d2db      	bcs.n	8003360 <quorem+0x44>
 80033a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80033ac:	b92b      	cbnz	r3, 80033ba <quorem+0x9e>
 80033ae:	9b01      	ldr	r3, [sp, #4]
 80033b0:	3b04      	subs	r3, #4
 80033b2:	429d      	cmp	r5, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	d32f      	bcc.n	8003418 <quorem+0xfc>
 80033b8:	613c      	str	r4, [r7, #16]
 80033ba:	4638      	mov	r0, r7
 80033bc:	f001 f8d0 	bl	8004560 <__mcmp>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	db25      	blt.n	8003410 <quorem+0xf4>
 80033c4:	4628      	mov	r0, r5
 80033c6:	f04f 0c00 	mov.w	ip, #0
 80033ca:	3601      	adds	r6, #1
 80033cc:	f858 1b04 	ldr.w	r1, [r8], #4
 80033d0:	f8d0 e000 	ldr.w	lr, [r0]
 80033d4:	b28b      	uxth	r3, r1
 80033d6:	ebac 0303 	sub.w	r3, ip, r3
 80033da:	fa1f f28e 	uxth.w	r2, lr
 80033de:	4413      	add	r3, r2
 80033e0:	0c0a      	lsrs	r2, r1, #16
 80033e2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80033e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033f0:	45c1      	cmp	r9, r8
 80033f2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80033f6:	f840 3b04 	str.w	r3, [r0], #4
 80033fa:	d2e7      	bcs.n	80033cc <quorem+0xb0>
 80033fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003400:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003404:	b922      	cbnz	r2, 8003410 <quorem+0xf4>
 8003406:	3b04      	subs	r3, #4
 8003408:	429d      	cmp	r5, r3
 800340a:	461a      	mov	r2, r3
 800340c:	d30a      	bcc.n	8003424 <quorem+0x108>
 800340e:	613c      	str	r4, [r7, #16]
 8003410:	4630      	mov	r0, r6
 8003412:	b003      	add	sp, #12
 8003414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	3b04      	subs	r3, #4
 800341c:	2a00      	cmp	r2, #0
 800341e:	d1cb      	bne.n	80033b8 <quorem+0x9c>
 8003420:	3c01      	subs	r4, #1
 8003422:	e7c6      	b.n	80033b2 <quorem+0x96>
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	3b04      	subs	r3, #4
 8003428:	2a00      	cmp	r2, #0
 800342a:	d1f0      	bne.n	800340e <quorem+0xf2>
 800342c:	3c01      	subs	r4, #1
 800342e:	e7eb      	b.n	8003408 <quorem+0xec>
 8003430:	2000      	movs	r0, #0
 8003432:	e7ee      	b.n	8003412 <quorem+0xf6>
 8003434:	0000      	movs	r0, r0
	...

08003438 <_dtoa_r>:
 8003438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800343c:	4616      	mov	r6, r2
 800343e:	461f      	mov	r7, r3
 8003440:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003442:	b099      	sub	sp, #100	; 0x64
 8003444:	4605      	mov	r5, r0
 8003446:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800344a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800344e:	b974      	cbnz	r4, 800346e <_dtoa_r+0x36>
 8003450:	2010      	movs	r0, #16
 8003452:	f000 fde3 	bl	800401c <malloc>
 8003456:	4602      	mov	r2, r0
 8003458:	6268      	str	r0, [r5, #36]	; 0x24
 800345a:	b920      	cbnz	r0, 8003466 <_dtoa_r+0x2e>
 800345c:	21ea      	movs	r1, #234	; 0xea
 800345e:	4ba8      	ldr	r3, [pc, #672]	; (8003700 <_dtoa_r+0x2c8>)
 8003460:	48a8      	ldr	r0, [pc, #672]	; (8003704 <_dtoa_r+0x2cc>)
 8003462:	f001 fbdd 	bl	8004c20 <__assert_func>
 8003466:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800346a:	6004      	str	r4, [r0, #0]
 800346c:	60c4      	str	r4, [r0, #12]
 800346e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	b151      	cbz	r1, 800348a <_dtoa_r+0x52>
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	2301      	movs	r3, #1
 8003478:	4093      	lsls	r3, r2
 800347a:	604a      	str	r2, [r1, #4]
 800347c:	608b      	str	r3, [r1, #8]
 800347e:	4628      	mov	r0, r5
 8003480:	f000 fe30 	bl	80040e4 <_Bfree>
 8003484:	2200      	movs	r2, #0
 8003486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	1e3b      	subs	r3, r7, #0
 800348c:	bfaf      	iteee	ge
 800348e:	2300      	movge	r3, #0
 8003490:	2201      	movlt	r2, #1
 8003492:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003496:	9305      	strlt	r3, [sp, #20]
 8003498:	bfa8      	it	ge
 800349a:	f8c8 3000 	strge.w	r3, [r8]
 800349e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80034a2:	4b99      	ldr	r3, [pc, #612]	; (8003708 <_dtoa_r+0x2d0>)
 80034a4:	bfb8      	it	lt
 80034a6:	f8c8 2000 	strlt.w	r2, [r8]
 80034aa:	ea33 0309 	bics.w	r3, r3, r9
 80034ae:	d119      	bne.n	80034e4 <_dtoa_r+0xac>
 80034b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80034b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80034bc:	4333      	orrs	r3, r6
 80034be:	f000 857f 	beq.w	8003fc0 <_dtoa_r+0xb88>
 80034c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80034c4:	b953      	cbnz	r3, 80034dc <_dtoa_r+0xa4>
 80034c6:	4b91      	ldr	r3, [pc, #580]	; (800370c <_dtoa_r+0x2d4>)
 80034c8:	e022      	b.n	8003510 <_dtoa_r+0xd8>
 80034ca:	4b91      	ldr	r3, [pc, #580]	; (8003710 <_dtoa_r+0x2d8>)
 80034cc:	9303      	str	r3, [sp, #12]
 80034ce:	3308      	adds	r3, #8
 80034d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	9803      	ldr	r0, [sp, #12]
 80034d6:	b019      	add	sp, #100	; 0x64
 80034d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034dc:	4b8b      	ldr	r3, [pc, #556]	; (800370c <_dtoa_r+0x2d4>)
 80034de:	9303      	str	r3, [sp, #12]
 80034e0:	3303      	adds	r3, #3
 80034e2:	e7f5      	b.n	80034d0 <_dtoa_r+0x98>
 80034e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80034e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80034ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80034f0:	2200      	movs	r2, #0
 80034f2:	2300      	movs	r3, #0
 80034f4:	f7fd fa58 	bl	80009a8 <__aeabi_dcmpeq>
 80034f8:	4680      	mov	r8, r0
 80034fa:	b158      	cbz	r0, 8003514 <_dtoa_r+0xdc>
 80034fc:	2301      	movs	r3, #1
 80034fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8558 	beq.w	8003fba <_dtoa_r+0xb82>
 800350a:	4882      	ldr	r0, [pc, #520]	; (8003714 <_dtoa_r+0x2dc>)
 800350c:	6018      	str	r0, [r3, #0]
 800350e:	1e43      	subs	r3, r0, #1
 8003510:	9303      	str	r3, [sp, #12]
 8003512:	e7df      	b.n	80034d4 <_dtoa_r+0x9c>
 8003514:	ab16      	add	r3, sp, #88	; 0x58
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	ab17      	add	r3, sp, #92	; 0x5c
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	4628      	mov	r0, r5
 800351e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003522:	f001 f8c5 	bl	80046b0 <__d2b>
 8003526:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800352a:	4683      	mov	fp, r0
 800352c:	2c00      	cmp	r4, #0
 800352e:	d07f      	beq.n	8003630 <_dtoa_r+0x1f8>
 8003530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003536:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800353a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800353e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003542:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003546:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800354a:	2200      	movs	r2, #0
 800354c:	4b72      	ldr	r3, [pc, #456]	; (8003718 <_dtoa_r+0x2e0>)
 800354e:	f7fc fe0b 	bl	8000168 <__aeabi_dsub>
 8003552:	a365      	add	r3, pc, #404	; (adr r3, 80036e8 <_dtoa_r+0x2b0>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fc ffbe 	bl	80004d8 <__aeabi_dmul>
 800355c:	a364      	add	r3, pc, #400	; (adr r3, 80036f0 <_dtoa_r+0x2b8>)
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f7fc fe03 	bl	800016c <__adddf3>
 8003566:	4606      	mov	r6, r0
 8003568:	4620      	mov	r0, r4
 800356a:	460f      	mov	r7, r1
 800356c:	f7fc ff4a 	bl	8000404 <__aeabi_i2d>
 8003570:	a361      	add	r3, pc, #388	; (adr r3, 80036f8 <_dtoa_r+0x2c0>)
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f7fc ffaf 	bl	80004d8 <__aeabi_dmul>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4630      	mov	r0, r6
 8003580:	4639      	mov	r1, r7
 8003582:	f7fc fdf3 	bl	800016c <__adddf3>
 8003586:	4606      	mov	r6, r0
 8003588:	460f      	mov	r7, r1
 800358a:	f7fd fa55 	bl	8000a38 <__aeabi_d2iz>
 800358e:	2200      	movs	r2, #0
 8003590:	4682      	mov	sl, r0
 8003592:	2300      	movs	r3, #0
 8003594:	4630      	mov	r0, r6
 8003596:	4639      	mov	r1, r7
 8003598:	f7fd fa10 	bl	80009bc <__aeabi_dcmplt>
 800359c:	b148      	cbz	r0, 80035b2 <_dtoa_r+0x17a>
 800359e:	4650      	mov	r0, sl
 80035a0:	f7fc ff30 	bl	8000404 <__aeabi_i2d>
 80035a4:	4632      	mov	r2, r6
 80035a6:	463b      	mov	r3, r7
 80035a8:	f7fd f9fe 	bl	80009a8 <__aeabi_dcmpeq>
 80035ac:	b908      	cbnz	r0, 80035b2 <_dtoa_r+0x17a>
 80035ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80035b2:	f1ba 0f16 	cmp.w	sl, #22
 80035b6:	d858      	bhi.n	800366a <_dtoa_r+0x232>
 80035b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80035bc:	4b57      	ldr	r3, [pc, #348]	; (800371c <_dtoa_r+0x2e4>)
 80035be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fd f9f9 	bl	80009bc <__aeabi_dcmplt>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d04f      	beq.n	800366e <_dtoa_r+0x236>
 80035ce:	2300      	movs	r3, #0
 80035d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80035d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80035d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80035d8:	1b1c      	subs	r4, r3, r4
 80035da:	1e63      	subs	r3, r4, #1
 80035dc:	9309      	str	r3, [sp, #36]	; 0x24
 80035de:	bf49      	itett	mi
 80035e0:	f1c4 0301 	rsbmi	r3, r4, #1
 80035e4:	2300      	movpl	r3, #0
 80035e6:	9306      	strmi	r3, [sp, #24]
 80035e8:	2300      	movmi	r3, #0
 80035ea:	bf54      	ite	pl
 80035ec:	9306      	strpl	r3, [sp, #24]
 80035ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 80035f0:	f1ba 0f00 	cmp.w	sl, #0
 80035f4:	db3d      	blt.n	8003672 <_dtoa_r+0x23a>
 80035f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80035fc:	4453      	add	r3, sl
 80035fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003600:	2300      	movs	r3, #0
 8003602:	930a      	str	r3, [sp, #40]	; 0x28
 8003604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003606:	2b09      	cmp	r3, #9
 8003608:	f200 808c 	bhi.w	8003724 <_dtoa_r+0x2ec>
 800360c:	2b05      	cmp	r3, #5
 800360e:	bfc4      	itt	gt
 8003610:	3b04      	subgt	r3, #4
 8003612:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003616:	bfc8      	it	gt
 8003618:	2400      	movgt	r4, #0
 800361a:	f1a3 0302 	sub.w	r3, r3, #2
 800361e:	bfd8      	it	le
 8003620:	2401      	movle	r4, #1
 8003622:	2b03      	cmp	r3, #3
 8003624:	f200 808a 	bhi.w	800373c <_dtoa_r+0x304>
 8003628:	e8df f003 	tbb	[pc, r3]
 800362c:	5b4d4f2d 	.word	0x5b4d4f2d
 8003630:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003634:	441c      	add	r4, r3
 8003636:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800363a:	2b20      	cmp	r3, #32
 800363c:	bfc3      	ittte	gt
 800363e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003642:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003646:	fa09 f303 	lslgt.w	r3, r9, r3
 800364a:	f1c3 0320 	rsble	r3, r3, #32
 800364e:	bfc6      	itte	gt
 8003650:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003654:	4318      	orrgt	r0, r3
 8003656:	fa06 f003 	lslle.w	r0, r6, r3
 800365a:	f7fc fec3 	bl	80003e4 <__aeabi_ui2d>
 800365e:	2301      	movs	r3, #1
 8003660:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003664:	3c01      	subs	r4, #1
 8003666:	9313      	str	r3, [sp, #76]	; 0x4c
 8003668:	e76f      	b.n	800354a <_dtoa_r+0x112>
 800366a:	2301      	movs	r3, #1
 800366c:	e7b2      	b.n	80035d4 <_dtoa_r+0x19c>
 800366e:	900f      	str	r0, [sp, #60]	; 0x3c
 8003670:	e7b1      	b.n	80035d6 <_dtoa_r+0x19e>
 8003672:	9b06      	ldr	r3, [sp, #24]
 8003674:	eba3 030a 	sub.w	r3, r3, sl
 8003678:	9306      	str	r3, [sp, #24]
 800367a:	f1ca 0300 	rsb	r3, sl, #0
 800367e:	930a      	str	r3, [sp, #40]	; 0x28
 8003680:	2300      	movs	r3, #0
 8003682:	930e      	str	r3, [sp, #56]	; 0x38
 8003684:	e7be      	b.n	8003604 <_dtoa_r+0x1cc>
 8003686:	2300      	movs	r3, #0
 8003688:	930b      	str	r3, [sp, #44]	; 0x2c
 800368a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800368c:	2b00      	cmp	r3, #0
 800368e:	dc58      	bgt.n	8003742 <_dtoa_r+0x30a>
 8003690:	f04f 0901 	mov.w	r9, #1
 8003694:	464b      	mov	r3, r9
 8003696:	f8cd 9020 	str.w	r9, [sp, #32]
 800369a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800369e:	2200      	movs	r2, #0
 80036a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80036a2:	6042      	str	r2, [r0, #4]
 80036a4:	2204      	movs	r2, #4
 80036a6:	f102 0614 	add.w	r6, r2, #20
 80036aa:	429e      	cmp	r6, r3
 80036ac:	6841      	ldr	r1, [r0, #4]
 80036ae:	d94e      	bls.n	800374e <_dtoa_r+0x316>
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 fcd7 	bl	8004064 <_Balloc>
 80036b6:	9003      	str	r0, [sp, #12]
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d14c      	bne.n	8003756 <_dtoa_r+0x31e>
 80036bc:	4602      	mov	r2, r0
 80036be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <_dtoa_r+0x2e8>)
 80036c4:	e6cc      	b.n	8003460 <_dtoa_r+0x28>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e7de      	b.n	8003688 <_dtoa_r+0x250>
 80036ca:	2300      	movs	r3, #0
 80036cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80036ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80036d0:	eb0a 0903 	add.w	r9, sl, r3
 80036d4:	f109 0301 	add.w	r3, r9, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	9308      	str	r3, [sp, #32]
 80036dc:	bfb8      	it	lt
 80036de:	2301      	movlt	r3, #1
 80036e0:	e7dd      	b.n	800369e <_dtoa_r+0x266>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e7f2      	b.n	80036cc <_dtoa_r+0x294>
 80036e6:	bf00      	nop
 80036e8:	636f4361 	.word	0x636f4361
 80036ec:	3fd287a7 	.word	0x3fd287a7
 80036f0:	8b60c8b3 	.word	0x8b60c8b3
 80036f4:	3fc68a28 	.word	0x3fc68a28
 80036f8:	509f79fb 	.word	0x509f79fb
 80036fc:	3fd34413 	.word	0x3fd34413
 8003700:	0800587d 	.word	0x0800587d
 8003704:	08005894 	.word	0x08005894
 8003708:	7ff00000 	.word	0x7ff00000
 800370c:	08005879 	.word	0x08005879
 8003710:	08005870 	.word	0x08005870
 8003714:	0800584d 	.word	0x0800584d
 8003718:	3ff80000 	.word	0x3ff80000
 800371c:	08005988 	.word	0x08005988
 8003720:	080058ef 	.word	0x080058ef
 8003724:	2401      	movs	r4, #1
 8003726:	2300      	movs	r3, #0
 8003728:	940b      	str	r4, [sp, #44]	; 0x2c
 800372a:	9322      	str	r3, [sp, #136]	; 0x88
 800372c:	f04f 39ff 	mov.w	r9, #4294967295
 8003730:	2200      	movs	r2, #0
 8003732:	2312      	movs	r3, #18
 8003734:	f8cd 9020 	str.w	r9, [sp, #32]
 8003738:	9223      	str	r2, [sp, #140]	; 0x8c
 800373a:	e7b0      	b.n	800369e <_dtoa_r+0x266>
 800373c:	2301      	movs	r3, #1
 800373e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003740:	e7f4      	b.n	800372c <_dtoa_r+0x2f4>
 8003742:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003746:	464b      	mov	r3, r9
 8003748:	f8cd 9020 	str.w	r9, [sp, #32]
 800374c:	e7a7      	b.n	800369e <_dtoa_r+0x266>
 800374e:	3101      	adds	r1, #1
 8003750:	6041      	str	r1, [r0, #4]
 8003752:	0052      	lsls	r2, r2, #1
 8003754:	e7a7      	b.n	80036a6 <_dtoa_r+0x26e>
 8003756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003758:	9a03      	ldr	r2, [sp, #12]
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	9b08      	ldr	r3, [sp, #32]
 800375e:	2b0e      	cmp	r3, #14
 8003760:	f200 80a8 	bhi.w	80038b4 <_dtoa_r+0x47c>
 8003764:	2c00      	cmp	r4, #0
 8003766:	f000 80a5 	beq.w	80038b4 <_dtoa_r+0x47c>
 800376a:	f1ba 0f00 	cmp.w	sl, #0
 800376e:	dd34      	ble.n	80037da <_dtoa_r+0x3a2>
 8003770:	4a9a      	ldr	r2, [pc, #616]	; (80039dc <_dtoa_r+0x5a4>)
 8003772:	f00a 030f 	and.w	r3, sl, #15
 8003776:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800377a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800377e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003782:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003786:	ea4f 142a 	mov.w	r4, sl, asr #4
 800378a:	d016      	beq.n	80037ba <_dtoa_r+0x382>
 800378c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003790:	4b93      	ldr	r3, [pc, #588]	; (80039e0 <_dtoa_r+0x5a8>)
 8003792:	2703      	movs	r7, #3
 8003794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003798:	f7fc ffc8 	bl	800072c <__aeabi_ddiv>
 800379c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037a0:	f004 040f 	and.w	r4, r4, #15
 80037a4:	4e8e      	ldr	r6, [pc, #568]	; (80039e0 <_dtoa_r+0x5a8>)
 80037a6:	b954      	cbnz	r4, 80037be <_dtoa_r+0x386>
 80037a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80037ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037b0:	f7fc ffbc 	bl	800072c <__aeabi_ddiv>
 80037b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037b8:	e029      	b.n	800380e <_dtoa_r+0x3d6>
 80037ba:	2702      	movs	r7, #2
 80037bc:	e7f2      	b.n	80037a4 <_dtoa_r+0x36c>
 80037be:	07e1      	lsls	r1, r4, #31
 80037c0:	d508      	bpl.n	80037d4 <_dtoa_r+0x39c>
 80037c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80037c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80037ca:	f7fc fe85 	bl	80004d8 <__aeabi_dmul>
 80037ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80037d2:	3701      	adds	r7, #1
 80037d4:	1064      	asrs	r4, r4, #1
 80037d6:	3608      	adds	r6, #8
 80037d8:	e7e5      	b.n	80037a6 <_dtoa_r+0x36e>
 80037da:	f000 80a5 	beq.w	8003928 <_dtoa_r+0x4f0>
 80037de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80037e2:	f1ca 0400 	rsb	r4, sl, #0
 80037e6:	4b7d      	ldr	r3, [pc, #500]	; (80039dc <_dtoa_r+0x5a4>)
 80037e8:	f004 020f 	and.w	r2, r4, #15
 80037ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fc fe70 	bl	80004d8 <__aeabi_dmul>
 80037f8:	2702      	movs	r7, #2
 80037fa:	2300      	movs	r3, #0
 80037fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003800:	4e77      	ldr	r6, [pc, #476]	; (80039e0 <_dtoa_r+0x5a8>)
 8003802:	1124      	asrs	r4, r4, #4
 8003804:	2c00      	cmp	r4, #0
 8003806:	f040 8084 	bne.w	8003912 <_dtoa_r+0x4da>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1d2      	bne.n	80037b4 <_dtoa_r+0x37c>
 800380e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 808b 	beq.w	800392c <_dtoa_r+0x4f4>
 8003816:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800381a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800381e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003822:	2200      	movs	r2, #0
 8003824:	4b6f      	ldr	r3, [pc, #444]	; (80039e4 <_dtoa_r+0x5ac>)
 8003826:	f7fd f8c9 	bl	80009bc <__aeabi_dcmplt>
 800382a:	2800      	cmp	r0, #0
 800382c:	d07e      	beq.n	800392c <_dtoa_r+0x4f4>
 800382e:	9b08      	ldr	r3, [sp, #32]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d07b      	beq.n	800392c <_dtoa_r+0x4f4>
 8003834:	f1b9 0f00 	cmp.w	r9, #0
 8003838:	dd38      	ble.n	80038ac <_dtoa_r+0x474>
 800383a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800383e:	2200      	movs	r2, #0
 8003840:	4b69      	ldr	r3, [pc, #420]	; (80039e8 <_dtoa_r+0x5b0>)
 8003842:	f7fc fe49 	bl	80004d8 <__aeabi_dmul>
 8003846:	464c      	mov	r4, r9
 8003848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800384c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003850:	3701      	adds	r7, #1
 8003852:	4638      	mov	r0, r7
 8003854:	f7fc fdd6 	bl	8000404 <__aeabi_i2d>
 8003858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800385c:	f7fc fe3c 	bl	80004d8 <__aeabi_dmul>
 8003860:	2200      	movs	r2, #0
 8003862:	4b62      	ldr	r3, [pc, #392]	; (80039ec <_dtoa_r+0x5b4>)
 8003864:	f7fc fc82 	bl	800016c <__adddf3>
 8003868:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800386c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003870:	9611      	str	r6, [sp, #68]	; 0x44
 8003872:	2c00      	cmp	r4, #0
 8003874:	d15d      	bne.n	8003932 <_dtoa_r+0x4fa>
 8003876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800387a:	2200      	movs	r2, #0
 800387c:	4b5c      	ldr	r3, [pc, #368]	; (80039f0 <_dtoa_r+0x5b8>)
 800387e:	f7fc fc73 	bl	8000168 <__aeabi_dsub>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800388a:	4633      	mov	r3, r6
 800388c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800388e:	f7fd f8b3 	bl	80009f8 <__aeabi_dcmpgt>
 8003892:	2800      	cmp	r0, #0
 8003894:	f040 829c 	bne.w	8003dd0 <_dtoa_r+0x998>
 8003898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800389c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800389e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80038a2:	f7fd f88b 	bl	80009bc <__aeabi_dcmplt>
 80038a6:	2800      	cmp	r0, #0
 80038a8:	f040 8290 	bne.w	8003dcc <_dtoa_r+0x994>
 80038ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80038b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80038b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f2c0 8152 	blt.w	8003b60 <_dtoa_r+0x728>
 80038bc:	f1ba 0f0e 	cmp.w	sl, #14
 80038c0:	f300 814e 	bgt.w	8003b60 <_dtoa_r+0x728>
 80038c4:	4b45      	ldr	r3, [pc, #276]	; (80039dc <_dtoa_r+0x5a4>)
 80038c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80038ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80038d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f280 80db 	bge.w	8003a90 <_dtoa_r+0x658>
 80038da:	9b08      	ldr	r3, [sp, #32]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f300 80d7 	bgt.w	8003a90 <_dtoa_r+0x658>
 80038e2:	f040 8272 	bne.w	8003dca <_dtoa_r+0x992>
 80038e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80038ea:	2200      	movs	r2, #0
 80038ec:	4b40      	ldr	r3, [pc, #256]	; (80039f0 <_dtoa_r+0x5b8>)
 80038ee:	f7fc fdf3 	bl	80004d8 <__aeabi_dmul>
 80038f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038f6:	f7fd f875 	bl	80009e4 <__aeabi_dcmpge>
 80038fa:	9c08      	ldr	r4, [sp, #32]
 80038fc:	4626      	mov	r6, r4
 80038fe:	2800      	cmp	r0, #0
 8003900:	f040 8248 	bne.w	8003d94 <_dtoa_r+0x95c>
 8003904:	2331      	movs	r3, #49	; 0x31
 8003906:	9f03      	ldr	r7, [sp, #12]
 8003908:	f10a 0a01 	add.w	sl, sl, #1
 800390c:	f807 3b01 	strb.w	r3, [r7], #1
 8003910:	e244      	b.n	8003d9c <_dtoa_r+0x964>
 8003912:	07e2      	lsls	r2, r4, #31
 8003914:	d505      	bpl.n	8003922 <_dtoa_r+0x4ea>
 8003916:	e9d6 2300 	ldrd	r2, r3, [r6]
 800391a:	f7fc fddd 	bl	80004d8 <__aeabi_dmul>
 800391e:	2301      	movs	r3, #1
 8003920:	3701      	adds	r7, #1
 8003922:	1064      	asrs	r4, r4, #1
 8003924:	3608      	adds	r6, #8
 8003926:	e76d      	b.n	8003804 <_dtoa_r+0x3cc>
 8003928:	2702      	movs	r7, #2
 800392a:	e770      	b.n	800380e <_dtoa_r+0x3d6>
 800392c:	46d0      	mov	r8, sl
 800392e:	9c08      	ldr	r4, [sp, #32]
 8003930:	e78f      	b.n	8003852 <_dtoa_r+0x41a>
 8003932:	9903      	ldr	r1, [sp, #12]
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <_dtoa_r+0x5a4>)
 8003936:	4421      	add	r1, r4
 8003938:	9112      	str	r1, [sp, #72]	; 0x48
 800393a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800393c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003940:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003944:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003948:	2900      	cmp	r1, #0
 800394a:	d055      	beq.n	80039f8 <_dtoa_r+0x5c0>
 800394c:	2000      	movs	r0, #0
 800394e:	4929      	ldr	r1, [pc, #164]	; (80039f4 <_dtoa_r+0x5bc>)
 8003950:	f7fc feec 	bl	800072c <__aeabi_ddiv>
 8003954:	463b      	mov	r3, r7
 8003956:	4632      	mov	r2, r6
 8003958:	f7fc fc06 	bl	8000168 <__aeabi_dsub>
 800395c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003960:	9f03      	ldr	r7, [sp, #12]
 8003962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003966:	f7fd f867 	bl	8000a38 <__aeabi_d2iz>
 800396a:	4604      	mov	r4, r0
 800396c:	f7fc fd4a 	bl	8000404 <__aeabi_i2d>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003978:	f7fc fbf6 	bl	8000168 <__aeabi_dsub>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	3430      	adds	r4, #48	; 0x30
 8003982:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800398a:	f807 4b01 	strb.w	r4, [r7], #1
 800398e:	f7fd f815 	bl	80009bc <__aeabi_dcmplt>
 8003992:	2800      	cmp	r0, #0
 8003994:	d174      	bne.n	8003a80 <_dtoa_r+0x648>
 8003996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800399a:	2000      	movs	r0, #0
 800399c:	4911      	ldr	r1, [pc, #68]	; (80039e4 <_dtoa_r+0x5ac>)
 800399e:	f7fc fbe3 	bl	8000168 <__aeabi_dsub>
 80039a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80039a6:	f7fd f809 	bl	80009bc <__aeabi_dcmplt>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	f040 80b7 	bne.w	8003b1e <_dtoa_r+0x6e6>
 80039b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80039b2:	429f      	cmp	r7, r3
 80039b4:	f43f af7a 	beq.w	80038ac <_dtoa_r+0x474>
 80039b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80039bc:	2200      	movs	r2, #0
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <_dtoa_r+0x5b0>)
 80039c0:	f7fc fd8a 	bl	80004d8 <__aeabi_dmul>
 80039c4:	2200      	movs	r2, #0
 80039c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80039ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <_dtoa_r+0x5b0>)
 80039d0:	f7fc fd82 	bl	80004d8 <__aeabi_dmul>
 80039d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039d8:	e7c3      	b.n	8003962 <_dtoa_r+0x52a>
 80039da:	bf00      	nop
 80039dc:	08005988 	.word	0x08005988
 80039e0:	08005960 	.word	0x08005960
 80039e4:	3ff00000 	.word	0x3ff00000
 80039e8:	40240000 	.word	0x40240000
 80039ec:	401c0000 	.word	0x401c0000
 80039f0:	40140000 	.word	0x40140000
 80039f4:	3fe00000 	.word	0x3fe00000
 80039f8:	4630      	mov	r0, r6
 80039fa:	4639      	mov	r1, r7
 80039fc:	f7fc fd6c 	bl	80004d8 <__aeabi_dmul>
 8003a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a06:	9c03      	ldr	r4, [sp, #12]
 8003a08:	9314      	str	r3, [sp, #80]	; 0x50
 8003a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a0e:	f7fd f813 	bl	8000a38 <__aeabi_d2iz>
 8003a12:	9015      	str	r0, [sp, #84]	; 0x54
 8003a14:	f7fc fcf6 	bl	8000404 <__aeabi_i2d>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a20:	f7fc fba2 	bl	8000168 <__aeabi_dsub>
 8003a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003a26:	4606      	mov	r6, r0
 8003a28:	3330      	adds	r3, #48	; 0x30
 8003a2a:	f804 3b01 	strb.w	r3, [r4], #1
 8003a2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a30:	460f      	mov	r7, r1
 8003a32:	429c      	cmp	r4, r3
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	d124      	bne.n	8003a84 <_dtoa_r+0x64c>
 8003a3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003a3e:	4bb0      	ldr	r3, [pc, #704]	; (8003d00 <_dtoa_r+0x8c8>)
 8003a40:	f7fc fb94 	bl	800016c <__adddf3>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4630      	mov	r0, r6
 8003a4a:	4639      	mov	r1, r7
 8003a4c:	f7fc ffd4 	bl	80009f8 <__aeabi_dcmpgt>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d163      	bne.n	8003b1c <_dtoa_r+0x6e4>
 8003a54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a58:	2000      	movs	r0, #0
 8003a5a:	49a9      	ldr	r1, [pc, #676]	; (8003d00 <_dtoa_r+0x8c8>)
 8003a5c:	f7fc fb84 	bl	8000168 <__aeabi_dsub>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4630      	mov	r0, r6
 8003a66:	4639      	mov	r1, r7
 8003a68:	f7fc ffa8 	bl	80009bc <__aeabi_dcmplt>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	f43f af1d 	beq.w	80038ac <_dtoa_r+0x474>
 8003a72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003a74:	1e7b      	subs	r3, r7, #1
 8003a76:	9314      	str	r3, [sp, #80]	; 0x50
 8003a78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003a7c:	2b30      	cmp	r3, #48	; 0x30
 8003a7e:	d0f8      	beq.n	8003a72 <_dtoa_r+0x63a>
 8003a80:	46c2      	mov	sl, r8
 8003a82:	e03b      	b.n	8003afc <_dtoa_r+0x6c4>
 8003a84:	4b9f      	ldr	r3, [pc, #636]	; (8003d04 <_dtoa_r+0x8cc>)
 8003a86:	f7fc fd27 	bl	80004d8 <__aeabi_dmul>
 8003a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a8e:	e7bc      	b.n	8003a0a <_dtoa_r+0x5d2>
 8003a90:	9f03      	ldr	r7, [sp, #12]
 8003a92:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003a96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	f7fc fe45 	bl	800072c <__aeabi_ddiv>
 8003aa2:	f7fc ffc9 	bl	8000a38 <__aeabi_d2iz>
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	f7fc fcac 	bl	8000404 <__aeabi_i2d>
 8003aac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ab0:	f7fc fd12 	bl	80004d8 <__aeabi_dmul>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4640      	mov	r0, r8
 8003aba:	4649      	mov	r1, r9
 8003abc:	f7fc fb54 	bl	8000168 <__aeabi_dsub>
 8003ac0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003ac4:	f807 6b01 	strb.w	r6, [r7], #1
 8003ac8:	9e03      	ldr	r6, [sp, #12]
 8003aca:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003ace:	1bbe      	subs	r6, r7, r6
 8003ad0:	45b4      	cmp	ip, r6
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	d136      	bne.n	8003b46 <_dtoa_r+0x70e>
 8003ad8:	f7fc fb48 	bl	800016c <__adddf3>
 8003adc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ae0:	4680      	mov	r8, r0
 8003ae2:	4689      	mov	r9, r1
 8003ae4:	f7fc ff88 	bl	80009f8 <__aeabi_dcmpgt>
 8003ae8:	bb58      	cbnz	r0, 8003b42 <_dtoa_r+0x70a>
 8003aea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003aee:	4640      	mov	r0, r8
 8003af0:	4649      	mov	r1, r9
 8003af2:	f7fc ff59 	bl	80009a8 <__aeabi_dcmpeq>
 8003af6:	b108      	cbz	r0, 8003afc <_dtoa_r+0x6c4>
 8003af8:	07e1      	lsls	r1, r4, #31
 8003afa:	d422      	bmi.n	8003b42 <_dtoa_r+0x70a>
 8003afc:	4628      	mov	r0, r5
 8003afe:	4659      	mov	r1, fp
 8003b00:	f000 faf0 	bl	80040e4 <_Bfree>
 8003b04:	2300      	movs	r3, #0
 8003b06:	703b      	strb	r3, [r7, #0]
 8003b08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003b0a:	f10a 0001 	add.w	r0, sl, #1
 8003b0e:	6018      	str	r0, [r3, #0]
 8003b10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f43f acde 	beq.w	80034d4 <_dtoa_r+0x9c>
 8003b18:	601f      	str	r7, [r3, #0]
 8003b1a:	e4db      	b.n	80034d4 <_dtoa_r+0x9c>
 8003b1c:	4627      	mov	r7, r4
 8003b1e:	463b      	mov	r3, r7
 8003b20:	461f      	mov	r7, r3
 8003b22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b26:	2a39      	cmp	r2, #57	; 0x39
 8003b28:	d107      	bne.n	8003b3a <_dtoa_r+0x702>
 8003b2a:	9a03      	ldr	r2, [sp, #12]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1f7      	bne.n	8003b20 <_dtoa_r+0x6e8>
 8003b30:	2230      	movs	r2, #48	; 0x30
 8003b32:	9903      	ldr	r1, [sp, #12]
 8003b34:	f108 0801 	add.w	r8, r8, #1
 8003b38:	700a      	strb	r2, [r1, #0]
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	3201      	adds	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	e79e      	b.n	8003a80 <_dtoa_r+0x648>
 8003b42:	46d0      	mov	r8, sl
 8003b44:	e7eb      	b.n	8003b1e <_dtoa_r+0x6e6>
 8003b46:	2200      	movs	r2, #0
 8003b48:	4b6e      	ldr	r3, [pc, #440]	; (8003d04 <_dtoa_r+0x8cc>)
 8003b4a:	f7fc fcc5 	bl	80004d8 <__aeabi_dmul>
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2300      	movs	r3, #0
 8003b52:	4680      	mov	r8, r0
 8003b54:	4689      	mov	r9, r1
 8003b56:	f7fc ff27 	bl	80009a8 <__aeabi_dcmpeq>
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	d09b      	beq.n	8003a96 <_dtoa_r+0x65e>
 8003b5e:	e7cd      	b.n	8003afc <_dtoa_r+0x6c4>
 8003b60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b62:	2a00      	cmp	r2, #0
 8003b64:	f000 80d0 	beq.w	8003d08 <_dtoa_r+0x8d0>
 8003b68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003b6a:	2a01      	cmp	r2, #1
 8003b6c:	f300 80ae 	bgt.w	8003ccc <_dtoa_r+0x894>
 8003b70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	f000 80a6 	beq.w	8003cc4 <_dtoa_r+0x88c>
 8003b78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003b7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003b7e:	9f06      	ldr	r7, [sp, #24]
 8003b80:	9a06      	ldr	r2, [sp, #24]
 8003b82:	2101      	movs	r1, #1
 8003b84:	441a      	add	r2, r3
 8003b86:	9206      	str	r2, [sp, #24]
 8003b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	441a      	add	r2, r3
 8003b8e:	9209      	str	r2, [sp, #36]	; 0x24
 8003b90:	f000 fb5e 	bl	8004250 <__i2b>
 8003b94:	4606      	mov	r6, r0
 8003b96:	2f00      	cmp	r7, #0
 8003b98:	dd0c      	ble.n	8003bb4 <_dtoa_r+0x77c>
 8003b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	dd09      	ble.n	8003bb4 <_dtoa_r+0x77c>
 8003ba0:	42bb      	cmp	r3, r7
 8003ba2:	bfa8      	it	ge
 8003ba4:	463b      	movge	r3, r7
 8003ba6:	9a06      	ldr	r2, [sp, #24]
 8003ba8:	1aff      	subs	r7, r7, r3
 8003baa:	1ad2      	subs	r2, r2, r3
 8003bac:	9206      	str	r2, [sp, #24]
 8003bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bb6:	b1f3      	cbz	r3, 8003bf6 <_dtoa_r+0x7be>
 8003bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80a8 	beq.w	8003d10 <_dtoa_r+0x8d8>
 8003bc0:	2c00      	cmp	r4, #0
 8003bc2:	dd10      	ble.n	8003be6 <_dtoa_r+0x7ae>
 8003bc4:	4631      	mov	r1, r6
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f000 fbff 	bl	80043cc <__pow5mult>
 8003bce:	465a      	mov	r2, fp
 8003bd0:	4601      	mov	r1, r0
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f000 fb51 	bl	800427c <__multiply>
 8003bda:	4680      	mov	r8, r0
 8003bdc:	4659      	mov	r1, fp
 8003bde:	4628      	mov	r0, r5
 8003be0:	f000 fa80 	bl	80040e4 <_Bfree>
 8003be4:	46c3      	mov	fp, r8
 8003be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003be8:	1b1a      	subs	r2, r3, r4
 8003bea:	d004      	beq.n	8003bf6 <_dtoa_r+0x7be>
 8003bec:	4659      	mov	r1, fp
 8003bee:	4628      	mov	r0, r5
 8003bf0:	f000 fbec 	bl	80043cc <__pow5mult>
 8003bf4:	4683      	mov	fp, r0
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	f000 fb29 	bl	8004250 <__i2b>
 8003bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c00:	4604      	mov	r4, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f340 8086 	ble.w	8003d14 <_dtoa_r+0x8dc>
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f000 fbdd 	bl	80043cc <__pow5mult>
 8003c12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c14:	4604      	mov	r4, r0
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	dd7f      	ble.n	8003d1a <_dtoa_r+0x8e2>
 8003c1a:	f04f 0800 	mov.w	r8, #0
 8003c1e:	6923      	ldr	r3, [r4, #16]
 8003c20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003c24:	6918      	ldr	r0, [r3, #16]
 8003c26:	f000 fac5 	bl	80041b4 <__hi0bits>
 8003c2a:	f1c0 0020 	rsb	r0, r0, #32
 8003c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c30:	4418      	add	r0, r3
 8003c32:	f010 001f 	ands.w	r0, r0, #31
 8003c36:	f000 8092 	beq.w	8003d5e <_dtoa_r+0x926>
 8003c3a:	f1c0 0320 	rsb	r3, r0, #32
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	f340 808a 	ble.w	8003d58 <_dtoa_r+0x920>
 8003c44:	f1c0 001c 	rsb	r0, r0, #28
 8003c48:	9b06      	ldr	r3, [sp, #24]
 8003c4a:	4407      	add	r7, r0
 8003c4c:	4403      	add	r3, r0
 8003c4e:	9306      	str	r3, [sp, #24]
 8003c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c52:	4403      	add	r3, r0
 8003c54:	9309      	str	r3, [sp, #36]	; 0x24
 8003c56:	9b06      	ldr	r3, [sp, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	dd05      	ble.n	8003c68 <_dtoa_r+0x830>
 8003c5c:	4659      	mov	r1, fp
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4628      	mov	r0, r5
 8003c62:	f000 fc0d 	bl	8004480 <__lshift>
 8003c66:	4683      	mov	fp, r0
 8003c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	dd05      	ble.n	8003c7a <_dtoa_r+0x842>
 8003c6e:	4621      	mov	r1, r4
 8003c70:	461a      	mov	r2, r3
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 fc04 	bl	8004480 <__lshift>
 8003c78:	4604      	mov	r4, r0
 8003c7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d070      	beq.n	8003d62 <_dtoa_r+0x92a>
 8003c80:	4621      	mov	r1, r4
 8003c82:	4658      	mov	r0, fp
 8003c84:	f000 fc6c 	bl	8004560 <__mcmp>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	da6a      	bge.n	8003d62 <_dtoa_r+0x92a>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4659      	mov	r1, fp
 8003c90:	220a      	movs	r2, #10
 8003c92:	4628      	mov	r0, r5
 8003c94:	f000 fa48 	bl	8004128 <__multadd>
 8003c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c9a:	4683      	mov	fp, r0
 8003c9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 8194 	beq.w	8003fce <_dtoa_r+0xb96>
 8003ca6:	4631      	mov	r1, r6
 8003ca8:	2300      	movs	r3, #0
 8003caa:	220a      	movs	r2, #10
 8003cac:	4628      	mov	r0, r5
 8003cae:	f000 fa3b 	bl	8004128 <__multadd>
 8003cb2:	f1b9 0f00 	cmp.w	r9, #0
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	f300 8093 	bgt.w	8003de2 <_dtoa_r+0x9aa>
 8003cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	dc57      	bgt.n	8003d72 <_dtoa_r+0x93a>
 8003cc2:	e08e      	b.n	8003de2 <_dtoa_r+0x9aa>
 8003cc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003cc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003cca:	e757      	b.n	8003b7c <_dtoa_r+0x744>
 8003ccc:	9b08      	ldr	r3, [sp, #32]
 8003cce:	1e5c      	subs	r4, r3, #1
 8003cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cd2:	42a3      	cmp	r3, r4
 8003cd4:	bfb7      	itett	lt
 8003cd6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003cd8:	1b1c      	subge	r4, r3, r4
 8003cda:	1ae2      	sublt	r2, r4, r3
 8003cdc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003cde:	bfbe      	ittt	lt
 8003ce0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003ce2:	189b      	addlt	r3, r3, r2
 8003ce4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003ce6:	9b08      	ldr	r3, [sp, #32]
 8003ce8:	bfb8      	it	lt
 8003cea:	2400      	movlt	r4, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bfbb      	ittet	lt
 8003cf0:	9b06      	ldrlt	r3, [sp, #24]
 8003cf2:	9a08      	ldrlt	r2, [sp, #32]
 8003cf4:	9f06      	ldrge	r7, [sp, #24]
 8003cf6:	1a9f      	sublt	r7, r3, r2
 8003cf8:	bfac      	ite	ge
 8003cfa:	9b08      	ldrge	r3, [sp, #32]
 8003cfc:	2300      	movlt	r3, #0
 8003cfe:	e73f      	b.n	8003b80 <_dtoa_r+0x748>
 8003d00:	3fe00000 	.word	0x3fe00000
 8003d04:	40240000 	.word	0x40240000
 8003d08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003d0a:	9f06      	ldr	r7, [sp, #24]
 8003d0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003d0e:	e742      	b.n	8003b96 <_dtoa_r+0x75e>
 8003d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d12:	e76b      	b.n	8003bec <_dtoa_r+0x7b4>
 8003d14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	dc19      	bgt.n	8003d4e <_dtoa_r+0x916>
 8003d1a:	9b04      	ldr	r3, [sp, #16]
 8003d1c:	b9bb      	cbnz	r3, 8003d4e <_dtoa_r+0x916>
 8003d1e:	9b05      	ldr	r3, [sp, #20]
 8003d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d24:	b99b      	cbnz	r3, 8003d4e <_dtoa_r+0x916>
 8003d26:	9b05      	ldr	r3, [sp, #20]
 8003d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d2c:	0d1b      	lsrs	r3, r3, #20
 8003d2e:	051b      	lsls	r3, r3, #20
 8003d30:	b183      	cbz	r3, 8003d54 <_dtoa_r+0x91c>
 8003d32:	f04f 0801 	mov.w	r8, #1
 8003d36:	9b06      	ldr	r3, [sp, #24]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	9306      	str	r3, [sp, #24]
 8003d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d3e:	3301      	adds	r3, #1
 8003d40:	9309      	str	r3, [sp, #36]	; 0x24
 8003d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f47f af6a 	bne.w	8003c1e <_dtoa_r+0x7e6>
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	e76f      	b.n	8003c2e <_dtoa_r+0x7f6>
 8003d4e:	f04f 0800 	mov.w	r8, #0
 8003d52:	e7f6      	b.n	8003d42 <_dtoa_r+0x90a>
 8003d54:	4698      	mov	r8, r3
 8003d56:	e7f4      	b.n	8003d42 <_dtoa_r+0x90a>
 8003d58:	f43f af7d 	beq.w	8003c56 <_dtoa_r+0x81e>
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	301c      	adds	r0, #28
 8003d60:	e772      	b.n	8003c48 <_dtoa_r+0x810>
 8003d62:	9b08      	ldr	r3, [sp, #32]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	dc36      	bgt.n	8003dd6 <_dtoa_r+0x99e>
 8003d68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	dd33      	ble.n	8003dd6 <_dtoa_r+0x99e>
 8003d6e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d72:	f1b9 0f00 	cmp.w	r9, #0
 8003d76:	d10d      	bne.n	8003d94 <_dtoa_r+0x95c>
 8003d78:	4621      	mov	r1, r4
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 f9d2 	bl	8004128 <__multadd>
 8003d84:	4601      	mov	r1, r0
 8003d86:	4604      	mov	r4, r0
 8003d88:	4658      	mov	r0, fp
 8003d8a:	f000 fbe9 	bl	8004560 <__mcmp>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	f73f adb8 	bgt.w	8003904 <_dtoa_r+0x4cc>
 8003d94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d96:	9f03      	ldr	r7, [sp, #12]
 8003d98:	ea6f 0a03 	mvn.w	sl, r3
 8003d9c:	f04f 0800 	mov.w	r8, #0
 8003da0:	4621      	mov	r1, r4
 8003da2:	4628      	mov	r0, r5
 8003da4:	f000 f99e 	bl	80040e4 <_Bfree>
 8003da8:	2e00      	cmp	r6, #0
 8003daa:	f43f aea7 	beq.w	8003afc <_dtoa_r+0x6c4>
 8003dae:	f1b8 0f00 	cmp.w	r8, #0
 8003db2:	d005      	beq.n	8003dc0 <_dtoa_r+0x988>
 8003db4:	45b0      	cmp	r8, r6
 8003db6:	d003      	beq.n	8003dc0 <_dtoa_r+0x988>
 8003db8:	4641      	mov	r1, r8
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 f992 	bl	80040e4 <_Bfree>
 8003dc0:	4631      	mov	r1, r6
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 f98e 	bl	80040e4 <_Bfree>
 8003dc8:	e698      	b.n	8003afc <_dtoa_r+0x6c4>
 8003dca:	2400      	movs	r4, #0
 8003dcc:	4626      	mov	r6, r4
 8003dce:	e7e1      	b.n	8003d94 <_dtoa_r+0x95c>
 8003dd0:	46c2      	mov	sl, r8
 8003dd2:	4626      	mov	r6, r4
 8003dd4:	e596      	b.n	8003904 <_dtoa_r+0x4cc>
 8003dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80fd 	beq.w	8003fdc <_dtoa_r+0xba4>
 8003de2:	2f00      	cmp	r7, #0
 8003de4:	dd05      	ble.n	8003df2 <_dtoa_r+0x9ba>
 8003de6:	4631      	mov	r1, r6
 8003de8:	463a      	mov	r2, r7
 8003dea:	4628      	mov	r0, r5
 8003dec:	f000 fb48 	bl	8004480 <__lshift>
 8003df0:	4606      	mov	r6, r0
 8003df2:	f1b8 0f00 	cmp.w	r8, #0
 8003df6:	d05c      	beq.n	8003eb2 <_dtoa_r+0xa7a>
 8003df8:	4628      	mov	r0, r5
 8003dfa:	6871      	ldr	r1, [r6, #4]
 8003dfc:	f000 f932 	bl	8004064 <_Balloc>
 8003e00:	4607      	mov	r7, r0
 8003e02:	b928      	cbnz	r0, 8003e10 <_dtoa_r+0x9d8>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003e0a:	4b7f      	ldr	r3, [pc, #508]	; (8004008 <_dtoa_r+0xbd0>)
 8003e0c:	f7ff bb28 	b.w	8003460 <_dtoa_r+0x28>
 8003e10:	6932      	ldr	r2, [r6, #16]
 8003e12:	f106 010c 	add.w	r1, r6, #12
 8003e16:	3202      	adds	r2, #2
 8003e18:	0092      	lsls	r2, r2, #2
 8003e1a:	300c      	adds	r0, #12
 8003e1c:	f000 f914 	bl	8004048 <memcpy>
 8003e20:	2201      	movs	r2, #1
 8003e22:	4639      	mov	r1, r7
 8003e24:	4628      	mov	r0, r5
 8003e26:	f000 fb2b 	bl	8004480 <__lshift>
 8003e2a:	46b0      	mov	r8, r6
 8003e2c:	4606      	mov	r6, r0
 8003e2e:	9b03      	ldr	r3, [sp, #12]
 8003e30:	3301      	adds	r3, #1
 8003e32:	9308      	str	r3, [sp, #32]
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	444b      	add	r3, r9
 8003e38:	930a      	str	r3, [sp, #40]	; 0x28
 8003e3a:	9b04      	ldr	r3, [sp, #16]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	9309      	str	r3, [sp, #36]	; 0x24
 8003e42:	9b08      	ldr	r3, [sp, #32]
 8003e44:	4621      	mov	r1, r4
 8003e46:	3b01      	subs	r3, #1
 8003e48:	4658      	mov	r0, fp
 8003e4a:	9304      	str	r3, [sp, #16]
 8003e4c:	f7ff fa66 	bl	800331c <quorem>
 8003e50:	4603      	mov	r3, r0
 8003e52:	4641      	mov	r1, r8
 8003e54:	3330      	adds	r3, #48	; 0x30
 8003e56:	9006      	str	r0, [sp, #24]
 8003e58:	4658      	mov	r0, fp
 8003e5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e5c:	f000 fb80 	bl	8004560 <__mcmp>
 8003e60:	4632      	mov	r2, r6
 8003e62:	4681      	mov	r9, r0
 8003e64:	4621      	mov	r1, r4
 8003e66:	4628      	mov	r0, r5
 8003e68:	f000 fb96 	bl	8004598 <__mdiff>
 8003e6c:	68c2      	ldr	r2, [r0, #12]
 8003e6e:	4607      	mov	r7, r0
 8003e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e72:	bb02      	cbnz	r2, 8003eb6 <_dtoa_r+0xa7e>
 8003e74:	4601      	mov	r1, r0
 8003e76:	4658      	mov	r0, fp
 8003e78:	f000 fb72 	bl	8004560 <__mcmp>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e80:	4639      	mov	r1, r7
 8003e82:	4628      	mov	r0, r5
 8003e84:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003e88:	f000 f92c 	bl	80040e4 <_Bfree>
 8003e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e90:	9f08      	ldr	r7, [sp, #32]
 8003e92:	ea43 0102 	orr.w	r1, r3, r2
 8003e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e9c:	d10d      	bne.n	8003eba <_dtoa_r+0xa82>
 8003e9e:	2b39      	cmp	r3, #57	; 0x39
 8003ea0:	d029      	beq.n	8003ef6 <_dtoa_r+0xabe>
 8003ea2:	f1b9 0f00 	cmp.w	r9, #0
 8003ea6:	dd01      	ble.n	8003eac <_dtoa_r+0xa74>
 8003ea8:	9b06      	ldr	r3, [sp, #24]
 8003eaa:	3331      	adds	r3, #49	; 0x31
 8003eac:	9a04      	ldr	r2, [sp, #16]
 8003eae:	7013      	strb	r3, [r2, #0]
 8003eb0:	e776      	b.n	8003da0 <_dtoa_r+0x968>
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	e7b9      	b.n	8003e2a <_dtoa_r+0x9f2>
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	e7e2      	b.n	8003e80 <_dtoa_r+0xa48>
 8003eba:	f1b9 0f00 	cmp.w	r9, #0
 8003ebe:	db06      	blt.n	8003ece <_dtoa_r+0xa96>
 8003ec0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003ec2:	ea41 0909 	orr.w	r9, r1, r9
 8003ec6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ec8:	ea59 0101 	orrs.w	r1, r9, r1
 8003ecc:	d120      	bne.n	8003f10 <_dtoa_r+0xad8>
 8003ece:	2a00      	cmp	r2, #0
 8003ed0:	ddec      	ble.n	8003eac <_dtoa_r+0xa74>
 8003ed2:	4659      	mov	r1, fp
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	9308      	str	r3, [sp, #32]
 8003eda:	f000 fad1 	bl	8004480 <__lshift>
 8003ede:	4621      	mov	r1, r4
 8003ee0:	4683      	mov	fp, r0
 8003ee2:	f000 fb3d 	bl	8004560 <__mcmp>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	9b08      	ldr	r3, [sp, #32]
 8003eea:	dc02      	bgt.n	8003ef2 <_dtoa_r+0xaba>
 8003eec:	d1de      	bne.n	8003eac <_dtoa_r+0xa74>
 8003eee:	07da      	lsls	r2, r3, #31
 8003ef0:	d5dc      	bpl.n	8003eac <_dtoa_r+0xa74>
 8003ef2:	2b39      	cmp	r3, #57	; 0x39
 8003ef4:	d1d8      	bne.n	8003ea8 <_dtoa_r+0xa70>
 8003ef6:	2339      	movs	r3, #57	; 0x39
 8003ef8:	9a04      	ldr	r2, [sp, #16]
 8003efa:	7013      	strb	r3, [r2, #0]
 8003efc:	463b      	mov	r3, r7
 8003efe:	461f      	mov	r7, r3
 8003f00:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	2a39      	cmp	r2, #57	; 0x39
 8003f08:	d050      	beq.n	8003fac <_dtoa_r+0xb74>
 8003f0a:	3201      	adds	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e747      	b.n	8003da0 <_dtoa_r+0x968>
 8003f10:	2a00      	cmp	r2, #0
 8003f12:	dd03      	ble.n	8003f1c <_dtoa_r+0xae4>
 8003f14:	2b39      	cmp	r3, #57	; 0x39
 8003f16:	d0ee      	beq.n	8003ef6 <_dtoa_r+0xabe>
 8003f18:	3301      	adds	r3, #1
 8003f1a:	e7c7      	b.n	8003eac <_dtoa_r+0xa74>
 8003f1c:	9a08      	ldr	r2, [sp, #32]
 8003f1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f20:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003f24:	428a      	cmp	r2, r1
 8003f26:	d02a      	beq.n	8003f7e <_dtoa_r+0xb46>
 8003f28:	4659      	mov	r1, fp
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	220a      	movs	r2, #10
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f000 f8fa 	bl	8004128 <__multadd>
 8003f34:	45b0      	cmp	r8, r6
 8003f36:	4683      	mov	fp, r0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	f04f 020a 	mov.w	r2, #10
 8003f40:	4641      	mov	r1, r8
 8003f42:	4628      	mov	r0, r5
 8003f44:	d107      	bne.n	8003f56 <_dtoa_r+0xb1e>
 8003f46:	f000 f8ef 	bl	8004128 <__multadd>
 8003f4a:	4680      	mov	r8, r0
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	9b08      	ldr	r3, [sp, #32]
 8003f50:	3301      	adds	r3, #1
 8003f52:	9308      	str	r3, [sp, #32]
 8003f54:	e775      	b.n	8003e42 <_dtoa_r+0xa0a>
 8003f56:	f000 f8e7 	bl	8004128 <__multadd>
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4680      	mov	r8, r0
 8003f5e:	2300      	movs	r3, #0
 8003f60:	220a      	movs	r2, #10
 8003f62:	4628      	mov	r0, r5
 8003f64:	f000 f8e0 	bl	8004128 <__multadd>
 8003f68:	4606      	mov	r6, r0
 8003f6a:	e7f0      	b.n	8003f4e <_dtoa_r+0xb16>
 8003f6c:	f1b9 0f00 	cmp.w	r9, #0
 8003f70:	bfcc      	ite	gt
 8003f72:	464f      	movgt	r7, r9
 8003f74:	2701      	movle	r7, #1
 8003f76:	f04f 0800 	mov.w	r8, #0
 8003f7a:	9a03      	ldr	r2, [sp, #12]
 8003f7c:	4417      	add	r7, r2
 8003f7e:	4659      	mov	r1, fp
 8003f80:	2201      	movs	r2, #1
 8003f82:	4628      	mov	r0, r5
 8003f84:	9308      	str	r3, [sp, #32]
 8003f86:	f000 fa7b 	bl	8004480 <__lshift>
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4683      	mov	fp, r0
 8003f8e:	f000 fae7 	bl	8004560 <__mcmp>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	dcb2      	bgt.n	8003efc <_dtoa_r+0xac4>
 8003f96:	d102      	bne.n	8003f9e <_dtoa_r+0xb66>
 8003f98:	9b08      	ldr	r3, [sp, #32]
 8003f9a:	07db      	lsls	r3, r3, #31
 8003f9c:	d4ae      	bmi.n	8003efc <_dtoa_r+0xac4>
 8003f9e:	463b      	mov	r3, r7
 8003fa0:	461f      	mov	r7, r3
 8003fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003fa6:	2a30      	cmp	r2, #48	; 0x30
 8003fa8:	d0fa      	beq.n	8003fa0 <_dtoa_r+0xb68>
 8003faa:	e6f9      	b.n	8003da0 <_dtoa_r+0x968>
 8003fac:	9a03      	ldr	r2, [sp, #12]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d1a5      	bne.n	8003efe <_dtoa_r+0xac6>
 8003fb2:	2331      	movs	r3, #49	; 0x31
 8003fb4:	f10a 0a01 	add.w	sl, sl, #1
 8003fb8:	e779      	b.n	8003eae <_dtoa_r+0xa76>
 8003fba:	4b14      	ldr	r3, [pc, #80]	; (800400c <_dtoa_r+0xbd4>)
 8003fbc:	f7ff baa8 	b.w	8003510 <_dtoa_r+0xd8>
 8003fc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f47f aa81 	bne.w	80034ca <_dtoa_r+0x92>
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <_dtoa_r+0xbd8>)
 8003fca:	f7ff baa1 	b.w	8003510 <_dtoa_r+0xd8>
 8003fce:	f1b9 0f00 	cmp.w	r9, #0
 8003fd2:	dc03      	bgt.n	8003fdc <_dtoa_r+0xba4>
 8003fd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	f73f aecb 	bgt.w	8003d72 <_dtoa_r+0x93a>
 8003fdc:	9f03      	ldr	r7, [sp, #12]
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4658      	mov	r0, fp
 8003fe2:	f7ff f99b 	bl	800331c <quorem>
 8003fe6:	9a03      	ldr	r2, [sp, #12]
 8003fe8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003fec:	f807 3b01 	strb.w	r3, [r7], #1
 8003ff0:	1aba      	subs	r2, r7, r2
 8003ff2:	4591      	cmp	r9, r2
 8003ff4:	ddba      	ble.n	8003f6c <_dtoa_r+0xb34>
 8003ff6:	4659      	mov	r1, fp
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	220a      	movs	r2, #10
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f000 f893 	bl	8004128 <__multadd>
 8004002:	4683      	mov	fp, r0
 8004004:	e7eb      	b.n	8003fde <_dtoa_r+0xba6>
 8004006:	bf00      	nop
 8004008:	080058ef 	.word	0x080058ef
 800400c:	0800584c 	.word	0x0800584c
 8004010:	08005870 	.word	0x08005870

08004014 <_localeconv_r>:
 8004014:	4800      	ldr	r0, [pc, #0]	; (8004018 <_localeconv_r+0x4>)
 8004016:	4770      	bx	lr
 8004018:	20000160 	.word	0x20000160

0800401c <malloc>:
 800401c:	4b02      	ldr	r3, [pc, #8]	; (8004028 <malloc+0xc>)
 800401e:	4601      	mov	r1, r0
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	f000 bc1d 	b.w	8004860 <_malloc_r>
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c

0800402c <memchr>:
 800402c:	4603      	mov	r3, r0
 800402e:	b510      	push	{r4, lr}
 8004030:	b2c9      	uxtb	r1, r1
 8004032:	4402      	add	r2, r0
 8004034:	4293      	cmp	r3, r2
 8004036:	4618      	mov	r0, r3
 8004038:	d101      	bne.n	800403e <memchr+0x12>
 800403a:	2000      	movs	r0, #0
 800403c:	e003      	b.n	8004046 <memchr+0x1a>
 800403e:	7804      	ldrb	r4, [r0, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	428c      	cmp	r4, r1
 8004044:	d1f6      	bne.n	8004034 <memchr+0x8>
 8004046:	bd10      	pop	{r4, pc}

08004048 <memcpy>:
 8004048:	440a      	add	r2, r1
 800404a:	4291      	cmp	r1, r2
 800404c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004050:	d100      	bne.n	8004054 <memcpy+0xc>
 8004052:	4770      	bx	lr
 8004054:	b510      	push	{r4, lr}
 8004056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800405a:	4291      	cmp	r1, r2
 800405c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004060:	d1f9      	bne.n	8004056 <memcpy+0xe>
 8004062:	bd10      	pop	{r4, pc}

08004064 <_Balloc>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004068:	4604      	mov	r4, r0
 800406a:	460d      	mov	r5, r1
 800406c:	b976      	cbnz	r6, 800408c <_Balloc+0x28>
 800406e:	2010      	movs	r0, #16
 8004070:	f7ff ffd4 	bl	800401c <malloc>
 8004074:	4602      	mov	r2, r0
 8004076:	6260      	str	r0, [r4, #36]	; 0x24
 8004078:	b920      	cbnz	r0, 8004084 <_Balloc+0x20>
 800407a:	2166      	movs	r1, #102	; 0x66
 800407c:	4b17      	ldr	r3, [pc, #92]	; (80040dc <_Balloc+0x78>)
 800407e:	4818      	ldr	r0, [pc, #96]	; (80040e0 <_Balloc+0x7c>)
 8004080:	f000 fdce 	bl	8004c20 <__assert_func>
 8004084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004088:	6006      	str	r6, [r0, #0]
 800408a:	60c6      	str	r6, [r0, #12]
 800408c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800408e:	68f3      	ldr	r3, [r6, #12]
 8004090:	b183      	cbz	r3, 80040b4 <_Balloc+0x50>
 8004092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800409a:	b9b8      	cbnz	r0, 80040cc <_Balloc+0x68>
 800409c:	2101      	movs	r1, #1
 800409e:	fa01 f605 	lsl.w	r6, r1, r5
 80040a2:	1d72      	adds	r2, r6, #5
 80040a4:	4620      	mov	r0, r4
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	f000 fb5e 	bl	8004768 <_calloc_r>
 80040ac:	b160      	cbz	r0, 80040c8 <_Balloc+0x64>
 80040ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80040b2:	e00e      	b.n	80040d2 <_Balloc+0x6e>
 80040b4:	2221      	movs	r2, #33	; 0x21
 80040b6:	2104      	movs	r1, #4
 80040b8:	4620      	mov	r0, r4
 80040ba:	f000 fb55 	bl	8004768 <_calloc_r>
 80040be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c0:	60f0      	str	r0, [r6, #12]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e4      	bne.n	8004092 <_Balloc+0x2e>
 80040c8:	2000      	movs	r0, #0
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	6802      	ldr	r2, [r0, #0]
 80040ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80040d2:	2300      	movs	r3, #0
 80040d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80040d8:	e7f7      	b.n	80040ca <_Balloc+0x66>
 80040da:	bf00      	nop
 80040dc:	0800587d 	.word	0x0800587d
 80040e0:	08005900 	.word	0x08005900

080040e4 <_Bfree>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80040e8:	4605      	mov	r5, r0
 80040ea:	460c      	mov	r4, r1
 80040ec:	b976      	cbnz	r6, 800410c <_Bfree+0x28>
 80040ee:	2010      	movs	r0, #16
 80040f0:	f7ff ff94 	bl	800401c <malloc>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6268      	str	r0, [r5, #36]	; 0x24
 80040f8:	b920      	cbnz	r0, 8004104 <_Bfree+0x20>
 80040fa:	218a      	movs	r1, #138	; 0x8a
 80040fc:	4b08      	ldr	r3, [pc, #32]	; (8004120 <_Bfree+0x3c>)
 80040fe:	4809      	ldr	r0, [pc, #36]	; (8004124 <_Bfree+0x40>)
 8004100:	f000 fd8e 	bl	8004c20 <__assert_func>
 8004104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004108:	6006      	str	r6, [r0, #0]
 800410a:	60c6      	str	r6, [r0, #12]
 800410c:	b13c      	cbz	r4, 800411e <_Bfree+0x3a>
 800410e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004110:	6862      	ldr	r2, [r4, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004118:	6021      	str	r1, [r4, #0]
 800411a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	0800587d 	.word	0x0800587d
 8004124:	08005900 	.word	0x08005900

08004128 <__multadd>:
 8004128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800412c:	4607      	mov	r7, r0
 800412e:	460c      	mov	r4, r1
 8004130:	461e      	mov	r6, r3
 8004132:	2000      	movs	r0, #0
 8004134:	690d      	ldr	r5, [r1, #16]
 8004136:	f101 0c14 	add.w	ip, r1, #20
 800413a:	f8dc 3000 	ldr.w	r3, [ip]
 800413e:	3001      	adds	r0, #1
 8004140:	b299      	uxth	r1, r3
 8004142:	fb02 6101 	mla	r1, r2, r1, r6
 8004146:	0c1e      	lsrs	r6, r3, #16
 8004148:	0c0b      	lsrs	r3, r1, #16
 800414a:	fb02 3306 	mla	r3, r2, r6, r3
 800414e:	b289      	uxth	r1, r1
 8004150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004154:	4285      	cmp	r5, r0
 8004156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800415a:	f84c 1b04 	str.w	r1, [ip], #4
 800415e:	dcec      	bgt.n	800413a <__multadd+0x12>
 8004160:	b30e      	cbz	r6, 80041a6 <__multadd+0x7e>
 8004162:	68a3      	ldr	r3, [r4, #8]
 8004164:	42ab      	cmp	r3, r5
 8004166:	dc19      	bgt.n	800419c <__multadd+0x74>
 8004168:	6861      	ldr	r1, [r4, #4]
 800416a:	4638      	mov	r0, r7
 800416c:	3101      	adds	r1, #1
 800416e:	f7ff ff79 	bl	8004064 <_Balloc>
 8004172:	4680      	mov	r8, r0
 8004174:	b928      	cbnz	r0, 8004182 <__multadd+0x5a>
 8004176:	4602      	mov	r2, r0
 8004178:	21b5      	movs	r1, #181	; 0xb5
 800417a:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <__multadd+0x84>)
 800417c:	480c      	ldr	r0, [pc, #48]	; (80041b0 <__multadd+0x88>)
 800417e:	f000 fd4f 	bl	8004c20 <__assert_func>
 8004182:	6922      	ldr	r2, [r4, #16]
 8004184:	f104 010c 	add.w	r1, r4, #12
 8004188:	3202      	adds	r2, #2
 800418a:	0092      	lsls	r2, r2, #2
 800418c:	300c      	adds	r0, #12
 800418e:	f7ff ff5b 	bl	8004048 <memcpy>
 8004192:	4621      	mov	r1, r4
 8004194:	4638      	mov	r0, r7
 8004196:	f7ff ffa5 	bl	80040e4 <_Bfree>
 800419a:	4644      	mov	r4, r8
 800419c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80041a0:	3501      	adds	r5, #1
 80041a2:	615e      	str	r6, [r3, #20]
 80041a4:	6125      	str	r5, [r4, #16]
 80041a6:	4620      	mov	r0, r4
 80041a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ac:	080058ef 	.word	0x080058ef
 80041b0:	08005900 	.word	0x08005900

080041b4 <__hi0bits>:
 80041b4:	0c02      	lsrs	r2, r0, #16
 80041b6:	0412      	lsls	r2, r2, #16
 80041b8:	4603      	mov	r3, r0
 80041ba:	b9ca      	cbnz	r2, 80041f0 <__hi0bits+0x3c>
 80041bc:	0403      	lsls	r3, r0, #16
 80041be:	2010      	movs	r0, #16
 80041c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80041c4:	bf04      	itt	eq
 80041c6:	021b      	lsleq	r3, r3, #8
 80041c8:	3008      	addeq	r0, #8
 80041ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80041ce:	bf04      	itt	eq
 80041d0:	011b      	lsleq	r3, r3, #4
 80041d2:	3004      	addeq	r0, #4
 80041d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80041d8:	bf04      	itt	eq
 80041da:	009b      	lsleq	r3, r3, #2
 80041dc:	3002      	addeq	r0, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	db05      	blt.n	80041ee <__hi0bits+0x3a>
 80041e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80041e6:	f100 0001 	add.w	r0, r0, #1
 80041ea:	bf08      	it	eq
 80041ec:	2020      	moveq	r0, #32
 80041ee:	4770      	bx	lr
 80041f0:	2000      	movs	r0, #0
 80041f2:	e7e5      	b.n	80041c0 <__hi0bits+0xc>

080041f4 <__lo0bits>:
 80041f4:	6803      	ldr	r3, [r0, #0]
 80041f6:	4602      	mov	r2, r0
 80041f8:	f013 0007 	ands.w	r0, r3, #7
 80041fc:	d00b      	beq.n	8004216 <__lo0bits+0x22>
 80041fe:	07d9      	lsls	r1, r3, #31
 8004200:	d421      	bmi.n	8004246 <__lo0bits+0x52>
 8004202:	0798      	lsls	r0, r3, #30
 8004204:	bf49      	itett	mi
 8004206:	085b      	lsrmi	r3, r3, #1
 8004208:	089b      	lsrpl	r3, r3, #2
 800420a:	2001      	movmi	r0, #1
 800420c:	6013      	strmi	r3, [r2, #0]
 800420e:	bf5c      	itt	pl
 8004210:	2002      	movpl	r0, #2
 8004212:	6013      	strpl	r3, [r2, #0]
 8004214:	4770      	bx	lr
 8004216:	b299      	uxth	r1, r3
 8004218:	b909      	cbnz	r1, 800421e <__lo0bits+0x2a>
 800421a:	2010      	movs	r0, #16
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	b2d9      	uxtb	r1, r3
 8004220:	b909      	cbnz	r1, 8004226 <__lo0bits+0x32>
 8004222:	3008      	adds	r0, #8
 8004224:	0a1b      	lsrs	r3, r3, #8
 8004226:	0719      	lsls	r1, r3, #28
 8004228:	bf04      	itt	eq
 800422a:	091b      	lsreq	r3, r3, #4
 800422c:	3004      	addeq	r0, #4
 800422e:	0799      	lsls	r1, r3, #30
 8004230:	bf04      	itt	eq
 8004232:	089b      	lsreq	r3, r3, #2
 8004234:	3002      	addeq	r0, #2
 8004236:	07d9      	lsls	r1, r3, #31
 8004238:	d403      	bmi.n	8004242 <__lo0bits+0x4e>
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	f100 0001 	add.w	r0, r0, #1
 8004240:	d003      	beq.n	800424a <__lo0bits+0x56>
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4770      	bx	lr
 8004246:	2000      	movs	r0, #0
 8004248:	4770      	bx	lr
 800424a:	2020      	movs	r0, #32
 800424c:	4770      	bx	lr
	...

08004250 <__i2b>:
 8004250:	b510      	push	{r4, lr}
 8004252:	460c      	mov	r4, r1
 8004254:	2101      	movs	r1, #1
 8004256:	f7ff ff05 	bl	8004064 <_Balloc>
 800425a:	4602      	mov	r2, r0
 800425c:	b928      	cbnz	r0, 800426a <__i2b+0x1a>
 800425e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004262:	4b04      	ldr	r3, [pc, #16]	; (8004274 <__i2b+0x24>)
 8004264:	4804      	ldr	r0, [pc, #16]	; (8004278 <__i2b+0x28>)
 8004266:	f000 fcdb 	bl	8004c20 <__assert_func>
 800426a:	2301      	movs	r3, #1
 800426c:	6144      	str	r4, [r0, #20]
 800426e:	6103      	str	r3, [r0, #16]
 8004270:	bd10      	pop	{r4, pc}
 8004272:	bf00      	nop
 8004274:	080058ef 	.word	0x080058ef
 8004278:	08005900 	.word	0x08005900

0800427c <__multiply>:
 800427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004280:	4691      	mov	r9, r2
 8004282:	690a      	ldr	r2, [r1, #16]
 8004284:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004288:	460c      	mov	r4, r1
 800428a:	429a      	cmp	r2, r3
 800428c:	bfbe      	ittt	lt
 800428e:	460b      	movlt	r3, r1
 8004290:	464c      	movlt	r4, r9
 8004292:	4699      	movlt	r9, r3
 8004294:	6927      	ldr	r7, [r4, #16]
 8004296:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800429a:	68a3      	ldr	r3, [r4, #8]
 800429c:	6861      	ldr	r1, [r4, #4]
 800429e:	eb07 060a 	add.w	r6, r7, sl
 80042a2:	42b3      	cmp	r3, r6
 80042a4:	b085      	sub	sp, #20
 80042a6:	bfb8      	it	lt
 80042a8:	3101      	addlt	r1, #1
 80042aa:	f7ff fedb 	bl	8004064 <_Balloc>
 80042ae:	b930      	cbnz	r0, 80042be <__multiply+0x42>
 80042b0:	4602      	mov	r2, r0
 80042b2:	f240 115d 	movw	r1, #349	; 0x15d
 80042b6:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <__multiply+0x148>)
 80042b8:	4843      	ldr	r0, [pc, #268]	; (80043c8 <__multiply+0x14c>)
 80042ba:	f000 fcb1 	bl	8004c20 <__assert_func>
 80042be:	f100 0514 	add.w	r5, r0, #20
 80042c2:	462b      	mov	r3, r5
 80042c4:	2200      	movs	r2, #0
 80042c6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80042ca:	4543      	cmp	r3, r8
 80042cc:	d321      	bcc.n	8004312 <__multiply+0x96>
 80042ce:	f104 0314 	add.w	r3, r4, #20
 80042d2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80042d6:	f109 0314 	add.w	r3, r9, #20
 80042da:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80042de:	9202      	str	r2, [sp, #8]
 80042e0:	1b3a      	subs	r2, r7, r4
 80042e2:	3a15      	subs	r2, #21
 80042e4:	f022 0203 	bic.w	r2, r2, #3
 80042e8:	3204      	adds	r2, #4
 80042ea:	f104 0115 	add.w	r1, r4, #21
 80042ee:	428f      	cmp	r7, r1
 80042f0:	bf38      	it	cc
 80042f2:	2204      	movcc	r2, #4
 80042f4:	9201      	str	r2, [sp, #4]
 80042f6:	9a02      	ldr	r2, [sp, #8]
 80042f8:	9303      	str	r3, [sp, #12]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d80c      	bhi.n	8004318 <__multiply+0x9c>
 80042fe:	2e00      	cmp	r6, #0
 8004300:	dd03      	ble.n	800430a <__multiply+0x8e>
 8004302:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004306:	2b00      	cmp	r3, #0
 8004308:	d059      	beq.n	80043be <__multiply+0x142>
 800430a:	6106      	str	r6, [r0, #16]
 800430c:	b005      	add	sp, #20
 800430e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004312:	f843 2b04 	str.w	r2, [r3], #4
 8004316:	e7d8      	b.n	80042ca <__multiply+0x4e>
 8004318:	f8b3 a000 	ldrh.w	sl, [r3]
 800431c:	f1ba 0f00 	cmp.w	sl, #0
 8004320:	d023      	beq.n	800436a <__multiply+0xee>
 8004322:	46a9      	mov	r9, r5
 8004324:	f04f 0c00 	mov.w	ip, #0
 8004328:	f104 0e14 	add.w	lr, r4, #20
 800432c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004330:	f8d9 1000 	ldr.w	r1, [r9]
 8004334:	fa1f fb82 	uxth.w	fp, r2
 8004338:	b289      	uxth	r1, r1
 800433a:	fb0a 110b 	mla	r1, sl, fp, r1
 800433e:	4461      	add	r1, ip
 8004340:	f8d9 c000 	ldr.w	ip, [r9]
 8004344:	0c12      	lsrs	r2, r2, #16
 8004346:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800434a:	fb0a c202 	mla	r2, sl, r2, ip
 800434e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004352:	b289      	uxth	r1, r1
 8004354:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004358:	4577      	cmp	r7, lr
 800435a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800435e:	f849 1b04 	str.w	r1, [r9], #4
 8004362:	d8e3      	bhi.n	800432c <__multiply+0xb0>
 8004364:	9a01      	ldr	r2, [sp, #4]
 8004366:	f845 c002 	str.w	ip, [r5, r2]
 800436a:	9a03      	ldr	r2, [sp, #12]
 800436c:	3304      	adds	r3, #4
 800436e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004372:	f1b9 0f00 	cmp.w	r9, #0
 8004376:	d020      	beq.n	80043ba <__multiply+0x13e>
 8004378:	46ae      	mov	lr, r5
 800437a:	f04f 0a00 	mov.w	sl, #0
 800437e:	6829      	ldr	r1, [r5, #0]
 8004380:	f104 0c14 	add.w	ip, r4, #20
 8004384:	f8bc b000 	ldrh.w	fp, [ip]
 8004388:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800438c:	b289      	uxth	r1, r1
 800438e:	fb09 220b 	mla	r2, r9, fp, r2
 8004392:	4492      	add	sl, r2
 8004394:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004398:	f84e 1b04 	str.w	r1, [lr], #4
 800439c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80043a0:	f8be 1000 	ldrh.w	r1, [lr]
 80043a4:	0c12      	lsrs	r2, r2, #16
 80043a6:	fb09 1102 	mla	r1, r9, r2, r1
 80043aa:	4567      	cmp	r7, ip
 80043ac:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80043b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80043b4:	d8e6      	bhi.n	8004384 <__multiply+0x108>
 80043b6:	9a01      	ldr	r2, [sp, #4]
 80043b8:	50a9      	str	r1, [r5, r2]
 80043ba:	3504      	adds	r5, #4
 80043bc:	e79b      	b.n	80042f6 <__multiply+0x7a>
 80043be:	3e01      	subs	r6, #1
 80043c0:	e79d      	b.n	80042fe <__multiply+0x82>
 80043c2:	bf00      	nop
 80043c4:	080058ef 	.word	0x080058ef
 80043c8:	08005900 	.word	0x08005900

080043cc <__pow5mult>:
 80043cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d0:	4615      	mov	r5, r2
 80043d2:	f012 0203 	ands.w	r2, r2, #3
 80043d6:	4606      	mov	r6, r0
 80043d8:	460f      	mov	r7, r1
 80043da:	d007      	beq.n	80043ec <__pow5mult+0x20>
 80043dc:	4c25      	ldr	r4, [pc, #148]	; (8004474 <__pow5mult+0xa8>)
 80043de:	3a01      	subs	r2, #1
 80043e0:	2300      	movs	r3, #0
 80043e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80043e6:	f7ff fe9f 	bl	8004128 <__multadd>
 80043ea:	4607      	mov	r7, r0
 80043ec:	10ad      	asrs	r5, r5, #2
 80043ee:	d03d      	beq.n	800446c <__pow5mult+0xa0>
 80043f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80043f2:	b97c      	cbnz	r4, 8004414 <__pow5mult+0x48>
 80043f4:	2010      	movs	r0, #16
 80043f6:	f7ff fe11 	bl	800401c <malloc>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6270      	str	r0, [r6, #36]	; 0x24
 80043fe:	b928      	cbnz	r0, 800440c <__pow5mult+0x40>
 8004400:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004404:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <__pow5mult+0xac>)
 8004406:	481d      	ldr	r0, [pc, #116]	; (800447c <__pow5mult+0xb0>)
 8004408:	f000 fc0a 	bl	8004c20 <__assert_func>
 800440c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004410:	6004      	str	r4, [r0, #0]
 8004412:	60c4      	str	r4, [r0, #12]
 8004414:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800441c:	b94c      	cbnz	r4, 8004432 <__pow5mult+0x66>
 800441e:	f240 2171 	movw	r1, #625	; 0x271
 8004422:	4630      	mov	r0, r6
 8004424:	f7ff ff14 	bl	8004250 <__i2b>
 8004428:	2300      	movs	r3, #0
 800442a:	4604      	mov	r4, r0
 800442c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004430:	6003      	str	r3, [r0, #0]
 8004432:	f04f 0900 	mov.w	r9, #0
 8004436:	07eb      	lsls	r3, r5, #31
 8004438:	d50a      	bpl.n	8004450 <__pow5mult+0x84>
 800443a:	4639      	mov	r1, r7
 800443c:	4622      	mov	r2, r4
 800443e:	4630      	mov	r0, r6
 8004440:	f7ff ff1c 	bl	800427c <__multiply>
 8004444:	4680      	mov	r8, r0
 8004446:	4639      	mov	r1, r7
 8004448:	4630      	mov	r0, r6
 800444a:	f7ff fe4b 	bl	80040e4 <_Bfree>
 800444e:	4647      	mov	r7, r8
 8004450:	106d      	asrs	r5, r5, #1
 8004452:	d00b      	beq.n	800446c <__pow5mult+0xa0>
 8004454:	6820      	ldr	r0, [r4, #0]
 8004456:	b938      	cbnz	r0, 8004468 <__pow5mult+0x9c>
 8004458:	4622      	mov	r2, r4
 800445a:	4621      	mov	r1, r4
 800445c:	4630      	mov	r0, r6
 800445e:	f7ff ff0d 	bl	800427c <__multiply>
 8004462:	6020      	str	r0, [r4, #0]
 8004464:	f8c0 9000 	str.w	r9, [r0]
 8004468:	4604      	mov	r4, r0
 800446a:	e7e4      	b.n	8004436 <__pow5mult+0x6a>
 800446c:	4638      	mov	r0, r7
 800446e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004472:	bf00      	nop
 8004474:	08005a50 	.word	0x08005a50
 8004478:	0800587d 	.word	0x0800587d
 800447c:	08005900 	.word	0x08005900

08004480 <__lshift>:
 8004480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	460c      	mov	r4, r1
 8004486:	4607      	mov	r7, r0
 8004488:	4691      	mov	r9, r2
 800448a:	6923      	ldr	r3, [r4, #16]
 800448c:	6849      	ldr	r1, [r1, #4]
 800448e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004492:	68a3      	ldr	r3, [r4, #8]
 8004494:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004498:	f108 0601 	add.w	r6, r8, #1
 800449c:	42b3      	cmp	r3, r6
 800449e:	db0b      	blt.n	80044b8 <__lshift+0x38>
 80044a0:	4638      	mov	r0, r7
 80044a2:	f7ff fddf 	bl	8004064 <_Balloc>
 80044a6:	4605      	mov	r5, r0
 80044a8:	b948      	cbnz	r0, 80044be <__lshift+0x3e>
 80044aa:	4602      	mov	r2, r0
 80044ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <__lshift+0xd8>)
 80044b2:	482a      	ldr	r0, [pc, #168]	; (800455c <__lshift+0xdc>)
 80044b4:	f000 fbb4 	bl	8004c20 <__assert_func>
 80044b8:	3101      	adds	r1, #1
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	e7ee      	b.n	800449c <__lshift+0x1c>
 80044be:	2300      	movs	r3, #0
 80044c0:	f100 0114 	add.w	r1, r0, #20
 80044c4:	f100 0210 	add.w	r2, r0, #16
 80044c8:	4618      	mov	r0, r3
 80044ca:	4553      	cmp	r3, sl
 80044cc:	db37      	blt.n	800453e <__lshift+0xbe>
 80044ce:	6920      	ldr	r0, [r4, #16]
 80044d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80044d4:	f104 0314 	add.w	r3, r4, #20
 80044d8:	f019 091f 	ands.w	r9, r9, #31
 80044dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80044e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80044e4:	d02f      	beq.n	8004546 <__lshift+0xc6>
 80044e6:	468a      	mov	sl, r1
 80044e8:	f04f 0c00 	mov.w	ip, #0
 80044ec:	f1c9 0e20 	rsb	lr, r9, #32
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	fa02 f209 	lsl.w	r2, r2, r9
 80044f6:	ea42 020c 	orr.w	r2, r2, ip
 80044fa:	f84a 2b04 	str.w	r2, [sl], #4
 80044fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004502:	4298      	cmp	r0, r3
 8004504:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004508:	d8f2      	bhi.n	80044f0 <__lshift+0x70>
 800450a:	1b03      	subs	r3, r0, r4
 800450c:	3b15      	subs	r3, #21
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	3304      	adds	r3, #4
 8004514:	f104 0215 	add.w	r2, r4, #21
 8004518:	4290      	cmp	r0, r2
 800451a:	bf38      	it	cc
 800451c:	2304      	movcc	r3, #4
 800451e:	f841 c003 	str.w	ip, [r1, r3]
 8004522:	f1bc 0f00 	cmp.w	ip, #0
 8004526:	d001      	beq.n	800452c <__lshift+0xac>
 8004528:	f108 0602 	add.w	r6, r8, #2
 800452c:	3e01      	subs	r6, #1
 800452e:	4638      	mov	r0, r7
 8004530:	4621      	mov	r1, r4
 8004532:	612e      	str	r6, [r5, #16]
 8004534:	f7ff fdd6 	bl	80040e4 <_Bfree>
 8004538:	4628      	mov	r0, r5
 800453a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004542:	3301      	adds	r3, #1
 8004544:	e7c1      	b.n	80044ca <__lshift+0x4a>
 8004546:	3904      	subs	r1, #4
 8004548:	f853 2b04 	ldr.w	r2, [r3], #4
 800454c:	4298      	cmp	r0, r3
 800454e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004552:	d8f9      	bhi.n	8004548 <__lshift+0xc8>
 8004554:	e7ea      	b.n	800452c <__lshift+0xac>
 8004556:	bf00      	nop
 8004558:	080058ef 	.word	0x080058ef
 800455c:	08005900 	.word	0x08005900

08004560 <__mcmp>:
 8004560:	4603      	mov	r3, r0
 8004562:	690a      	ldr	r2, [r1, #16]
 8004564:	6900      	ldr	r0, [r0, #16]
 8004566:	b530      	push	{r4, r5, lr}
 8004568:	1a80      	subs	r0, r0, r2
 800456a:	d10d      	bne.n	8004588 <__mcmp+0x28>
 800456c:	3314      	adds	r3, #20
 800456e:	3114      	adds	r1, #20
 8004570:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004574:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800457c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004580:	4295      	cmp	r5, r2
 8004582:	d002      	beq.n	800458a <__mcmp+0x2a>
 8004584:	d304      	bcc.n	8004590 <__mcmp+0x30>
 8004586:	2001      	movs	r0, #1
 8004588:	bd30      	pop	{r4, r5, pc}
 800458a:	42a3      	cmp	r3, r4
 800458c:	d3f4      	bcc.n	8004578 <__mcmp+0x18>
 800458e:	e7fb      	b.n	8004588 <__mcmp+0x28>
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	e7f8      	b.n	8004588 <__mcmp+0x28>
	...

08004598 <__mdiff>:
 8004598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	460d      	mov	r5, r1
 800459e:	4607      	mov	r7, r0
 80045a0:	4611      	mov	r1, r2
 80045a2:	4628      	mov	r0, r5
 80045a4:	4614      	mov	r4, r2
 80045a6:	f7ff ffdb 	bl	8004560 <__mcmp>
 80045aa:	1e06      	subs	r6, r0, #0
 80045ac:	d111      	bne.n	80045d2 <__mdiff+0x3a>
 80045ae:	4631      	mov	r1, r6
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7ff fd57 	bl	8004064 <_Balloc>
 80045b6:	4602      	mov	r2, r0
 80045b8:	b928      	cbnz	r0, 80045c6 <__mdiff+0x2e>
 80045ba:	f240 2132 	movw	r1, #562	; 0x232
 80045be:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <__mdiff+0x110>)
 80045c0:	483a      	ldr	r0, [pc, #232]	; (80046ac <__mdiff+0x114>)
 80045c2:	f000 fb2d 	bl	8004c20 <__assert_func>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80045cc:	4610      	mov	r0, r2
 80045ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d2:	bfa4      	itt	ge
 80045d4:	4623      	movge	r3, r4
 80045d6:	462c      	movge	r4, r5
 80045d8:	4638      	mov	r0, r7
 80045da:	6861      	ldr	r1, [r4, #4]
 80045dc:	bfa6      	itte	ge
 80045de:	461d      	movge	r5, r3
 80045e0:	2600      	movge	r6, #0
 80045e2:	2601      	movlt	r6, #1
 80045e4:	f7ff fd3e 	bl	8004064 <_Balloc>
 80045e8:	4602      	mov	r2, r0
 80045ea:	b918      	cbnz	r0, 80045f4 <__mdiff+0x5c>
 80045ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 80045f0:	4b2d      	ldr	r3, [pc, #180]	; (80046a8 <__mdiff+0x110>)
 80045f2:	e7e5      	b.n	80045c0 <__mdiff+0x28>
 80045f4:	f102 0814 	add.w	r8, r2, #20
 80045f8:	46c2      	mov	sl, r8
 80045fa:	f04f 0c00 	mov.w	ip, #0
 80045fe:	6927      	ldr	r7, [r4, #16]
 8004600:	60c6      	str	r6, [r0, #12]
 8004602:	692e      	ldr	r6, [r5, #16]
 8004604:	f104 0014 	add.w	r0, r4, #20
 8004608:	f105 0914 	add.w	r9, r5, #20
 800460c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004610:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004614:	3410      	adds	r4, #16
 8004616:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800461a:	f859 3b04 	ldr.w	r3, [r9], #4
 800461e:	fa1f f18b 	uxth.w	r1, fp
 8004622:	448c      	add	ip, r1
 8004624:	b299      	uxth	r1, r3
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	ebac 0101 	sub.w	r1, ip, r1
 800462c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004630:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004634:	b289      	uxth	r1, r1
 8004636:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800463a:	454e      	cmp	r6, r9
 800463c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004640:	f84a 3b04 	str.w	r3, [sl], #4
 8004644:	d8e7      	bhi.n	8004616 <__mdiff+0x7e>
 8004646:	1b73      	subs	r3, r6, r5
 8004648:	3b15      	subs	r3, #21
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	3515      	adds	r5, #21
 8004650:	3304      	adds	r3, #4
 8004652:	42ae      	cmp	r6, r5
 8004654:	bf38      	it	cc
 8004656:	2304      	movcc	r3, #4
 8004658:	4418      	add	r0, r3
 800465a:	4443      	add	r3, r8
 800465c:	461e      	mov	r6, r3
 800465e:	4605      	mov	r5, r0
 8004660:	4575      	cmp	r5, lr
 8004662:	d30e      	bcc.n	8004682 <__mdiff+0xea>
 8004664:	f10e 0103 	add.w	r1, lr, #3
 8004668:	1a09      	subs	r1, r1, r0
 800466a:	f021 0103 	bic.w	r1, r1, #3
 800466e:	3803      	subs	r0, #3
 8004670:	4586      	cmp	lr, r0
 8004672:	bf38      	it	cc
 8004674:	2100      	movcc	r1, #0
 8004676:	4419      	add	r1, r3
 8004678:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800467c:	b18b      	cbz	r3, 80046a2 <__mdiff+0x10a>
 800467e:	6117      	str	r7, [r2, #16]
 8004680:	e7a4      	b.n	80045cc <__mdiff+0x34>
 8004682:	f855 8b04 	ldr.w	r8, [r5], #4
 8004686:	fa1f f188 	uxth.w	r1, r8
 800468a:	4461      	add	r1, ip
 800468c:	140c      	asrs	r4, r1, #16
 800468e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004692:	b289      	uxth	r1, r1
 8004694:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004698:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800469c:	f846 1b04 	str.w	r1, [r6], #4
 80046a0:	e7de      	b.n	8004660 <__mdiff+0xc8>
 80046a2:	3f01      	subs	r7, #1
 80046a4:	e7e8      	b.n	8004678 <__mdiff+0xe0>
 80046a6:	bf00      	nop
 80046a8:	080058ef 	.word	0x080058ef
 80046ac:	08005900 	.word	0x08005900

080046b0 <__d2b>:
 80046b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80046b4:	2101      	movs	r1, #1
 80046b6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80046ba:	4690      	mov	r8, r2
 80046bc:	461d      	mov	r5, r3
 80046be:	f7ff fcd1 	bl	8004064 <_Balloc>
 80046c2:	4604      	mov	r4, r0
 80046c4:	b930      	cbnz	r0, 80046d4 <__d2b+0x24>
 80046c6:	4602      	mov	r2, r0
 80046c8:	f240 310a 	movw	r1, #778	; 0x30a
 80046cc:	4b24      	ldr	r3, [pc, #144]	; (8004760 <__d2b+0xb0>)
 80046ce:	4825      	ldr	r0, [pc, #148]	; (8004764 <__d2b+0xb4>)
 80046d0:	f000 faa6 	bl	8004c20 <__assert_func>
 80046d4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80046d8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80046dc:	bb2d      	cbnz	r5, 800472a <__d2b+0x7a>
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	f1b8 0300 	subs.w	r3, r8, #0
 80046e4:	d026      	beq.n	8004734 <__d2b+0x84>
 80046e6:	4668      	mov	r0, sp
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	f7ff fd83 	bl	80041f4 <__lo0bits>
 80046ee:	9900      	ldr	r1, [sp, #0]
 80046f0:	b1f0      	cbz	r0, 8004730 <__d2b+0x80>
 80046f2:	9a01      	ldr	r2, [sp, #4]
 80046f4:	f1c0 0320 	rsb	r3, r0, #32
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	430b      	orrs	r3, r1
 80046fe:	40c2      	lsrs	r2, r0
 8004700:	6163      	str	r3, [r4, #20]
 8004702:	9201      	str	r2, [sp, #4]
 8004704:	9b01      	ldr	r3, [sp, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf14      	ite	ne
 800470a:	2102      	movne	r1, #2
 800470c:	2101      	moveq	r1, #1
 800470e:	61a3      	str	r3, [r4, #24]
 8004710:	6121      	str	r1, [r4, #16]
 8004712:	b1c5      	cbz	r5, 8004746 <__d2b+0x96>
 8004714:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004718:	4405      	add	r5, r0
 800471a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800471e:	603d      	str	r5, [r7, #0]
 8004720:	6030      	str	r0, [r6, #0]
 8004722:	4620      	mov	r0, r4
 8004724:	b002      	add	sp, #8
 8004726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800472a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472e:	e7d6      	b.n	80046de <__d2b+0x2e>
 8004730:	6161      	str	r1, [r4, #20]
 8004732:	e7e7      	b.n	8004704 <__d2b+0x54>
 8004734:	a801      	add	r0, sp, #4
 8004736:	f7ff fd5d 	bl	80041f4 <__lo0bits>
 800473a:	2101      	movs	r1, #1
 800473c:	9b01      	ldr	r3, [sp, #4]
 800473e:	6121      	str	r1, [r4, #16]
 8004740:	6163      	str	r3, [r4, #20]
 8004742:	3020      	adds	r0, #32
 8004744:	e7e5      	b.n	8004712 <__d2b+0x62>
 8004746:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800474a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800474e:	6038      	str	r0, [r7, #0]
 8004750:	6918      	ldr	r0, [r3, #16]
 8004752:	f7ff fd2f 	bl	80041b4 <__hi0bits>
 8004756:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800475a:	6031      	str	r1, [r6, #0]
 800475c:	e7e1      	b.n	8004722 <__d2b+0x72>
 800475e:	bf00      	nop
 8004760:	080058ef 	.word	0x080058ef
 8004764:	08005900 	.word	0x08005900

08004768 <_calloc_r>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	fba1 5402 	umull	r5, r4, r1, r2
 800476e:	b934      	cbnz	r4, 800477e <_calloc_r+0x16>
 8004770:	4629      	mov	r1, r5
 8004772:	f000 f875 	bl	8004860 <_malloc_r>
 8004776:	4606      	mov	r6, r0
 8004778:	b928      	cbnz	r0, 8004786 <_calloc_r+0x1e>
 800477a:	4630      	mov	r0, r6
 800477c:	bd70      	pop	{r4, r5, r6, pc}
 800477e:	220c      	movs	r2, #12
 8004780:	2600      	movs	r6, #0
 8004782:	6002      	str	r2, [r0, #0]
 8004784:	e7f9      	b.n	800477a <_calloc_r+0x12>
 8004786:	462a      	mov	r2, r5
 8004788:	4621      	mov	r1, r4
 800478a:	f7fe f93f 	bl	8002a0c <memset>
 800478e:	e7f4      	b.n	800477a <_calloc_r+0x12>

08004790 <_free_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4605      	mov	r5, r0
 8004794:	2900      	cmp	r1, #0
 8004796:	d040      	beq.n	800481a <_free_r+0x8a>
 8004798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800479c:	1f0c      	subs	r4, r1, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bfb8      	it	lt
 80047a2:	18e4      	addlt	r4, r4, r3
 80047a4:	f000 fa98 	bl	8004cd8 <__malloc_lock>
 80047a8:	4a1c      	ldr	r2, [pc, #112]	; (800481c <_free_r+0x8c>)
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	b933      	cbnz	r3, 80047bc <_free_r+0x2c>
 80047ae:	6063      	str	r3, [r4, #4]
 80047b0:	6014      	str	r4, [r2, #0]
 80047b2:	4628      	mov	r0, r5
 80047b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047b8:	f000 ba94 	b.w	8004ce4 <__malloc_unlock>
 80047bc:	42a3      	cmp	r3, r4
 80047be:	d908      	bls.n	80047d2 <_free_r+0x42>
 80047c0:	6820      	ldr	r0, [r4, #0]
 80047c2:	1821      	adds	r1, r4, r0
 80047c4:	428b      	cmp	r3, r1
 80047c6:	bf01      	itttt	eq
 80047c8:	6819      	ldreq	r1, [r3, #0]
 80047ca:	685b      	ldreq	r3, [r3, #4]
 80047cc:	1809      	addeq	r1, r1, r0
 80047ce:	6021      	streq	r1, [r4, #0]
 80047d0:	e7ed      	b.n	80047ae <_free_r+0x1e>
 80047d2:	461a      	mov	r2, r3
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	b10b      	cbz	r3, 80047dc <_free_r+0x4c>
 80047d8:	42a3      	cmp	r3, r4
 80047da:	d9fa      	bls.n	80047d2 <_free_r+0x42>
 80047dc:	6811      	ldr	r1, [r2, #0]
 80047de:	1850      	adds	r0, r2, r1
 80047e0:	42a0      	cmp	r0, r4
 80047e2:	d10b      	bne.n	80047fc <_free_r+0x6c>
 80047e4:	6820      	ldr	r0, [r4, #0]
 80047e6:	4401      	add	r1, r0
 80047e8:	1850      	adds	r0, r2, r1
 80047ea:	4283      	cmp	r3, r0
 80047ec:	6011      	str	r1, [r2, #0]
 80047ee:	d1e0      	bne.n	80047b2 <_free_r+0x22>
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4401      	add	r1, r0
 80047f6:	6011      	str	r1, [r2, #0]
 80047f8:	6053      	str	r3, [r2, #4]
 80047fa:	e7da      	b.n	80047b2 <_free_r+0x22>
 80047fc:	d902      	bls.n	8004804 <_free_r+0x74>
 80047fe:	230c      	movs	r3, #12
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	e7d6      	b.n	80047b2 <_free_r+0x22>
 8004804:	6820      	ldr	r0, [r4, #0]
 8004806:	1821      	adds	r1, r4, r0
 8004808:	428b      	cmp	r3, r1
 800480a:	bf01      	itttt	eq
 800480c:	6819      	ldreq	r1, [r3, #0]
 800480e:	685b      	ldreq	r3, [r3, #4]
 8004810:	1809      	addeq	r1, r1, r0
 8004812:	6021      	streq	r1, [r4, #0]
 8004814:	6063      	str	r3, [r4, #4]
 8004816:	6054      	str	r4, [r2, #4]
 8004818:	e7cb      	b.n	80047b2 <_free_r+0x22>
 800481a:	bd38      	pop	{r3, r4, r5, pc}
 800481c:	20000248 	.word	0x20000248

08004820 <sbrk_aligned>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	4e0e      	ldr	r6, [pc, #56]	; (800485c <sbrk_aligned+0x3c>)
 8004824:	460c      	mov	r4, r1
 8004826:	6831      	ldr	r1, [r6, #0]
 8004828:	4605      	mov	r5, r0
 800482a:	b911      	cbnz	r1, 8004832 <sbrk_aligned+0x12>
 800482c:	f000 f9e8 	bl	8004c00 <_sbrk_r>
 8004830:	6030      	str	r0, [r6, #0]
 8004832:	4621      	mov	r1, r4
 8004834:	4628      	mov	r0, r5
 8004836:	f000 f9e3 	bl	8004c00 <_sbrk_r>
 800483a:	1c43      	adds	r3, r0, #1
 800483c:	d00a      	beq.n	8004854 <sbrk_aligned+0x34>
 800483e:	1cc4      	adds	r4, r0, #3
 8004840:	f024 0403 	bic.w	r4, r4, #3
 8004844:	42a0      	cmp	r0, r4
 8004846:	d007      	beq.n	8004858 <sbrk_aligned+0x38>
 8004848:	1a21      	subs	r1, r4, r0
 800484a:	4628      	mov	r0, r5
 800484c:	f000 f9d8 	bl	8004c00 <_sbrk_r>
 8004850:	3001      	adds	r0, #1
 8004852:	d101      	bne.n	8004858 <sbrk_aligned+0x38>
 8004854:	f04f 34ff 	mov.w	r4, #4294967295
 8004858:	4620      	mov	r0, r4
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	2000024c 	.word	0x2000024c

08004860 <_malloc_r>:
 8004860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004864:	1ccd      	adds	r5, r1, #3
 8004866:	f025 0503 	bic.w	r5, r5, #3
 800486a:	3508      	adds	r5, #8
 800486c:	2d0c      	cmp	r5, #12
 800486e:	bf38      	it	cc
 8004870:	250c      	movcc	r5, #12
 8004872:	2d00      	cmp	r5, #0
 8004874:	4607      	mov	r7, r0
 8004876:	db01      	blt.n	800487c <_malloc_r+0x1c>
 8004878:	42a9      	cmp	r1, r5
 800487a:	d905      	bls.n	8004888 <_malloc_r+0x28>
 800487c:	230c      	movs	r3, #12
 800487e:	2600      	movs	r6, #0
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4630      	mov	r0, r6
 8004884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004888:	4e2e      	ldr	r6, [pc, #184]	; (8004944 <_malloc_r+0xe4>)
 800488a:	f000 fa25 	bl	8004cd8 <__malloc_lock>
 800488e:	6833      	ldr	r3, [r6, #0]
 8004890:	461c      	mov	r4, r3
 8004892:	bb34      	cbnz	r4, 80048e2 <_malloc_r+0x82>
 8004894:	4629      	mov	r1, r5
 8004896:	4638      	mov	r0, r7
 8004898:	f7ff ffc2 	bl	8004820 <sbrk_aligned>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	4604      	mov	r4, r0
 80048a0:	d14d      	bne.n	800493e <_malloc_r+0xde>
 80048a2:	6834      	ldr	r4, [r6, #0]
 80048a4:	4626      	mov	r6, r4
 80048a6:	2e00      	cmp	r6, #0
 80048a8:	d140      	bne.n	800492c <_malloc_r+0xcc>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	4631      	mov	r1, r6
 80048ae:	4638      	mov	r0, r7
 80048b0:	eb04 0803 	add.w	r8, r4, r3
 80048b4:	f000 f9a4 	bl	8004c00 <_sbrk_r>
 80048b8:	4580      	cmp	r8, r0
 80048ba:	d13a      	bne.n	8004932 <_malloc_r+0xd2>
 80048bc:	6821      	ldr	r1, [r4, #0]
 80048be:	3503      	adds	r5, #3
 80048c0:	1a6d      	subs	r5, r5, r1
 80048c2:	f025 0503 	bic.w	r5, r5, #3
 80048c6:	3508      	adds	r5, #8
 80048c8:	2d0c      	cmp	r5, #12
 80048ca:	bf38      	it	cc
 80048cc:	250c      	movcc	r5, #12
 80048ce:	4638      	mov	r0, r7
 80048d0:	4629      	mov	r1, r5
 80048d2:	f7ff ffa5 	bl	8004820 <sbrk_aligned>
 80048d6:	3001      	adds	r0, #1
 80048d8:	d02b      	beq.n	8004932 <_malloc_r+0xd2>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	442b      	add	r3, r5
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	e00e      	b.n	8004900 <_malloc_r+0xa0>
 80048e2:	6822      	ldr	r2, [r4, #0]
 80048e4:	1b52      	subs	r2, r2, r5
 80048e6:	d41e      	bmi.n	8004926 <_malloc_r+0xc6>
 80048e8:	2a0b      	cmp	r2, #11
 80048ea:	d916      	bls.n	800491a <_malloc_r+0xba>
 80048ec:	1961      	adds	r1, r4, r5
 80048ee:	42a3      	cmp	r3, r4
 80048f0:	6025      	str	r5, [r4, #0]
 80048f2:	bf18      	it	ne
 80048f4:	6059      	strne	r1, [r3, #4]
 80048f6:	6863      	ldr	r3, [r4, #4]
 80048f8:	bf08      	it	eq
 80048fa:	6031      	streq	r1, [r6, #0]
 80048fc:	5162      	str	r2, [r4, r5]
 80048fe:	604b      	str	r3, [r1, #4]
 8004900:	4638      	mov	r0, r7
 8004902:	f104 060b 	add.w	r6, r4, #11
 8004906:	f000 f9ed 	bl	8004ce4 <__malloc_unlock>
 800490a:	f026 0607 	bic.w	r6, r6, #7
 800490e:	1d23      	adds	r3, r4, #4
 8004910:	1af2      	subs	r2, r6, r3
 8004912:	d0b6      	beq.n	8004882 <_malloc_r+0x22>
 8004914:	1b9b      	subs	r3, r3, r6
 8004916:	50a3      	str	r3, [r4, r2]
 8004918:	e7b3      	b.n	8004882 <_malloc_r+0x22>
 800491a:	6862      	ldr	r2, [r4, #4]
 800491c:	42a3      	cmp	r3, r4
 800491e:	bf0c      	ite	eq
 8004920:	6032      	streq	r2, [r6, #0]
 8004922:	605a      	strne	r2, [r3, #4]
 8004924:	e7ec      	b.n	8004900 <_malloc_r+0xa0>
 8004926:	4623      	mov	r3, r4
 8004928:	6864      	ldr	r4, [r4, #4]
 800492a:	e7b2      	b.n	8004892 <_malloc_r+0x32>
 800492c:	4634      	mov	r4, r6
 800492e:	6876      	ldr	r6, [r6, #4]
 8004930:	e7b9      	b.n	80048a6 <_malloc_r+0x46>
 8004932:	230c      	movs	r3, #12
 8004934:	4638      	mov	r0, r7
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	f000 f9d4 	bl	8004ce4 <__malloc_unlock>
 800493c:	e7a1      	b.n	8004882 <_malloc_r+0x22>
 800493e:	6025      	str	r5, [r4, #0]
 8004940:	e7de      	b.n	8004900 <_malloc_r+0xa0>
 8004942:	bf00      	nop
 8004944:	20000248 	.word	0x20000248

08004948 <__ssputs_r>:
 8004948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800494c:	688e      	ldr	r6, [r1, #8]
 800494e:	4682      	mov	sl, r0
 8004950:	429e      	cmp	r6, r3
 8004952:	460c      	mov	r4, r1
 8004954:	4690      	mov	r8, r2
 8004956:	461f      	mov	r7, r3
 8004958:	d838      	bhi.n	80049cc <__ssputs_r+0x84>
 800495a:	898a      	ldrh	r2, [r1, #12]
 800495c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004960:	d032      	beq.n	80049c8 <__ssputs_r+0x80>
 8004962:	6825      	ldr	r5, [r4, #0]
 8004964:	6909      	ldr	r1, [r1, #16]
 8004966:	3301      	adds	r3, #1
 8004968:	eba5 0901 	sub.w	r9, r5, r1
 800496c:	6965      	ldr	r5, [r4, #20]
 800496e:	444b      	add	r3, r9
 8004970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004978:	106d      	asrs	r5, r5, #1
 800497a:	429d      	cmp	r5, r3
 800497c:	bf38      	it	cc
 800497e:	461d      	movcc	r5, r3
 8004980:	0553      	lsls	r3, r2, #21
 8004982:	d531      	bpl.n	80049e8 <__ssputs_r+0xa0>
 8004984:	4629      	mov	r1, r5
 8004986:	f7ff ff6b 	bl	8004860 <_malloc_r>
 800498a:	4606      	mov	r6, r0
 800498c:	b950      	cbnz	r0, 80049a4 <__ssputs_r+0x5c>
 800498e:	230c      	movs	r3, #12
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	f8ca 3000 	str.w	r3, [sl]
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800499e:	81a3      	strh	r3, [r4, #12]
 80049a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a4:	464a      	mov	r2, r9
 80049a6:	6921      	ldr	r1, [r4, #16]
 80049a8:	f7ff fb4e 	bl	8004048 <memcpy>
 80049ac:	89a3      	ldrh	r3, [r4, #12]
 80049ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b6:	81a3      	strh	r3, [r4, #12]
 80049b8:	6126      	str	r6, [r4, #16]
 80049ba:	444e      	add	r6, r9
 80049bc:	6026      	str	r6, [r4, #0]
 80049be:	463e      	mov	r6, r7
 80049c0:	6165      	str	r5, [r4, #20]
 80049c2:	eba5 0509 	sub.w	r5, r5, r9
 80049c6:	60a5      	str	r5, [r4, #8]
 80049c8:	42be      	cmp	r6, r7
 80049ca:	d900      	bls.n	80049ce <__ssputs_r+0x86>
 80049cc:	463e      	mov	r6, r7
 80049ce:	4632      	mov	r2, r6
 80049d0:	4641      	mov	r1, r8
 80049d2:	6820      	ldr	r0, [r4, #0]
 80049d4:	f000 f966 	bl	8004ca4 <memmove>
 80049d8:	68a3      	ldr	r3, [r4, #8]
 80049da:	2000      	movs	r0, #0
 80049dc:	1b9b      	subs	r3, r3, r6
 80049de:	60a3      	str	r3, [r4, #8]
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	4433      	add	r3, r6
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	e7db      	b.n	80049a0 <__ssputs_r+0x58>
 80049e8:	462a      	mov	r2, r5
 80049ea:	f000 f981 	bl	8004cf0 <_realloc_r>
 80049ee:	4606      	mov	r6, r0
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d1e1      	bne.n	80049b8 <__ssputs_r+0x70>
 80049f4:	4650      	mov	r0, sl
 80049f6:	6921      	ldr	r1, [r4, #16]
 80049f8:	f7ff feca 	bl	8004790 <_free_r>
 80049fc:	e7c7      	b.n	800498e <__ssputs_r+0x46>
	...

08004a00 <_svfiprintf_r>:
 8004a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a04:	4698      	mov	r8, r3
 8004a06:	898b      	ldrh	r3, [r1, #12]
 8004a08:	4607      	mov	r7, r0
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	460d      	mov	r5, r1
 8004a0e:	4614      	mov	r4, r2
 8004a10:	b09d      	sub	sp, #116	; 0x74
 8004a12:	d50e      	bpl.n	8004a32 <_svfiprintf_r+0x32>
 8004a14:	690b      	ldr	r3, [r1, #16]
 8004a16:	b963      	cbnz	r3, 8004a32 <_svfiprintf_r+0x32>
 8004a18:	2140      	movs	r1, #64	; 0x40
 8004a1a:	f7ff ff21 	bl	8004860 <_malloc_r>
 8004a1e:	6028      	str	r0, [r5, #0]
 8004a20:	6128      	str	r0, [r5, #16]
 8004a22:	b920      	cbnz	r0, 8004a2e <_svfiprintf_r+0x2e>
 8004a24:	230c      	movs	r3, #12
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	e0d1      	b.n	8004bd2 <_svfiprintf_r+0x1d2>
 8004a2e:	2340      	movs	r3, #64	; 0x40
 8004a30:	616b      	str	r3, [r5, #20]
 8004a32:	2300      	movs	r3, #0
 8004a34:	9309      	str	r3, [sp, #36]	; 0x24
 8004a36:	2320      	movs	r3, #32
 8004a38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a3c:	2330      	movs	r3, #48	; 0x30
 8004a3e:	f04f 0901 	mov.w	r9, #1
 8004a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004bec <_svfiprintf_r+0x1ec>
 8004a4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a4e:	4623      	mov	r3, r4
 8004a50:	469a      	mov	sl, r3
 8004a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a56:	b10a      	cbz	r2, 8004a5c <_svfiprintf_r+0x5c>
 8004a58:	2a25      	cmp	r2, #37	; 0x25
 8004a5a:	d1f9      	bne.n	8004a50 <_svfiprintf_r+0x50>
 8004a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a60:	d00b      	beq.n	8004a7a <_svfiprintf_r+0x7a>
 8004a62:	465b      	mov	r3, fp
 8004a64:	4622      	mov	r2, r4
 8004a66:	4629      	mov	r1, r5
 8004a68:	4638      	mov	r0, r7
 8004a6a:	f7ff ff6d 	bl	8004948 <__ssputs_r>
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f000 80aa 	beq.w	8004bc8 <_svfiprintf_r+0x1c8>
 8004a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a76:	445a      	add	r2, fp
 8004a78:	9209      	str	r2, [sp, #36]	; 0x24
 8004a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80a2 	beq.w	8004bc8 <_svfiprintf_r+0x1c8>
 8004a84:	2300      	movs	r3, #0
 8004a86:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a8e:	f10a 0a01 	add.w	sl, sl, #1
 8004a92:	9304      	str	r3, [sp, #16]
 8004a94:	9307      	str	r3, [sp, #28]
 8004a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8004a9c:	4654      	mov	r4, sl
 8004a9e:	2205      	movs	r2, #5
 8004aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa4:	4851      	ldr	r0, [pc, #324]	; (8004bec <_svfiprintf_r+0x1ec>)
 8004aa6:	f7ff fac1 	bl	800402c <memchr>
 8004aaa:	9a04      	ldr	r2, [sp, #16]
 8004aac:	b9d8      	cbnz	r0, 8004ae6 <_svfiprintf_r+0xe6>
 8004aae:	06d0      	lsls	r0, r2, #27
 8004ab0:	bf44      	itt	mi
 8004ab2:	2320      	movmi	r3, #32
 8004ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ab8:	0711      	lsls	r1, r2, #28
 8004aba:	bf44      	itt	mi
 8004abc:	232b      	movmi	r3, #43	; 0x2b
 8004abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac8:	d015      	beq.n	8004af6 <_svfiprintf_r+0xf6>
 8004aca:	4654      	mov	r4, sl
 8004acc:	2000      	movs	r0, #0
 8004ace:	f04f 0c0a 	mov.w	ip, #10
 8004ad2:	9a07      	ldr	r2, [sp, #28]
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ada:	3b30      	subs	r3, #48	; 0x30
 8004adc:	2b09      	cmp	r3, #9
 8004ade:	d94e      	bls.n	8004b7e <_svfiprintf_r+0x17e>
 8004ae0:	b1b0      	cbz	r0, 8004b10 <_svfiprintf_r+0x110>
 8004ae2:	9207      	str	r2, [sp, #28]
 8004ae4:	e014      	b.n	8004b10 <_svfiprintf_r+0x110>
 8004ae6:	eba0 0308 	sub.w	r3, r0, r8
 8004aea:	fa09 f303 	lsl.w	r3, r9, r3
 8004aee:	4313      	orrs	r3, r2
 8004af0:	46a2      	mov	sl, r4
 8004af2:	9304      	str	r3, [sp, #16]
 8004af4:	e7d2      	b.n	8004a9c <_svfiprintf_r+0x9c>
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	1d19      	adds	r1, r3, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	9103      	str	r1, [sp, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bfbb      	ittet	lt
 8004b02:	425b      	neglt	r3, r3
 8004b04:	f042 0202 	orrlt.w	r2, r2, #2
 8004b08:	9307      	strge	r3, [sp, #28]
 8004b0a:	9307      	strlt	r3, [sp, #28]
 8004b0c:	bfb8      	it	lt
 8004b0e:	9204      	strlt	r2, [sp, #16]
 8004b10:	7823      	ldrb	r3, [r4, #0]
 8004b12:	2b2e      	cmp	r3, #46	; 0x2e
 8004b14:	d10c      	bne.n	8004b30 <_svfiprintf_r+0x130>
 8004b16:	7863      	ldrb	r3, [r4, #1]
 8004b18:	2b2a      	cmp	r3, #42	; 0x2a
 8004b1a:	d135      	bne.n	8004b88 <_svfiprintf_r+0x188>
 8004b1c:	9b03      	ldr	r3, [sp, #12]
 8004b1e:	3402      	adds	r4, #2
 8004b20:	1d1a      	adds	r2, r3, #4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	9203      	str	r2, [sp, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	bfb8      	it	lt
 8004b2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004bf0 <_svfiprintf_r+0x1f0>
 8004b34:	2203      	movs	r2, #3
 8004b36:	4650      	mov	r0, sl
 8004b38:	7821      	ldrb	r1, [r4, #0]
 8004b3a:	f7ff fa77 	bl	800402c <memchr>
 8004b3e:	b140      	cbz	r0, 8004b52 <_svfiprintf_r+0x152>
 8004b40:	2340      	movs	r3, #64	; 0x40
 8004b42:	eba0 000a 	sub.w	r0, r0, sl
 8004b46:	fa03 f000 	lsl.w	r0, r3, r0
 8004b4a:	9b04      	ldr	r3, [sp, #16]
 8004b4c:	3401      	adds	r4, #1
 8004b4e:	4303      	orrs	r3, r0
 8004b50:	9304      	str	r3, [sp, #16]
 8004b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b56:	2206      	movs	r2, #6
 8004b58:	4826      	ldr	r0, [pc, #152]	; (8004bf4 <_svfiprintf_r+0x1f4>)
 8004b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b5e:	f7ff fa65 	bl	800402c <memchr>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d038      	beq.n	8004bd8 <_svfiprintf_r+0x1d8>
 8004b66:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <_svfiprintf_r+0x1f8>)
 8004b68:	bb1b      	cbnz	r3, 8004bb2 <_svfiprintf_r+0x1b2>
 8004b6a:	9b03      	ldr	r3, [sp, #12]
 8004b6c:	3307      	adds	r3, #7
 8004b6e:	f023 0307 	bic.w	r3, r3, #7
 8004b72:	3308      	adds	r3, #8
 8004b74:	9303      	str	r3, [sp, #12]
 8004b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b78:	4433      	add	r3, r6
 8004b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b7c:	e767      	b.n	8004a4e <_svfiprintf_r+0x4e>
 8004b7e:	460c      	mov	r4, r1
 8004b80:	2001      	movs	r0, #1
 8004b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b86:	e7a5      	b.n	8004ad4 <_svfiprintf_r+0xd4>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f04f 0c0a 	mov.w	ip, #10
 8004b8e:	4619      	mov	r1, r3
 8004b90:	3401      	adds	r4, #1
 8004b92:	9305      	str	r3, [sp, #20]
 8004b94:	4620      	mov	r0, r4
 8004b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b9a:	3a30      	subs	r2, #48	; 0x30
 8004b9c:	2a09      	cmp	r2, #9
 8004b9e:	d903      	bls.n	8004ba8 <_svfiprintf_r+0x1a8>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0c5      	beq.n	8004b30 <_svfiprintf_r+0x130>
 8004ba4:	9105      	str	r1, [sp, #20]
 8004ba6:	e7c3      	b.n	8004b30 <_svfiprintf_r+0x130>
 8004ba8:	4604      	mov	r4, r0
 8004baa:	2301      	movs	r3, #1
 8004bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bb0:	e7f0      	b.n	8004b94 <_svfiprintf_r+0x194>
 8004bb2:	ab03      	add	r3, sp, #12
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	462a      	mov	r2, r5
 8004bb8:	4638      	mov	r0, r7
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <_svfiprintf_r+0x1fc>)
 8004bbc:	a904      	add	r1, sp, #16
 8004bbe:	f7fd ffcb 	bl	8002b58 <_printf_float>
 8004bc2:	1c42      	adds	r2, r0, #1
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	d1d6      	bne.n	8004b76 <_svfiprintf_r+0x176>
 8004bc8:	89ab      	ldrh	r3, [r5, #12]
 8004bca:	065b      	lsls	r3, r3, #25
 8004bcc:	f53f af2c 	bmi.w	8004a28 <_svfiprintf_r+0x28>
 8004bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bd2:	b01d      	add	sp, #116	; 0x74
 8004bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd8:	ab03      	add	r3, sp, #12
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	462a      	mov	r2, r5
 8004bde:	4638      	mov	r0, r7
 8004be0:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <_svfiprintf_r+0x1fc>)
 8004be2:	a904      	add	r1, sp, #16
 8004be4:	f7fe fa54 	bl	8003090 <_printf_i>
 8004be8:	e7eb      	b.n	8004bc2 <_svfiprintf_r+0x1c2>
 8004bea:	bf00      	nop
 8004bec:	08005a5c 	.word	0x08005a5c
 8004bf0:	08005a62 	.word	0x08005a62
 8004bf4:	08005a66 	.word	0x08005a66
 8004bf8:	08002b59 	.word	0x08002b59
 8004bfc:	08004949 	.word	0x08004949

08004c00 <_sbrk_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	2300      	movs	r3, #0
 8004c04:	4d05      	ldr	r5, [pc, #20]	; (8004c1c <_sbrk_r+0x1c>)
 8004c06:	4604      	mov	r4, r0
 8004c08:	4608      	mov	r0, r1
 8004c0a:	602b      	str	r3, [r5, #0]
 8004c0c:	f7fc fca6 	bl	800155c <_sbrk>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d102      	bne.n	8004c1a <_sbrk_r+0x1a>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	b103      	cbz	r3, 8004c1a <_sbrk_r+0x1a>
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	20000250 	.word	0x20000250

08004c20 <__assert_func>:
 8004c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c22:	4614      	mov	r4, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <__assert_func+0x2c>)
 8004c28:	4605      	mov	r5, r0
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68d8      	ldr	r0, [r3, #12]
 8004c2e:	b14c      	cbz	r4, 8004c44 <__assert_func+0x24>
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <__assert_func+0x30>)
 8004c32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c36:	9100      	str	r1, [sp, #0]
 8004c38:	462b      	mov	r3, r5
 8004c3a:	4906      	ldr	r1, [pc, #24]	; (8004c54 <__assert_func+0x34>)
 8004c3c:	f000 f80e 	bl	8004c5c <fiprintf>
 8004c40:	f000 faaa 	bl	8005198 <abort>
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <__assert_func+0x38>)
 8004c46:	461c      	mov	r4, r3
 8004c48:	e7f3      	b.n	8004c32 <__assert_func+0x12>
 8004c4a:	bf00      	nop
 8004c4c:	2000000c 	.word	0x2000000c
 8004c50:	08005a6d 	.word	0x08005a6d
 8004c54:	08005a7a 	.word	0x08005a7a
 8004c58:	08005aa8 	.word	0x08005aa8

08004c5c <fiprintf>:
 8004c5c:	b40e      	push	{r1, r2, r3}
 8004c5e:	b503      	push	{r0, r1, lr}
 8004c60:	4601      	mov	r1, r0
 8004c62:	ab03      	add	r3, sp, #12
 8004c64:	4805      	ldr	r0, [pc, #20]	; (8004c7c <fiprintf+0x20>)
 8004c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	f000 f895 	bl	8004d9c <_vfiprintf_r>
 8004c72:	b002      	add	sp, #8
 8004c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c78:	b003      	add	sp, #12
 8004c7a:	4770      	bx	lr
 8004c7c:	2000000c 	.word	0x2000000c

08004c80 <__ascii_mbtowc>:
 8004c80:	b082      	sub	sp, #8
 8004c82:	b901      	cbnz	r1, 8004c86 <__ascii_mbtowc+0x6>
 8004c84:	a901      	add	r1, sp, #4
 8004c86:	b142      	cbz	r2, 8004c9a <__ascii_mbtowc+0x1a>
 8004c88:	b14b      	cbz	r3, 8004c9e <__ascii_mbtowc+0x1e>
 8004c8a:	7813      	ldrb	r3, [r2, #0]
 8004c8c:	600b      	str	r3, [r1, #0]
 8004c8e:	7812      	ldrb	r2, [r2, #0]
 8004c90:	1e10      	subs	r0, r2, #0
 8004c92:	bf18      	it	ne
 8004c94:	2001      	movne	r0, #1
 8004c96:	b002      	add	sp, #8
 8004c98:	4770      	bx	lr
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	e7fb      	b.n	8004c96 <__ascii_mbtowc+0x16>
 8004c9e:	f06f 0001 	mvn.w	r0, #1
 8004ca2:	e7f8      	b.n	8004c96 <__ascii_mbtowc+0x16>

08004ca4 <memmove>:
 8004ca4:	4288      	cmp	r0, r1
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	eb01 0402 	add.w	r4, r1, r2
 8004cac:	d902      	bls.n	8004cb4 <memmove+0x10>
 8004cae:	4284      	cmp	r4, r0
 8004cb0:	4623      	mov	r3, r4
 8004cb2:	d807      	bhi.n	8004cc4 <memmove+0x20>
 8004cb4:	1e43      	subs	r3, r0, #1
 8004cb6:	42a1      	cmp	r1, r4
 8004cb8:	d008      	beq.n	8004ccc <memmove+0x28>
 8004cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cc2:	e7f8      	b.n	8004cb6 <memmove+0x12>
 8004cc4:	4601      	mov	r1, r0
 8004cc6:	4402      	add	r2, r0
 8004cc8:	428a      	cmp	r2, r1
 8004cca:	d100      	bne.n	8004cce <memmove+0x2a>
 8004ccc:	bd10      	pop	{r4, pc}
 8004cce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cd6:	e7f7      	b.n	8004cc8 <memmove+0x24>

08004cd8 <__malloc_lock>:
 8004cd8:	4801      	ldr	r0, [pc, #4]	; (8004ce0 <__malloc_lock+0x8>)
 8004cda:	f000 bc19 	b.w	8005510 <__retarget_lock_acquire_recursive>
 8004cde:	bf00      	nop
 8004ce0:	20000254 	.word	0x20000254

08004ce4 <__malloc_unlock>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	; (8004cec <__malloc_unlock+0x8>)
 8004ce6:	f000 bc14 	b.w	8005512 <__retarget_lock_release_recursive>
 8004cea:	bf00      	nop
 8004cec:	20000254 	.word	0x20000254

08004cf0 <_realloc_r>:
 8004cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	4614      	mov	r4, r2
 8004cf8:	460e      	mov	r6, r1
 8004cfa:	b921      	cbnz	r1, 8004d06 <_realloc_r+0x16>
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d02:	f7ff bdad 	b.w	8004860 <_malloc_r>
 8004d06:	b92a      	cbnz	r2, 8004d14 <_realloc_r+0x24>
 8004d08:	f7ff fd42 	bl	8004790 <_free_r>
 8004d0c:	4625      	mov	r5, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d14:	f000 fc64 	bl	80055e0 <_malloc_usable_size_r>
 8004d18:	4284      	cmp	r4, r0
 8004d1a:	4607      	mov	r7, r0
 8004d1c:	d802      	bhi.n	8004d24 <_realloc_r+0x34>
 8004d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d22:	d812      	bhi.n	8004d4a <_realloc_r+0x5a>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4640      	mov	r0, r8
 8004d28:	f7ff fd9a 	bl	8004860 <_malloc_r>
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d0ed      	beq.n	8004d0e <_realloc_r+0x1e>
 8004d32:	42bc      	cmp	r4, r7
 8004d34:	4622      	mov	r2, r4
 8004d36:	4631      	mov	r1, r6
 8004d38:	bf28      	it	cs
 8004d3a:	463a      	movcs	r2, r7
 8004d3c:	f7ff f984 	bl	8004048 <memcpy>
 8004d40:	4631      	mov	r1, r6
 8004d42:	4640      	mov	r0, r8
 8004d44:	f7ff fd24 	bl	8004790 <_free_r>
 8004d48:	e7e1      	b.n	8004d0e <_realloc_r+0x1e>
 8004d4a:	4635      	mov	r5, r6
 8004d4c:	e7df      	b.n	8004d0e <_realloc_r+0x1e>

08004d4e <__sfputc_r>:
 8004d4e:	6893      	ldr	r3, [r2, #8]
 8004d50:	b410      	push	{r4}
 8004d52:	3b01      	subs	r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	6093      	str	r3, [r2, #8]
 8004d58:	da07      	bge.n	8004d6a <__sfputc_r+0x1c>
 8004d5a:	6994      	ldr	r4, [r2, #24]
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	db01      	blt.n	8004d64 <__sfputc_r+0x16>
 8004d60:	290a      	cmp	r1, #10
 8004d62:	d102      	bne.n	8004d6a <__sfputc_r+0x1c>
 8004d64:	bc10      	pop	{r4}
 8004d66:	f000 b949 	b.w	8004ffc <__swbuf_r>
 8004d6a:	6813      	ldr	r3, [r2, #0]
 8004d6c:	1c58      	adds	r0, r3, #1
 8004d6e:	6010      	str	r0, [r2, #0]
 8004d70:	7019      	strb	r1, [r3, #0]
 8004d72:	4608      	mov	r0, r1
 8004d74:	bc10      	pop	{r4}
 8004d76:	4770      	bx	lr

08004d78 <__sfputs_r>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	460f      	mov	r7, r1
 8004d7e:	4614      	mov	r4, r2
 8004d80:	18d5      	adds	r5, r2, r3
 8004d82:	42ac      	cmp	r4, r5
 8004d84:	d101      	bne.n	8004d8a <__sfputs_r+0x12>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e007      	b.n	8004d9a <__sfputs_r+0x22>
 8004d8a:	463a      	mov	r2, r7
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d92:	f7ff ffdc 	bl	8004d4e <__sfputc_r>
 8004d96:	1c43      	adds	r3, r0, #1
 8004d98:	d1f3      	bne.n	8004d82 <__sfputs_r+0xa>
 8004d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d9c <_vfiprintf_r>:
 8004d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da0:	460d      	mov	r5, r1
 8004da2:	4614      	mov	r4, r2
 8004da4:	4698      	mov	r8, r3
 8004da6:	4606      	mov	r6, r0
 8004da8:	b09d      	sub	sp, #116	; 0x74
 8004daa:	b118      	cbz	r0, 8004db4 <_vfiprintf_r+0x18>
 8004dac:	6983      	ldr	r3, [r0, #24]
 8004dae:	b90b      	cbnz	r3, 8004db4 <_vfiprintf_r+0x18>
 8004db0:	f000 fb10 	bl	80053d4 <__sinit>
 8004db4:	4b89      	ldr	r3, [pc, #548]	; (8004fdc <_vfiprintf_r+0x240>)
 8004db6:	429d      	cmp	r5, r3
 8004db8:	d11b      	bne.n	8004df2 <_vfiprintf_r+0x56>
 8004dba:	6875      	ldr	r5, [r6, #4]
 8004dbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dbe:	07d9      	lsls	r1, r3, #31
 8004dc0:	d405      	bmi.n	8004dce <_vfiprintf_r+0x32>
 8004dc2:	89ab      	ldrh	r3, [r5, #12]
 8004dc4:	059a      	lsls	r2, r3, #22
 8004dc6:	d402      	bmi.n	8004dce <_vfiprintf_r+0x32>
 8004dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dca:	f000 fba1 	bl	8005510 <__retarget_lock_acquire_recursive>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	071b      	lsls	r3, r3, #28
 8004dd2:	d501      	bpl.n	8004dd8 <_vfiprintf_r+0x3c>
 8004dd4:	692b      	ldr	r3, [r5, #16]
 8004dd6:	b9eb      	cbnz	r3, 8004e14 <_vfiprintf_r+0x78>
 8004dd8:	4629      	mov	r1, r5
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f000 f96e 	bl	80050bc <__swsetup_r>
 8004de0:	b1c0      	cbz	r0, 8004e14 <_vfiprintf_r+0x78>
 8004de2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004de4:	07dc      	lsls	r4, r3, #31
 8004de6:	d50e      	bpl.n	8004e06 <_vfiprintf_r+0x6a>
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	b01d      	add	sp, #116	; 0x74
 8004dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df2:	4b7b      	ldr	r3, [pc, #492]	; (8004fe0 <_vfiprintf_r+0x244>)
 8004df4:	429d      	cmp	r5, r3
 8004df6:	d101      	bne.n	8004dfc <_vfiprintf_r+0x60>
 8004df8:	68b5      	ldr	r5, [r6, #8]
 8004dfa:	e7df      	b.n	8004dbc <_vfiprintf_r+0x20>
 8004dfc:	4b79      	ldr	r3, [pc, #484]	; (8004fe4 <_vfiprintf_r+0x248>)
 8004dfe:	429d      	cmp	r5, r3
 8004e00:	bf08      	it	eq
 8004e02:	68f5      	ldreq	r5, [r6, #12]
 8004e04:	e7da      	b.n	8004dbc <_vfiprintf_r+0x20>
 8004e06:	89ab      	ldrh	r3, [r5, #12]
 8004e08:	0598      	lsls	r0, r3, #22
 8004e0a:	d4ed      	bmi.n	8004de8 <_vfiprintf_r+0x4c>
 8004e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e0e:	f000 fb80 	bl	8005512 <__retarget_lock_release_recursive>
 8004e12:	e7e9      	b.n	8004de8 <_vfiprintf_r+0x4c>
 8004e14:	2300      	movs	r3, #0
 8004e16:	9309      	str	r3, [sp, #36]	; 0x24
 8004e18:	2320      	movs	r3, #32
 8004e1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e1e:	2330      	movs	r3, #48	; 0x30
 8004e20:	f04f 0901 	mov.w	r9, #1
 8004e24:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e28:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004fe8 <_vfiprintf_r+0x24c>
 8004e2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e30:	4623      	mov	r3, r4
 8004e32:	469a      	mov	sl, r3
 8004e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e38:	b10a      	cbz	r2, 8004e3e <_vfiprintf_r+0xa2>
 8004e3a:	2a25      	cmp	r2, #37	; 0x25
 8004e3c:	d1f9      	bne.n	8004e32 <_vfiprintf_r+0x96>
 8004e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e42:	d00b      	beq.n	8004e5c <_vfiprintf_r+0xc0>
 8004e44:	465b      	mov	r3, fp
 8004e46:	4622      	mov	r2, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f7ff ff94 	bl	8004d78 <__sfputs_r>
 8004e50:	3001      	adds	r0, #1
 8004e52:	f000 80aa 	beq.w	8004faa <_vfiprintf_r+0x20e>
 8004e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e58:	445a      	add	r2, fp
 8004e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80a2 	beq.w	8004faa <_vfiprintf_r+0x20e>
 8004e66:	2300      	movs	r3, #0
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e70:	f10a 0a01 	add.w	sl, sl, #1
 8004e74:	9304      	str	r3, [sp, #16]
 8004e76:	9307      	str	r3, [sp, #28]
 8004e78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e7c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e7e:	4654      	mov	r4, sl
 8004e80:	2205      	movs	r2, #5
 8004e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e86:	4858      	ldr	r0, [pc, #352]	; (8004fe8 <_vfiprintf_r+0x24c>)
 8004e88:	f7ff f8d0 	bl	800402c <memchr>
 8004e8c:	9a04      	ldr	r2, [sp, #16]
 8004e8e:	b9d8      	cbnz	r0, 8004ec8 <_vfiprintf_r+0x12c>
 8004e90:	06d1      	lsls	r1, r2, #27
 8004e92:	bf44      	itt	mi
 8004e94:	2320      	movmi	r3, #32
 8004e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e9a:	0713      	lsls	r3, r2, #28
 8004e9c:	bf44      	itt	mi
 8004e9e:	232b      	movmi	r3, #43	; 0x2b
 8004ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eaa:	d015      	beq.n	8004ed8 <_vfiprintf_r+0x13c>
 8004eac:	4654      	mov	r4, sl
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f04f 0c0a 	mov.w	ip, #10
 8004eb4:	9a07      	ldr	r2, [sp, #28]
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ebc:	3b30      	subs	r3, #48	; 0x30
 8004ebe:	2b09      	cmp	r3, #9
 8004ec0:	d94e      	bls.n	8004f60 <_vfiprintf_r+0x1c4>
 8004ec2:	b1b0      	cbz	r0, 8004ef2 <_vfiprintf_r+0x156>
 8004ec4:	9207      	str	r2, [sp, #28]
 8004ec6:	e014      	b.n	8004ef2 <_vfiprintf_r+0x156>
 8004ec8:	eba0 0308 	sub.w	r3, r0, r8
 8004ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	46a2      	mov	sl, r4
 8004ed4:	9304      	str	r3, [sp, #16]
 8004ed6:	e7d2      	b.n	8004e7e <_vfiprintf_r+0xe2>
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	1d19      	adds	r1, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	9103      	str	r1, [sp, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bfbb      	ittet	lt
 8004ee4:	425b      	neglt	r3, r3
 8004ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8004eea:	9307      	strge	r3, [sp, #28]
 8004eec:	9307      	strlt	r3, [sp, #28]
 8004eee:	bfb8      	it	lt
 8004ef0:	9204      	strlt	r2, [sp, #16]
 8004ef2:	7823      	ldrb	r3, [r4, #0]
 8004ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ef6:	d10c      	bne.n	8004f12 <_vfiprintf_r+0x176>
 8004ef8:	7863      	ldrb	r3, [r4, #1]
 8004efa:	2b2a      	cmp	r3, #42	; 0x2a
 8004efc:	d135      	bne.n	8004f6a <_vfiprintf_r+0x1ce>
 8004efe:	9b03      	ldr	r3, [sp, #12]
 8004f00:	3402      	adds	r4, #2
 8004f02:	1d1a      	adds	r2, r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	9203      	str	r2, [sp, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	bfb8      	it	lt
 8004f0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f10:	9305      	str	r3, [sp, #20]
 8004f12:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004fec <_vfiprintf_r+0x250>
 8004f16:	2203      	movs	r2, #3
 8004f18:	4650      	mov	r0, sl
 8004f1a:	7821      	ldrb	r1, [r4, #0]
 8004f1c:	f7ff f886 	bl	800402c <memchr>
 8004f20:	b140      	cbz	r0, 8004f34 <_vfiprintf_r+0x198>
 8004f22:	2340      	movs	r3, #64	; 0x40
 8004f24:	eba0 000a 	sub.w	r0, r0, sl
 8004f28:	fa03 f000 	lsl.w	r0, r3, r0
 8004f2c:	9b04      	ldr	r3, [sp, #16]
 8004f2e:	3401      	adds	r4, #1
 8004f30:	4303      	orrs	r3, r0
 8004f32:	9304      	str	r3, [sp, #16]
 8004f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f38:	2206      	movs	r2, #6
 8004f3a:	482d      	ldr	r0, [pc, #180]	; (8004ff0 <_vfiprintf_r+0x254>)
 8004f3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f40:	f7ff f874 	bl	800402c <memchr>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d03f      	beq.n	8004fc8 <_vfiprintf_r+0x22c>
 8004f48:	4b2a      	ldr	r3, [pc, #168]	; (8004ff4 <_vfiprintf_r+0x258>)
 8004f4a:	bb1b      	cbnz	r3, 8004f94 <_vfiprintf_r+0x1f8>
 8004f4c:	9b03      	ldr	r3, [sp, #12]
 8004f4e:	3307      	adds	r3, #7
 8004f50:	f023 0307 	bic.w	r3, r3, #7
 8004f54:	3308      	adds	r3, #8
 8004f56:	9303      	str	r3, [sp, #12]
 8004f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5a:	443b      	add	r3, r7
 8004f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f5e:	e767      	b.n	8004e30 <_vfiprintf_r+0x94>
 8004f60:	460c      	mov	r4, r1
 8004f62:	2001      	movs	r0, #1
 8004f64:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f68:	e7a5      	b.n	8004eb6 <_vfiprintf_r+0x11a>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f04f 0c0a 	mov.w	ip, #10
 8004f70:	4619      	mov	r1, r3
 8004f72:	3401      	adds	r4, #1
 8004f74:	9305      	str	r3, [sp, #20]
 8004f76:	4620      	mov	r0, r4
 8004f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f7c:	3a30      	subs	r2, #48	; 0x30
 8004f7e:	2a09      	cmp	r2, #9
 8004f80:	d903      	bls.n	8004f8a <_vfiprintf_r+0x1ee>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0c5      	beq.n	8004f12 <_vfiprintf_r+0x176>
 8004f86:	9105      	str	r1, [sp, #20]
 8004f88:	e7c3      	b.n	8004f12 <_vfiprintf_r+0x176>
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f92:	e7f0      	b.n	8004f76 <_vfiprintf_r+0x1da>
 8004f94:	ab03      	add	r3, sp, #12
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	462a      	mov	r2, r5
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <_vfiprintf_r+0x25c>)
 8004f9e:	a904      	add	r1, sp, #16
 8004fa0:	f7fd fdda 	bl	8002b58 <_printf_float>
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	1c78      	adds	r0, r7, #1
 8004fa8:	d1d6      	bne.n	8004f58 <_vfiprintf_r+0x1bc>
 8004faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fac:	07d9      	lsls	r1, r3, #31
 8004fae:	d405      	bmi.n	8004fbc <_vfiprintf_r+0x220>
 8004fb0:	89ab      	ldrh	r3, [r5, #12]
 8004fb2:	059a      	lsls	r2, r3, #22
 8004fb4:	d402      	bmi.n	8004fbc <_vfiprintf_r+0x220>
 8004fb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fb8:	f000 faab 	bl	8005512 <__retarget_lock_release_recursive>
 8004fbc:	89ab      	ldrh	r3, [r5, #12]
 8004fbe:	065b      	lsls	r3, r3, #25
 8004fc0:	f53f af12 	bmi.w	8004de8 <_vfiprintf_r+0x4c>
 8004fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fc6:	e711      	b.n	8004dec <_vfiprintf_r+0x50>
 8004fc8:	ab03      	add	r3, sp, #12
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	462a      	mov	r2, r5
 8004fce:	4630      	mov	r0, r6
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <_vfiprintf_r+0x25c>)
 8004fd2:	a904      	add	r1, sp, #16
 8004fd4:	f7fe f85c 	bl	8003090 <_printf_i>
 8004fd8:	e7e4      	b.n	8004fa4 <_vfiprintf_r+0x208>
 8004fda:	bf00      	nop
 8004fdc:	08005bd4 	.word	0x08005bd4
 8004fe0:	08005bf4 	.word	0x08005bf4
 8004fe4:	08005bb4 	.word	0x08005bb4
 8004fe8:	08005a5c 	.word	0x08005a5c
 8004fec:	08005a62 	.word	0x08005a62
 8004ff0:	08005a66 	.word	0x08005a66
 8004ff4:	08002b59 	.word	0x08002b59
 8004ff8:	08004d79 	.word	0x08004d79

08004ffc <__swbuf_r>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	460e      	mov	r6, r1
 8005000:	4614      	mov	r4, r2
 8005002:	4605      	mov	r5, r0
 8005004:	b118      	cbz	r0, 800500e <__swbuf_r+0x12>
 8005006:	6983      	ldr	r3, [r0, #24]
 8005008:	b90b      	cbnz	r3, 800500e <__swbuf_r+0x12>
 800500a:	f000 f9e3 	bl	80053d4 <__sinit>
 800500e:	4b21      	ldr	r3, [pc, #132]	; (8005094 <__swbuf_r+0x98>)
 8005010:	429c      	cmp	r4, r3
 8005012:	d12b      	bne.n	800506c <__swbuf_r+0x70>
 8005014:	686c      	ldr	r4, [r5, #4]
 8005016:	69a3      	ldr	r3, [r4, #24]
 8005018:	60a3      	str	r3, [r4, #8]
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	071a      	lsls	r2, r3, #28
 800501e:	d52f      	bpl.n	8005080 <__swbuf_r+0x84>
 8005020:	6923      	ldr	r3, [r4, #16]
 8005022:	b36b      	cbz	r3, 8005080 <__swbuf_r+0x84>
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	6820      	ldr	r0, [r4, #0]
 8005028:	b2f6      	uxtb	r6, r6
 800502a:	1ac0      	subs	r0, r0, r3
 800502c:	6963      	ldr	r3, [r4, #20]
 800502e:	4637      	mov	r7, r6
 8005030:	4283      	cmp	r3, r0
 8005032:	dc04      	bgt.n	800503e <__swbuf_r+0x42>
 8005034:	4621      	mov	r1, r4
 8005036:	4628      	mov	r0, r5
 8005038:	f000 f938 	bl	80052ac <_fflush_r>
 800503c:	bb30      	cbnz	r0, 800508c <__swbuf_r+0x90>
 800503e:	68a3      	ldr	r3, [r4, #8]
 8005040:	3001      	adds	r0, #1
 8005042:	3b01      	subs	r3, #1
 8005044:	60a3      	str	r3, [r4, #8]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	6022      	str	r2, [r4, #0]
 800504c:	701e      	strb	r6, [r3, #0]
 800504e:	6963      	ldr	r3, [r4, #20]
 8005050:	4283      	cmp	r3, r0
 8005052:	d004      	beq.n	800505e <__swbuf_r+0x62>
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	07db      	lsls	r3, r3, #31
 8005058:	d506      	bpl.n	8005068 <__swbuf_r+0x6c>
 800505a:	2e0a      	cmp	r6, #10
 800505c:	d104      	bne.n	8005068 <__swbuf_r+0x6c>
 800505e:	4621      	mov	r1, r4
 8005060:	4628      	mov	r0, r5
 8005062:	f000 f923 	bl	80052ac <_fflush_r>
 8005066:	b988      	cbnz	r0, 800508c <__swbuf_r+0x90>
 8005068:	4638      	mov	r0, r7
 800506a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <__swbuf_r+0x9c>)
 800506e:	429c      	cmp	r4, r3
 8005070:	d101      	bne.n	8005076 <__swbuf_r+0x7a>
 8005072:	68ac      	ldr	r4, [r5, #8]
 8005074:	e7cf      	b.n	8005016 <__swbuf_r+0x1a>
 8005076:	4b09      	ldr	r3, [pc, #36]	; (800509c <__swbuf_r+0xa0>)
 8005078:	429c      	cmp	r4, r3
 800507a:	bf08      	it	eq
 800507c:	68ec      	ldreq	r4, [r5, #12]
 800507e:	e7ca      	b.n	8005016 <__swbuf_r+0x1a>
 8005080:	4621      	mov	r1, r4
 8005082:	4628      	mov	r0, r5
 8005084:	f000 f81a 	bl	80050bc <__swsetup_r>
 8005088:	2800      	cmp	r0, #0
 800508a:	d0cb      	beq.n	8005024 <__swbuf_r+0x28>
 800508c:	f04f 37ff 	mov.w	r7, #4294967295
 8005090:	e7ea      	b.n	8005068 <__swbuf_r+0x6c>
 8005092:	bf00      	nop
 8005094:	08005bd4 	.word	0x08005bd4
 8005098:	08005bf4 	.word	0x08005bf4
 800509c:	08005bb4 	.word	0x08005bb4

080050a0 <__ascii_wctomb>:
 80050a0:	4603      	mov	r3, r0
 80050a2:	4608      	mov	r0, r1
 80050a4:	b141      	cbz	r1, 80050b8 <__ascii_wctomb+0x18>
 80050a6:	2aff      	cmp	r2, #255	; 0xff
 80050a8:	d904      	bls.n	80050b4 <__ascii_wctomb+0x14>
 80050aa:	228a      	movs	r2, #138	; 0x8a
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	4770      	bx	lr
 80050b4:	2001      	movs	r0, #1
 80050b6:	700a      	strb	r2, [r1, #0]
 80050b8:	4770      	bx	lr
	...

080050bc <__swsetup_r>:
 80050bc:	4b32      	ldr	r3, [pc, #200]	; (8005188 <__swsetup_r+0xcc>)
 80050be:	b570      	push	{r4, r5, r6, lr}
 80050c0:	681d      	ldr	r5, [r3, #0]
 80050c2:	4606      	mov	r6, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	b125      	cbz	r5, 80050d2 <__swsetup_r+0x16>
 80050c8:	69ab      	ldr	r3, [r5, #24]
 80050ca:	b913      	cbnz	r3, 80050d2 <__swsetup_r+0x16>
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 f981 	bl	80053d4 <__sinit>
 80050d2:	4b2e      	ldr	r3, [pc, #184]	; (800518c <__swsetup_r+0xd0>)
 80050d4:	429c      	cmp	r4, r3
 80050d6:	d10f      	bne.n	80050f8 <__swsetup_r+0x3c>
 80050d8:	686c      	ldr	r4, [r5, #4]
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050e0:	0719      	lsls	r1, r3, #28
 80050e2:	d42c      	bmi.n	800513e <__swsetup_r+0x82>
 80050e4:	06dd      	lsls	r5, r3, #27
 80050e6:	d411      	bmi.n	800510c <__swsetup_r+0x50>
 80050e8:	2309      	movs	r3, #9
 80050ea:	6033      	str	r3, [r6, #0]
 80050ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295
 80050f4:	81a3      	strh	r3, [r4, #12]
 80050f6:	e03e      	b.n	8005176 <__swsetup_r+0xba>
 80050f8:	4b25      	ldr	r3, [pc, #148]	; (8005190 <__swsetup_r+0xd4>)
 80050fa:	429c      	cmp	r4, r3
 80050fc:	d101      	bne.n	8005102 <__swsetup_r+0x46>
 80050fe:	68ac      	ldr	r4, [r5, #8]
 8005100:	e7eb      	b.n	80050da <__swsetup_r+0x1e>
 8005102:	4b24      	ldr	r3, [pc, #144]	; (8005194 <__swsetup_r+0xd8>)
 8005104:	429c      	cmp	r4, r3
 8005106:	bf08      	it	eq
 8005108:	68ec      	ldreq	r4, [r5, #12]
 800510a:	e7e6      	b.n	80050da <__swsetup_r+0x1e>
 800510c:	0758      	lsls	r0, r3, #29
 800510e:	d512      	bpl.n	8005136 <__swsetup_r+0x7a>
 8005110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005112:	b141      	cbz	r1, 8005126 <__swsetup_r+0x6a>
 8005114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005118:	4299      	cmp	r1, r3
 800511a:	d002      	beq.n	8005122 <__swsetup_r+0x66>
 800511c:	4630      	mov	r0, r6
 800511e:	f7ff fb37 	bl	8004790 <_free_r>
 8005122:	2300      	movs	r3, #0
 8005124:	6363      	str	r3, [r4, #52]	; 0x34
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	2300      	movs	r3, #0
 8005130:	6063      	str	r3, [r4, #4]
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f043 0308 	orr.w	r3, r3, #8
 800513c:	81a3      	strh	r3, [r4, #12]
 800513e:	6923      	ldr	r3, [r4, #16]
 8005140:	b94b      	cbnz	r3, 8005156 <__swsetup_r+0x9a>
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514c:	d003      	beq.n	8005156 <__swsetup_r+0x9a>
 800514e:	4621      	mov	r1, r4
 8005150:	4630      	mov	r0, r6
 8005152:	f000 fa05 	bl	8005560 <__smakebuf_r>
 8005156:	89a0      	ldrh	r0, [r4, #12]
 8005158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800515c:	f010 0301 	ands.w	r3, r0, #1
 8005160:	d00a      	beq.n	8005178 <__swsetup_r+0xbc>
 8005162:	2300      	movs	r3, #0
 8005164:	60a3      	str	r3, [r4, #8]
 8005166:	6963      	ldr	r3, [r4, #20]
 8005168:	425b      	negs	r3, r3
 800516a:	61a3      	str	r3, [r4, #24]
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	b943      	cbnz	r3, 8005182 <__swsetup_r+0xc6>
 8005170:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005174:	d1ba      	bne.n	80050ec <__swsetup_r+0x30>
 8005176:	bd70      	pop	{r4, r5, r6, pc}
 8005178:	0781      	lsls	r1, r0, #30
 800517a:	bf58      	it	pl
 800517c:	6963      	ldrpl	r3, [r4, #20]
 800517e:	60a3      	str	r3, [r4, #8]
 8005180:	e7f4      	b.n	800516c <__swsetup_r+0xb0>
 8005182:	2000      	movs	r0, #0
 8005184:	e7f7      	b.n	8005176 <__swsetup_r+0xba>
 8005186:	bf00      	nop
 8005188:	2000000c 	.word	0x2000000c
 800518c:	08005bd4 	.word	0x08005bd4
 8005190:	08005bf4 	.word	0x08005bf4
 8005194:	08005bb4 	.word	0x08005bb4

08005198 <abort>:
 8005198:	2006      	movs	r0, #6
 800519a:	b508      	push	{r3, lr}
 800519c:	f000 fa50 	bl	8005640 <raise>
 80051a0:	2001      	movs	r0, #1
 80051a2:	f7fc f967 	bl	8001474 <_exit>
	...

080051a8 <__sflush_r>:
 80051a8:	898a      	ldrh	r2, [r1, #12]
 80051aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ac:	4605      	mov	r5, r0
 80051ae:	0710      	lsls	r0, r2, #28
 80051b0:	460c      	mov	r4, r1
 80051b2:	d457      	bmi.n	8005264 <__sflush_r+0xbc>
 80051b4:	684b      	ldr	r3, [r1, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	dc04      	bgt.n	80051c4 <__sflush_r+0x1c>
 80051ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dc01      	bgt.n	80051c4 <__sflush_r+0x1c>
 80051c0:	2000      	movs	r0, #0
 80051c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051c6:	2e00      	cmp	r6, #0
 80051c8:	d0fa      	beq.n	80051c0 <__sflush_r+0x18>
 80051ca:	2300      	movs	r3, #0
 80051cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051d0:	682f      	ldr	r7, [r5, #0]
 80051d2:	602b      	str	r3, [r5, #0]
 80051d4:	d032      	beq.n	800523c <__sflush_r+0x94>
 80051d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	075a      	lsls	r2, r3, #29
 80051dc:	d505      	bpl.n	80051ea <__sflush_r+0x42>
 80051de:	6863      	ldr	r3, [r4, #4]
 80051e0:	1ac0      	subs	r0, r0, r3
 80051e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051e4:	b10b      	cbz	r3, 80051ea <__sflush_r+0x42>
 80051e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051e8:	1ac0      	subs	r0, r0, r3
 80051ea:	2300      	movs	r3, #0
 80051ec:	4602      	mov	r2, r0
 80051ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051f0:	4628      	mov	r0, r5
 80051f2:	6a21      	ldr	r1, [r4, #32]
 80051f4:	47b0      	blx	r6
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	d106      	bne.n	800520a <__sflush_r+0x62>
 80051fc:	6829      	ldr	r1, [r5, #0]
 80051fe:	291d      	cmp	r1, #29
 8005200:	d82c      	bhi.n	800525c <__sflush_r+0xb4>
 8005202:	4a29      	ldr	r2, [pc, #164]	; (80052a8 <__sflush_r+0x100>)
 8005204:	40ca      	lsrs	r2, r1
 8005206:	07d6      	lsls	r6, r2, #31
 8005208:	d528      	bpl.n	800525c <__sflush_r+0xb4>
 800520a:	2200      	movs	r2, #0
 800520c:	6062      	str	r2, [r4, #4]
 800520e:	6922      	ldr	r2, [r4, #16]
 8005210:	04d9      	lsls	r1, r3, #19
 8005212:	6022      	str	r2, [r4, #0]
 8005214:	d504      	bpl.n	8005220 <__sflush_r+0x78>
 8005216:	1c42      	adds	r2, r0, #1
 8005218:	d101      	bne.n	800521e <__sflush_r+0x76>
 800521a:	682b      	ldr	r3, [r5, #0]
 800521c:	b903      	cbnz	r3, 8005220 <__sflush_r+0x78>
 800521e:	6560      	str	r0, [r4, #84]	; 0x54
 8005220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005222:	602f      	str	r7, [r5, #0]
 8005224:	2900      	cmp	r1, #0
 8005226:	d0cb      	beq.n	80051c0 <__sflush_r+0x18>
 8005228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800522c:	4299      	cmp	r1, r3
 800522e:	d002      	beq.n	8005236 <__sflush_r+0x8e>
 8005230:	4628      	mov	r0, r5
 8005232:	f7ff faad 	bl	8004790 <_free_r>
 8005236:	2000      	movs	r0, #0
 8005238:	6360      	str	r0, [r4, #52]	; 0x34
 800523a:	e7c2      	b.n	80051c2 <__sflush_r+0x1a>
 800523c:	6a21      	ldr	r1, [r4, #32]
 800523e:	2301      	movs	r3, #1
 8005240:	4628      	mov	r0, r5
 8005242:	47b0      	blx	r6
 8005244:	1c41      	adds	r1, r0, #1
 8005246:	d1c7      	bne.n	80051d8 <__sflush_r+0x30>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0c4      	beq.n	80051d8 <__sflush_r+0x30>
 800524e:	2b1d      	cmp	r3, #29
 8005250:	d001      	beq.n	8005256 <__sflush_r+0xae>
 8005252:	2b16      	cmp	r3, #22
 8005254:	d101      	bne.n	800525a <__sflush_r+0xb2>
 8005256:	602f      	str	r7, [r5, #0]
 8005258:	e7b2      	b.n	80051c0 <__sflush_r+0x18>
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	e7ae      	b.n	80051c2 <__sflush_r+0x1a>
 8005264:	690f      	ldr	r7, [r1, #16]
 8005266:	2f00      	cmp	r7, #0
 8005268:	d0aa      	beq.n	80051c0 <__sflush_r+0x18>
 800526a:	0793      	lsls	r3, r2, #30
 800526c:	bf18      	it	ne
 800526e:	2300      	movne	r3, #0
 8005270:	680e      	ldr	r6, [r1, #0]
 8005272:	bf08      	it	eq
 8005274:	694b      	ldreq	r3, [r1, #20]
 8005276:	1bf6      	subs	r6, r6, r7
 8005278:	600f      	str	r7, [r1, #0]
 800527a:	608b      	str	r3, [r1, #8]
 800527c:	2e00      	cmp	r6, #0
 800527e:	dd9f      	ble.n	80051c0 <__sflush_r+0x18>
 8005280:	4633      	mov	r3, r6
 8005282:	463a      	mov	r2, r7
 8005284:	4628      	mov	r0, r5
 8005286:	6a21      	ldr	r1, [r4, #32]
 8005288:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800528c:	47e0      	blx	ip
 800528e:	2800      	cmp	r0, #0
 8005290:	dc06      	bgt.n	80052a0 <__sflush_r+0xf8>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	f04f 30ff 	mov.w	r0, #4294967295
 8005298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	e790      	b.n	80051c2 <__sflush_r+0x1a>
 80052a0:	4407      	add	r7, r0
 80052a2:	1a36      	subs	r6, r6, r0
 80052a4:	e7ea      	b.n	800527c <__sflush_r+0xd4>
 80052a6:	bf00      	nop
 80052a8:	20400001 	.word	0x20400001

080052ac <_fflush_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	690b      	ldr	r3, [r1, #16]
 80052b0:	4605      	mov	r5, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	b913      	cbnz	r3, 80052bc <_fflush_r+0x10>
 80052b6:	2500      	movs	r5, #0
 80052b8:	4628      	mov	r0, r5
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	b118      	cbz	r0, 80052c6 <_fflush_r+0x1a>
 80052be:	6983      	ldr	r3, [r0, #24]
 80052c0:	b90b      	cbnz	r3, 80052c6 <_fflush_r+0x1a>
 80052c2:	f000 f887 	bl	80053d4 <__sinit>
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <_fflush_r+0x6c>)
 80052c8:	429c      	cmp	r4, r3
 80052ca:	d11b      	bne.n	8005304 <_fflush_r+0x58>
 80052cc:	686c      	ldr	r4, [r5, #4]
 80052ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0ef      	beq.n	80052b6 <_fflush_r+0xa>
 80052d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052d8:	07d0      	lsls	r0, r2, #31
 80052da:	d404      	bmi.n	80052e6 <_fflush_r+0x3a>
 80052dc:	0599      	lsls	r1, r3, #22
 80052de:	d402      	bmi.n	80052e6 <_fflush_r+0x3a>
 80052e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052e2:	f000 f915 	bl	8005510 <__retarget_lock_acquire_recursive>
 80052e6:	4628      	mov	r0, r5
 80052e8:	4621      	mov	r1, r4
 80052ea:	f7ff ff5d 	bl	80051a8 <__sflush_r>
 80052ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052f0:	4605      	mov	r5, r0
 80052f2:	07da      	lsls	r2, r3, #31
 80052f4:	d4e0      	bmi.n	80052b8 <_fflush_r+0xc>
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	059b      	lsls	r3, r3, #22
 80052fa:	d4dd      	bmi.n	80052b8 <_fflush_r+0xc>
 80052fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052fe:	f000 f908 	bl	8005512 <__retarget_lock_release_recursive>
 8005302:	e7d9      	b.n	80052b8 <_fflush_r+0xc>
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <_fflush_r+0x70>)
 8005306:	429c      	cmp	r4, r3
 8005308:	d101      	bne.n	800530e <_fflush_r+0x62>
 800530a:	68ac      	ldr	r4, [r5, #8]
 800530c:	e7df      	b.n	80052ce <_fflush_r+0x22>
 800530e:	4b04      	ldr	r3, [pc, #16]	; (8005320 <_fflush_r+0x74>)
 8005310:	429c      	cmp	r4, r3
 8005312:	bf08      	it	eq
 8005314:	68ec      	ldreq	r4, [r5, #12]
 8005316:	e7da      	b.n	80052ce <_fflush_r+0x22>
 8005318:	08005bd4 	.word	0x08005bd4
 800531c:	08005bf4 	.word	0x08005bf4
 8005320:	08005bb4 	.word	0x08005bb4

08005324 <std>:
 8005324:	2300      	movs	r3, #0
 8005326:	b510      	push	{r4, lr}
 8005328:	4604      	mov	r4, r0
 800532a:	e9c0 3300 	strd	r3, r3, [r0]
 800532e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005332:	6083      	str	r3, [r0, #8]
 8005334:	8181      	strh	r1, [r0, #12]
 8005336:	6643      	str	r3, [r0, #100]	; 0x64
 8005338:	81c2      	strh	r2, [r0, #14]
 800533a:	6183      	str	r3, [r0, #24]
 800533c:	4619      	mov	r1, r3
 800533e:	2208      	movs	r2, #8
 8005340:	305c      	adds	r0, #92	; 0x5c
 8005342:	f7fd fb63 	bl	8002a0c <memset>
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <std+0x38>)
 8005348:	6224      	str	r4, [r4, #32]
 800534a:	6263      	str	r3, [r4, #36]	; 0x24
 800534c:	4b04      	ldr	r3, [pc, #16]	; (8005360 <std+0x3c>)
 800534e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005350:	4b04      	ldr	r3, [pc, #16]	; (8005364 <std+0x40>)
 8005352:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <std+0x44>)
 8005356:	6323      	str	r3, [r4, #48]	; 0x30
 8005358:	bd10      	pop	{r4, pc}
 800535a:	bf00      	nop
 800535c:	08005679 	.word	0x08005679
 8005360:	0800569b 	.word	0x0800569b
 8005364:	080056d3 	.word	0x080056d3
 8005368:	080056f7 	.word	0x080056f7

0800536c <_cleanup_r>:
 800536c:	4901      	ldr	r1, [pc, #4]	; (8005374 <_cleanup_r+0x8>)
 800536e:	f000 b8af 	b.w	80054d0 <_fwalk_reent>
 8005372:	bf00      	nop
 8005374:	080052ad 	.word	0x080052ad

08005378 <__sfmoreglue>:
 8005378:	2268      	movs	r2, #104	; 0x68
 800537a:	b570      	push	{r4, r5, r6, lr}
 800537c:	1e4d      	subs	r5, r1, #1
 800537e:	4355      	muls	r5, r2
 8005380:	460e      	mov	r6, r1
 8005382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005386:	f7ff fa6b 	bl	8004860 <_malloc_r>
 800538a:	4604      	mov	r4, r0
 800538c:	b140      	cbz	r0, 80053a0 <__sfmoreglue+0x28>
 800538e:	2100      	movs	r1, #0
 8005390:	e9c0 1600 	strd	r1, r6, [r0]
 8005394:	300c      	adds	r0, #12
 8005396:	60a0      	str	r0, [r4, #8]
 8005398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800539c:	f7fd fb36 	bl	8002a0c <memset>
 80053a0:	4620      	mov	r0, r4
 80053a2:	bd70      	pop	{r4, r5, r6, pc}

080053a4 <__sfp_lock_acquire>:
 80053a4:	4801      	ldr	r0, [pc, #4]	; (80053ac <__sfp_lock_acquire+0x8>)
 80053a6:	f000 b8b3 	b.w	8005510 <__retarget_lock_acquire_recursive>
 80053aa:	bf00      	nop
 80053ac:	20000255 	.word	0x20000255

080053b0 <__sfp_lock_release>:
 80053b0:	4801      	ldr	r0, [pc, #4]	; (80053b8 <__sfp_lock_release+0x8>)
 80053b2:	f000 b8ae 	b.w	8005512 <__retarget_lock_release_recursive>
 80053b6:	bf00      	nop
 80053b8:	20000255 	.word	0x20000255

080053bc <__sinit_lock_acquire>:
 80053bc:	4801      	ldr	r0, [pc, #4]	; (80053c4 <__sinit_lock_acquire+0x8>)
 80053be:	f000 b8a7 	b.w	8005510 <__retarget_lock_acquire_recursive>
 80053c2:	bf00      	nop
 80053c4:	20000256 	.word	0x20000256

080053c8 <__sinit_lock_release>:
 80053c8:	4801      	ldr	r0, [pc, #4]	; (80053d0 <__sinit_lock_release+0x8>)
 80053ca:	f000 b8a2 	b.w	8005512 <__retarget_lock_release_recursive>
 80053ce:	bf00      	nop
 80053d0:	20000256 	.word	0x20000256

080053d4 <__sinit>:
 80053d4:	b510      	push	{r4, lr}
 80053d6:	4604      	mov	r4, r0
 80053d8:	f7ff fff0 	bl	80053bc <__sinit_lock_acquire>
 80053dc:	69a3      	ldr	r3, [r4, #24]
 80053de:	b11b      	cbz	r3, 80053e8 <__sinit+0x14>
 80053e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e4:	f7ff bff0 	b.w	80053c8 <__sinit_lock_release>
 80053e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053ec:	6523      	str	r3, [r4, #80]	; 0x50
 80053ee:	4b13      	ldr	r3, [pc, #76]	; (800543c <__sinit+0x68>)
 80053f0:	4a13      	ldr	r2, [pc, #76]	; (8005440 <__sinit+0x6c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80053f6:	42a3      	cmp	r3, r4
 80053f8:	bf08      	it	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	4620      	mov	r0, r4
 80053fe:	bf08      	it	eq
 8005400:	61a3      	streq	r3, [r4, #24]
 8005402:	f000 f81f 	bl	8005444 <__sfp>
 8005406:	6060      	str	r0, [r4, #4]
 8005408:	4620      	mov	r0, r4
 800540a:	f000 f81b 	bl	8005444 <__sfp>
 800540e:	60a0      	str	r0, [r4, #8]
 8005410:	4620      	mov	r0, r4
 8005412:	f000 f817 	bl	8005444 <__sfp>
 8005416:	2200      	movs	r2, #0
 8005418:	2104      	movs	r1, #4
 800541a:	60e0      	str	r0, [r4, #12]
 800541c:	6860      	ldr	r0, [r4, #4]
 800541e:	f7ff ff81 	bl	8005324 <std>
 8005422:	2201      	movs	r2, #1
 8005424:	2109      	movs	r1, #9
 8005426:	68a0      	ldr	r0, [r4, #8]
 8005428:	f7ff ff7c 	bl	8005324 <std>
 800542c:	2202      	movs	r2, #2
 800542e:	2112      	movs	r1, #18
 8005430:	68e0      	ldr	r0, [r4, #12]
 8005432:	f7ff ff77 	bl	8005324 <std>
 8005436:	2301      	movs	r3, #1
 8005438:	61a3      	str	r3, [r4, #24]
 800543a:	e7d1      	b.n	80053e0 <__sinit+0xc>
 800543c:	08005838 	.word	0x08005838
 8005440:	0800536d 	.word	0x0800536d

08005444 <__sfp>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	4607      	mov	r7, r0
 8005448:	f7ff ffac 	bl	80053a4 <__sfp_lock_acquire>
 800544c:	4b1e      	ldr	r3, [pc, #120]	; (80054c8 <__sfp+0x84>)
 800544e:	681e      	ldr	r6, [r3, #0]
 8005450:	69b3      	ldr	r3, [r6, #24]
 8005452:	b913      	cbnz	r3, 800545a <__sfp+0x16>
 8005454:	4630      	mov	r0, r6
 8005456:	f7ff ffbd 	bl	80053d4 <__sinit>
 800545a:	3648      	adds	r6, #72	; 0x48
 800545c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005460:	3b01      	subs	r3, #1
 8005462:	d503      	bpl.n	800546c <__sfp+0x28>
 8005464:	6833      	ldr	r3, [r6, #0]
 8005466:	b30b      	cbz	r3, 80054ac <__sfp+0x68>
 8005468:	6836      	ldr	r6, [r6, #0]
 800546a:	e7f7      	b.n	800545c <__sfp+0x18>
 800546c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005470:	b9d5      	cbnz	r5, 80054a8 <__sfp+0x64>
 8005472:	4b16      	ldr	r3, [pc, #88]	; (80054cc <__sfp+0x88>)
 8005474:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005478:	60e3      	str	r3, [r4, #12]
 800547a:	6665      	str	r5, [r4, #100]	; 0x64
 800547c:	f000 f847 	bl	800550e <__retarget_lock_init_recursive>
 8005480:	f7ff ff96 	bl	80053b0 <__sfp_lock_release>
 8005484:	2208      	movs	r2, #8
 8005486:	4629      	mov	r1, r5
 8005488:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800548c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005490:	6025      	str	r5, [r4, #0]
 8005492:	61a5      	str	r5, [r4, #24]
 8005494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005498:	f7fd fab8 	bl	8002a0c <memset>
 800549c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054a4:	4620      	mov	r0, r4
 80054a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a8:	3468      	adds	r4, #104	; 0x68
 80054aa:	e7d9      	b.n	8005460 <__sfp+0x1c>
 80054ac:	2104      	movs	r1, #4
 80054ae:	4638      	mov	r0, r7
 80054b0:	f7ff ff62 	bl	8005378 <__sfmoreglue>
 80054b4:	4604      	mov	r4, r0
 80054b6:	6030      	str	r0, [r6, #0]
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d1d5      	bne.n	8005468 <__sfp+0x24>
 80054bc:	f7ff ff78 	bl	80053b0 <__sfp_lock_release>
 80054c0:	230c      	movs	r3, #12
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	e7ee      	b.n	80054a4 <__sfp+0x60>
 80054c6:	bf00      	nop
 80054c8:	08005838 	.word	0x08005838
 80054cc:	ffff0001 	.word	0xffff0001

080054d0 <_fwalk_reent>:
 80054d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d4:	4606      	mov	r6, r0
 80054d6:	4688      	mov	r8, r1
 80054d8:	2700      	movs	r7, #0
 80054da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054e2:	f1b9 0901 	subs.w	r9, r9, #1
 80054e6:	d505      	bpl.n	80054f4 <_fwalk_reent+0x24>
 80054e8:	6824      	ldr	r4, [r4, #0]
 80054ea:	2c00      	cmp	r4, #0
 80054ec:	d1f7      	bne.n	80054de <_fwalk_reent+0xe>
 80054ee:	4638      	mov	r0, r7
 80054f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054f4:	89ab      	ldrh	r3, [r5, #12]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d907      	bls.n	800550a <_fwalk_reent+0x3a>
 80054fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054fe:	3301      	adds	r3, #1
 8005500:	d003      	beq.n	800550a <_fwalk_reent+0x3a>
 8005502:	4629      	mov	r1, r5
 8005504:	4630      	mov	r0, r6
 8005506:	47c0      	blx	r8
 8005508:	4307      	orrs	r7, r0
 800550a:	3568      	adds	r5, #104	; 0x68
 800550c:	e7e9      	b.n	80054e2 <_fwalk_reent+0x12>

0800550e <__retarget_lock_init_recursive>:
 800550e:	4770      	bx	lr

08005510 <__retarget_lock_acquire_recursive>:
 8005510:	4770      	bx	lr

08005512 <__retarget_lock_release_recursive>:
 8005512:	4770      	bx	lr

08005514 <__swhatbuf_r>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	460e      	mov	r6, r1
 8005518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551c:	4614      	mov	r4, r2
 800551e:	2900      	cmp	r1, #0
 8005520:	461d      	mov	r5, r3
 8005522:	b096      	sub	sp, #88	; 0x58
 8005524:	da08      	bge.n	8005538 <__swhatbuf_r+0x24>
 8005526:	2200      	movs	r2, #0
 8005528:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800552c:	602a      	str	r2, [r5, #0]
 800552e:	061a      	lsls	r2, r3, #24
 8005530:	d410      	bmi.n	8005554 <__swhatbuf_r+0x40>
 8005532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005536:	e00e      	b.n	8005556 <__swhatbuf_r+0x42>
 8005538:	466a      	mov	r2, sp
 800553a:	f000 f903 	bl	8005744 <_fstat_r>
 800553e:	2800      	cmp	r0, #0
 8005540:	dbf1      	blt.n	8005526 <__swhatbuf_r+0x12>
 8005542:	9a01      	ldr	r2, [sp, #4]
 8005544:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005548:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800554c:	425a      	negs	r2, r3
 800554e:	415a      	adcs	r2, r3
 8005550:	602a      	str	r2, [r5, #0]
 8005552:	e7ee      	b.n	8005532 <__swhatbuf_r+0x1e>
 8005554:	2340      	movs	r3, #64	; 0x40
 8005556:	2000      	movs	r0, #0
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	b016      	add	sp, #88	; 0x58
 800555c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005560 <__smakebuf_r>:
 8005560:	898b      	ldrh	r3, [r1, #12]
 8005562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005564:	079d      	lsls	r5, r3, #30
 8005566:	4606      	mov	r6, r0
 8005568:	460c      	mov	r4, r1
 800556a:	d507      	bpl.n	800557c <__smakebuf_r+0x1c>
 800556c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	2301      	movs	r3, #1
 8005576:	6163      	str	r3, [r4, #20]
 8005578:	b002      	add	sp, #8
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	466a      	mov	r2, sp
 800557e:	ab01      	add	r3, sp, #4
 8005580:	f7ff ffc8 	bl	8005514 <__swhatbuf_r>
 8005584:	9900      	ldr	r1, [sp, #0]
 8005586:	4605      	mov	r5, r0
 8005588:	4630      	mov	r0, r6
 800558a:	f7ff f969 	bl	8004860 <_malloc_r>
 800558e:	b948      	cbnz	r0, 80055a4 <__smakebuf_r+0x44>
 8005590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005594:	059a      	lsls	r2, r3, #22
 8005596:	d4ef      	bmi.n	8005578 <__smakebuf_r+0x18>
 8005598:	f023 0303 	bic.w	r3, r3, #3
 800559c:	f043 0302 	orr.w	r3, r3, #2
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	e7e3      	b.n	800556c <__smakebuf_r+0xc>
 80055a4:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <__smakebuf_r+0x7c>)
 80055a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	6020      	str	r0, [r4, #0]
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	81a3      	strh	r3, [r4, #12]
 80055b2:	9b00      	ldr	r3, [sp, #0]
 80055b4:	6120      	str	r0, [r4, #16]
 80055b6:	6163      	str	r3, [r4, #20]
 80055b8:	9b01      	ldr	r3, [sp, #4]
 80055ba:	b15b      	cbz	r3, 80055d4 <__smakebuf_r+0x74>
 80055bc:	4630      	mov	r0, r6
 80055be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055c2:	f000 f8d1 	bl	8005768 <_isatty_r>
 80055c6:	b128      	cbz	r0, 80055d4 <__smakebuf_r+0x74>
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	f043 0301 	orr.w	r3, r3, #1
 80055d2:	81a3      	strh	r3, [r4, #12]
 80055d4:	89a0      	ldrh	r0, [r4, #12]
 80055d6:	4305      	orrs	r5, r0
 80055d8:	81a5      	strh	r5, [r4, #12]
 80055da:	e7cd      	b.n	8005578 <__smakebuf_r+0x18>
 80055dc:	0800536d 	.word	0x0800536d

080055e0 <_malloc_usable_size_r>:
 80055e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e4:	1f18      	subs	r0, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bfbc      	itt	lt
 80055ea:	580b      	ldrlt	r3, [r1, r0]
 80055ec:	18c0      	addlt	r0, r0, r3
 80055ee:	4770      	bx	lr

080055f0 <_raise_r>:
 80055f0:	291f      	cmp	r1, #31
 80055f2:	b538      	push	{r3, r4, r5, lr}
 80055f4:	4604      	mov	r4, r0
 80055f6:	460d      	mov	r5, r1
 80055f8:	d904      	bls.n	8005604 <_raise_r+0x14>
 80055fa:	2316      	movs	r3, #22
 80055fc:	6003      	str	r3, [r0, #0]
 80055fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005602:	bd38      	pop	{r3, r4, r5, pc}
 8005604:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005606:	b112      	cbz	r2, 800560e <_raise_r+0x1e>
 8005608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800560c:	b94b      	cbnz	r3, 8005622 <_raise_r+0x32>
 800560e:	4620      	mov	r0, r4
 8005610:	f000 f830 	bl	8005674 <_getpid_r>
 8005614:	462a      	mov	r2, r5
 8005616:	4601      	mov	r1, r0
 8005618:	4620      	mov	r0, r4
 800561a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800561e:	f000 b817 	b.w	8005650 <_kill_r>
 8005622:	2b01      	cmp	r3, #1
 8005624:	d00a      	beq.n	800563c <_raise_r+0x4c>
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	d103      	bne.n	8005632 <_raise_r+0x42>
 800562a:	2316      	movs	r3, #22
 800562c:	6003      	str	r3, [r0, #0]
 800562e:	2001      	movs	r0, #1
 8005630:	e7e7      	b.n	8005602 <_raise_r+0x12>
 8005632:	2400      	movs	r4, #0
 8005634:	4628      	mov	r0, r5
 8005636:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800563a:	4798      	blx	r3
 800563c:	2000      	movs	r0, #0
 800563e:	e7e0      	b.n	8005602 <_raise_r+0x12>

08005640 <raise>:
 8005640:	4b02      	ldr	r3, [pc, #8]	; (800564c <raise+0xc>)
 8005642:	4601      	mov	r1, r0
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	f7ff bfd3 	b.w	80055f0 <_raise_r>
 800564a:	bf00      	nop
 800564c:	2000000c 	.word	0x2000000c

08005650 <_kill_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	2300      	movs	r3, #0
 8005654:	4d06      	ldr	r5, [pc, #24]	; (8005670 <_kill_r+0x20>)
 8005656:	4604      	mov	r4, r0
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	602b      	str	r3, [r5, #0]
 800565e:	f7fb fef9 	bl	8001454 <_kill>
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	d102      	bne.n	800566c <_kill_r+0x1c>
 8005666:	682b      	ldr	r3, [r5, #0]
 8005668:	b103      	cbz	r3, 800566c <_kill_r+0x1c>
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	bd38      	pop	{r3, r4, r5, pc}
 800566e:	bf00      	nop
 8005670:	20000250 	.word	0x20000250

08005674 <_getpid_r>:
 8005674:	f7fb bee7 	b.w	8001446 <_getpid>

08005678 <__sread>:
 8005678:	b510      	push	{r4, lr}
 800567a:	460c      	mov	r4, r1
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	f000 f894 	bl	80057ac <_read_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	bfab      	itete	ge
 8005688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800568a:	89a3      	ldrhlt	r3, [r4, #12]
 800568c:	181b      	addge	r3, r3, r0
 800568e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005692:	bfac      	ite	ge
 8005694:	6563      	strge	r3, [r4, #84]	; 0x54
 8005696:	81a3      	strhlt	r3, [r4, #12]
 8005698:	bd10      	pop	{r4, pc}

0800569a <__swrite>:
 800569a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800569e:	461f      	mov	r7, r3
 80056a0:	898b      	ldrh	r3, [r1, #12]
 80056a2:	4605      	mov	r5, r0
 80056a4:	05db      	lsls	r3, r3, #23
 80056a6:	460c      	mov	r4, r1
 80056a8:	4616      	mov	r6, r2
 80056aa:	d505      	bpl.n	80056b8 <__swrite+0x1e>
 80056ac:	2302      	movs	r3, #2
 80056ae:	2200      	movs	r2, #0
 80056b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b4:	f000 f868 	bl	8005788 <_lseek_r>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	4632      	mov	r2, r6
 80056bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056c0:	81a3      	strh	r3, [r4, #12]
 80056c2:	4628      	mov	r0, r5
 80056c4:	463b      	mov	r3, r7
 80056c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ce:	f000 b817 	b.w	8005700 <_write_r>

080056d2 <__sseek>:
 80056d2:	b510      	push	{r4, lr}
 80056d4:	460c      	mov	r4, r1
 80056d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056da:	f000 f855 	bl	8005788 <_lseek_r>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	bf15      	itete	ne
 80056e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80056e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056ee:	81a3      	strheq	r3, [r4, #12]
 80056f0:	bf18      	it	ne
 80056f2:	81a3      	strhne	r3, [r4, #12]
 80056f4:	bd10      	pop	{r4, pc}

080056f6 <__sclose>:
 80056f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056fa:	f000 b813 	b.w	8005724 <_close_r>
	...

08005700 <_write_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4604      	mov	r4, r0
 8005704:	4608      	mov	r0, r1
 8005706:	4611      	mov	r1, r2
 8005708:	2200      	movs	r2, #0
 800570a:	4d05      	ldr	r5, [pc, #20]	; (8005720 <_write_r+0x20>)
 800570c:	602a      	str	r2, [r5, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	f7fb fed7 	bl	80014c2 <_write>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_write_r+0x1e>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b103      	cbz	r3, 800571e <_write_r+0x1e>
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	20000250 	.word	0x20000250

08005724 <_close_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	2300      	movs	r3, #0
 8005728:	4d05      	ldr	r5, [pc, #20]	; (8005740 <_close_r+0x1c>)
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	f7fb fee3 	bl	80014fa <_close>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_close_r+0x1a>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b103      	cbz	r3, 800573e <_close_r+0x1a>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	20000250 	.word	0x20000250

08005744 <_fstat_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	2300      	movs	r3, #0
 8005748:	4d06      	ldr	r5, [pc, #24]	; (8005764 <_fstat_r+0x20>)
 800574a:	4604      	mov	r4, r0
 800574c:	4608      	mov	r0, r1
 800574e:	4611      	mov	r1, r2
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	f7fb fedd 	bl	8001510 <_fstat>
 8005756:	1c43      	adds	r3, r0, #1
 8005758:	d102      	bne.n	8005760 <_fstat_r+0x1c>
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	b103      	cbz	r3, 8005760 <_fstat_r+0x1c>
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	bd38      	pop	{r3, r4, r5, pc}
 8005762:	bf00      	nop
 8005764:	20000250 	.word	0x20000250

08005768 <_isatty_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	2300      	movs	r3, #0
 800576c:	4d05      	ldr	r5, [pc, #20]	; (8005784 <_isatty_r+0x1c>)
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	602b      	str	r3, [r5, #0]
 8005774:	f7fb fedb 	bl	800152e <_isatty>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d102      	bne.n	8005782 <_isatty_r+0x1a>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	b103      	cbz	r3, 8005782 <_isatty_r+0x1a>
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	20000250 	.word	0x20000250

08005788 <_lseek_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4604      	mov	r4, r0
 800578c:	4608      	mov	r0, r1
 800578e:	4611      	mov	r1, r2
 8005790:	2200      	movs	r2, #0
 8005792:	4d05      	ldr	r5, [pc, #20]	; (80057a8 <_lseek_r+0x20>)
 8005794:	602a      	str	r2, [r5, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	f7fb fed3 	bl	8001542 <_lseek>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_lseek_r+0x1e>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_lseek_r+0x1e>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	20000250 	.word	0x20000250

080057ac <_read_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	4611      	mov	r1, r2
 80057b4:	2200      	movs	r2, #0
 80057b6:	4d05      	ldr	r5, [pc, #20]	; (80057cc <_read_r+0x20>)
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7fb fe64 	bl	8001488 <_read>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_read_r+0x1e>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_read_r+0x1e>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	20000250 	.word	0x20000250

080057d0 <_init>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr

080057dc <_fini>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr
