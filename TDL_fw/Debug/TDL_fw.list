
TDL_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbe4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800bcf8  0800bcf8  0001bcf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c288  0800c288  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c288  0800c288  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c288  0800c288  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c288  0800c288  0001c288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c28c  0800c28c  0001c28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002208  200001f4  0800c484  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023fc  0800c484  000223fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffef  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad7  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00032ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00033d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a03b  00000000  00000000  00034c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001333b  00000000  00000000  0004ec3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d690  00000000  00000000  00061f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005850  00000000  00000000  000ef658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bcdc 	.word	0x0800bcdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800bcdc 	.word	0x0800bcdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_f2iz>:
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa0:	d30f      	bcc.n	8000fc2 <__aeabi_f2iz+0x2a>
 8000fa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d90d      	bls.n	8000fc8 <__aeabi_f2iz+0x30>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	bf18      	it	ne
 8000fbe:	4240      	negne	r0, r0
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2iz+0x3a>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d105      	bne.n	8000fde <__aeabi_f2iz+0x46>
 8000fd2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd6:	bf08      	it	eq
 8000fd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4770      	bx	lr

08000fe4 <Set_Pin_Output>:
#include "ds18b20.h"

extern TIM_HandleTypeDef htim3;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2302      	movs	r3, #2
 8001008:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4619      	mov	r1, r3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f001 ff37 	bl	8002e84 <HAL_GPIO_Init>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f001 ff1a 	bl	8002e84 <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <delay_us>:

void delay_us (uint16_t us)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <delay_us+0x2c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 800106a:	bf00      	nop
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <delay_us+0x2c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3f9      	bcc.n	800106c <delay_us+0x14>
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20002314 	.word	0x20002314

08001088 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	4815      	ldr	r0, [pc, #84]	; (80010ec <DS18B20_Start+0x64>)
 8001098:	f7ff ffa4 	bl	8000fe4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <DS18B20_Start+0x64>)
 80010a4:	f002 f889 	bl	80031ba <HAL_GPIO_WritePin>
	delay_us (480);   // delay according to datasheet
 80010a8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80010ac:	f7ff ffd4 	bl	8001058 <delay_us>
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80010b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <DS18B20_Start+0x64>)
 80010b6:	f7ff ffb2 	bl	800101e <Set_Pin_Input>
	delay_us (80);    // delay according to datasheet
 80010ba:	2050      	movs	r0, #80	; 0x50
 80010bc:	f7ff ffcc 	bl	8001058 <delay_us>
	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN)))
 80010c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <DS18B20_Start+0x64>)
 80010c6:	f002 f861 	bl	800318c <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <DS18B20_Start+0x4e>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 80010d0:	2301      	movs	r3, #1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	e001      	b.n	80010da <DS18B20_Start+0x52>
	else Response = -1;
 80010d6:	23ff      	movs	r3, #255	; 0xff
 80010d8:	71fb      	strb	r3, [r7, #7]
	delay_us (400); // 480 us delay totally.
 80010da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010de:	f7ff ffbb 	bl	8001058 <delay_us>
	return Response;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40010c00 	.word	0x40010c00

080010f0 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fe:	4821      	ldr	r0, [pc, #132]	; (8001184 <DS18B20_Write+0x94>)
 8001100:	f7ff ff70 	bl	8000fe4 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e034      	b.n	8001174 <DS18B20_Write+0x84>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800110a:	79fa      	ldrb	r2, [r7, #7]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	fa42 f303 	asr.w	r3, r2, r3
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d016      	beq.n	8001148 <DS18B20_Write+0x58>
		{
			// write 1
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800111a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111e:	4819      	ldr	r0, [pc, #100]	; (8001184 <DS18B20_Write+0x94>)
 8001120:	f7ff ff60 	bl	8000fe4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <DS18B20_Write+0x94>)
 800112c:	f002 f845 	bl	80031ba <HAL_GPIO_WritePin>
			delay_us (1);  // wait for 1 us
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff ff91 	bl	8001058 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <DS18B20_Write+0x94>)
 800113c:	f7ff ff6f 	bl	800101e <Set_Pin_Input>
			delay_us (50);  // wait for 60 us
 8001140:	2032      	movs	r0, #50	; 0x32
 8001142:	f7ff ff89 	bl	8001058 <delay_us>
 8001146:	e012      	b.n	800116e <DS18B20_Write+0x7e>
		}
		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <DS18B20_Write+0x94>)
 800114e:	f7ff ff49 	bl	8000fe4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <DS18B20_Write+0x94>)
 800115a:	f002 f82e 	bl	80031ba <HAL_GPIO_WritePin>
			delay_us (50);  // wait for 60 us
 800115e:	2032      	movs	r0, #50	; 0x32
 8001160:	f7ff ff7a 	bl	8001058 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <DS18B20_Write+0x94>)
 800116a:	f7ff ff58 	bl	800101e <Set_Pin_Input>
	for (int i=0; i<8; i++)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3301      	adds	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b07      	cmp	r3, #7
 8001178:	ddc7      	ble.n	800110a <DS18B20_Write+0x1a>
		}
	}
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010c00 	.word	0x40010c00

08001188 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <DS18B20_Read+0x80>)
 8001198:	f7ff ff41 	bl	800101e <Set_Pin_Input>
	for (int i=0;i<8;i++)
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	e02a      	b.n	80011f8 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80011a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a6:	4818      	ldr	r0, [pc, #96]	; (8001208 <DS18B20_Read+0x80>)
 80011a8:	f7ff ff1c 	bl	8000fe4 <Set_Pin_Output>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, 0);  // pull the data pin LOW
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	4815      	ldr	r0, [pc, #84]	; (8001208 <DS18B20_Read+0x80>)
 80011b4:	f002 f801 	bl	80031ba <HAL_GPIO_WritePin>
		delay_us (2);  // wait for 2 us
 80011b8:	2002      	movs	r0, #2
 80011ba:	f7ff ff4d 	bl	8001058 <delay_us>
		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <DS18B20_Read+0x80>)
 80011c4:	f7ff ff2b 	bl	800101e <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_9))  // if the pin is HIGH
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <DS18B20_Read+0x80>)
 80011ce:	f001 ffdd 	bl	800318c <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d009      	beq.n	80011ec <DS18B20_Read+0x64>
		{
			value |= 1<<i;  // read = 1
 80011d8:	2201      	movs	r2, #1
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	71fb      	strb	r3, [r7, #7]
		}
		delay_us (60);  // wait for 60 us
 80011ec:	203c      	movs	r0, #60	; 0x3c
 80011ee:	f7ff ff33 	bl	8001058 <delay_us>
	for (int i=0;i<8;i++)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	ddd1      	ble.n	80011a2 <DS18B20_Read+0x1a>
	}
	return value;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010c00 	.word	0x40010c00

0800120c <DS18B20_Temp2Float>:


float DS18B20_Temp2Float(uint16_t number)
{
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
	uint16_t aux;
	float result = 0;
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
	float signo;
	uint16_t mask = 0b1111100000000000;
 800121c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001220:	827b      	strh	r3, [r7, #18]
	// extracción del signo
	if((number & mask) > 0)
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	8a7b      	ldrh	r3, [r7, #18]
 8001226:	4013      	ands	r3, r2
 8001228:	b29b      	uxth	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <DS18B20_Temp2Float+0x28>
		signo = -1;
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <DS18B20_Temp2Float+0xec>)
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e002      	b.n	800123a <DS18B20_Temp2Float+0x2e>
	else
		signo = 1;
 8001234:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001238:	617b      	str	r3, [r7, #20]
	// calculo de la magnitud
	mask = 0b0000011111111111;
 800123a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800123e:	827b      	strh	r3, [r7, #18]
	// parte entera
	if (signo == -1)
 8001240:	492d      	ldr	r1, [pc, #180]	; (80012f8 <DS18B20_Temp2Float+0xec>)
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff fe76 	bl	8000f34 <__aeabi_fcmpeq>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00c      	beq.n	8001268 <DS18B20_Temp2Float+0x5c>
	{                     // complemento A2
		aux = ~number & mask;
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	43db      	mvns	r3, r3
 8001254:	b21a      	sxth	r2, r3
 8001256:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800125a:	4013      	ands	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	83fb      	strh	r3, [r7, #30]
		aux+=1;
 8001260:	8bfb      	ldrh	r3, [r7, #30]
 8001262:	3301      	adds	r3, #1
 8001264:	83fb      	strh	r3, [r7, #30]
 8001266:	e003      	b.n	8001270 <DS18B20_Temp2Float+0x64>
	}
	else
	{
		aux = number & mask;
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	8a7b      	ldrh	r3, [r7, #18]
 800126c:	4013      	ands	r3, r2
 800126e:	83fb      	strh	r3, [r7, #30]
	}
// parte decimal
	result = 0;
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
	mask = 0b0000000000000001;
 8001276:	2301      	movs	r3, #1
 8001278:	827b      	strh	r3, [r7, #18]
	for (int i=0;i<12;i++)
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	e02e      	b.n	80012de <DS18B20_Temp2Float+0xd2>
	{
		 if((aux & mask)>0)
 8001280:	8bfa      	ldrh	r2, [r7, #30]
 8001282:	8a7b      	ldrh	r3, [r7, #18]
 8001284:	4013      	ands	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d022      	beq.n	80012d2 <DS18B20_Temp2Float+0xc6>
			 result = result + .0625 *pow(2, i);
 800128c:	69b8      	ldr	r0, [r7, #24]
 800128e:	f7ff f97f 	bl	8000590 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff f968 	bl	800056c <__aeabi_i2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	f04f 0000 	mov.w	r0, #0
 80012a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012a8:	f009 fe36 	bl	800af18 <pow>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <DS18B20_Temp2Float+0xf0>)
 80012b2:	f7ff f9c5 	bl	8000640 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f809 	bl	80002d4 <__adddf3>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc91 	bl	8000bf0 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
		 mask = mask << 1;
 80012d2:	8a7b      	ldrh	r3, [r7, #18]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	827b      	strh	r3, [r7, #18]
	for (int i=0;i<12;i++)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b0b      	cmp	r3, #11
 80012e2:	ddcd      	ble.n	8001280 <DS18B20_Temp2Float+0x74>
	}
	return (signo * result);
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7fe ff3a 	bl	8000160 <__aeabi_fmul>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bdb0      	pop	{r4, r5, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	bf800000 	.word	0xbf800000
 80012fc:	3fb00000 	.word	0x3fb00000

08001300 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <SELECT+0x1c>)
 800130c:	f001 ff55 	bl	80031ba <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f001 fc85 	bl	8002c20 <HAL_Delay>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40010c00 	.word	0x40010c00

08001320 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <DESELECT+0x1c>)
 800132c:	f001 ff45 	bl	80031ba <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f001 fc75 	bl	8002c20 <HAL_Delay>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010c00 	.word	0x40010c00

08001340 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800134a:	bf00      	nop
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <SPI_TxByte+0x30>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b02      	cmp	r3, #2
 8001358:	d1f8      	bne.n	800134c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800135a:	1df9      	adds	r1, r7, #7
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	2201      	movs	r2, #1
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <SPI_TxByte+0x30>)
 8001362:	f002 fbbd 	bl	8003ae0 <HAL_SPI_Transmit>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20002274 	.word	0x20002274

08001374 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001380:	bf00      	nop
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <SPI_TxBuffer+0x30>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b02      	cmp	r3, #2
 800138e:	d1f8      	bne.n	8001382 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	2364      	movs	r3, #100	; 0x64
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <SPI_TxBuffer+0x30>)
 8001398:	f002 fba2 	bl	8003ae0 <HAL_SPI_Transmit>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20002274 	.word	0x20002274

080013a8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80013ae:	23ff      	movs	r3, #255	; 0xff
 80013b0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80013b2:	bf00      	nop
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <SPI_RxByte+0x34>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d1f8      	bne.n	80013b4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80013c2:	1dba      	adds	r2, r7, #6
 80013c4:	1df9      	adds	r1, r7, #7
 80013c6:	2364      	movs	r3, #100	; 0x64
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2301      	movs	r3, #1
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <SPI_RxByte+0x34>)
 80013ce:	f002 fcca 	bl	8003d66 <HAL_SPI_TransmitReceive>

	return data;
 80013d2:	79bb      	ldrb	r3, [r7, #6]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20002274 	.word	0x20002274

080013e0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80013e8:	f7ff ffde 	bl	80013a8 <SPI_RxByte>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	701a      	strb	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <SD_ReadyWait+0x30>)
 8001404:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001408:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800140a:	f7ff ffcd 	bl	80013a8 <SPI_RxByte>
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2bff      	cmp	r3, #255	; 0xff
 8001416:	d003      	beq.n	8001420 <SD_ReadyWait+0x24>
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <SD_ReadyWait+0x30>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f4      	bne.n	800140a <SD_ReadyWait+0xe>

	return res;
 8001420:	79fb      	ldrb	r3, [r7, #7]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000212 	.word	0x20000212

08001430 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001436:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800143a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800143c:	f7ff ff70 	bl	8001320 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	e005      	b.n	8001452 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001446:	20ff      	movs	r0, #255	; 0xff
 8001448:	f7ff ff7a 	bl	8001340 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b09      	cmp	r3, #9
 8001456:	ddf6      	ble.n	8001446 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001458:	f7ff ff52 	bl	8001300 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800145c:	2340      	movs	r3, #64	; 0x40
 800145e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001470:	2395      	movs	r3, #149	; 0x95
 8001472:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001474:	463b      	mov	r3, r7
 8001476:	2106      	movs	r1, #6
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff7b 	bl	8001374 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800147e:	e002      	b.n	8001486 <SD_PowerOn+0x56>
	{
		cnt--;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3b01      	subs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001486:	f7ff ff8f 	bl	80013a8 <SPI_RxByte>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d002      	beq.n	8001496 <SD_PowerOn+0x66>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f4      	bne.n	8001480 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001496:	f7ff ff43 	bl	8001320 <DESELECT>
	SPI_TxByte(0XFF);
 800149a:	20ff      	movs	r0, #255	; 0xff
 800149c:	f7ff ff50 	bl	8001340 <SPI_TxByte>

	PowerFlag = 1;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <SD_PowerOn+0x80>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000215 	.word	0x20000215

080014b4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <SD_PowerOff+0x14>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000215 	.word	0x20000215

080014cc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	return PowerFlag;
 80014d0:	4b02      	ldr	r3, [pc, #8]	; (80014dc <SD_CheckPower+0x10>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000215 	.word	0x20000215

080014e0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <SD_RxDataBlock+0x58>)
 80014ec:	22c8      	movs	r2, #200	; 0xc8
 80014ee:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80014f0:	f7ff ff5a 	bl	80013a8 <SPI_RxByte>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2bff      	cmp	r3, #255	; 0xff
 80014fc:	d103      	bne.n	8001506 <SD_RxDataBlock+0x26>
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <SD_RxDataBlock+0x58>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f4      	bne.n	80014f0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2bfe      	cmp	r3, #254	; 0xfe
 800150a:	d001      	beq.n	8001510 <SD_RxDataBlock+0x30>
 800150c:	2300      	movs	r3, #0
 800150e:	e00f      	b.n	8001530 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff62 	bl	80013e0 <SPI_RxBytePtr>
	} while(len--);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	603a      	str	r2, [r7, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f4      	bne.n	8001510 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001526:	f7ff ff3f 	bl	80013a8 <SPI_RxByte>
	SPI_RxByte();
 800152a:	f7ff ff3d 	bl	80013a8 <SPI_RxByte>

	return TRUE;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000210 	.word	0x20000210

0800153c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800154c:	f7ff ff56 	bl	80013fc <SD_ReadyWait>
 8001550:	4603      	mov	r3, r0
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d001      	beq.n	800155a <SD_TxDataBlock+0x1e>
 8001556:	2300      	movs	r3, #0
 8001558:	e02f      	b.n	80015ba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff feef 	bl	8001340 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	2bfd      	cmp	r3, #253	; 0xfd
 8001566:	d020      	beq.n	80015aa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff01 	bl	8001374 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001572:	f7ff ff19 	bl	80013a8 <SPI_RxByte>
		SPI_RxByte();
 8001576:	f7ff ff17 	bl	80013a8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800157a:	e00b      	b.n	8001594 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800157c:	f7ff ff14 	bl	80013a8 <SPI_RxByte>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	2b05      	cmp	r3, #5
 800158c:	d006      	beq.n	800159c <SD_TxDataBlock+0x60>
			i++;
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	3301      	adds	r3, #1
 8001592:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	2b40      	cmp	r3, #64	; 0x40
 8001598:	d9f0      	bls.n	800157c <SD_TxDataBlock+0x40>
 800159a:	e000      	b.n	800159e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800159c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800159e:	bf00      	nop
 80015a0:	f7ff ff02 	bl	80013a8 <SPI_RxByte>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0fa      	beq.n	80015a0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d101      	bne.n	80015b8 <SD_TxDataBlock+0x7c>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <SD_TxDataBlock+0x7e>

	return FALSE;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	6039      	str	r1, [r7, #0]
 80015cc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80015ce:	f7ff ff15 	bl	80013fc <SD_ReadyWait>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2bff      	cmp	r3, #255	; 0xff
 80015d6:	d001      	beq.n	80015dc <SD_SendCmd+0x1a>
 80015d8:	23ff      	movs	r3, #255	; 0xff
 80015da:	e042      	b.n	8001662 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff feae 	bl	8001340 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	0e1b      	lsrs	r3, r3, #24
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fea8 	bl	8001340 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fea2 	bl	8001340 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fe9c 	bl	8001340 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe97 	bl	8001340 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b40      	cmp	r3, #64	; 0x40
 8001616:	d102      	bne.n	800161e <SD_SendCmd+0x5c>
 8001618:	2395      	movs	r3, #149	; 0x95
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e007      	b.n	800162e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b48      	cmp	r3, #72	; 0x48
 8001622:	d102      	bne.n	800162a <SD_SendCmd+0x68>
 8001624:	2387      	movs	r3, #135	; 0x87
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e001      	b.n	800162e <SD_SendCmd+0x6c>
	else crc = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fe85 	bl	8001340 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b4c      	cmp	r3, #76	; 0x4c
 800163a:	d101      	bne.n	8001640 <SD_SendCmd+0x7e>
 800163c:	f7ff feb4 	bl	80013a8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001640:	230a      	movs	r3, #10
 8001642:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001644:	f7ff feb0 	bl	80013a8 <SPI_RxByte>
 8001648:	4603      	mov	r3, r0
 800164a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800164c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da05      	bge.n	8001660 <SD_SendCmd+0x9e>
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	3b01      	subs	r3, #1
 8001658:	73bb      	strb	r3, [r7, #14]
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f1      	bne.n	8001644 <SD_SendCmd+0x82>

	return res;
 8001660:	7b7b      	ldrb	r3, [r7, #13]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_disk_initialize+0x14>
 800167c:	2301      	movs	r3, #1
 800167e:	e0d1      	b.n	8001824 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <SD_disk_initialize+0x1c0>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <SD_disk_initialize+0x2a>
 800168e:	4b67      	ldr	r3, [pc, #412]	; (800182c <SD_disk_initialize+0x1c0>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	e0c6      	b.n	8001824 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001696:	f7ff fecb 	bl	8001430 <SD_PowerOn>

	/* slave select */
	SELECT();
 800169a:	f7ff fe31 	bl	8001300 <SELECT>

	/* check disk type */
	type = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80016a2:	2100      	movs	r1, #0
 80016a4:	2040      	movs	r0, #64	; 0x40
 80016a6:	f7ff ff8c 	bl	80015c2 <SD_SendCmd>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	f040 80a1 	bne.w	80017f4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80016b2:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <SD_disk_initialize+0x1c4>)
 80016b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80016ba:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80016be:	2048      	movs	r0, #72	; 0x48
 80016c0:	f7ff ff7f 	bl	80015c2 <SD_SendCmd>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d155      	bne.n	8001776 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e00c      	b.n	80016ea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80016d0:	7bfc      	ldrb	r4, [r7, #15]
 80016d2:	f7ff fe69 	bl	80013a8 <SPI_RxByte>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	f104 0310 	add.w	r3, r4, #16
 80016de:	443b      	add	r3, r7
 80016e0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	3301      	adds	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d9ef      	bls.n	80016d0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80016f0:	7abb      	ldrb	r3, [r7, #10]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d17e      	bne.n	80017f4 <SD_disk_initialize+0x188>
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	2baa      	cmp	r3, #170	; 0xaa
 80016fa:	d17b      	bne.n	80017f4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80016fc:	2100      	movs	r1, #0
 80016fe:	2077      	movs	r0, #119	; 0x77
 8001700:	f7ff ff5f 	bl	80015c2 <SD_SendCmd>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d807      	bhi.n	800171a <SD_disk_initialize+0xae>
 800170a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800170e:	2069      	movs	r0, #105	; 0x69
 8001710:	f7ff ff57 	bl	80015c2 <SD_SendCmd>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800171a:	4b45      	ldr	r3, [pc, #276]	; (8001830 <SD_disk_initialize+0x1c4>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ec      	bne.n	80016fc <SD_disk_initialize+0x90>
 8001722:	e000      	b.n	8001726 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001724:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001726:	4b42      	ldr	r3, [pc, #264]	; (8001830 <SD_disk_initialize+0x1c4>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d062      	beq.n	80017f4 <SD_disk_initialize+0x188>
 800172e:	2100      	movs	r1, #0
 8001730:	207a      	movs	r0, #122	; 0x7a
 8001732:	f7ff ff46 	bl	80015c2 <SD_SendCmd>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d15b      	bne.n	80017f4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e00c      	b.n	800175c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001742:	7bfc      	ldrb	r4, [r7, #15]
 8001744:	f7ff fe30 	bl	80013a8 <SPI_RxByte>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	f104 0310 	add.w	r3, r4, #16
 8001750:	443b      	add	r3, r7
 8001752:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	3301      	adds	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d9ef      	bls.n	8001742 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001762:	7a3b      	ldrb	r3, [r7, #8]
 8001764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SD_disk_initialize+0x104>
 800176c:	230c      	movs	r3, #12
 800176e:	e000      	b.n	8001772 <SD_disk_initialize+0x106>
 8001770:	2304      	movs	r3, #4
 8001772:	73bb      	strb	r3, [r7, #14]
 8001774:	e03e      	b.n	80017f4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001776:	2100      	movs	r1, #0
 8001778:	2077      	movs	r0, #119	; 0x77
 800177a:	f7ff ff22 	bl	80015c2 <SD_SendCmd>
 800177e:	4603      	mov	r3, r0
 8001780:	2b01      	cmp	r3, #1
 8001782:	d808      	bhi.n	8001796 <SD_disk_initialize+0x12a>
 8001784:	2100      	movs	r1, #0
 8001786:	2069      	movs	r0, #105	; 0x69
 8001788:	f7ff ff1b 	bl	80015c2 <SD_SendCmd>
 800178c:	4603      	mov	r3, r0
 800178e:	2b01      	cmp	r3, #1
 8001790:	d801      	bhi.n	8001796 <SD_disk_initialize+0x12a>
 8001792:	2302      	movs	r3, #2
 8001794:	e000      	b.n	8001798 <SD_disk_initialize+0x12c>
 8001796:	2301      	movs	r3, #1
 8001798:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800179a:	7bbb      	ldrb	r3, [r7, #14]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d10e      	bne.n	80017be <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80017a0:	2100      	movs	r1, #0
 80017a2:	2077      	movs	r0, #119	; 0x77
 80017a4:	f7ff ff0d 	bl	80015c2 <SD_SendCmd>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d80e      	bhi.n	80017cc <SD_disk_initialize+0x160>
 80017ae:	2100      	movs	r1, #0
 80017b0:	2069      	movs	r0, #105	; 0x69
 80017b2:	f7ff ff06 	bl	80015c2 <SD_SendCmd>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <SD_disk_initialize+0x160>
 80017bc:	e00c      	b.n	80017d8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80017be:	2100      	movs	r1, #0
 80017c0:	2041      	movs	r0, #65	; 0x41
 80017c2:	f7ff fefe 	bl	80015c2 <SD_SendCmd>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <SD_disk_initialize+0x1c4>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e2      	bne.n	800179a <SD_disk_initialize+0x12e>
 80017d4:	e000      	b.n	80017d8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80017d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <SD_disk_initialize+0x1c4>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <SD_disk_initialize+0x184>
 80017e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e4:	2050      	movs	r0, #80	; 0x50
 80017e6:	f7ff feec 	bl	80015c2 <SD_SendCmd>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SD_disk_initialize+0x188>
 80017f0:	2300      	movs	r3, #0
 80017f2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80017f4:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <SD_disk_initialize+0x1c8>)
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80017fa:	f7ff fd91 	bl	8001320 <DESELECT>
	SPI_RxByte();
 80017fe:	f7ff fdd3 	bl	80013a8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <SD_disk_initialize+0x1c0>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SD_disk_initialize+0x1c0>)
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e001      	b.n	800181e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800181a:	f7ff fe4b 	bl	80014b4 <SD_PowerOff>
	}

	return Stat;
 800181e:	4b03      	ldr	r3, [pc, #12]	; (800182c <SD_disk_initialize+0x1c0>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b2db      	uxtb	r3, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	20000000 	.word	0x20000000
 8001830:	20000210 	.word	0x20000210
 8001834:	20000214 	.word	0x20000214

08001838 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SD_disk_status+0x14>
 8001848:	2301      	movs	r3, #1
 800184a:	e002      	b.n	8001852 <SD_disk_status+0x1a>
	return Stat;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <SD_disk_status+0x24>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b2db      	uxtb	r3, r3
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000000 	.word	0x20000000

08001860 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <SD_disk_read+0x1c>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <SD_disk_read+0x20>
 800187c:	2304      	movs	r3, #4
 800187e:	e051      	b.n	8001924 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <SD_disk_read+0xcc>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SD_disk_read+0x32>
 800188e:	2303      	movs	r3, #3
 8001890:	e048      	b.n	8001924 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <SD_disk_read+0xd0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <SD_disk_read+0x44>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	607b      	str	r3, [r7, #4]

	SELECT();
 80018a4:	f7ff fd2c 	bl	8001300 <SELECT>

	if (count == 1)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d111      	bne.n	80018d2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	2051      	movs	r0, #81	; 0x51
 80018b2:	f7ff fe86 	bl	80015c2 <SD_SendCmd>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d129      	bne.n	8001910 <SD_disk_read+0xb0>
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f7ff fe0d 	bl	80014e0 <SD_RxDataBlock>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d021      	beq.n	8001910 <SD_disk_read+0xb0>
 80018cc:	2300      	movs	r3, #0
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	e01e      	b.n	8001910 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	2052      	movs	r0, #82	; 0x52
 80018d6:	f7ff fe74 	bl	80015c2 <SD_SendCmd>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d117      	bne.n	8001910 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80018e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	f7ff fdfb 	bl	80014e0 <SD_RxDataBlock>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00a      	beq.n	8001906 <SD_disk_read+0xa6>
				buff += 512;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018f6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ed      	bne.n	80018e0 <SD_disk_read+0x80>
 8001904:	e000      	b.n	8001908 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001906:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001908:	2100      	movs	r1, #0
 800190a:	204c      	movs	r0, #76	; 0x4c
 800190c:	f7ff fe59 	bl	80015c2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001910:	f7ff fd06 	bl	8001320 <DESELECT>
	SPI_RxByte();
 8001914:	f7ff fd48 	bl	80013a8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000000 	.word	0x20000000
 8001930:	20000214 	.word	0x20000214

08001934 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <SD_disk_write+0x1c>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <SD_disk_write+0x20>
 8001950:	2304      	movs	r3, #4
 8001952:	e06b      	b.n	8001a2c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001954:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <SD_disk_write+0x100>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SD_disk_write+0x32>
 8001962:	2303      	movs	r3, #3
 8001964:	e062      	b.n	8001a2c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001966:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <SD_disk_write+0x100>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SD_disk_write+0x44>
 8001974:	2302      	movs	r3, #2
 8001976:	e059      	b.n	8001a2c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <SD_disk_write+0x104>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <SD_disk_write+0x56>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	607b      	str	r3, [r7, #4]

	SELECT();
 800198a:	f7ff fcb9 	bl	8001300 <SELECT>

	if (count == 1)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d110      	bne.n	80019b6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	2058      	movs	r0, #88	; 0x58
 8001998:	f7ff fe13 	bl	80015c2 <SD_SendCmd>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d13a      	bne.n	8001a18 <SD_disk_write+0xe4>
 80019a2:	21fe      	movs	r1, #254	; 0xfe
 80019a4:	68b8      	ldr	r0, [r7, #8]
 80019a6:	f7ff fdc9 	bl	800153c <SD_TxDataBlock>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d033      	beq.n	8001a18 <SD_disk_write+0xe4>
			count = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	e030      	b.n	8001a18 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <SD_disk_write+0x104>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80019c2:	2100      	movs	r1, #0
 80019c4:	2077      	movs	r0, #119	; 0x77
 80019c6:	f7ff fdfc 	bl	80015c2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80019ca:	6839      	ldr	r1, [r7, #0]
 80019cc:	2057      	movs	r0, #87	; 0x57
 80019ce:	f7ff fdf8 	bl	80015c2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	2059      	movs	r0, #89	; 0x59
 80019d6:	f7ff fdf4 	bl	80015c2 <SD_SendCmd>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11b      	bne.n	8001a18 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80019e0:	21fc      	movs	r1, #252	; 0xfc
 80019e2:	68b8      	ldr	r0, [r7, #8]
 80019e4:	f7ff fdaa 	bl	800153c <SD_TxDataBlock>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00a      	beq.n	8001a04 <SD_disk_write+0xd0>
				buff += 512;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019f4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ee      	bne.n	80019e0 <SD_disk_write+0xac>
 8001a02:	e000      	b.n	8001a06 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001a04:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001a06:	21fd      	movs	r1, #253	; 0xfd
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fd97 	bl	800153c <SD_TxDataBlock>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <SD_disk_write+0xe4>
			{
				count = 1;
 8001a14:	2301      	movs	r3, #1
 8001a16:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001a18:	f7ff fc82 	bl	8001320 <DESELECT>
	SPI_RxByte();
 8001a1c:	f7ff fcc4 	bl	80013a8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000214 	.word	0x20000214

08001a3c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	603a      	str	r2, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SD_disk_ioctl+0x1e>
 8001a56:	2304      	movs	r3, #4
 8001a58:	e115      	b.n	8001c86 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d124      	bne.n	8001ab0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d012      	beq.n	8001a94 <SD_disk_ioctl+0x58>
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	dc1a      	bgt.n	8001aa8 <SD_disk_ioctl+0x6c>
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <SD_disk_ioctl+0x40>
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d006      	beq.n	8001a88 <SD_disk_ioctl+0x4c>
 8001a7a:	e015      	b.n	8001aa8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001a7c:	f7ff fd1a 	bl	80014b4 <SD_PowerOff>
			res = RES_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a86:	e0fc      	b.n	8001c82 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001a88:	f7ff fcd2 	bl	8001430 <SD_PowerOn>
			res = RES_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a92:	e0f6      	b.n	8001c82 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	1c5c      	adds	r4, r3, #1
 8001a98:	f7ff fd18 	bl	80014cc <SD_CheckPower>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001aa6:	e0ec      	b.n	8001c82 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aae:	e0e8      	b.n	8001c82 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ab0:	4b77      	ldr	r3, [pc, #476]	; (8001c90 <SD_disk_ioctl+0x254>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SD_disk_ioctl+0x86>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0e1      	b.n	8001c86 <SD_disk_ioctl+0x24a>

		SELECT();
 8001ac2:	f7ff fc1d 	bl	8001300 <SELECT>

		switch (ctrl)
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	2b0d      	cmp	r3, #13
 8001aca:	f200 80cb 	bhi.w	8001c64 <SD_disk_ioctl+0x228>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <SD_disk_ioctl+0x98>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001bcf 	.word	0x08001bcf
 8001ad8:	08001b0d 	.word	0x08001b0d
 8001adc:	08001bbf 	.word	0x08001bbf
 8001ae0:	08001c65 	.word	0x08001c65
 8001ae4:	08001c65 	.word	0x08001c65
 8001ae8:	08001c65 	.word	0x08001c65
 8001aec:	08001c65 	.word	0x08001c65
 8001af0:	08001c65 	.word	0x08001c65
 8001af4:	08001c65 	.word	0x08001c65
 8001af8:	08001c65 	.word	0x08001c65
 8001afc:	08001c65 	.word	0x08001c65
 8001b00:	08001be1 	.word	0x08001be1
 8001b04:	08001c05 	.word	0x08001c05
 8001b08:	08001c29 	.word	0x08001c29
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2049      	movs	r0, #73	; 0x49
 8001b10:	f7ff fd57 	bl	80015c2 <SD_SendCmd>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 80a8 	bne.w	8001c6c <SD_disk_ioctl+0x230>
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2110      	movs	r1, #16
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fcdc 	bl	80014e0 <SD_RxDataBlock>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 809e 	beq.w	8001c6c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001b30:	7b3b      	ldrb	r3, [r7, #12]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10e      	bne.n	8001b58 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001b3a:	7d7b      	ldrb	r3, [r7, #21]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	7d3b      	ldrb	r3, [r7, #20]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001b4e:	8bfb      	ldrh	r3, [r7, #30]
 8001b50:	029a      	lsls	r2, r3, #10
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e02e      	b.n	8001bb6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001b58:	7c7b      	ldrb	r3, [r7, #17]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	7dbb      	ldrb	r3, [r7, #22]
 8001b62:	09db      	lsrs	r3, r3, #7
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	7d7b      	ldrb	r3, [r7, #21]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f003 0306 	and.w	r3, r3, #6
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b80:	7d3b      	ldrb	r3, [r7, #20]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	7cbb      	ldrb	r3, [r7, #18]
 8001b96:	029b      	lsls	r3, r3, #10
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ba8:	8bfa      	ldrh	r2, [r7, #30]
 8001baa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bae:	3b09      	subs	r3, #9
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001bbc:	e056      	b.n	8001c6c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001bcc:	e055      	b.n	8001c7a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001bce:	f7ff fc15 	bl	80013fc <SD_ReadyWait>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2bff      	cmp	r3, #255	; 0xff
 8001bd6:	d14b      	bne.n	8001c70 <SD_disk_ioctl+0x234>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001bde:	e047      	b.n	8001c70 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001be0:	2100      	movs	r1, #0
 8001be2:	2049      	movs	r0, #73	; 0x49
 8001be4:	f7ff fced 	bl	80015c2 <SD_SendCmd>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d142      	bne.n	8001c74 <SD_disk_ioctl+0x238>
 8001bee:	2110      	movs	r1, #16
 8001bf0:	6a38      	ldr	r0, [r7, #32]
 8001bf2:	f7ff fc75 	bl	80014e0 <SD_RxDataBlock>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d03b      	beq.n	8001c74 <SD_disk_ioctl+0x238>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c02:	e037      	b.n	8001c74 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001c04:	2100      	movs	r1, #0
 8001c06:	204a      	movs	r0, #74	; 0x4a
 8001c08:	f7ff fcdb 	bl	80015c2 <SD_SendCmd>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d132      	bne.n	8001c78 <SD_disk_ioctl+0x23c>
 8001c12:	2110      	movs	r1, #16
 8001c14:	6a38      	ldr	r0, [r7, #32]
 8001c16:	f7ff fc63 	bl	80014e0 <SD_RxDataBlock>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d02b      	beq.n	8001c78 <SD_disk_ioctl+0x23c>
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001c26:	e027      	b.n	8001c78 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	207a      	movs	r0, #122	; 0x7a
 8001c2c:	f7ff fcc9 	bl	80015c2 <SD_SendCmd>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c3c:	e00b      	b.n	8001c56 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001c3e:	6a3c      	ldr	r4, [r7, #32]
 8001c40:	1c63      	adds	r3, r4, #1
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	f7ff fbb0 	bl	80013a8 <SPI_RxByte>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c50:	3301      	adds	r3, #1
 8001c52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d9ef      	bls.n	8001c3e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001c64:	2304      	movs	r3, #4
 8001c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c6a:	e006      	b.n	8001c7a <SD_disk_ioctl+0x23e>
			break;
 8001c6c:	bf00      	nop
 8001c6e:	e004      	b.n	8001c7a <SD_disk_ioctl+0x23e>
			break;
 8001c70:	bf00      	nop
 8001c72:	e002      	b.n	8001c7a <SD_disk_ioctl+0x23e>
			break;
 8001c74:	bf00      	nop
 8001c76:	e000      	b.n	8001c7a <SD_disk_ioctl+0x23e>
			break;
 8001c78:	bf00      	nop
		}

		DESELECT();
 8001c7a:	f7ff fb51 	bl	8001320 <DESELECT>
		SPI_RxByte();
 8001c7e:	f7ff fb93 	bl	80013a8 <SPI_RxByte>
	}

	return res;
 8001c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	372c      	adds	r7, #44	; 0x2c
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000

08001c94 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8001ca2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001ca6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8001caa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cae:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8001cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001cb6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f80e 	bl	8001cea <Lcd_init>

	return lcd;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	f107 0410 	add.w	r4, r7, #16
 8001cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cde:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bdb0      	pop	{r4, r5, r7, pc}

08001cea <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7d9b      	ldrb	r3, [r3, #22]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001cfa:	2133      	movs	r1, #51	; 0x33
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8bb 	bl	8001e78 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8001d02:	2132      	movs	r1, #50	; 0x32
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8b7 	bl	8001e78 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001d0a:	2128      	movs	r1, #40	; 0x28
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8b3 	bl	8001e78 <lcd_write_command>
 8001d12:	e003      	b.n	8001d1c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001d14:	2138      	movs	r1, #56	; 0x38
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8ae 	bl	8001e78 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8aa 	bl	8001e78 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001d24:	210c      	movs	r1, #12
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8a6 	bl	8001e78 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001d2c:	2106      	movs	r1, #6
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8a2 	bl	8001e78 <lcd_write_command>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4906      	ldr	r1, [pc, #24]	; (8001d68 <Lcd_int+0x2c>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f006 fe6a 	bl	8008a28 <siprintf>
	Lcd_string(lcd, buffer);
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f852 	bl	8001e04 <Lcd_string>
}
 8001d60:	bf00      	nop
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	0800bcf8 	.word	0x0800bcf8

08001d6c <Lcd_float_lim>:

/*
 * Write a number on the current position
 */
void Lcd_float_lim(Lcd_HandleTypeDef * lcd, float number, uint8_t decimal)
{
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	71fb      	strb	r3, [r7, #7]
	int intPart = (int) number;
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff f90c 	bl	8000f98 <__aeabi_f2iz>
 8001d80:	4603      	mov	r3, r0
 8001d82:	617b      	str	r3, [r7, #20]
	Lcd_int(lcd, intPart);
 8001d84:	6979      	ldr	r1, [r7, #20]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff ffd8 	bl	8001d3c <Lcd_int>
	Lcd_string(lcd, ".");
 8001d8c:	491b      	ldr	r1, [pc, #108]	; (8001dfc <Lcd_float_lim+0x90>)
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f838 	bl	8001e04 <Lcd_string>
	number = number - (float)intPart;
 8001d94:	6978      	ldr	r0, [r7, #20]
 8001d96:	f7ff f835 	bl	8000e04 <__aeabi_i2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	68b8      	ldr	r0, [r7, #8]
 8001da0:	f7fe ff7a 	bl	8000c98 <__aeabi_fsub>
 8001da4:	4603      	mov	r3, r0
 8001da6:	60bb      	str	r3, [r7, #8]
	number = number * pow(10,decimal);
 8001da8:	68b8      	ldr	r0, [r7, #8]
 8001daa:	f7fe fbf1 	bl	8000590 <__aeabi_f2d>
 8001dae:	4604      	mov	r4, r0
 8001db0:	460d      	mov	r5, r1
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbc9 	bl	800054c <__aeabi_ui2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	f04f 0000 	mov.w	r0, #0
 8001dc2:	490f      	ldr	r1, [pc, #60]	; (8001e00 <Lcd_float_lim+0x94>)
 8001dc4:	f009 f8a8 	bl	800af18 <pow>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4620      	mov	r0, r4
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f7fe fc36 	bl	8000640 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe ff08 	bl	8000bf0 <__aeabi_d2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	60bb      	str	r3, [r7, #8]
	Lcd_int(lcd, (int)number);
 8001de4:	68b8      	ldr	r0, [r7, #8]
 8001de6:	f7ff f8d7 	bl	8000f98 <__aeabi_f2iz>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4619      	mov	r1, r3
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff ffa4 	bl	8001d3c <Lcd_int>
}
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfc:	0800bd04 	.word	0x0800bd04
 8001e00:	40240000 	.word	0x40240000

08001e04 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e00a      	b.n	8001e2a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f858 	bl	8001ed4 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	3301      	adds	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	7bfc      	ldrb	r4, [r7, #15]
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f7fe f98f 	bl	8000150 <strlen>
 8001e32:	4603      	mov	r3, r0
 8001e34:	429c      	cmp	r4, r3
 8001e36:	d3ed      	bcc.n	8001e14 <Lcd_string+0x10>
	}
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}
	...

08001e44 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
 8001e50:	4613      	mov	r3, r2
 8001e52:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <Lcd_cursor+0x30>)
 8001e58:	5cd2      	ldrb	r2, [r2, r3]
 8001e5a:	78bb      	ldrb	r3, [r7, #2]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3b80      	subs	r3, #128	; 0x80
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f806 	bl	8001e78 <lcd_write_command>
	#endif
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	0800bdd4 	.word	0x0800bdd4

08001e78 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6898      	ldr	r0, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	899b      	ldrh	r3, [r3, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f001 f993 	bl	80031ba <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7d9b      	ldrb	r3, [r3, #22]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d111      	bne.n	8001ec0 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f842 	bl	8001f30 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f839 	bl	8001f30 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001ebe:	e005      	b.n	8001ecc <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f832 	bl	8001f30 <lcd_write>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	899b      	ldrh	r3, [r3, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4619      	mov	r1, r3
 8001eec:	f001 f965 	bl	80031ba <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7d9b      	ldrb	r3, [r3, #22]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2204      	movs	r2, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f814 	bl	8001f30 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2204      	movs	r2, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f80b 	bl	8001f30 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001f1a:	e005      	b.n	8001f28 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	2208      	movs	r2, #8
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f804 	bl	8001f30 <lcd_write>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e019      	b.n	8001f7a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	8819      	ldrh	r1, [r3, #0]
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	fa42 f303 	asr.w	r3, r2, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f001 f923 	bl	80031ba <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3301      	adds	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	78bb      	ldrb	r3, [r7, #2]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3e1      	bcc.n	8001f46 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6918      	ldr	r0, [r3, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	8a9b      	ldrh	r3, [r3, #20]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f001 f914 	bl	80031ba <HAL_GPIO_WritePin>
	DELAY(1);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f000 fe44 	bl	8002c20 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6918      	ldr	r0, [r3, #16]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8a9b      	ldrh	r3, [r3, #20]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f001 f909 	bl	80031ba <HAL_GPIO_WritePin>
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b0b0      	sub	sp, #192	; 0xc0
 8001fb4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb6:	f000 fdd1 	bl	8002b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fba:	f000 fa25 	bl	8002408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fbe:	f000 fb3b 	bl	8002638 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001fc2:	f000 faeb 	bl	800259c <MX_TIM3_Init>
  MX_SPI2_Init();
 8001fc6:	f000 fa65 	bl	8002494 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001fca:	f002 fd6b 	bl	8004aa4 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001fce:	f000 fa97 	bl	8002500 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8001fd2:	4866      	ldr	r0, [pc, #408]	; (800216c <main+0x1bc>)
 8001fd4:	f002 f96e 	bl	80042b4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001fd8:	4865      	ldr	r0, [pc, #404]	; (8002170 <main+0x1c0>)
 8001fda:	f002 f9b5 	bl	8004348 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 8001fde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe2:	f000 fe1d 	bl	8002c20 <HAL_Delay>

  uint8_t Presence;
  uint8_t scratchPad[8];
  uint16_t buffer;
  uint16_t sample = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
  char message[25];
  int m;
  //float temperature;

  Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8001fec:	4b61      	ldr	r3, [pc, #388]	; (8002174 <main+0x1c4>)
 8001fee:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8001ff8:	4a5f      	ldr	r2, [pc, #380]	; (8002178 <main+0x1c8>)
 8001ffa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002002:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_1, LCD_4_BIT_MODE);
 8002006:	4638      	mov	r0, r7
 8002008:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800200c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002010:	2300      	movs	r3, #0
 8002012:	9303      	str	r3, [sp, #12]
 8002014:	2302      	movs	r3, #2
 8002016:	9302      	str	r3, [sp, #8]
 8002018:	4b58      	ldr	r3, [pc, #352]	; (800217c <main+0x1cc>)
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	2340      	movs	r3, #64	; 0x40
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	4b56      	ldr	r3, [pc, #344]	; (800217c <main+0x1cc>)
 8002022:	f7ff fe37 	bl	8001c94 <Lcd_create>
 8002026:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800202a:	463d      	mov	r5, r7
 800202c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800202e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002030:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002034:	e884 0003 	stmia.w	r4, {r0, r1}
    }
  Presence = Presence; // ToDo: chequeo de errores
  HAL_Delay(10000);
#endif
  // Sensor 1:
  uint8_t aux[N][8]= {{0x28, 0xEB, 0x42, 0x76, 0xE0, 0x01, 0x3C, 0x1A},
 8002038:	4b51      	ldr	r3, [pc, #324]	; (8002180 <main+0x1d0>)
 800203a:	f107 0418 	add.w	r4, r7, #24
 800203e:	461d      	mov	r5, r3
 8002040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002044:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  	  	  	 {0x28, 0x2F, 0x9B, 0x76, 0xE0, 0x01, 0x3C, 0xF4},
					 {0x28, 0x2C, 0x4D, 0x43, 0xD4, 0xE1, 0x3C, 0x93},
					 {0x28, 0xBF, 0x88, 0x43, 0xD4, 0xE1, 0x3C, 0x8B}};
  for(int j=0; j<N;j++)
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002052:	e029      	b.n	80020a8 <main+0xf8>
	  for(int i=0; i<8; i++)
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800205a:	e01c      	b.n	8002096 <main+0xe6>
	  {
		  sensor[j].ROM_NO[i]= aux[j][i];
 800205c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	33b0      	adds	r3, #176	; 0xb0
 8002064:	19da      	adds	r2, r3, r7
 8002066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800206a:	4413      	add	r3, r2
 800206c:	3b98      	subs	r3, #152	; 0x98
 800206e:	7818      	ldrb	r0, [r3, #0]
 8002070:	4944      	ldr	r1, [pc, #272]	; (8002184 <main+0x1d4>)
 8002072:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	18ca      	adds	r2, r1, r3
 8002080:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002084:	4413      	add	r3, r2
 8002086:	3304      	adds	r3, #4
 8002088:	4602      	mov	r2, r0
 800208a:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<8; i++)
 800208c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002090:	3301      	adds	r3, #1
 8002092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002096:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800209a:	2b07      	cmp	r3, #7
 800209c:	ddde      	ble.n	800205c <main+0xac>
  for(int j=0; j<N;j++)
 800209e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020a2:	3301      	adds	r3, #1
 80020a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	ddd1      	ble.n	8002054 <main+0xa4>
	  }

	f_mount(&fs, "", 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	4935      	ldr	r1, [pc, #212]	; (8002188 <main+0x1d8>)
 80020b4:	4835      	ldr	r0, [pc, #212]	; (800218c <main+0x1dc>)
 80020b6:	f004 fde1 	bl	8006c7c <f_mount>
	f_open(&fil, "temp.log", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80020ba:	2213      	movs	r2, #19
 80020bc:	4934      	ldr	r1, [pc, #208]	; (8002190 <main+0x1e0>)
 80020be:	4835      	ldr	r0, [pc, #212]	; (8002194 <main+0x1e4>)
 80020c0:	f004 fe26 	bl	8006d10 <f_open>
	f_lseek(&fil, fil.fsize);
 80020c4:	4b33      	ldr	r3, [pc, #204]	; (8002194 <main+0x1e4>)
 80020c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4619      	mov	r1, r3
 80020ce:	4831      	ldr	r0, [pc, #196]	; (8002194 <main+0x1e4>)
 80020d0:	f005 fc56 	bl	8007980 <f_lseek>
	f_puts("sample, T1, T2, T3, T4\n", &fil);
 80020d4:	492f      	ldr	r1, [pc, #188]	; (8002194 <main+0x1e4>)
 80020d6:	4830      	ldr	r0, [pc, #192]	; (8002198 <main+0x1e8>)
 80020d8:	f005 ff80 	bl	8007fdc <f_puts>
	f_close(&fil);
 80020dc:	482d      	ldr	r0, [pc, #180]	; (8002194 <main+0x1e4>)
 80020de:	f005 fc24 	bl	800792a <f_close>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Iniciar conversión
	  Presence = DS18B20_Start ();
 80020e2:	f7fe ffd1 	bl	8001088 <DS18B20_Start>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	  HAL_Delay (1);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f000 fd97 	bl	8002c20 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 80020f2:	20cc      	movs	r0, #204	; 0xcc
 80020f4:	f7fe fffc 	bl	80010f0 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 80020f8:	2044      	movs	r0, #68	; 0x44
 80020fa:	f7fe fff9 	bl	80010f0 <DS18B20_Write>
	  HAL_Delay (800);
 80020fe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002102:	f000 fd8d 	bl	8002c20 <HAL_Delay>
//	  DS18B20_Write (0xBE);  // Read Scratch-pad
//	  for(int i = 0; i<8; i++)
//		  scratchPad[i] = DS18B20_Read();

///////////////////////////////////////////////////////////
	  for(int j=0; j<N; j++)
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800210c:	e07d      	b.n	800220a <main+0x25a>
	  {
		  Presence = DS18B20_Start ();
 800210e:	f7fe ffbb 	bl	8001088 <DS18B20_Start>
 8002112:	4603      	mov	r3, r0
 8002114:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		  HAL_Delay(1);
 8002118:	2001      	movs	r0, #1
 800211a:	f000 fd81 	bl	8002c20 <HAL_Delay>
		  DS18B20_Write (0x55);  // match ROM
 800211e:	2055      	movs	r0, #85	; 0x55
 8002120:	f7fe ffe6 	bl	80010f0 <DS18B20_Write>
		  for(int i=0;i<8;i++)
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800212a:	e014      	b.n	8002156 <main+0x1a6>
		  {
			  DS18B20_Write (sensor[j].ROM_NO[i]);
 800212c:	4915      	ldr	r1, [pc, #84]	; (8002184 <main+0x1d4>)
 800212e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	18ca      	adds	r2, r1, r3
 800213c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002140:	4413      	add	r3, r2
 8002142:	3304      	adds	r3, #4
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe ffd2 	bl	80010f0 <DS18B20_Write>
		  for(int i=0;i<8;i++)
 800214c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002150:	3301      	adds	r3, #1
 8002152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800215a:	2b07      	cmp	r3, #7
 800215c:	dde6      	ble.n	800212c <main+0x17c>
		  }
		  DS18B20_Write (0xBE);  // Read Scratch-pad
 800215e:	20be      	movs	r0, #190	; 0xbe
 8002160:	f7fe ffc6 	bl	80010f0 <DS18B20_Write>
		  for(int i = 0; i<8; i++)
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800216a:	e027      	b.n	80021bc <main+0x20c>
 800216c:	20002314 	.word	0x20002314
 8002170:	200022cc 	.word	0x200022cc
 8002174:	0800bd58 	.word	0x0800bd58
 8002178:	0800bd68 	.word	0x0800bd68
 800217c:	40010800 	.word	0x40010800
 8002180:	0800bd70 	.word	0x0800bd70
 8002184:	2000235c 	.word	0x2000235c
 8002188:	0800bd08 	.word	0x0800bd08
 800218c:	20000218 	.word	0x20000218
 8002190:	0800bd0c 	.word	0x0800bd0c
 8002194:	20001248 	.word	0x20001248
 8002198:	0800bd18 	.word	0x0800bd18
			  scratchPad[i] = DS18B20_Read();
 800219c:	f7fe fff4 	bl	8001188 <DS18B20_Read>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4619      	mov	r1, r3
 80021a4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021ac:	4413      	add	r3, r2
 80021ae:	460a      	mov	r2, r1
 80021b0:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i<8; i++)
 80021b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021b6:	3301      	adds	r3, #1
 80021b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021c0:	2b07      	cmp	r3, #7
 80021c2:	ddeb      	ble.n	800219c <main+0x1ec>
		  buffer = scratchPad[1];
 80021c4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80021c8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		  buffer = (buffer << 8) + scratchPad[0];
 80021cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80021d8:	b29b      	uxth	r3, r3
 80021da:	4413      	add	r3, r2
 80021dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		  sensor[j].temp = DS18B20_Temp2Float(buffer);
 80021e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff f811 	bl	800120c <DS18B20_Temp2Float>
 80021ea:	4601      	mov	r1, r0
 80021ec:	4879      	ldr	r0, [pc, #484]	; (80023d4 <main+0x424>)
 80021ee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4403      	add	r3, r0
 80021fc:	3310      	adds	r3, #16
 80021fe:	6019      	str	r1, [r3, #0]
	  for(int j=0; j<N; j++)
 8002200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002204:	3301      	adds	r3, #1
 8002206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800220a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800220e:	2b03      	cmp	r3, #3
 8002210:	f77f af7d 	ble.w	800210e <main+0x15e>
	  }

	  Lcd_clear;
	  Lcd_cursor(&lcd, 0,0);
 8002214:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fe11 	bl	8001e44 <Lcd_cursor>
	  Lcd_string(&lcd, "T1=");
 8002222:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002226:	496c      	ldr	r1, [pc, #432]	; (80023d8 <main+0x428>)
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fdeb 	bl	8001e04 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[0].temp, 1);
 800222e:	4b69      	ldr	r3, [pc, #420]	; (80023d4 <main+0x424>)
 8002230:	6919      	ldr	r1, [r3, #16]
 8002232:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002236:	2201      	movs	r2, #1
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fd97 	bl	8001d6c <Lcd_float_lim>
	  Lcd_cursor(&lcd, 0,8);
 800223e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002242:	2208      	movs	r2, #8
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fdfc 	bl	8001e44 <Lcd_cursor>
	  Lcd_string(&lcd, "T2=");
 800224c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002250:	4962      	ldr	r1, [pc, #392]	; (80023dc <main+0x42c>)
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fdd6 	bl	8001e04 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[1].temp, 1);
 8002258:	4b5e      	ldr	r3, [pc, #376]	; (80023d4 <main+0x424>)
 800225a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800225c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002260:	2201      	movs	r2, #1
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fd82 	bl	8001d6c <Lcd_float_lim>
	  Lcd_cursor(&lcd, 1,0);
 8002268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800226c:	2200      	movs	r2, #0
 800226e:	2101      	movs	r1, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fde7 	bl	8001e44 <Lcd_cursor>
	  Lcd_string(&lcd, "T3=");
 8002276:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800227a:	4959      	ldr	r1, [pc, #356]	; (80023e0 <main+0x430>)
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fdc1 	bl	8001e04 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[2].temp, 1);
 8002282:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <main+0x424>)
 8002284:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002286:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800228a:	2201      	movs	r2, #1
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd6d 	bl	8001d6c <Lcd_float_lim>
	  Lcd_cursor(&lcd, 1,8);
 8002292:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002296:	2208      	movs	r2, #8
 8002298:	2101      	movs	r1, #1
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fdd2 	bl	8001e44 <Lcd_cursor>
	  Lcd_string(&lcd, "T4=");
 80022a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022a4:	494f      	ldr	r1, [pc, #316]	; (80023e4 <main+0x434>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fdac 	bl	8001e04 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[3].temp, 1);
 80022ac:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <main+0x424>)
 80022ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80022b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022b4:	2201      	movs	r2, #1
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fd58 	bl	8001d6c <Lcd_float_lim>
//	   f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
//	   f_lseek(&fil, fil.fsize);
//	   f_puts("Hello from CENADIF\n", &fil);
//	   f_close(&fil);

	if(count == 10) // cada 10 segundos
 80022bc:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <main+0x438>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b0a      	cmp	r3, #10
 80022c2:	f47f af0e 	bne.w	80020e2 <main+0x132>
	{
		f_mount(&fs, "", 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	4948      	ldr	r1, [pc, #288]	; (80023ec <main+0x43c>)
 80022ca:	4849      	ldr	r0, [pc, #292]	; (80023f0 <main+0x440>)
 80022cc:	f004 fcd6 	bl	8006c7c <f_mount>
		f_open(&fil, "temp.log", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80022d0:	2213      	movs	r2, #19
 80022d2:	4948      	ldr	r1, [pc, #288]	; (80023f4 <main+0x444>)
 80022d4:	4848      	ldr	r0, [pc, #288]	; (80023f8 <main+0x448>)
 80022d6:	f004 fd1b 	bl	8006d10 <f_open>
		f_lseek(&fil, fil.fsize);
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <main+0x448>)
 80022dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4619      	mov	r1, r3
 80022e4:	4844      	ldr	r0, [pc, #272]	; (80023f8 <main+0x448>)
 80022e6:	f005 fb4b 	bl	8007980 <f_lseek>
		m = sprintf(message, "%d, ", sample);
 80022ea:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80022ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022f2:	4942      	ldr	r1, [pc, #264]	; (80023fc <main+0x44c>)
 80022f4:	4618      	mov	r0, r3
 80022f6:	f006 fb97 	bl	8008a28 <siprintf>
 80022fa:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		m += sprintf(message+m, "%.2f, ",sensor[0].temp );
 80022fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002302:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002306:	18d4      	adds	r4, r2, r3
 8002308:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <main+0x424>)
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f93f 	bl	8000590 <__aeabi_f2d>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	493a      	ldr	r1, [pc, #232]	; (8002400 <main+0x450>)
 8002318:	4620      	mov	r0, r4
 800231a:	f006 fb85 	bl	8008a28 <siprintf>
 800231e:	4602      	mov	r2, r0
 8002320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002324:	4413      	add	r3, r2
 8002326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		m += sprintf(message+m, "%.2f, ",sensor[1].temp );
 800232a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800232e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002332:	18d4      	adds	r4, r2, r3
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <main+0x424>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f929 	bl	8000590 <__aeabi_f2d>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	492f      	ldr	r1, [pc, #188]	; (8002400 <main+0x450>)
 8002344:	4620      	mov	r0, r4
 8002346:	f006 fb6f 	bl	8008a28 <siprintf>
 800234a:	4602      	mov	r2, r0
 800234c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002350:	4413      	add	r3, r2
 8002352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		m += sprintf(message+m, "%.2f, ",sensor[2].temp );
 8002356:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800235a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800235e:	18d4      	adds	r4, r2, r3
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <main+0x424>)
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f913 	bl	8000590 <__aeabi_f2d>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4924      	ldr	r1, [pc, #144]	; (8002400 <main+0x450>)
 8002370:	4620      	mov	r0, r4
 8002372:	f006 fb59 	bl	8008a28 <siprintf>
 8002376:	4602      	mov	r2, r0
 8002378:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800237c:	4413      	add	r3, r2
 800237e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		m += sprintf(message+m, "%.2f\n",sensor[3].temp );
 8002382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002386:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800238a:	18d4      	adds	r4, r2, r3
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <main+0x424>)
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8fd 	bl	8000590 <__aeabi_f2d>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	491a      	ldr	r1, [pc, #104]	; (8002404 <main+0x454>)
 800239c:	4620      	mov	r0, r4
 800239e:	f006 fb43 	bl	8008a28 <siprintf>
 80023a2:	4602      	mov	r2, r0
 80023a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023a8:	4413      	add	r3, r2
 80023aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		f_puts(message, &fil);
 80023ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023b2:	4911      	ldr	r1, [pc, #68]	; (80023f8 <main+0x448>)
 80023b4:	4618      	mov	r0, r3
 80023b6:	f005 fe11 	bl	8007fdc <f_puts>
		f_close(&fil);
 80023ba:	480f      	ldr	r0, [pc, #60]	; (80023f8 <main+0x448>)
 80023bc:	f005 fab5 	bl	800792a <f_close>
		count = 0;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <main+0x438>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
		sample ++;
 80023c6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80023ca:	3301      	adds	r3, #1
 80023cc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	  Presence = DS18B20_Start ();
 80023d0:	e687      	b.n	80020e2 <main+0x132>
 80023d2:	bf00      	nop
 80023d4:	2000235c 	.word	0x2000235c
 80023d8:	0800bd30 	.word	0x0800bd30
 80023dc:	0800bd34 	.word	0x0800bd34
 80023e0:	0800bd38 	.word	0x0800bd38
 80023e4:	0800bd3c 	.word	0x0800bd3c
 80023e8:	200023ac 	.word	0x200023ac
 80023ec:	0800bd08 	.word	0x0800bd08
 80023f0:	20000218 	.word	0x20000218
 80023f4:	0800bd0c 	.word	0x0800bd0c
 80023f8:	20001248 	.word	0x20001248
 80023fc:	0800bd40 	.word	0x0800bd40
 8002400:	0800bd48 	.word	0x0800bd48
 8002404:	0800bd50 	.word	0x0800bd50

08002408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b090      	sub	sp, #64	; 0x40
 800240c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800240e:	f107 0318 	add.w	r3, r7, #24
 8002412:	2228      	movs	r2, #40	; 0x28
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f005 fe9e 	bl	8008158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800242a:	2301      	movs	r3, #1
 800242c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800242e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002432:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002438:	2301      	movs	r3, #1
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800243c:	2302      	movs	r3, #2
 800243e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002446:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800244a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800244c:	f107 0318 	add.w	r3, r7, #24
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fee3 	bl	800321c <HAL_RCC_OscConfig>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800245c:	f000 f98c 	bl	8002778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002460:	230f      	movs	r3, #15
 8002462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002464:	2302      	movs	r3, #2
 8002466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800246c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	2102      	movs	r1, #2
 800247a:	4618      	mov	r0, r3
 800247c:	f001 f950 	bl	8003720 <HAL_RCC_ClockConfig>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002486:	f000 f977 	bl	8002778 <Error_Handler>
  }
}
 800248a:	bf00      	nop
 800248c:	3740      	adds	r7, #64	; 0x40
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002498:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <MX_SPI2_Init+0x64>)
 800249a:	4a18      	ldr	r2, [pc, #96]	; (80024fc <MX_SPI2_Init+0x68>)
 800249c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024da:	2200      	movs	r2, #0
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024e0:	220a      	movs	r2, #10
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024e4:	4804      	ldr	r0, [pc, #16]	; (80024f8 <MX_SPI2_Init+0x64>)
 80024e6:	f001 fa77 	bl	80039d8 <HAL_SPI_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024f0:	f000 f942 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20002274 	.word	0x20002274
 80024fc:	40003800 	.word	0x40003800

08002500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002514:	463b      	mov	r3, r7
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <MX_TIM2_Init+0x98>)
 800251e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <MX_TIM2_Init+0x98>)
 8002526:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800252a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <MX_TIM2_Init+0x98>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <MX_TIM2_Init+0x98>)
 8002534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002538:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <MX_TIM2_Init+0x98>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <MX_TIM2_Init+0x98>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002546:	4814      	ldr	r0, [pc, #80]	; (8002598 <MX_TIM2_Init+0x98>)
 8002548:	f001 fe64 	bl	8004214 <HAL_TIM_Base_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002552:	f000 f911 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800255c:	f107 0308 	add.w	r3, r7, #8
 8002560:	4619      	mov	r1, r3
 8002562:	480d      	ldr	r0, [pc, #52]	; (8002598 <MX_TIM2_Init+0x98>)
 8002564:	f002 f84a 	bl	80045fc <HAL_TIM_ConfigClockSource>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800256e:	f000 f903 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800257a:	463b      	mov	r3, r7
 800257c:	4619      	mov	r1, r3
 800257e:	4806      	ldr	r0, [pc, #24]	; (8002598 <MX_TIM2_Init+0x98>)
 8002580:	f002 fa20 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800258a:	f000 f8f5 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200022cc 	.word	0x200022cc

0800259c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b0:	463b      	mov	r3, r7
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <MX_TIM3_Init+0x94>)
 80025ba:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <MX_TIM3_Init+0x98>)
 80025bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <MX_TIM3_Init+0x94>)
 80025c0:	2247      	movs	r2, #71	; 0x47
 80025c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c4:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <MX_TIM3_Init+0x94>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <MX_TIM3_Init+0x94>)
 80025cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <MX_TIM3_Init+0x94>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <MX_TIM3_Init+0x94>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025de:	4814      	ldr	r0, [pc, #80]	; (8002630 <MX_TIM3_Init+0x94>)
 80025e0:	f001 fe18 	bl	8004214 <HAL_TIM_Base_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025ea:	f000 f8c5 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	4619      	mov	r1, r3
 80025fa:	480d      	ldr	r0, [pc, #52]	; (8002630 <MX_TIM3_Init+0x94>)
 80025fc:	f001 fffe 	bl	80045fc <HAL_TIM_ConfigClockSource>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002606:	f000 f8b7 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002612:	463b      	mov	r3, r7
 8002614:	4619      	mov	r1, r3
 8002616:	4806      	ldr	r0, [pc, #24]	; (8002630 <MX_TIM3_Init+0x94>)
 8002618:	f002 f9d4 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002622:	f000 f8a9 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20002314 	.word	0x20002314
 8002634:	40000400 	.word	0x40000400

08002638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264c:	4b38      	ldr	r3, [pc, #224]	; (8002730 <MX_GPIO_Init+0xf8>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a37      	ldr	r2, [pc, #220]	; (8002730 <MX_GPIO_Init+0xf8>)
 8002652:	f043 0310 	orr.w	r3, r3, #16
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b35      	ldr	r3, [pc, #212]	; (8002730 <MX_GPIO_Init+0xf8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002664:	4b32      	ldr	r3, [pc, #200]	; (8002730 <MX_GPIO_Init+0xf8>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4a31      	ldr	r2, [pc, #196]	; (8002730 <MX_GPIO_Init+0xf8>)
 800266a:	f043 0320 	orr.w	r3, r3, #32
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <MX_GPIO_Init+0xf8>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <MX_GPIO_Init+0xf8>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4a2b      	ldr	r2, [pc, #172]	; (8002730 <MX_GPIO_Init+0xf8>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6193      	str	r3, [r2, #24]
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <MX_GPIO_Init+0xf8>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <MX_GPIO_Init+0xf8>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	4a25      	ldr	r2, [pc, #148]	; (8002730 <MX_GPIO_Init+0xf8>)
 800269a:	f043 0308 	orr.w	r3, r3, #8
 800269e:	6193      	str	r3, [r2, #24]
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <MX_GPIO_Init+0xf8>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026ac:	2200      	movs	r2, #0
 80026ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026b2:	4820      	ldr	r0, [pc, #128]	; (8002734 <MX_GPIO_Init+0xfc>)
 80026b4:	f000 fd81 	bl	80031ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80026b8:	2200      	movs	r2, #0
 80026ba:	217e      	movs	r1, #126	; 0x7e
 80026bc:	481e      	ldr	r0, [pc, #120]	; (8002738 <MX_GPIO_Init+0x100>)
 80026be:	f000 fd7c 	bl	80031ba <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80026c2:	2200      	movs	r2, #0
 80026c4:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80026c8:	481c      	ldr	r0, [pc, #112]	; (800273c <MX_GPIO_Init+0x104>)
 80026ca:	f000 fd76 	bl	80031ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80026ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d4:	2301      	movs	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2302      	movs	r3, #2
 80026de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	4619      	mov	r1, r3
 80026e6:	4813      	ldr	r0, [pc, #76]	; (8002734 <MX_GPIO_Init+0xfc>)
 80026e8:	f000 fbcc 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80026ec:	237e      	movs	r3, #126	; 0x7e
 80026ee:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f0:	2301      	movs	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2302      	movs	r3, #2
 80026fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	4619      	mov	r1, r3
 8002702:	480d      	ldr	r0, [pc, #52]	; (8002738 <MX_GPIO_Init+0x100>)
 8002704:	f000 fbbe 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8002708:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800270c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270e:	2301      	movs	r3, #1
 8002710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2302      	movs	r3, #2
 8002718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	4619      	mov	r1, r3
 8002720:	4806      	ldr	r0, [pc, #24]	; (800273c <MX_GPIO_Init+0x104>)
 8002722:	f000 fbaf 	bl	8002e84 <HAL_GPIO_Init>

}
 8002726:	bf00      	nop
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	40011000 	.word	0x40011000
 8002738:	40010800 	.word	0x40010800
 800273c:	40010c00 	.word	0x40010c00

08002740 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002750:	d10a      	bne.n	8002768 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
	  count ++;
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800275c:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin (GPIOC, LED_Pin);
 800275e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002762:	4804      	ldr	r0, [pc, #16]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002764:	f000 fd41 	bl	80031ea <HAL_GPIO_TogglePin>
  }
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200023ac 	.word	0x200023ac
 8002774:	40011000 	.word	0x40011000

08002778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800277c:	b672      	cpsid	i
}
 800277e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002780:	e7fe      	b.n	8002780 <Error_Handler+0x8>
	...

08002784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_MspInit+0x5c>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_MspInit+0x5c>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6193      	str	r3, [r2, #24]
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_MspInit+0x5c>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_MspInit+0x5c>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <HAL_MspInit+0x5c>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	61d3      	str	r3, [r2, #28]
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_MspInit+0x5c>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_MspInit+0x60>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_MspInit+0x60>)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010000 	.word	0x40010000

080027e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_SPI_MspInit+0x8c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d131      	bne.n	800286c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_SPI_MspInit+0x90>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <HAL_SPI_MspInit+0x90>)
 800280e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002812:	61d3      	str	r3, [r2, #28]
 8002814:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_SPI_MspInit+0x90>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002820:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_SPI_MspInit+0x90>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <HAL_SPI_MspInit+0x90>)
 8002826:	f043 0308 	orr.w	r3, r3, #8
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_SPI_MspInit+0x90>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002838:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800283c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	4619      	mov	r1, r3
 800284c:	480b      	ldr	r0, [pc, #44]	; (800287c <HAL_SPI_MspInit+0x94>)
 800284e:	f000 fb19 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002860:	f107 0310 	add.w	r3, r7, #16
 8002864:	4619      	mov	r1, r3
 8002866:	4805      	ldr	r0, [pc, #20]	; (800287c <HAL_SPI_MspInit+0x94>)
 8002868:	f000 fb0c 	bl	8002e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800286c:	bf00      	nop
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40003800 	.word	0x40003800
 8002878:	40021000 	.word	0x40021000
 800287c:	40010c00 	.word	0x40010c00

08002880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002890:	d114      	bne.n	80028bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_TIM_Base_MspInit+0x68>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <HAL_TIM_Base_MspInit+0x68>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	61d3      	str	r3, [r2, #28]
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_TIM_Base_MspInit+0x68>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2100      	movs	r1, #0
 80028ae:	201c      	movs	r0, #28
 80028b0:	f000 fab1 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028b4:	201c      	movs	r0, #28
 80028b6:	f000 faca 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028ba:	e010      	b.n	80028de <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <HAL_TIM_Base_MspInit+0x6c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10b      	bne.n	80028de <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_TIM_Base_MspInit+0x68>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <HAL_TIM_Base_MspInit+0x68>)
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	61d3      	str	r3, [r2, #28]
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_TIM_Base_MspInit+0x68>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40000400 	.word	0x40000400

080028f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <NMI_Handler+0x4>

080028f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <MemManage_Handler+0x4>

08002902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002906:	e7fe      	b.n	8002906 <BusFault_Handler+0x4>

08002908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800290c:	e7fe      	b.n	800290c <UsageFault_Handler+0x4>

0800290e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
	...

08002934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <SysTick_Handler+0x34>)
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <SysTick_Handler+0x18>
		Timer1 --;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <SysTick_Handler+0x34>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	4b07      	ldr	r3, [pc, #28]	; (8002968 <SysTick_Handler+0x34>)
 800294a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <SysTick_Handler+0x38>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <SysTick_Handler+0x2c>
		Timer2 --;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <SysTick_Handler+0x38>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <SysTick_Handler+0x38>)
 800295e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002960:	f000 f942 	bl	8002be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000210 	.word	0x20000210
 800296c:	20000212 	.word	0x20000212

08002970 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <TIM2_IRQHandler+0x10>)
 8002976:	f001 fd39 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200022cc 	.word	0x200022cc

08002984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return 1;
 8002988:	2301      	movs	r3, #1
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <_kill>:

int _kill(int pid, int sig)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800299c:	f005 fbb2 	bl	8008104 <__errno>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2216      	movs	r2, #22
 80029a4:	601a      	str	r2, [r3, #0]
  return -1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <_exit>:

void _exit (int status)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029ba:	f04f 31ff 	mov.w	r1, #4294967295
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ffe7 	bl	8002992 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029c4:	e7fe      	b.n	80029c4 <_exit+0x12>

080029c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e00a      	b.n	80029ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029d8:	f3af 8000 	nop.w
 80029dc:	4601      	mov	r1, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	60ba      	str	r2, [r7, #8]
 80029e4:	b2ca      	uxtb	r2, r1
 80029e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3301      	adds	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	dbf0      	blt.n	80029d8 <_read+0x12>
  }

  return len;
 80029f6:	687b      	ldr	r3, [r7, #4]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e009      	b.n	8002a26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	60ba      	str	r2, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3301      	adds	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	dbf1      	blt.n	8002a12 <_write+0x12>
  }
  return len;
 8002a2e:	687b      	ldr	r3, [r7, #4]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_close>:

int _close(int file)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <_isatty>:

int _isatty(int file)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <_sbrk+0x5c>)
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <_sbrk+0x60>)
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <_sbrk+0x64>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <_sbrk+0x68>)
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <_sbrk+0x64>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d207      	bcs.n	8002ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac8:	f005 fb1c 	bl	8008104 <__errno>
 8002acc:	4603      	mov	r3, r0
 8002ace:	220c      	movs	r2, #12
 8002ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	e009      	b.n	8002aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <_sbrk+0x64>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <_sbrk+0x64>)
 8002ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20005000 	.word	0x20005000
 8002af8:	00000400 	.word	0x00000400
 8002afc:	200023b0 	.word	0x200023b0
 8002b00:	20002400 	.word	0x20002400

08002b04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b10:	f7ff fff8 	bl	8002b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b14:	480b      	ldr	r0, [pc, #44]	; (8002b44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b16:	490c      	ldr	r1, [pc, #48]	; (8002b48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b18:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b1c:	e002      	b.n	8002b24 <LoopCopyDataInit>

08002b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b22:	3304      	adds	r3, #4

08002b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b28:	d3f9      	bcc.n	8002b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2a:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b2c:	4c09      	ldr	r4, [pc, #36]	; (8002b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b30:	e001      	b.n	8002b36 <LoopFillZerobss>

08002b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b34:	3204      	adds	r2, #4

08002b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b38:	d3fb      	bcc.n	8002b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b3a:	f005 fae9 	bl	8008110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b3e:	f7ff fa37 	bl	8001fb0 <main>
  bx lr
 8002b42:	4770      	bx	lr
  ldr r0, =_sdata
 8002b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b48:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002b4c:	0800c290 	.word	0x0800c290
  ldr r2, =_sbss
 8002b50:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002b54:	200023fc 	.word	0x200023fc

08002b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b58:	e7fe      	b.n	8002b58 <ADC1_2_IRQHandler>
	...

08002b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_Init+0x28>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <HAL_Init+0x28>)
 8002b66:	f043 0310 	orr.w	r3, r3, #16
 8002b6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f000 f947 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b72:	200f      	movs	r0, #15
 8002b74:	f000 f808 	bl	8002b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b78:	f7ff fe04 	bl	8002784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40022000 	.word	0x40022000

08002b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_InitTick+0x54>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_InitTick+0x58>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f95f 	bl	8002e6a <HAL_SYSTICK_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00e      	b.n	8002bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d80a      	bhi.n	8002bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f000 f927 	bl	8002e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc8:	4a06      	ldr	r2, [pc, #24]	; (8002be4 <HAL_InitTick+0x5c>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000004 	.word	0x20000004
 8002be0:	2000000c 	.word	0x2000000c
 8002be4:	20000008 	.word	0x20000008

08002be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_IncTick+0x1c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_IncTick+0x20>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a03      	ldr	r2, [pc, #12]	; (8002c08 <HAL_IncTick+0x20>)
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	2000000c 	.word	0x2000000c
 8002c08:	200023b4 	.word	0x200023b4

08002c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c10:	4b02      	ldr	r3, [pc, #8]	; (8002c1c <HAL_GetTick+0x10>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	200023b4 	.word	0x200023b4

08002c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff fff0 	bl	8002c0c <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d005      	beq.n	8002c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_Delay+0x44>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c46:	bf00      	nop
 8002c48:	f7ff ffe0 	bl	8002c0c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d8f7      	bhi.n	8002c48 <HAL_Delay+0x28>
  {
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2000000c 	.word	0x2000000c

08002c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	; (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60d3      	str	r3, [r2, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0307 	and.w	r3, r3, #7
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4906      	ldr	r1, [pc, #24]	; (8002d00 <__NVIC_EnableIRQ+0x34>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db0a      	blt.n	8002d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	490c      	ldr	r1, [pc, #48]	; (8002d50 <__NVIC_SetPriority+0x4c>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	0112      	lsls	r2, r2, #4
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	440b      	add	r3, r1
 8002d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d2c:	e00a      	b.n	8002d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <__NVIC_SetPriority+0x50>)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	440b      	add	r3, r1
 8002d42:	761a      	strb	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f1c3 0307 	rsb	r3, r3, #7
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	bf28      	it	cs
 8002d76:	2304      	movcs	r3, #4
 8002d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <NVIC_EncodePriority+0x30>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3b03      	subs	r3, #3
 8002d86:	e000      	b.n	8002d8a <NVIC_EncodePriority+0x32>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	4313      	orrs	r3, r2
         );
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dcc:	d301      	bcc.n	8002dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00f      	b.n	8002df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <SysTick_Config+0x40>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dda:	210f      	movs	r1, #15
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f7ff ff90 	bl	8002d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <SysTick_Config+0x40>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dea:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <SysTick_Config+0x40>)
 8002dec:	2207      	movs	r2, #7
 8002dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff2d 	bl	8002c68 <__NVIC_SetPriorityGrouping>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff42 	bl	8002cb0 <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff90 	bl	8002d58 <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff5f 	bl	8002d04 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff35 	bl	8002ccc <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffa2 	bl	8002dbc <SysTick_Config>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b08b      	sub	sp, #44	; 0x2c
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e96:	e169      	b.n	800316c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e98:	2201      	movs	r2, #1
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	f040 8158 	bne.w	8003166 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4a9a      	ldr	r2, [pc, #616]	; (8003124 <HAL_GPIO_Init+0x2a0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d05e      	beq.n	8002f7e <HAL_GPIO_Init+0xfa>
 8002ec0:	4a98      	ldr	r2, [pc, #608]	; (8003124 <HAL_GPIO_Init+0x2a0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d875      	bhi.n	8002fb2 <HAL_GPIO_Init+0x12e>
 8002ec6:	4a98      	ldr	r2, [pc, #608]	; (8003128 <HAL_GPIO_Init+0x2a4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d058      	beq.n	8002f7e <HAL_GPIO_Init+0xfa>
 8002ecc:	4a96      	ldr	r2, [pc, #600]	; (8003128 <HAL_GPIO_Init+0x2a4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d86f      	bhi.n	8002fb2 <HAL_GPIO_Init+0x12e>
 8002ed2:	4a96      	ldr	r2, [pc, #600]	; (800312c <HAL_GPIO_Init+0x2a8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d052      	beq.n	8002f7e <HAL_GPIO_Init+0xfa>
 8002ed8:	4a94      	ldr	r2, [pc, #592]	; (800312c <HAL_GPIO_Init+0x2a8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d869      	bhi.n	8002fb2 <HAL_GPIO_Init+0x12e>
 8002ede:	4a94      	ldr	r2, [pc, #592]	; (8003130 <HAL_GPIO_Init+0x2ac>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d04c      	beq.n	8002f7e <HAL_GPIO_Init+0xfa>
 8002ee4:	4a92      	ldr	r2, [pc, #584]	; (8003130 <HAL_GPIO_Init+0x2ac>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d863      	bhi.n	8002fb2 <HAL_GPIO_Init+0x12e>
 8002eea:	4a92      	ldr	r2, [pc, #584]	; (8003134 <HAL_GPIO_Init+0x2b0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d046      	beq.n	8002f7e <HAL_GPIO_Init+0xfa>
 8002ef0:	4a90      	ldr	r2, [pc, #576]	; (8003134 <HAL_GPIO_Init+0x2b0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d85d      	bhi.n	8002fb2 <HAL_GPIO_Init+0x12e>
 8002ef6:	2b12      	cmp	r3, #18
 8002ef8:	d82a      	bhi.n	8002f50 <HAL_GPIO_Init+0xcc>
 8002efa:	2b12      	cmp	r3, #18
 8002efc:	d859      	bhi.n	8002fb2 <HAL_GPIO_Init+0x12e>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <HAL_GPIO_Init+0x80>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f7f 	.word	0x08002f7f
 8002f08:	08002f59 	.word	0x08002f59
 8002f0c:	08002f6b 	.word	0x08002f6b
 8002f10:	08002fad 	.word	0x08002fad
 8002f14:	08002fb3 	.word	0x08002fb3
 8002f18:	08002fb3 	.word	0x08002fb3
 8002f1c:	08002fb3 	.word	0x08002fb3
 8002f20:	08002fb3 	.word	0x08002fb3
 8002f24:	08002fb3 	.word	0x08002fb3
 8002f28:	08002fb3 	.word	0x08002fb3
 8002f2c:	08002fb3 	.word	0x08002fb3
 8002f30:	08002fb3 	.word	0x08002fb3
 8002f34:	08002fb3 	.word	0x08002fb3
 8002f38:	08002fb3 	.word	0x08002fb3
 8002f3c:	08002fb3 	.word	0x08002fb3
 8002f40:	08002fb3 	.word	0x08002fb3
 8002f44:	08002fb3 	.word	0x08002fb3
 8002f48:	08002f61 	.word	0x08002f61
 8002f4c:	08002f75 	.word	0x08002f75
 8002f50:	4a79      	ldr	r2, [pc, #484]	; (8003138 <HAL_GPIO_Init+0x2b4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f56:	e02c      	b.n	8002fb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	623b      	str	r3, [r7, #32]
          break;
 8002f5e:	e029      	b.n	8002fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	3304      	adds	r3, #4
 8002f66:	623b      	str	r3, [r7, #32]
          break;
 8002f68:	e024      	b.n	8002fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	3308      	adds	r3, #8
 8002f70:	623b      	str	r3, [r7, #32]
          break;
 8002f72:	e01f      	b.n	8002fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	623b      	str	r3, [r7, #32]
          break;
 8002f7c:	e01a      	b.n	8002fb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f86:	2304      	movs	r3, #4
 8002f88:	623b      	str	r3, [r7, #32]
          break;
 8002f8a:	e013      	b.n	8002fb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f94:	2308      	movs	r3, #8
 8002f96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	611a      	str	r2, [r3, #16]
          break;
 8002f9e:	e009      	b.n	8002fb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	615a      	str	r2, [r3, #20]
          break;
 8002faa:	e003      	b.n	8002fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fac:	2300      	movs	r3, #0
 8002fae:	623b      	str	r3, [r7, #32]
          break;
 8002fb0:	e000      	b.n	8002fb4 <HAL_GPIO_Init+0x130>
          break;
 8002fb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2bff      	cmp	r3, #255	; 0xff
 8002fb8:	d801      	bhi.n	8002fbe <HAL_GPIO_Init+0x13a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	e001      	b.n	8002fc2 <HAL_GPIO_Init+0x13e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	d802      	bhi.n	8002fd0 <HAL_GPIO_Init+0x14c>
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	e002      	b.n	8002fd6 <HAL_GPIO_Init+0x152>
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	3b08      	subs	r3, #8
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	210f      	movs	r1, #15
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	6a39      	ldr	r1, [r7, #32]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80b1 	beq.w	8003166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003004:	4b4d      	ldr	r3, [pc, #308]	; (800313c <HAL_GPIO_Init+0x2b8>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	4a4c      	ldr	r2, [pc, #304]	; (800313c <HAL_GPIO_Init+0x2b8>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6193      	str	r3, [r2, #24]
 8003010:	4b4a      	ldr	r3, [pc, #296]	; (800313c <HAL_GPIO_Init+0x2b8>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800301c:	4a48      	ldr	r2, [pc, #288]	; (8003140 <HAL_GPIO_Init+0x2bc>)
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	3302      	adds	r3, #2
 8003024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003028:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	220f      	movs	r2, #15
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a40      	ldr	r2, [pc, #256]	; (8003144 <HAL_GPIO_Init+0x2c0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_GPIO_Init+0x1ec>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a3f      	ldr	r2, [pc, #252]	; (8003148 <HAL_GPIO_Init+0x2c4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00d      	beq.n	800306c <HAL_GPIO_Init+0x1e8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a3e      	ldr	r2, [pc, #248]	; (800314c <HAL_GPIO_Init+0x2c8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <HAL_GPIO_Init+0x1e4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3d      	ldr	r2, [pc, #244]	; (8003150 <HAL_GPIO_Init+0x2cc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_GPIO_Init+0x1e0>
 8003060:	2303      	movs	r3, #3
 8003062:	e006      	b.n	8003072 <HAL_GPIO_Init+0x1ee>
 8003064:	2304      	movs	r3, #4
 8003066:	e004      	b.n	8003072 <HAL_GPIO_Init+0x1ee>
 8003068:	2302      	movs	r3, #2
 800306a:	e002      	b.n	8003072 <HAL_GPIO_Init+0x1ee>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <HAL_GPIO_Init+0x1ee>
 8003070:	2300      	movs	r3, #0
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	f002 0203 	and.w	r2, r2, #3
 8003078:	0092      	lsls	r2, r2, #2
 800307a:	4093      	lsls	r3, r2
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003082:	492f      	ldr	r1, [pc, #188]	; (8003140 <HAL_GPIO_Init+0x2bc>)
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	3302      	adds	r3, #2
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800309c:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	492c      	ldr	r1, [pc, #176]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]
 80030a8:	e006      	b.n	80030b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	4928      	ldr	r1, [pc, #160]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d006      	beq.n	80030d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	4922      	ldr	r1, [pc, #136]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60cb      	str	r3, [r1, #12]
 80030d0:	e006      	b.n	80030e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	43db      	mvns	r3, r3
 80030da:	491e      	ldr	r1, [pc, #120]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 80030dc:	4013      	ands	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4918      	ldr	r1, [pc, #96]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	e006      	b.n	8003108 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	43db      	mvns	r3, r3
 8003102:	4914      	ldr	r1, [pc, #80]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 8003104:	4013      	ands	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d021      	beq.n	8003158 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	490e      	ldr	r1, [pc, #56]	; (8003154 <HAL_GPIO_Init+0x2d0>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
 8003120:	e021      	b.n	8003166 <HAL_GPIO_Init+0x2e2>
 8003122:	bf00      	nop
 8003124:	10320000 	.word	0x10320000
 8003128:	10310000 	.word	0x10310000
 800312c:	10220000 	.word	0x10220000
 8003130:	10210000 	.word	0x10210000
 8003134:	10120000 	.word	0x10120000
 8003138:	10110000 	.word	0x10110000
 800313c:	40021000 	.word	0x40021000
 8003140:	40010000 	.word	0x40010000
 8003144:	40010800 	.word	0x40010800
 8003148:	40010c00 	.word	0x40010c00
 800314c:	40011000 	.word	0x40011000
 8003150:	40011400 	.word	0x40011400
 8003154:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_GPIO_Init+0x304>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	43db      	mvns	r3, r3
 8003160:	4909      	ldr	r1, [pc, #36]	; (8003188 <HAL_GPIO_Init+0x304>)
 8003162:	4013      	ands	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	3301      	adds	r3, #1
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	f47f ae8e 	bne.w	8002e98 <HAL_GPIO_Init+0x14>
  }
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	372c      	adds	r7, #44	; 0x2c
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	40010400 	.word	0x40010400

0800318c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e001      	b.n	80031ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	807b      	strh	r3, [r7, #2]
 80031c6:	4613      	mov	r3, r2
 80031c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031ca:	787b      	ldrb	r3, [r7, #1]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031d0:	887a      	ldrh	r2, [r7, #2]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031d6:	e003      	b.n	80031e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031d8:	887b      	ldrh	r3, [r7, #2]
 80031da:	041a      	lsls	r2, r3, #16
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	611a      	str	r2, [r3, #16]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031fc:	887a      	ldrh	r2, [r7, #2]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4013      	ands	r3, r2
 8003202:	041a      	lsls	r2, r3, #16
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	43d9      	mvns	r1, r3
 8003208:	887b      	ldrh	r3, [r7, #2]
 800320a:	400b      	ands	r3, r1
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e272      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8087 	beq.w	800334a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800323c:	4b92      	ldr	r3, [pc, #584]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b04      	cmp	r3, #4
 8003246:	d00c      	beq.n	8003262 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003248:	4b8f      	ldr	r3, [pc, #572]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b08      	cmp	r3, #8
 8003252:	d112      	bne.n	800327a <HAL_RCC_OscConfig+0x5e>
 8003254:	4b8c      	ldr	r3, [pc, #560]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003260:	d10b      	bne.n	800327a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003262:	4b89      	ldr	r3, [pc, #548]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d06c      	beq.n	8003348 <HAL_RCC_OscConfig+0x12c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d168      	bne.n	8003348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e24c      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x76>
 8003284:	4b80      	ldr	r3, [pc, #512]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a7f      	ldr	r2, [pc, #508]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 800328a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e02e      	b.n	80032f0 <HAL_RCC_OscConfig+0xd4>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x98>
 800329a:	4b7b      	ldr	r3, [pc, #492]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a7a      	ldr	r2, [pc, #488]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	4b78      	ldr	r3, [pc, #480]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a77      	ldr	r2, [pc, #476]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e01d      	b.n	80032f0 <HAL_RCC_OscConfig+0xd4>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0xbc>
 80032be:	4b72      	ldr	r3, [pc, #456]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a71      	ldr	r2, [pc, #452]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a6e      	ldr	r2, [pc, #440]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e00b      	b.n	80032f0 <HAL_RCC_OscConfig+0xd4>
 80032d8:	4b6b      	ldr	r3, [pc, #428]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a6a      	ldr	r2, [pc, #424]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b68      	ldr	r3, [pc, #416]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a67      	ldr	r2, [pc, #412]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d013      	beq.n	8003320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7ff fc88 	bl	8002c0c <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003300:	f7ff fc84 	bl	8002c0c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e200      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	4b5d      	ldr	r3, [pc, #372]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0xe4>
 800331e:	e014      	b.n	800334a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7ff fc74 	bl	8002c0c <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003328:	f7ff fc70 	bl	8002c0c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1ec      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333a:	4b53      	ldr	r3, [pc, #332]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x10c>
 8003346:	e000      	b.n	800334a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d063      	beq.n	800341e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003356:	4b4c      	ldr	r3, [pc, #304]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003362:	4b49      	ldr	r3, [pc, #292]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b08      	cmp	r3, #8
 800336c:	d11c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x18c>
 800336e:	4b46      	ldr	r3, [pc, #280]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d116      	bne.n	80033a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337a:	4b43      	ldr	r3, [pc, #268]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_RCC_OscConfig+0x176>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d001      	beq.n	8003392 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e1c0      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003392:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4939      	ldr	r1, [pc, #228]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a6:	e03a      	b.n	800341e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d020      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b0:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7ff fc29 	bl	8002c0c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033be:	f7ff fc25 	bl	8002c0c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e1a1      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d0:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4927      	ldr	r1, [pc, #156]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]
 80033f0:	e015      	b.n	800341e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7ff fc08 	bl	8002c0c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003400:	f7ff fc04 	bl	8002c0c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e180      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003412:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d03a      	beq.n	80034a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d019      	beq.n	8003466 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7ff fbe8 	bl	8002c0c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003440:	f7ff fbe4 	bl	8002c0c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e160      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_RCC_OscConfig+0x26c>)
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800345e:	2001      	movs	r0, #1
 8003460:	f000 fa9c 	bl	800399c <RCC_Delay>
 8003464:	e01c      	b.n	80034a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346c:	f7ff fbce 	bl	8002c0c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003472:	e00f      	b.n	8003494 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003474:	f7ff fbca 	bl	8002c0c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d908      	bls.n	8003494 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e146      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
 800348c:	42420000 	.word	0x42420000
 8003490:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003494:	4b92      	ldr	r3, [pc, #584]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e9      	bne.n	8003474 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80a6 	beq.w	80035fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b2:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	4a87      	ldr	r2, [pc, #540]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c8:	61d3      	str	r3, [r2, #28]
 80034ca:	4b85      	ldr	r3, [pc, #532]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d6:	2301      	movs	r3, #1
 80034d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034da:	4b82      	ldr	r3, [pc, #520]	; (80036e4 <HAL_RCC_OscConfig+0x4c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d118      	bne.n	8003518 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e6:	4b7f      	ldr	r3, [pc, #508]	; (80036e4 <HAL_RCC_OscConfig+0x4c8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7e      	ldr	r2, [pc, #504]	; (80036e4 <HAL_RCC_OscConfig+0x4c8>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f2:	f7ff fb8b 	bl	8002c0c <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7ff fb87 	bl	8002c0c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b64      	cmp	r3, #100	; 0x64
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e103      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	4b75      	ldr	r3, [pc, #468]	; (80036e4 <HAL_RCC_OscConfig+0x4c8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x312>
 8003520:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	4a6e      	ldr	r2, [pc, #440]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6213      	str	r3, [r2, #32]
 800352c:	e02d      	b.n	800358a <HAL_RCC_OscConfig+0x36e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x334>
 8003536:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a69      	ldr	r2, [pc, #420]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4a66      	ldr	r2, [pc, #408]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6213      	str	r3, [r2, #32]
 800354e:	e01c      	b.n	800358a <HAL_RCC_OscConfig+0x36e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b05      	cmp	r3, #5
 8003556:	d10c      	bne.n	8003572 <HAL_RCC_OscConfig+0x356>
 8003558:	4b61      	ldr	r3, [pc, #388]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a60      	ldr	r2, [pc, #384]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	f043 0304 	orr.w	r3, r3, #4
 8003562:	6213      	str	r3, [r2, #32]
 8003564:	4b5e      	ldr	r3, [pc, #376]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4a5d      	ldr	r2, [pc, #372]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6213      	str	r3, [r2, #32]
 8003570:	e00b      	b.n	800358a <HAL_RCC_OscConfig+0x36e>
 8003572:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a5a      	ldr	r2, [pc, #360]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	6213      	str	r3, [r2, #32]
 800357e:	4b58      	ldr	r3, [pc, #352]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4a57      	ldr	r2, [pc, #348]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f023 0304 	bic.w	r3, r3, #4
 8003588:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d015      	beq.n	80035be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003592:	f7ff fb3b 	bl	8002c0c <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7ff fb37 	bl	8002c0c <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e0b1      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0ee      	beq.n	800359a <HAL_RCC_OscConfig+0x37e>
 80035bc:	e014      	b.n	80035e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035be:	f7ff fb25 	bl	8002c0c <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c6:	f7ff fb21 	bl	8002c0c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e09b      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035dc:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ee      	bne.n	80035c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4b3c      	ldr	r3, [pc, #240]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4a3b      	ldr	r2, [pc, #236]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8087 	beq.w	8003712 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003604:	4b36      	ldr	r3, [pc, #216]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b08      	cmp	r3, #8
 800360e:	d061      	beq.n	80036d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d146      	bne.n	80036a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003618:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <HAL_RCC_OscConfig+0x4cc>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7ff faf5 	bl	8002c0c <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7ff faf1 	bl	8002c0c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e06d      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003638:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d108      	bne.n	8003660 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800364e:	4b24      	ldr	r3, [pc, #144]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4921      	ldr	r1, [pc, #132]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a19      	ldr	r1, [r3, #32]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	430b      	orrs	r3, r1
 8003672:	491b      	ldr	r1, [pc, #108]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x4cc>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7ff fac5 	bl	8002c0c <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003686:	f7ff fac1 	bl	8002c0c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e03d      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x46a>
 80036a4:	e035      	b.n	8003712 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_RCC_OscConfig+0x4cc>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7ff faae 	bl	8002c0c <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b4:	f7ff faaa 	bl	8002c0c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e026      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x498>
 80036d2:	e01e      	b.n	8003712 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d107      	bne.n	80036ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e019      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_OscConfig+0x500>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000

08003720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0d0      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b6a      	ldr	r3, [pc, #424]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d910      	bls.n	8003764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b67      	ldr	r3, [pc, #412]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0207 	bic.w	r2, r3, #7
 800374a:	4965      	ldr	r1, [pc, #404]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b63      	ldr	r3, [pc, #396]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0b8      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d020      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800377c:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a58      	ldr	r2, [pc, #352]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a52      	ldr	r2, [pc, #328]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800379e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a0:	4b50      	ldr	r3, [pc, #320]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	494d      	ldr	r1, [pc, #308]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d040      	beq.n	8003840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d115      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e07f      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e073      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06b      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4936      	ldr	r1, [pc, #216]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003810:	f7ff f9fc 	bl	8002c0c <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003818:	f7ff f9f8 	bl	8002c0c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e053      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 020c 	and.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	429a      	cmp	r2, r3
 800383e:	d1eb      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d210      	bcs.n	8003870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 0207 	bic.w	r2, r3, #7
 8003856:	4922      	ldr	r1, [pc, #136]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e032      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4916      	ldr	r1, [pc, #88]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	490e      	ldr	r1, [pc, #56]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ae:	f000 f821 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	490a      	ldr	r1, [pc, #40]	; (80038e8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	5ccb      	ldrb	r3, [r1, r3]
 80038c2:	fa22 f303 	lsr.w	r3, r2, r3
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1cc>)
 80038c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1d0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f95a 	bl	8002b88 <HAL_InitTick>

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	0800bdd8 	.word	0x0800bdd8
 80038ec:	20000004 	.word	0x20000004
 80038f0:	20000008 	.word	0x20000008

080038f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800390e:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <HAL_RCC_GetSysClockFreq+0x94>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d002      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x30>
 800391e:	2b08      	cmp	r3, #8
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x36>
 8003922:	e027      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_RCC_GetSysClockFreq+0x98>)
 8003926:	613b      	str	r3, [r7, #16]
      break;
 8003928:	e027      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	0c9b      	lsrs	r3, r3, #18
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003934:	5cd3      	ldrb	r3, [r2, r3]
 8003936:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003942:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_RCC_GetSysClockFreq+0x94>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0c5b      	lsrs	r3, r3, #17
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	4a11      	ldr	r2, [pc, #68]	; (8003994 <HAL_RCC_GetSysClockFreq+0xa0>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a0d      	ldr	r2, [pc, #52]	; (800398c <HAL_RCC_GetSysClockFreq+0x98>)
 8003956:	fb03 f202 	mul.w	r2, r3, r2
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e004      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	613b      	str	r3, [r7, #16]
      break;
 8003972:	e002      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_GetSysClockFreq+0x98>)
 8003976:	613b      	str	r3, [r7, #16]
      break;
 8003978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397a:	693b      	ldr	r3, [r7, #16]
}
 800397c:	4618      	mov	r0, r3
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	007a1200 	.word	0x007a1200
 8003990:	0800bde8 	.word	0x0800bde8
 8003994:	0800bdf8 	.word	0x0800bdf8
 8003998:	003d0900 	.word	0x003d0900

0800399c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <RCC_Delay+0x34>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <RCC_Delay+0x38>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	0a5b      	lsrs	r3, r3, #9
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039b8:	bf00      	nop
  }
  while (Delay --);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1e5a      	subs	r2, r3, #1
 80039be:	60fa      	str	r2, [r7, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f9      	bne.n	80039b8 <RCC_Delay+0x1c>
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	20000004 	.word	0x20000004
 80039d4:	10624dd3 	.word	0x10624dd3

080039d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e076      	b.n	8003ad8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039fa:	d009      	beq.n	8003a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	61da      	str	r2, [r3, #28]
 8003a02:	e005      	b.n	8003a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fe fedc 	bl	80027e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	ea42 0103 	orr.w	r1, r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	0c1a      	lsrs	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f002 0204 	and.w	r2, r2, #4
 8003ab6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_SPI_Transmit+0x22>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e12d      	b.n	8003d5e <HAL_SPI_Transmit+0x27e>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b0a:	f7ff f87f 	bl	8002c0c <HAL_GetTick>
 8003b0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d002      	beq.n	8003b26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
 8003b22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b24:	e116      	b.n	8003d54 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_SPI_Transmit+0x52>
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b36:	e10d      	b.n	8003d54 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7e:	d10f      	bne.n	8003ba0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d007      	beq.n	8003bbe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc6:	d14f      	bne.n	8003c68 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_SPI_Transmit+0xf6>
 8003bd0:	8afb      	ldrh	r3, [r7, #22]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d142      	bne.n	8003c5c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	881a      	ldrh	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	1c9a      	adds	r2, r3, #2
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bfa:	e02f      	b.n	8003c5c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d112      	bne.n	8003c30 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	881a      	ldrh	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c2e:	e015      	b.n	8003c5c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c30:	f7fe ffec 	bl	8002c0c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d803      	bhi.n	8003c48 <HAL_SPI_Transmit+0x168>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d102      	bne.n	8003c4e <HAL_SPI_Transmit+0x16e>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c5a:	e07b      	b.n	8003d54 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ca      	bne.n	8003bfc <HAL_SPI_Transmit+0x11c>
 8003c66:	e050      	b.n	8003d0a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_SPI_Transmit+0x196>
 8003c70:	8afb      	ldrh	r3, [r7, #22]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d144      	bne.n	8003d00 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c9c:	e030      	b.n	8003d00 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d113      	bne.n	8003cd4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	7812      	ldrb	r2, [r2, #0]
 8003cb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cd2:	e015      	b.n	8003d00 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd4:	f7fe ff9a 	bl	8002c0c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d803      	bhi.n	8003cec <HAL_SPI_Transmit+0x20c>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d102      	bne.n	8003cf2 <HAL_SPI_Transmit+0x212>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003cfe:	e029      	b.n	8003d54 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1c9      	bne.n	8003c9e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	6839      	ldr	r1, [r7, #0]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fa62 	bl	80041d8 <SPI_EndRxTxTransaction>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e003      	b.n	8003d54 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b08c      	sub	sp, #48	; 0x30
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d74:	2301      	movs	r3, #1
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x26>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e198      	b.n	80040be <HAL_SPI_TransmitReceive+0x358>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d94:	f7fe ff3a 	bl	8002c0c <HAL_GetTick>
 8003d98:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d00f      	beq.n	8003dd6 <HAL_SPI_TransmitReceive+0x70>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dbc:	d107      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x68>
 8003dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d003      	beq.n	8003dd6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dd4:	e16d      	b.n	80040b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_SPI_TransmitReceive+0x82>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_SPI_TransmitReceive+0x82>
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d103      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dee:	e160      	b.n	80040b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d003      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2205      	movs	r2, #5
 8003e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	887a      	ldrh	r2, [r7, #2]
 8003e1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	887a      	ldrh	r2, [r7, #2]
 8003e26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	887a      	ldrh	r2, [r7, #2]
 8003e2c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b40      	cmp	r3, #64	; 0x40
 8003e46:	d007      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e60:	d17c      	bne.n	8003f5c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x10a>
 8003e6a:	8b7b      	ldrh	r3, [r7, #26]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d16a      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	881a      	ldrh	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	1c9a      	adds	r2, r3, #2
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e94:	e057      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d11b      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x176>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <HAL_SPI_TransmitReceive+0x176>
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d113      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	881a      	ldrh	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	1c9a      	adds	r2, r3, #2
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d119      	bne.n	8003f1e <HAL_SPI_TransmitReceive+0x1b8>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d014      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	b292      	uxth	r2, r2
 8003f00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	1c9a      	adds	r2, r3, #2
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f1e:	f7fe fe75 	bl	8002c0c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d80b      	bhi.n	8003f46 <HAL_SPI_TransmitReceive+0x1e0>
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d007      	beq.n	8003f46 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003f44:	e0b5      	b.n	80040b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1a2      	bne.n	8003e96 <HAL_SPI_TransmitReceive+0x130>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d19d      	bne.n	8003e96 <HAL_SPI_TransmitReceive+0x130>
 8003f5a:	e080      	b.n	800405e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_SPI_TransmitReceive+0x204>
 8003f64:	8b7b      	ldrh	r3, [r7, #26]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d16f      	bne.n	800404a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	7812      	ldrb	r2, [r2, #0]
 8003f76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f90:	e05b      	b.n	800404a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d11c      	bne.n	8003fda <HAL_SPI_TransmitReceive+0x274>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d017      	beq.n	8003fda <HAL_SPI_TransmitReceive+0x274>
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d114      	bne.n	8003fda <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d119      	bne.n	800401c <HAL_SPI_TransmitReceive+0x2b6>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d014      	beq.n	800401c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004018:	2301      	movs	r3, #1
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800401c:	f7fe fdf6 	bl	8002c0c <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004028:	429a      	cmp	r2, r3
 800402a:	d803      	bhi.n	8004034 <HAL_SPI_TransmitReceive+0x2ce>
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004032:	d102      	bne.n	800403a <HAL_SPI_TransmitReceive+0x2d4>
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	2b00      	cmp	r3, #0
 8004038:	d107      	bne.n	800404a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004048:	e033      	b.n	80040b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d19e      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x22c>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d199      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800405e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f8b8 	bl	80041d8 <SPI_EndRxTxTransaction>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d006      	beq.n	800407c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800407a:	e01a      	b.n	80040b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a8:	e003      	b.n	80040b2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3730      	adds	r7, #48	; 0x30
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040d8:	f7fe fd98 	bl	8002c0c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	4413      	add	r3, r2
 80040e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040e8:	f7fe fd90 	bl	8002c0c <HAL_GetTick>
 80040ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040ee:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	015b      	lsls	r3, r3, #5
 80040f4:	0d1b      	lsrs	r3, r3, #20
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	fb02 f303 	mul.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040fe:	e054      	b.n	80041aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d050      	beq.n	80041aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004108:	f7fe fd80 	bl	8002c0c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	429a      	cmp	r2, r3
 8004116:	d902      	bls.n	800411e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d13d      	bne.n	800419a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800412c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004136:	d111      	bne.n	800415c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004140:	d004      	beq.n	800414c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414a:	d107      	bne.n	800415c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004164:	d10f      	bne.n	8004186 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004184:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e017      	b.n	80041ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d19b      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000004 	.word	0x20000004

080041d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2180      	movs	r1, #128	; 0x80
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff ff6a 	bl	80040c8 <SPI_WaitFlagStateUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e000      	b.n	800420c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e041      	b.n	80042aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fe fb20 	bl	8002880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f000 fabe 	bl	80047d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d001      	beq.n	80042cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e032      	b.n	8004332 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_TIM_Base_Start+0x88>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00e      	beq.n	80042fc <HAL_TIM_Base_Start+0x48>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e6:	d009      	beq.n	80042fc <HAL_TIM_Base_Start+0x48>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a14      	ldr	r2, [pc, #80]	; (8004340 <HAL_TIM_Base_Start+0x8c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_TIM_Base_Start+0x48>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a13      	ldr	r2, [pc, #76]	; (8004344 <HAL_TIM_Base_Start+0x90>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d111      	bne.n	8004320 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b06      	cmp	r3, #6
 800430c:	d010      	beq.n	8004330 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431e:	e007      	b.n	8004330 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800

08004348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d001      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e03a      	b.n	80043d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_TIM_Base_Start_IT+0x98>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00e      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x58>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438a:	d009      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x58>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a14      	ldr	r2, [pc, #80]	; (80043e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x58>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d111      	bne.n	80043c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d010      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	e007      	b.n	80043d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800

080043ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0202 	mvn.w	r2, #2
 8004418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f9b4 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f9a7 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f9b6 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0204 	mvn.w	r2, #4
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f98a 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f97d 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f98c 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0208 	mvn.w	r2, #8
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2204      	movs	r2, #4
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f960 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f953 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f962 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b10      	cmp	r3, #16
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0210 	mvn.w	r2, #16
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2208      	movs	r2, #8
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f936 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f929 	bl	800478a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f938 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d10e      	bne.n	8004570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d107      	bne.n	8004570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0201 	mvn.w	r2, #1
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fe f8e8 	bl	8002740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	d10e      	bne.n	800459c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d107      	bne.n	800459c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa7b 	bl	8004a92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d10e      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d107      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f8fc 	bl	80047c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d10e      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d107      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0220 	mvn.w	r2, #32
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fa46 	bl	8004a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_TIM_ConfigClockSource+0x1c>
 8004614:	2302      	movs	r3, #2
 8004616:	e0b4      	b.n	8004782 <HAL_TIM_ConfigClockSource+0x186>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004650:	d03e      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	f200 8087 	bhi.w	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 800465a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465e:	f000 8086 	beq.w	800476e <HAL_TIM_ConfigClockSource+0x172>
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004666:	d87f      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b70      	cmp	r3, #112	; 0x70
 800466a:	d01a      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0xa6>
 800466c:	2b70      	cmp	r3, #112	; 0x70
 800466e:	d87b      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b60      	cmp	r3, #96	; 0x60
 8004672:	d050      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x11a>
 8004674:	2b60      	cmp	r3, #96	; 0x60
 8004676:	d877      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d03c      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0xfa>
 800467c:	2b50      	cmp	r3, #80	; 0x50
 800467e:	d873      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d058      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x13a>
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d86f      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d064      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d86b      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d060      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d867      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05c      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 800469c:	2b10      	cmp	r3, #16
 800469e:	d05a      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	e062      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6899      	ldr	r1, [r3, #8]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f000 f968 	bl	8004986 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	609a      	str	r2, [r3, #8]
      break;
 80046ce:	e04f      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6899      	ldr	r1, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f000 f951 	bl	8004986 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f2:	609a      	str	r2, [r3, #8]
      break;
 80046f4:	e03c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	f000 f8c8 	bl	8004898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2150      	movs	r1, #80	; 0x50
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f91f 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004714:	e02c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 f8e6 	bl	80048f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2160      	movs	r1, #96	; 0x60
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f90f 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004734:	e01c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 f8a8 	bl	8004898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f8ff 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004754:	e00c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f000 f8f6 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004766:	e003      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      break;
 800476c:	e000      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800476e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr

080047ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr
	...

080047d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a29      	ldr	r2, [pc, #164]	; (800488c <TIM_Base_SetConfig+0xb8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x30>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x30>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a26      	ldr	r2, [pc, #152]	; (8004890 <TIM_Base_SetConfig+0xbc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x30>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a25      	ldr	r2, [pc, #148]	; (8004894 <TIM_Base_SetConfig+0xc0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <TIM_Base_SetConfig+0xb8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00b      	beq.n	8004836 <TIM_Base_SetConfig+0x62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d007      	beq.n	8004836 <TIM_Base_SetConfig+0x62>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <TIM_Base_SetConfig+0xbc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_Base_SetConfig+0x62>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a18      	ldr	r2, [pc, #96]	; (8004894 <TIM_Base_SetConfig+0xc0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a07      	ldr	r2, [pc, #28]	; (800488c <TIM_Base_SetConfig+0xb8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d103      	bne.n	800487c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	615a      	str	r2, [r3, #20]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800

08004898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 030a 	bic.w	r3, r3, #10
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f023 0210 	bic.w	r2, r3, #16
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800491e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	031b      	lsls	r3, r3, #12
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004930:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	f043 0307 	orr.w	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004986:	b480      	push	{r7}
 8004988:	b087      	sub	sp, #28
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	021a      	lsls	r2, r3, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	609a      	str	r2, [r3, #8]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d8:	2302      	movs	r3, #2
 80049da:	e046      	b.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d009      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10c      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	40012c00 	.word	0x40012c00
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800

08004a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004aa8:	4904      	ldr	r1, [pc, #16]	; (8004abc <MX_FATFS_Init+0x18>)
 8004aaa:	4805      	ldr	r0, [pc, #20]	; (8004ac0 <MX_FATFS_Init+0x1c>)
 8004aac:	f003 fb1a 	bl	80080e4 <FATFS_LinkDriver>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <MX_FATFS_Init+0x20>)
 8004ab6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ab8:	bf00      	nop
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	200023bc 	.word	0x200023bc
 8004ac0:	20000010 	.word	0x20000010
 8004ac4:	200023b8 	.word	0x200023b8

08004ac8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004acc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	4603      	mov	r3, r0
 8004ade:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;  //@hgm
    //return Stat;        //@hgm
	return SD_disk_initialize(pdrv); // @hgm
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fc fdc2 	bl	800166c <SD_disk_initialize>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT; // @hgm
    //return Stat;       // @hgm
	return SD_disk_status(pdrv); // @hgm
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fc fe99 	bl	8001838 <SD_disk_status>
 8004b06:	4603      	mov	r3, r0
 8004b08:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4603      	mov	r3, r0
 8004b20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;     // @hgm
	return SD_disk_read(pdrv, buff, sector, count);
 8004b22:	7bf8      	ldrb	r0, [r7, #15]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	f7fc fe99 	bl	8001860 <SD_disk_read>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4603      	mov	r3, r0
 8004b48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;   // @hgm
	return SD_disk_write(pdrv, buff, sector, count);
 8004b4a:	7bf8      	ldrb	r0, [r7, #15]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	f7fc feef 	bl	8001934 <SD_disk_write>
 8004b56:	4603      	mov	r3, r0
 8004b58:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	4603      	mov	r3, r0
 8004b6a:	603a      	str	r2, [r7, #0]
 8004b6c:	71fb      	strb	r3, [r7, #7]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;  // @hgm
    //return res;               // @hgm
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	79b9      	ldrb	r1, [r7, #6]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fc ff5f 	bl	8001a3c <SD_disk_ioctl>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <disk_status+0x30>)
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	79fa      	ldrb	r2, [r7, #7]
 8004ba4:	4905      	ldr	r1, [pc, #20]	; (8004bbc <disk_status+0x30>)
 8004ba6:	440a      	add	r2, r1
 8004ba8:	7a12      	ldrb	r2, [r2, #8]
 8004baa:	4610      	mov	r0, r2
 8004bac:	4798      	blx	r3
 8004bae:	4603      	mov	r3, r0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	200023e0 	.word	0x200023e0

08004bc0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	4a0d      	ldr	r2, [pc, #52]	; (8004c08 <disk_initialize+0x48>)
 8004bd2:	5cd3      	ldrb	r3, [r2, r3]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d111      	bne.n	8004bfc <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	4a0b      	ldr	r2, [pc, #44]	; (8004c08 <disk_initialize+0x48>)
 8004bdc:	2101      	movs	r1, #1
 8004bde:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <disk_initialize+0x48>)
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	79fa      	ldrb	r2, [r7, #7]
 8004bee:	4906      	ldr	r1, [pc, #24]	; (8004c08 <disk_initialize+0x48>)
 8004bf0:	440a      	add	r2, r1
 8004bf2:	7a12      	ldrb	r2, [r2, #8]
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4798      	blx	r3
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200023e0 	.word	0x200023e0

08004c0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <disk_read+0x3c>)
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	689c      	ldr	r4, [r3, #8]
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	4a07      	ldr	r2, [pc, #28]	; (8004c48 <disk_read+0x3c>)
 8004c2c:	4413      	add	r3, r2
 8004c2e:	7a18      	ldrb	r0, [r3, #8]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	47a0      	blx	r4
 8004c38:	4603      	mov	r3, r0
 8004c3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200023e0 	.word	0x200023e0

08004c4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <disk_write+0x3c>)
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	68dc      	ldr	r4, [r3, #12]
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <disk_write+0x3c>)
 8004c6c:	4413      	add	r3, r2
 8004c6e:	7a18      	ldrb	r0, [r3, #8]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	47a0      	blx	r4
 8004c78:	4603      	mov	r3, r0
 8004c7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd90      	pop	{r4, r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200023e0 	.word	0x200023e0

08004c8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	603a      	str	r2, [r7, #0]
 8004c96:	71fb      	strb	r3, [r7, #7]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <disk_ioctl+0x38>)
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	79fa      	ldrb	r2, [r7, #7]
 8004caa:	4906      	ldr	r1, [pc, #24]	; (8004cc4 <disk_ioctl+0x38>)
 8004cac:	440a      	add	r2, r1
 8004cae:	7a10      	ldrb	r0, [r2, #8]
 8004cb0:	79b9      	ldrb	r1, [r7, #6]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	4798      	blx	r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	73fb      	strb	r3, [r7, #15]
  return res;
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	200023e0 	.word	0x200023e0

08004cc8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004cdc:	e007      	b.n	8004cee <mem_cpy+0x26>
		*d++ = *s++;
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	1c53      	adds	r3, r2, #1
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1c59      	adds	r1, r3, #1
 8004ce8:	6179      	str	r1, [r7, #20]
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	1e5a      	subs	r2, r3, #1
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f2      	bne.n	8004cde <mem_cpy+0x16>
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr

08004d04 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004d14:	e005      	b.n	8004d22 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	617a      	str	r2, [r7, #20]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1e5a      	subs	r2, r3, #1
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f4      	bne.n	8004d16 <mem_set+0x12>
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	; 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004d50:	bf00      	nop
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00d      	beq.n	8004d78 <mem_cmp+0x40>
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	61fa      	str	r2, [r7, #28]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	4619      	mov	r1, r3
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	61ba      	str	r2, [r7, #24]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	1acb      	subs	r3, r1, r3
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0ec      	beq.n	8004d52 <mem_cmp+0x1a>
	return r;
 8004d78:	697b      	ldr	r3, [r7, #20]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004d8e:	e002      	b.n	8004d96 <chk_chr+0x12>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3301      	adds	r3, #1
 8004d94:	607b      	str	r3, [r7, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <chk_chr+0x26>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d1f2      	bne.n	8004d90 <chk_chr+0xc>
	return *str;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	781b      	ldrb	r3, [r3, #0]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	e03b      	b.n	8004e44 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8004dcc:	4931      	ldr	r1, [pc, #196]	; (8004e94 <chk_lock+0xdc>)
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d02c      	beq.n	8004e3a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004de0:	492c      	ldr	r1, [pc, #176]	; (8004e94 <chk_lock+0xdc>)
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4613      	mov	r3, r2
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d120      	bne.n	8004e3e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8004dfc:	4925      	ldr	r1, [pc, #148]	; (8004e94 <chk_lock+0xdc>)
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e14:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d111      	bne.n	8004e3e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004e1a:	491e      	ldr	r1, [pc, #120]	; (8004e94 <chk_lock+0xdc>)
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	3308      	adds	r3, #8
 8004e2a:	881a      	ldrh	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e32:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d102      	bne.n	8004e3e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8004e38:	e007      	b.n	8004e4a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3301      	adds	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d9c0      	bls.n	8004dcc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d109      	bne.n	8004e64 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <chk_lock+0xa4>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d101      	bne.n	8004e60 <chk_lock+0xa8>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e013      	b.n	8004e88 <chk_lock+0xd0>
 8004e60:	2312      	movs	r3, #18
 8004e62:	e011      	b.n	8004e88 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <chk_lock+0xca>
 8004e6a:	490a      	ldr	r1, [pc, #40]	; (8004e94 <chk_lock+0xdc>)
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	330a      	adds	r3, #10
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e80:	d101      	bne.n	8004e86 <chk_lock+0xce>
 8004e82:	2310      	movs	r3, #16
 8004e84:	e000      	b.n	8004e88 <chk_lock+0xd0>
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	200023c8 	.word	0x200023c8

08004e98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	e002      	b.n	8004eaa <enq_lock+0x12>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d809      	bhi.n	8004ec4 <enq_lock+0x2c>
 8004eb0:	490a      	ldr	r1, [pc, #40]	; (8004edc <enq_lock+0x44>)
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ef      	bne.n	8004ea4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	bf14      	ite	ne
 8004eca:	2301      	movne	r3, #1
 8004ecc:	2300      	moveq	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	200023c8 	.word	0x200023c8

08004ee0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e02e      	b.n	8004f4e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8004ef0:	4958      	ldr	r1, [pc, #352]	; (8005054 <inc_lock+0x174>)
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d11d      	bne.n	8004f48 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8004f0c:	4951      	ldr	r1, [pc, #324]	; (8005054 <inc_lock+0x174>)
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d10e      	bne.n	8004f48 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8004f2a:	494a      	ldr	r1, [pc, #296]	; (8005054 <inc_lock+0x174>)
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	3308      	adds	r3, #8
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f42:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d006      	beq.n	8004f56 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d9cd      	bls.n	8004ef0 <inc_lock+0x10>
 8004f54:	e000      	b.n	8004f58 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8004f56:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d148      	bne.n	8004ff0 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e002      	b.n	8004f6a <inc_lock+0x8a>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d809      	bhi.n	8004f84 <inc_lock+0xa4>
 8004f70:	4938      	ldr	r1, [pc, #224]	; (8005054 <inc_lock+0x174>)
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4613      	mov	r3, r2
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1ef      	bne.n	8004f64 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d101      	bne.n	8004f8e <inc_lock+0xae>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e05d      	b.n	800504a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f94:	6819      	ldr	r1, [r3, #0]
 8004f96:	482f      	ldr	r0, [pc, #188]	; (8005054 <inc_lock+0x174>)
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4403      	add	r3, r0
 8004fa4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fac:	6899      	ldr	r1, [r3, #8]
 8004fae:	4829      	ldr	r0, [pc, #164]	; (8005054 <inc_lock+0x174>)
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4403      	add	r3, r0
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc6:	88d8      	ldrh	r0, [r3, #6]
 8004fc8:	4922      	ldr	r1, [pc, #136]	; (8005054 <inc_lock+0x174>)
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	4602      	mov	r2, r0
 8004fda:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004fdc:	491d      	ldr	r1, [pc, #116]	; (8005054 <inc_lock+0x174>)
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	330a      	adds	r3, #10
 8004fec:	2200      	movs	r2, #0
 8004fee:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <inc_lock+0x130>
 8004ff6:	4917      	ldr	r1, [pc, #92]	; (8005054 <inc_lock+0x174>)
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	330a      	adds	r3, #10
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <inc_lock+0x130>
 800500c:	2300      	movs	r3, #0
 800500e:	e01c      	b.n	800504a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10b      	bne.n	800502e <inc_lock+0x14e>
 8005016:	490f      	ldr	r1, [pc, #60]	; (8005054 <inc_lock+0x174>)
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	330a      	adds	r3, #10
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	b299      	uxth	r1, r3
 800502c:	e001      	b.n	8005032 <inc_lock+0x152>
 800502e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005032:	4808      	ldr	r0, [pc, #32]	; (8005054 <inc_lock+0x174>)
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4613      	mov	r3, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4403      	add	r3, r0
 8005040:	330a      	adds	r3, #10
 8005042:	460a      	mov	r2, r1
 8005044:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3301      	adds	r3, #1
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	200023c8 	.word	0x200023c8

08005058 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3b01      	subs	r3, #1
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d82e      	bhi.n	80050ca <dec_lock+0x72>
		n = Files[i].ctr;
 800506c:	491b      	ldr	r1, [pc, #108]	; (80050dc <dec_lock+0x84>)
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	330a      	adds	r3, #10
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005080:	89fb      	ldrh	r3, [r7, #14]
 8005082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005086:	d101      	bne.n	800508c <dec_lock+0x34>
 8005088:	2300      	movs	r3, #0
 800508a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800508c:	89fb      	ldrh	r3, [r7, #14]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <dec_lock+0x40>
 8005092:	89fb      	ldrh	r3, [r7, #14]
 8005094:	3b01      	subs	r3, #1
 8005096:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005098:	4910      	ldr	r1, [pc, #64]	; (80050dc <dec_lock+0x84>)
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	330a      	adds	r3, #10
 80050a8:	89fa      	ldrh	r2, [r7, #14]
 80050aa:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80050ac:	89fb      	ldrh	r3, [r7, #14]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d108      	bne.n	80050c4 <dec_lock+0x6c>
 80050b2:	490a      	ldr	r1, [pc, #40]	; (80050dc <dec_lock+0x84>)
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	737b      	strb	r3, [r7, #13]
 80050c8:	e001      	b.n	80050ce <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80050ca:	2302      	movs	r3, #2
 80050cc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80050ce:	7b7b      	ldrb	r3, [r7, #13]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	200023c8 	.word	0x200023c8

080050e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e016      	b.n	800511c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80050ee:	4910      	ldr	r1, [pc, #64]	; (8005130 <clear_lock+0x50>)
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d108      	bne.n	8005116 <clear_lock+0x36>
 8005104:	490a      	ldr	r1, [pc, #40]	; (8005130 <clear_lock+0x50>)
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3301      	adds	r3, #1
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d9e5      	bls.n	80050ee <clear_lock+0xe>
	}
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	200023c8 	.word	0x200023c8

08005134 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005146:	791b      	ldrb	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d040      	beq.n	80051ce <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800515c:	7858      	ldrb	r0, [r3, #1]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	2301      	movs	r3, #1
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	f7ff fd72 	bl	8004c4c <disk_write>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <sync_window+0x40>
			res = FR_DISK_ERR;
 800516e:	2301      	movs	r3, #1
 8005170:	73fb      	strb	r3, [r7, #15]
 8005172:	e02c      	b.n	80051ce <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517a:	2200      	movs	r2, #0
 800517c:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	1ad2      	subs	r2, r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	429a      	cmp	r2, r3
 8005194:	d21b      	bcs.n	80051ce <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519c:	78db      	ldrb	r3, [r3, #3]
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e012      	b.n	80051c8 <sync_window+0x94>
					wsect += fs->fsize;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4413      	add	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b6:	7858      	ldrb	r0, [r3, #1]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	2301      	movs	r3, #1
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	f7ff fd45 	bl	8004c4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d8e9      	bhi.n	80051a2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d01e      	beq.n	8005232 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff ff9d 	bl	8005134 <sync_window>
 80051fa:	4603      	mov	r3, r0
 80051fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d116      	bne.n	8005232 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520a:	7858      	ldrb	r0, [r3, #1]
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	2301      	movs	r3, #1
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	f7ff fcfb 	bl	8004c0c <disk_read>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800521c:	f04f 33ff 	mov.w	r3, #4294967295
 8005220:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005222:	2301      	movs	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522c:	461a      	mov	r2, r3
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ff75 	bl	8005134 <sync_window>
 800524a:	4603      	mov	r3, r0
 800524c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f040 80ad 	bne.w	80053b0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b03      	cmp	r3, #3
 8005260:	f040 8098 	bne.w	8005394 <sync_fs+0x158>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526a:	795b      	ldrb	r3, [r3, #5]
 800526c:	2b01      	cmp	r3, #1
 800526e:	f040 8091 	bne.w	8005394 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527a:	895b      	ldrh	r3, [r3, #10]
 800527c:	461a      	mov	r2, r3
 800527e:	2100      	movs	r1, #0
 8005280:	f7ff fd40 	bl	8004d04 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2255      	movs	r2, #85	; 0x55
 8005288:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	22aa      	movs	r2, #170	; 0xaa
 8005290:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2252      	movs	r2, #82	; 0x52
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2252      	movs	r2, #82	; 0x52
 800529e:	705a      	strb	r2, [r3, #1]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2261      	movs	r2, #97	; 0x61
 80052a4:	709a      	strb	r2, [r3, #2]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2241      	movs	r2, #65	; 0x41
 80052aa:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2272      	movs	r2, #114	; 0x72
 80052b0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2272      	movs	r2, #114	; 0x72
 80052b8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2241      	movs	r2, #65	; 0x41
 80052c0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2261      	movs	r2, #97	; 0x61
 80052c8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	0a1b      	lsrs	r3, r3, #8
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	0e1b      	lsrs	r3, r3, #24
 800530e:	b2da      	uxtb	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	b2da      	uxtb	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	b29b      	uxth	r3, r3
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	b29b      	uxth	r3, r3
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	b2da      	uxtb	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	0e1b      	lsrs	r3, r3, #24
 8005358:	b2da      	uxtb	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	3301      	adds	r3, #1
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005370:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005378:	7858      	ldrb	r0, [r3, #1]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	2301      	movs	r3, #1
 8005386:	f7ff fc61 	bl	8004c4c <disk_write>
			fs->fsi_flag = 0;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005390:	2200      	movs	r2, #0
 8005392:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	2200      	movs	r2, #0
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fc73 	bl	8004c8c <disk_ioctl>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	3b02      	subs	r3, #2
 80053c8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	3b02      	subs	r3, #2
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d301      	bcc.n	80053de <clust2sect+0x24>
 80053da:	2300      	movs	r3, #0
 80053dc:	e00c      	b.n	80053f8 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e4:	789b      	ldrb	r3, [r3, #2]
 80053e6:	461a      	mov	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	fb03 f202 	mul.w	r2, r3, r2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	4413      	add	r3, r2
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d906      	bls.n	8005420 <get_fat+0x1e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <get_fat+0x24>
		val = 1;	/* Internal error */
 8005420:	2301      	movs	r3, #1
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e0e4      	b.n	80055f0 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b03      	cmp	r3, #3
 8005436:	f000 8098 	beq.w	800556a <get_fat+0x168>
 800543a:	2b03      	cmp	r3, #3
 800543c:	f300 80ce 	bgt.w	80055dc <get_fat+0x1da>
 8005440:	2b01      	cmp	r3, #1
 8005442:	d002      	beq.n	800544a <get_fat+0x48>
 8005444:	2b02      	cmp	r3, #2
 8005446:	d05f      	beq.n	8005508 <get_fat+0x106>
 8005448:	e0c8      	b.n	80055dc <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	085b      	lsrs	r3, r3, #1
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545e:	6a1a      	ldr	r2, [r3, #32]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005466:	895b      	ldrh	r3, [r3, #10]
 8005468:	4619      	mov	r1, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005470:	4413      	add	r3, r2
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff feaf 	bl	80051d8 <move_window>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	f040 80b0 	bne.w	80055e2 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800548e:	8952      	ldrh	r2, [r2, #10]
 8005490:	fbb3 f1f2 	udiv	r1, r3, r2
 8005494:	fb01 f202 	mul.w	r2, r1, r2
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	5cd3      	ldrb	r3, [r2, r3]
 800549e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ae:	895b      	ldrh	r3, [r3, #10]
 80054b0:	4619      	mov	r1, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80054b8:	4413      	add	r3, r2
 80054ba:	4619      	mov	r1, r3
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff fe8b 	bl	80051d8 <move_window>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 808e 	bne.w	80055e6 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d0:	895b      	ldrh	r3, [r3, #10]
 80054d2:	461a      	mov	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80054da:	fb01 f202 	mul.w	r2, r1, r2
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	5cd3      	ldrb	r3, [r2, r3]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	461a      	mov	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <get_fat+0xfc>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	e002      	b.n	8005504 <get_fat+0x102>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005504:	617b      	str	r3, [r7, #20]
			break;
 8005506:	e073      	b.n	80055f0 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005516:	895b      	ldrh	r3, [r3, #10]
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	b29b      	uxth	r3, r3
 800551c:	4619      	mov	r1, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	fbb3 f3f1 	udiv	r3, r3, r1
 8005524:	4413      	add	r3, r2
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fe55 	bl	80051d8 <move_window>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d15a      	bne.n	80055ea <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800553e:	8952      	ldrh	r2, [r2, #10]
 8005540:	fbb3 f1f2 	udiv	r1, r3, r2
 8005544:	fb01 f202 	mul.w	r2, r1, r2
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4413      	add	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	3301      	adds	r3, #1
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	b21a      	sxth	r2, r3
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b21b      	sxth	r3, r3
 8005560:	4313      	orrs	r3, r2
 8005562:	b21b      	sxth	r3, r3
 8005564:	b29b      	uxth	r3, r3
 8005566:	617b      	str	r3, [r7, #20]
			break;
 8005568:	e042      	b.n	80055f0 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005570:	6a1a      	ldr	r2, [r3, #32]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005578:	895b      	ldrh	r3, [r3, #10]
 800557a:	089b      	lsrs	r3, r3, #2
 800557c:	b29b      	uxth	r3, r3
 800557e:	4619      	mov	r1, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	fbb3 f3f1 	udiv	r3, r3, r1
 8005586:	4413      	add	r3, r2
 8005588:	4619      	mov	r1, r3
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff fe24 	bl	80051d8 <move_window>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d12b      	bne.n	80055ee <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055a0:	8952      	ldrh	r2, [r2, #10]
 80055a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80055a6:	fb01 f202 	mul.w	r2, r1, r2
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	4413      	add	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	3303      	adds	r3, #3
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	061a      	lsls	r2, r3, #24
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3302      	adds	r3, #2
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	041b      	lsls	r3, r3, #16
 80055c2:	4313      	orrs	r3, r2
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	3201      	adds	r2, #1
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	0212      	lsls	r2, r2, #8
 80055cc:	4313      	orrs	r3, r2
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	7812      	ldrb	r2, [r2, #0]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055d8:	617b      	str	r3, [r7, #20]
			break;
 80055da:	e009      	b.n	80055f0 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 80055dc:	2301      	movs	r3, #1
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e006      	b.n	80055f0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055e2:	bf00      	nop
 80055e4:	e004      	b.n	80055f0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055e6:	bf00      	nop
 80055e8:	e002      	b.n	80055f0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055ee:	bf00      	nop
		}
	}

	return val;
 80055f0:	697b      	ldr	r3, [r7, #20]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b088      	sub	sp, #32
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d906      	bls.n	800561a <put_fat+0x20>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <put_fat+0x26>
		res = FR_INT_ERR;
 800561a:	2302      	movs	r3, #2
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	e13a      	b.n	8005896 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b03      	cmp	r3, #3
 800562a:	f000 80d0 	beq.w	80057ce <put_fat+0x1d4>
 800562e:	2b03      	cmp	r3, #3
 8005630:	f300 8127 	bgt.w	8005882 <put_fat+0x288>
 8005634:	2b01      	cmp	r3, #1
 8005636:	d003      	beq.n	8005640 <put_fat+0x46>
 8005638:	2b02      	cmp	r3, #2
 800563a:	f000 808f 	beq.w	800575c <put_fat+0x162>
 800563e:	e120      	b.n	8005882 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4413      	add	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005654:	6a1a      	ldr	r2, [r3, #32]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565c:	895b      	ldrh	r3, [r3, #10]
 800565e:	4619      	mov	r1, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	fbb3 f3f1 	udiv	r3, r3, r1
 8005666:	4413      	add	r3, r2
 8005668:	4619      	mov	r1, r3
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff fdb4 	bl	80051d8 <move_window>
 8005670:	4603      	mov	r3, r0
 8005672:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005674:	7ffb      	ldrb	r3, [r7, #31]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f040 8106 	bne.w	8005888 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	617a      	str	r2, [r7, #20]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005688:	8952      	ldrh	r2, [r2, #10]
 800568a:	fbb3 f1f2 	udiv	r1, r3, r2
 800568e:	fb01 f202 	mul.w	r2, r1, r2
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00d      	beq.n	80056c0 <put_fat+0xc6>
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	b25b      	sxtb	r3, r3
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	b25a      	sxtb	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	b25b      	sxtb	r3, r3
 80056b8:	4313      	orrs	r3, r2
 80056ba:	b25b      	sxtb	r3, r3
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	e001      	b.n	80056c4 <put_fat+0xca>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ce:	2201      	movs	r2, #1
 80056d0:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d8:	6a1a      	ldr	r2, [r3, #32]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e0:	895b      	ldrh	r3, [r3, #10]
 80056e2:	4619      	mov	r1, r3
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80056ea:	4413      	add	r3, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f7ff fd72 	bl	80051d8 <move_window>
 80056f4:	4603      	mov	r3, r0
 80056f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056f8:	7ffb      	ldrb	r3, [r7, #31]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f040 80c6 	bne.w	800588c <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005706:	895b      	ldrh	r3, [r3, #10]
 8005708:	461a      	mov	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005710:	fb01 f202 	mul.w	r2, r1, r2
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <put_fat+0x134>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	091b      	lsrs	r3, r3, #4
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e00e      	b.n	800574c <put_fat+0x152>
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b25b      	sxtb	r3, r3
 8005734:	f023 030f 	bic.w	r3, r3, #15
 8005738:	b25a      	sxtb	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	b25b      	sxtb	r3, r3
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	b25b      	sxtb	r3, r3
 8005746:	4313      	orrs	r3, r2
 8005748:	b25b      	sxtb	r3, r3
 800574a:	b2db      	uxtb	r3, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005756:	2201      	movs	r2, #1
 8005758:	711a      	strb	r2, [r3, #4]
			break;
 800575a:	e09c      	b.n	8005896 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576a:	895b      	ldrh	r3, [r3, #10]
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	b29b      	uxth	r3, r3
 8005770:	4619      	mov	r1, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	fbb3 f3f1 	udiv	r3, r3, r1
 8005778:	4413      	add	r3, r2
 800577a:	4619      	mov	r1, r3
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff fd2b 	bl	80051d8 <move_window>
 8005782:	4603      	mov	r3, r0
 8005784:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005786:	7ffb      	ldrb	r3, [r7, #31]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f040 8081 	bne.w	8005890 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005798:	8952      	ldrh	r2, [r2, #10]
 800579a:	fbb3 f1f2 	udiv	r1, r3, r2
 800579e:	fb01 f202 	mul.w	r2, r1, r2
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	3301      	adds	r3, #1
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c8:	2201      	movs	r2, #1
 80057ca:	711a      	strb	r2, [r3, #4]
			break;
 80057cc:	e063      	b.n	8005896 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d4:	6a1a      	ldr	r2, [r3, #32]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057dc:	895b      	ldrh	r3, [r3, #10]
 80057de:	089b      	lsrs	r3, r3, #2
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	4619      	mov	r1, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ea:	4413      	add	r3, r2
 80057ec:	4619      	mov	r1, r3
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fcf2 	bl	80051d8 <move_window>
 80057f4:	4603      	mov	r3, r0
 80057f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057f8:	7ffb      	ldrb	r3, [r7, #31]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d14a      	bne.n	8005894 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005808:	8952      	ldrh	r2, [r2, #10]
 800580a:	fbb3 f1f2 	udiv	r1, r3, r2
 800580e:	fb01 f202 	mul.w	r2, r1, r2
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	3303      	adds	r3, #3
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	061a      	lsls	r2, r3, #24
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	3302      	adds	r3, #2
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	041b      	lsls	r3, r3, #16
 800582a:	4313      	orrs	r3, r2
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	3201      	adds	r2, #1
 8005830:	7812      	ldrb	r2, [r2, #0]
 8005832:	0212      	lsls	r2, r2, #8
 8005834:	4313      	orrs	r3, r2
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4313      	orrs	r3, r2
 8005844:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	b29b      	uxth	r3, r3
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	b29a      	uxth	r2, r3
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	3301      	adds	r3, #1
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	0c1a      	lsrs	r2, r3, #16
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	3302      	adds	r3, #2
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	0e1a      	lsrs	r2, r3, #24
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	3303      	adds	r3, #3
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587c:	2201      	movs	r2, #1
 800587e:	711a      	strb	r2, [r3, #4]
			break;
 8005880:	e009      	b.n	8005896 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8005882:	2302      	movs	r3, #2
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e006      	b.n	8005896 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005888:	bf00      	nop
 800588a:	e004      	b.n	8005896 <put_fat+0x29c>
			if (res != FR_OK) break;
 800588c:	bf00      	nop
 800588e:	e002      	b.n	8005896 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005890:	bf00      	nop
 8005892:	e000      	b.n	8005896 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005894:	bf00      	nop
		}
	}

	return res;
 8005896:	7ffb      	ldrb	r3, [r7, #31]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d906      	bls.n	80058be <remove_chain+0x1e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d302      	bcc.n	80058c4 <remove_chain+0x24>
		res = FR_INT_ERR;
 80058be:	2302      	movs	r3, #2
 80058c0:	73fb      	strb	r3, [r7, #15]
 80058c2:	e049      	b.n	8005958 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80058c8:	e03b      	b.n	8005942 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fd98 	bl	8005402 <get_fat>
 80058d2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d03b      	beq.n	8005952 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d102      	bne.n	80058e6 <remove_chain+0x46>
 80058e0:	2302      	movs	r3, #2
 80058e2:	73fb      	strb	r3, [r7, #15]
 80058e4:	e038      	b.n	8005958 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d102      	bne.n	80058f4 <remove_chain+0x54>
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	e031      	b.n	8005958 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80058f4:	2200      	movs	r2, #0
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fe7e 	bl	80055fa <put_fat>
 80058fe:	4603      	mov	r3, r0
 8005900:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d126      	bne.n	8005956 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d013      	beq.n	800593e <remove_chain+0x9e>
				fs->free_clust++;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	3301      	adds	r3, #1
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005926:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592e:	795b      	ldrb	r3, [r3, #5]
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	b2da      	uxtb	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593c:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d3bc      	bcc.n	80058ca <remove_chain+0x2a>
 8005950:	e002      	b.n	8005958 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8005952:	bf00      	nop
 8005954:	e000      	b.n	8005958 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8005956:	bf00      	nop
		}
	}

	return res;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b086      	sub	sp, #24
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d111      	bne.n	8005996 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d006      	beq.n	8005990 <create_chain+0x2e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d31d      	bcc.n	80059cc <create_chain+0x6a>
 8005990:	2301      	movs	r3, #1
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e01a      	b.n	80059cc <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff fd32 	bl	8005402 <get_fat>
 800599e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d801      	bhi.n	80059aa <create_chain+0x48>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e07f      	b.n	8005aaa <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d101      	bne.n	80059b6 <create_chain+0x54>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	e079      	b.n	8005aaa <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d201      	bcs.n	80059c8 <create_chain+0x66>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	e070      	b.n	8005aaa <create_chain+0x148>
		scl = clst;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3301      	adds	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d307      	bcc.n	80059f4 <create_chain+0x92>
			ncl = 2;
 80059e4:	2302      	movs	r3, #2
 80059e6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d901      	bls.n	80059f4 <create_chain+0x92>
 80059f0:	2300      	movs	r3, #0
 80059f2:	e05a      	b.n	8005aaa <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80059f4:	6979      	ldr	r1, [r7, #20]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fd03 	bl	8005402 <get_fat>
 80059fc:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00e      	beq.n	8005a22 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0a:	d002      	beq.n	8005a12 <create_chain+0xb0>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <create_chain+0xb4>
			return cs;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	e049      	b.n	8005aaa <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d1d8      	bne.n	80059d0 <create_chain+0x6e>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e043      	b.n	8005aaa <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8005a22:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005a24:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005a28:	6979      	ldr	r1, [r7, #20]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff fde5 	bl	80055fa <put_fat>
 8005a30:	4603      	mov	r3, r0
 8005a32:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <create_chain+0xec>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d006      	beq.n	8005a4e <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff fdd8 	bl	80055fa <put_fat>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d121      	bne.n	8005a98 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d01c      	beq.n	8005aa8 <create_chain+0x146>
			fs->free_clust--;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a7e:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a86:	795b      	ldrb	r3, [r3, #5]
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a94:	715a      	strb	r2, [r3, #5]
 8005a96:	e007      	b.n	8005aa8 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d102      	bne.n	8005aa4 <create_chain+0x142>
 8005a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa2:	e000      	b.n	8005aa6 <create_chain+0x144>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005aa8:	697b      	ldr	r3, [r7, #20]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b087      	sub	sp, #28
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad4:	895b      	ldrh	r3, [r3, #10]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005aea:	7892      	ldrb	r2, [r2, #2]
 8005aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1d1a      	adds	r2, r3, #4
 8005af6:	613a      	str	r2, [r7, #16]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <clmt_clust+0x54>
 8005b02:	2300      	movs	r3, #0
 8005b04:	e010      	b.n	8005b28 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d307      	bcc.n	8005b1e <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b1c:	e7e9      	b.n	8005af2 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8005b1e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	4413      	add	r3, r2
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b086      	sub	sp, #24
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b46:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d009      	beq.n	8005b6c <dir_sdi+0x3a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d301      	bcc.n	8005b70 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e0aa      	b.n	8005cc6 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d110      	bne.n	8005b98 <dir_sdi+0x66>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d107      	bne.n	8005b98 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d115      	bne.n	8005bca <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005baa:	891b      	ldrh	r3, [r3, #8]
 8005bac:	461a      	mov	r2, r3
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d301      	bcc.n	8005bb8 <dir_sdi+0x86>
			return FR_INT_ERR;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e086      	b.n	8005cc6 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	e043      	b.n	8005c52 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd6:	895b      	ldrh	r3, [r3, #10]
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bea:	789b      	ldrb	r3, [r3, #2]
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
 8005bf0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005bf2:	e021      	b.n	8005c38 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6979      	ldr	r1, [r7, #20]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff fbff 	bl	8005402 <get_fat>
 8005c04:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d101      	bne.n	8005c12 <dir_sdi+0xe0>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e059      	b.n	8005cc6 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d909      	bls.n	8005c2c <dir_sdi+0xfa>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d301      	bcc.n	8005c30 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e04a      	b.n	8005cc6 <dir_sdi+0x194>
			idx -= ic;
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d2d9      	bcs.n	8005bf4 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fbb5 	bl	80053ba <clust2sect>
 8005c50:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c58:	461a      	mov	r2, r3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <dir_sdi+0x136>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e02e      	b.n	8005cc6 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c74:	895b      	ldrh	r3, [r3, #10]
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4413      	add	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c8c:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca4:	895b      	ldrh	r3, [r3, #10]
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cb2:	fb01 f202 	mul.w	r2, r1, r2
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	015b      	lsls	r3, r3, #5
 8005cba:	4403      	add	r3, r0
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cc2:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005cce:	b590      	push	{r4, r7, lr}
 8005cd0:	b087      	sub	sp, #28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cde:	88db      	ldrh	r3, [r3, #6]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <dir_next+0x2a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <dir_next+0x2e>
		return FR_NO_FILE;
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	e12e      	b.n	8005f5a <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d08:	895b      	ldrh	r3, [r3, #10]
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d16:	fb01 f202 	mul.w	r2, r1, r2
 8005d1a:	1a9b      	subs	r3, r3, r2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 80fa 	bne.w	8005f16 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d32:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10d      	bne.n	8005d5c <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d4c:	891b      	ldrh	r3, [r3, #8]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4293      	cmp	r3, r2
 8005d54:	f0c0 80df 	bcc.w	8005f16 <dir_next+0x248>
				return FR_NO_FILE;
 8005d58:	2304      	movs	r3, #4
 8005d5a:	e0fe      	b.n	8005f5a <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d68:	895b      	ldrh	r3, [r3, #10]
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d82:	7892      	ldrb	r2, [r2, #2]
 8005d84:	3a01      	subs	r2, #1
 8005d86:	4013      	ands	r3, r2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f040 80c4 	bne.w	8005f16 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7ff fb2e 	bl	8005402 <get_fat>
 8005da6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d801      	bhi.n	8005db2 <dir_next+0xe4>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e0d3      	b.n	8005f5a <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d101      	bne.n	8005dbe <dir_next+0xf0>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e0cd      	b.n	8005f5a <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	f0c0 808e 	bcc.w	8005ef0 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <dir_next+0x110>
 8005dda:	2304      	movs	r3, #4
 8005ddc:	e0bd      	b.n	8005f5a <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f7ff fdb6 	bl	8005962 <create_chain>
 8005df6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <dir_next+0x134>
 8005dfe:	2307      	movs	r3, #7
 8005e00:	e0ab      	b.n	8005f5a <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <dir_next+0x13e>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e0a6      	b.n	8005f5a <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e12:	d101      	bne.n	8005e18 <dir_next+0x14a>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0a0      	b.n	8005f5a <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff f987 	bl	8005134 <sync_window>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <dir_next+0x162>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e094      	b.n	8005f5a <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e46:	895b      	ldrh	r3, [r3, #10]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	f7fe ff5a 	bl	8004d04 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e5e:	681c      	ldr	r4, [r3, #0]
 8005e60:	6979      	ldr	r1, [r7, #20]
 8005e62:	4610      	mov	r0, r2
 8005e64:	f7ff faa9 	bl	80053ba <clust2sect>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	e021      	b.n	8005eba <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e82:	2201      	movs	r2, #1
 8005e84:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff f950 	bl	8005134 <sync_window>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <dir_next+0x1d0>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e05d      	b.n	8005f5a <dir_next+0x28c>
						dp->fs->winsect++;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8005eaa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005eac:	3201      	adds	r2, #1
 8005eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec6:	789b      	ldrb	r3, [r3, #2]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d3d2      	bcc.n	8005e76 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005edc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1acb      	subs	r3, r1, r3
 8005eea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005eee:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6979      	ldr	r1, [r7, #20]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fa57 	bl	80053ba <clust2sect>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f14:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f20:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f38:	895b      	ldrh	r3, [r3, #10]
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f46:	fb01 f202 	mul.w	r2, r1, r2
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	015b      	lsls	r3, r3, #5
 8005f4e:	4403      	add	r3, r0
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f56:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd90      	pop	{r4, r7, pc}

08005f62 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff fddf 	bl	8005b32 <dir_sdi>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d135      	bne.n	8005fea <dir_alloc+0x88>
		n = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f7ff f91f 	bl	80051d8 <move_window>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d121      	bne.n	8005fe8 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2be5      	cmp	r3, #229	; 0xe5
 8005fb0:	d006      	beq.n	8005fc0 <dir_alloc+0x5e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d107      	bne.n	8005fd0 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60bb      	str	r3, [r7, #8]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d102      	bne.n	8005fd4 <dir_alloc+0x72>
 8005fce:	e00c      	b.n	8005fea <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fe79 	bl	8005cce <dir_next>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0cd      	beq.n	8005f82 <dir_alloc+0x20>
 8005fe6:	e000      	b.n	8005fea <dir_alloc+0x88>
			if (res != FR_OK) break;
 8005fe8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d101      	bne.n	8005ff4 <dir_alloc+0x92>
 8005ff0:	2307      	movs	r3, #7
 8005ff2:	73fb      	strb	r3, [r7, #15]
	return res;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	331b      	adds	r3, #27
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	b21a      	sxth	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	331a      	adds	r3, #26
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b21b      	sxth	r3, r3
 800601a:	4313      	orrs	r3, r2
 800601c:	b21b      	sxth	r3, r3
 800601e:	b29b      	uxth	r3, r3
 8006020:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d10f      	bne.n	800604e <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	3315      	adds	r3, #21
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	b21a      	sxth	r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	3314      	adds	r3, #20
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	b21b      	sxth	r3, r3
 8006040:	4313      	orrs	r3, r2
 8006042:	b21b      	sxth	r3, r3
 8006044:	b29b      	uxth	r3, r3
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

	return cl;
 800604e:	68fb      	ldr	r3, [r7, #12]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	331a      	adds	r3, #26
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	0a1b      	lsrs	r3, r3, #8
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	331b      	adds	r3, #27
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	0c1a      	lsrs	r2, r3, #16
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3314      	adds	r3, #20
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	b29b      	uxth	r3, r3
 8006090:	0a1b      	lsrs	r3, r3, #8
 8006092:	b29a      	uxth	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3315      	adds	r3, #21
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr

080060a6 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b086      	sub	sp, #24
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80060ae:	2100      	movs	r1, #0
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff fd3e 	bl	8005b32 <dir_sdi>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <dir_find+0x1e>
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	e03f      	b.n	8006144 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f7ff f87e 	bl	80051d8 <move_window>
 80060dc:	4603      	mov	r3, r0
 80060de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d12a      	bne.n	800613c <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d102      	bne.n	8006102 <dir_find+0x5c>
 80060fc:	2304      	movs	r3, #4
 80060fe:	75fb      	strb	r3, [r7, #23]
 8006100:	e01f      	b.n	8006142 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	330b      	adds	r3, #11
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10b      	bne.n	8006128 <dir_find+0x82>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	220b      	movs	r2, #11
 800611a:	4619      	mov	r1, r3
 800611c:	6938      	ldr	r0, [r7, #16]
 800611e:	f7fe fe0b 	bl	8004d38 <mem_cmp>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006128:	2100      	movs	r1, #0
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff fdcf 	bl	8005cce <dir_next>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0c4      	beq.n	80060c4 <dir_find+0x1e>
 800613a:	e002      	b.n	8006142 <dir_find+0x9c>
		if (res != FR_OK) break;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <dir_find+0x9c>
			break;
 8006140:	bf00      	nop

	return res;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006154:	2101      	movs	r1, #1
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff ff03 	bl	8005f62 <dir_alloc>
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d12d      	bne.n	80061c2 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	4619      	mov	r1, r3
 8006178:	4610      	mov	r0, r2
 800617a:	f7ff f82d 	bl	80051d8 <move_window>
 800617e:	4603      	mov	r3, r0
 8006180:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d11c      	bne.n	80061c2 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	2220      	movs	r2, #32
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe fdb5 	bl	8004d04 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a0:	6958      	ldr	r0, [r3, #20]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	220b      	movs	r2, #11
 80061ac:	4619      	mov	r1, r3
 80061ae:	f7fe fd8b 	bl	8004cc8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061be:	2201      	movs	r2, #1
 80061c0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e002      	b.n	80061e4 <create_name+0x18>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3301      	adds	r3, #1
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b2f      	cmp	r3, #47	; 0x2f
 80061ea:	d0f8      	beq.n	80061de <create_name+0x12>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b5c      	cmp	r3, #92	; 0x5c
 80061f2:	d0f4      	beq.n	80061de <create_name+0x12>
	sfn = dp->fn;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80061fe:	220b      	movs	r2, #11
 8006200:	2120      	movs	r1, #32
 8006202:	68b8      	ldr	r0, [r7, #8]
 8006204:	f7fe fd7e 	bl	8004d04 <mem_set>
	si = i = b = 0; ni = 8;
 8006208:	2300      	movs	r3, #0
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	2308      	movs	r3, #8
 8006216:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	617a      	str	r2, [r7, #20]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006226:	7fbb      	ldrb	r3, [r7, #30]
 8006228:	2b20      	cmp	r3, #32
 800622a:	d953      	bls.n	80062d4 <create_name+0x108>
 800622c:	7fbb      	ldrb	r3, [r7, #30]
 800622e:	2b2f      	cmp	r3, #47	; 0x2f
 8006230:	d050      	beq.n	80062d4 <create_name+0x108>
 8006232:	7fbb      	ldrb	r3, [r7, #30]
 8006234:	2b5c      	cmp	r3, #92	; 0x5c
 8006236:	d04d      	beq.n	80062d4 <create_name+0x108>
		if (c == '.' || i >= ni) {
 8006238:	7fbb      	ldrb	r3, [r7, #30]
 800623a:	2b2e      	cmp	r3, #46	; 0x2e
 800623c:	d003      	beq.n	8006246 <create_name+0x7a>
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	429a      	cmp	r2, r3
 8006244:	d30f      	bcc.n	8006266 <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d102      	bne.n	8006252 <create_name+0x86>
 800624c:	7fbb      	ldrb	r3, [r7, #30]
 800624e:	2b2e      	cmp	r3, #46	; 0x2e
 8006250:	d001      	beq.n	8006256 <create_name+0x8a>
 8006252:	2306      	movs	r3, #6
 8006254:	e073      	b.n	800633e <create_name+0x172>
			i = 8; ni = 11;
 8006256:	2308      	movs	r3, #8
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	230b      	movs	r3, #11
 800625c:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800625e:	7ffb      	ldrb	r3, [r7, #31]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	e035      	b.n	80062d2 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006266:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800626a:	2b00      	cmp	r3, #0
 800626c:	da08      	bge.n	8006280 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 800626e:	7ffb      	ldrb	r3, [r7, #31]
 8006270:	f043 0303 	orr.w	r3, r3, #3
 8006274:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006276:	7fbb      	ldrb	r3, [r7, #30]
 8006278:	3b80      	subs	r3, #128	; 0x80
 800627a:	4a33      	ldr	r2, [pc, #204]	; (8006348 <create_name+0x17c>)
 800627c:	5cd3      	ldrb	r3, [r2, r3]
 800627e:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8006280:	7fbb      	ldrb	r3, [r7, #30]
 8006282:	4619      	mov	r1, r3
 8006284:	4831      	ldr	r0, [pc, #196]	; (800634c <create_name+0x180>)
 8006286:	f7fe fd7d 	bl	8004d84 <chk_chr>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <create_name+0xc8>
				return FR_INVALID_NAME;
 8006290:	2306      	movs	r3, #6
 8006292:	e054      	b.n	800633e <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006294:	7fbb      	ldrb	r3, [r7, #30]
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	d907      	bls.n	80062aa <create_name+0xde>
 800629a:	7fbb      	ldrb	r3, [r7, #30]
 800629c:	2b5a      	cmp	r3, #90	; 0x5a
 800629e:	d804      	bhi.n	80062aa <create_name+0xde>
				b |= 2;
 80062a0:	7ffb      	ldrb	r3, [r7, #31]
 80062a2:	f043 0302 	orr.w	r3, r3, #2
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e00c      	b.n	80062c4 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80062aa:	7fbb      	ldrb	r3, [r7, #30]
 80062ac:	2b60      	cmp	r3, #96	; 0x60
 80062ae:	d909      	bls.n	80062c4 <create_name+0xf8>
 80062b0:	7fbb      	ldrb	r3, [r7, #30]
 80062b2:	2b7a      	cmp	r3, #122	; 0x7a
 80062b4:	d806      	bhi.n	80062c4 <create_name+0xf8>
					b |= 1; c -= 0x20;
 80062b6:	7ffb      	ldrb	r3, [r7, #31]
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	7fbb      	ldrb	r3, [r7, #30]
 80062c0:	3b20      	subs	r3, #32
 80062c2:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	613a      	str	r2, [r7, #16]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	4413      	add	r3, r2
 80062ce:	7fba      	ldrb	r2, [r7, #30]
 80062d0:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80062d2:	e7a1      	b.n	8006218 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	441a      	add	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80062de:	7fbb      	ldrb	r3, [r7, #30]
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d801      	bhi.n	80062e8 <create_name+0x11c>
 80062e4:	2304      	movs	r3, #4
 80062e6:	e000      	b.n	80062ea <create_name+0x11e>
 80062e8:	2300      	movs	r3, #0
 80062ea:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <create_name+0x12a>
 80062f2:	2306      	movs	r3, #6
 80062f4:	e023      	b.n	800633e <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2be5      	cmp	r3, #229	; 0xe5
 80062fc:	d102      	bne.n	8006304 <create_name+0x138>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2205      	movs	r2, #5
 8006302:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2b08      	cmp	r3, #8
 8006308:	d102      	bne.n	8006310 <create_name+0x144>
 800630a:	7ffb      	ldrb	r3, [r7, #31]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006310:	7ffb      	ldrb	r3, [r7, #31]
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	2b01      	cmp	r3, #1
 8006318:	d103      	bne.n	8006322 <create_name+0x156>
 800631a:	7fbb      	ldrb	r3, [r7, #30]
 800631c:	f043 0310 	orr.w	r3, r3, #16
 8006320:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006322:	7ffb      	ldrb	r3, [r7, #31]
 8006324:	f003 030c 	and.w	r3, r3, #12
 8006328:	2b04      	cmp	r3, #4
 800632a:	d103      	bne.n	8006334 <create_name+0x168>
 800632c:	7fbb      	ldrb	r3, [r7, #30]
 800632e:	f043 0308 	orr.w	r3, r3, #8
 8006332:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	330b      	adds	r3, #11
 8006338:	7fba      	ldrb	r2, [r7, #30]
 800633a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800633c:	2300      	movs	r3, #0
#endif
}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	0800bdfc 	.word	0x0800bdfc
 800634c:	0800bd90 	.word	0x0800bd90

08006350 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b2f      	cmp	r3, #47	; 0x2f
 8006360:	d003      	beq.n	800636a <follow_path+0x1a>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b5c      	cmp	r3, #92	; 0x5c
 8006368:	d102      	bne.n	8006370 <follow_path+0x20>
		path++;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	3301      	adds	r3, #1
 800636e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006376:	461a      	mov	r2, r3
 8006378:	2300      	movs	r3, #0
 800637a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b1f      	cmp	r3, #31
 8006382:	d80c      	bhi.n	800639e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006384:	2100      	movs	r1, #0
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fbd3 	bl	8005b32 <dir_sdi>
 800638c:	4603      	mov	r3, r0
 800638e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006396:	461a      	mov	r2, r3
 8006398:	2300      	movs	r3, #0
 800639a:	6153      	str	r3, [r2, #20]
 800639c:	e049      	b.n	8006432 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800639e:	463b      	mov	r3, r7
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff ff12 	bl	80061cc <create_name>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d13a      	bne.n	8006428 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff fe77 	bl	80060a6 <dir_find>
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	7adb      	ldrb	r3, [r3, #11]
 80063c6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d12b      	bne.n	800642c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d126      	bne.n	800642c <follow_path+0xdc>
 80063de:	2305      	movs	r3, #5
 80063e0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80063e2:	e023      	b.n	800642c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d120      	bne.n	8006430 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	330b      	adds	r3, #11
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8006406:	2305      	movs	r3, #5
 8006408:	73fb      	strb	r3, [r7, #15]
 800640a:	e012      	b.n	8006432 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff fdf1 	bl	8005ffe <ld_clust>
 800641c:	4602      	mov	r2, r0
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006424:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006426:	e7ba      	b.n	800639e <follow_path+0x4e>
			if (res != FR_OK) break;
 8006428:	bf00      	nop
 800642a:	e002      	b.n	8006432 <follow_path+0xe2>
				break;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006430:	bf00      	nop
		}
	}

	return res;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006444:	f04f 33ff 	mov.w	r3, #4294967295
 8006448:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d031      	beq.n	80064b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	e002      	b.n	8006460 <get_ldnumber+0x24>
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	3301      	adds	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b20      	cmp	r3, #32
 8006466:	d903      	bls.n	8006470 <get_ldnumber+0x34>
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b3a      	cmp	r3, #58	; 0x3a
 800646e:	d1f4      	bne.n	800645a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b3a      	cmp	r3, #58	; 0x3a
 8006476:	d11c      	bne.n	80064b2 <get_ldnumber+0x76>
			tp = *path;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	60fa      	str	r2, [r7, #12]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	3b30      	subs	r3, #48	; 0x30
 8006488:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b09      	cmp	r3, #9
 800648e:	d80e      	bhi.n	80064ae <get_ldnumber+0x72>
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	429a      	cmp	r2, r3
 8006496:	d10a      	bne.n	80064ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d107      	bne.n	80064ae <get_ldnumber+0x72>
					vol = (int)i;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	3301      	adds	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	e002      	b.n	80064b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80064b6:	693b      	ldr	r3, [r7, #16]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	371c      	adds	r7, #28
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr
	...

080064c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d4:	2200      	movs	r2, #0
 80064d6:	711a      	strb	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064de:	461a      	mov	r2, r3
 80064e0:	f04f 33ff 	mov.w	r3, #4294967295
 80064e4:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fe fe75 	bl	80051d8 <move_window>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <check_fs+0x34>
		return 3;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e04a      	b.n	800658e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064fe:	3301      	adds	r3, #1
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	b21a      	sxth	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800650c:	b21b      	sxth	r3, r3
 800650e:	4313      	orrs	r3, r2
 8006510:	b21b      	sxth	r3, r3
 8006512:	4a21      	ldr	r2, [pc, #132]	; (8006598 <check_fs+0xd4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d001      	beq.n	800651c <check_fs+0x58>
		return 2;
 8006518:	2302      	movs	r3, #2
 800651a:	e038      	b.n	800658e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3336      	adds	r3, #54	; 0x36
 8006520:	3303      	adds	r3, #3
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	061a      	lsls	r2, r3, #24
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3336      	adds	r3, #54	; 0x36
 800652a:	3302      	adds	r3, #2
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	4313      	orrs	r3, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	3236      	adds	r2, #54	; 0x36
 8006536:	3201      	adds	r2, #1
 8006538:	7812      	ldrb	r2, [r2, #0]
 800653a:	0212      	lsls	r2, r2, #8
 800653c:	4313      	orrs	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006544:	4313      	orrs	r3, r2
 8006546:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800654a:	4a14      	ldr	r2, [pc, #80]	; (800659c <check_fs+0xd8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d101      	bne.n	8006554 <check_fs+0x90>
		return 0;
 8006550:	2300      	movs	r3, #0
 8006552:	e01c      	b.n	800658e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3352      	adds	r3, #82	; 0x52
 8006558:	3303      	adds	r3, #3
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	061a      	lsls	r2, r3, #24
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3352      	adds	r3, #82	; 0x52
 8006562:	3302      	adds	r3, #2
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	4313      	orrs	r3, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	3252      	adds	r2, #82	; 0x52
 800656e:	3201      	adds	r2, #1
 8006570:	7812      	ldrb	r2, [r2, #0]
 8006572:	0212      	lsls	r2, r2, #8
 8006574:	4313      	orrs	r3, r2
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800657c:	4313      	orrs	r3, r2
 800657e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006582:	4a06      	ldr	r2, [pc, #24]	; (800659c <check_fs+0xd8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d101      	bne.n	800658c <check_fs+0xc8>
		return 0;
 8006588:	2300      	movs	r3, #0
 800658a:	e000      	b.n	800658e <check_fs+0xca>

	return 1;
 800658c:	2301      	movs	r3, #1
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	ffffaa55 	.word	0xffffaa55
 800659c:	00544146 	.word	0x00544146

080065a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b096      	sub	sp, #88	; 0x58
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80065b4:	68b8      	ldr	r0, [r7, #8]
 80065b6:	f7ff ff41 	bl	800643c <get_ldnumber>
 80065ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80065bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da01      	bge.n	80065c6 <find_volume+0x26>
 80065c2:	230b      	movs	r3, #11
 80065c4:	e311      	b.n	8006bea <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80065c6:	4a98      	ldr	r2, [pc, #608]	; (8006828 <find_volume+0x288>)
 80065c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <find_volume+0x3a>
 80065d6:	230c      	movs	r3, #12
 80065d8:	e307      	b.n	8006bea <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065de:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01c      	beq.n	8006626 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80065ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe fac9 	bl	8004b8c <disk_status>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10c      	bne.n	8006626 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <find_volume+0x82>
 8006612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800661e:	230a      	movs	r3, #10
 8006620:	e2e3      	b.n	8006bea <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8006622:	2300      	movs	r3, #0
 8006624:	e2e1      	b.n	8006bea <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006632:	b2da      	uxtb	r2, r3
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fabb 	bl	8004bc0 <disk_initialize>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006650:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800665c:	2303      	movs	r3, #3
 800665e:	e2c4      	b.n	8006bea <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <find_volume+0xd6>
 8006666:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8006672:	230a      	movs	r3, #10
 8006674:	e2b9      	b.n	8006bea <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800667c:	7858      	ldrb	r0, [r3, #1]
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006684:	330a      	adds	r3, #10
 8006686:	461a      	mov	r2, r3
 8006688:	2102      	movs	r1, #2
 800668a:	f7fe faff 	bl	8004c8c <disk_ioctl>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10d      	bne.n	80066b0 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669a:	895b      	ldrh	r3, [r3, #10]
 800669c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a0:	d306      	bcc.n	80066b0 <find_volume+0x110>
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a8:	895b      	ldrh	r3, [r3, #10]
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ae:	d901      	bls.n	80066b4 <find_volume+0x114>
 80066b0:	2301      	movs	r3, #1
 80066b2:	e29a      	b.n	8006bea <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80066b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066bc:	f7ff ff02 	bl	80064c4 <check_fs>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80066c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d153      	bne.n	8006776 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80066ce:	2300      	movs	r3, #0
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40
 80066d2:	e028      	b.n	8006726 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80066d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80066de:	4413      	add	r3, r2
 80066e0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	3304      	adds	r3, #4
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d012      	beq.n	8006712 <find_volume+0x172>
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	330b      	adds	r3, #11
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	061a      	lsls	r2, r3, #24
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	330a      	adds	r3, #10
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	041b      	lsls	r3, r3, #16
 80066fc:	4313      	orrs	r3, r2
 80066fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006700:	3209      	adds	r2, #9
 8006702:	7812      	ldrb	r2, [r2, #0]
 8006704:	0212      	lsls	r2, r2, #8
 8006706:	4313      	orrs	r3, r2
 8006708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670a:	3208      	adds	r2, #8
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	431a      	orrs	r2, r3
 8006710:	e000      	b.n	8006714 <find_volume+0x174>
 8006712:	2200      	movs	r2, #0
 8006714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	3358      	adds	r3, #88	; 0x58
 800671a:	443b      	add	r3, r7
 800671c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006722:	3301      	adds	r3, #1
 8006724:	643b      	str	r3, [r7, #64]	; 0x40
 8006726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006728:	2b03      	cmp	r3, #3
 800672a:	d9d3      	bls.n	80066d4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800672c:	2300      	movs	r3, #0
 800672e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <find_volume+0x19c>
 8006736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006738:	3b01      	subs	r3, #1
 800673a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800673c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	3358      	adds	r3, #88	; 0x58
 8006742:	443b      	add	r3, r7
 8006744:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006748:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800674a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <find_volume+0x1bc>
 8006750:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006752:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006754:	f7ff feb6 	bl	80064c4 <check_fs>
 8006758:	4603      	mov	r3, r0
 800675a:	e000      	b.n	800675e <find_volume+0x1be>
 800675c:	2302      	movs	r3, #2
 800675e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006762:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <find_volume+0x1d6>
 800676a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676c:	3301      	adds	r3, #1
 800676e:	643b      	str	r3, [r7, #64]	; 0x40
 8006770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006772:	2b03      	cmp	r3, #3
 8006774:	d9e2      	bls.n	800673c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006776:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800677a:	2b03      	cmp	r3, #3
 800677c:	d101      	bne.n	8006782 <find_volume+0x1e2>
 800677e:	2301      	movs	r3, #1
 8006780:	e233      	b.n	8006bea <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006782:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <find_volume+0x1ee>
 800678a:	230d      	movs	r3, #13
 800678c:	e22d      	b.n	8006bea <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006790:	7b1b      	ldrb	r3, [r3, #12]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	b21a      	sxth	r2, r3
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	7adb      	ldrb	r3, [r3, #11]
 800679a:	b21b      	sxth	r3, r3
 800679c:	4313      	orrs	r3, r2
 800679e:	b21a      	sxth	r2, r3
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a6:	895b      	ldrh	r3, [r3, #10]
 80067a8:	b21b      	sxth	r3, r3
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d001      	beq.n	80067b2 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80067ae:	230d      	movs	r3, #13
 80067b0:	e21b      	b.n	8006bea <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	7ddb      	ldrb	r3, [r3, #23]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	b21a      	sxth	r2, r3
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	7d9b      	ldrb	r3, [r3, #22]
 80067be:	b21b      	sxth	r3, r3
 80067c0:	4313      	orrs	r3, r2
 80067c2:	b21b      	sxth	r3, r3
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80067c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d112      	bne.n	80067f4 <find_volume+0x254>
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80067d4:	061a      	lsls	r2, r3, #24
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80067dc:	041b      	lsls	r3, r3, #16
 80067de:	4313      	orrs	r3, r2
 80067e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067e2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80067e6:	0212      	lsls	r2, r2, #8
 80067e8:	4313      	orrs	r3, r2
 80067ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ec:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80067f0:	4313      	orrs	r3, r2
 80067f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067fa:	461a      	mov	r2, r3
 80067fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fe:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	7c1a      	ldrb	r2, [r3, #16]
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006812:	78db      	ldrb	r3, [r3, #3]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d009      	beq.n	800682c <find_volume+0x28c>
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800681e:	78db      	ldrb	r3, [r3, #3]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d003      	beq.n	800682c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8006824:	230d      	movs	r3, #13
 8006826:	e1e0      	b.n	8006bea <find_volume+0x64a>
 8006828:	200023c0 	.word	0x200023c0
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006832:	78db      	ldrb	r3, [r3, #3]
 8006834:	461a      	mov	r2, r3
 8006836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006838:	fb02 f303 	mul.w	r3, r2, r3
 800683c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	7b5a      	ldrb	r2, [r3, #13]
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006848:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006850:	789b      	ldrb	r3, [r3, #2]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00c      	beq.n	8006870 <find_volume+0x2d0>
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685c:	789b      	ldrb	r3, [r3, #2]
 800685e:	461a      	mov	r2, r3
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006866:	789b      	ldrb	r3, [r3, #2]
 8006868:	3b01      	subs	r3, #1
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8006870:	230d      	movs	r3, #13
 8006872:	e1ba      	b.n	8006bea <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	7c9b      	ldrb	r3, [r3, #18]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	b21a      	sxth	r2, r3
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	7c5b      	ldrb	r3, [r3, #17]
 8006880:	b21b      	sxth	r3, r3
 8006882:	4313      	orrs	r3, r2
 8006884:	b21b      	sxth	r3, r3
 8006886:	b29a      	uxth	r2, r3
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006896:	891b      	ldrh	r3, [r3, #8]
 8006898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800689a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800689e:	8952      	ldrh	r2, [r2, #10]
 80068a0:	0952      	lsrs	r2, r2, #5
 80068a2:	b292      	uxth	r2, r2
 80068a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80068a8:	fb01 f202 	mul.w	r2, r1, r2
 80068ac:	1a9b      	subs	r3, r3, r2
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80068b4:	230d      	movs	r3, #13
 80068b6:	e198      	b.n	8006bea <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	7d1b      	ldrb	r3, [r3, #20]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	b21a      	sxth	r2, r3
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	7cdb      	ldrb	r3, [r3, #19]
 80068c4:	b21b      	sxth	r3, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	b21b      	sxth	r3, r3
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80068ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d112      	bne.n	80068fa <find_volume+0x35a>
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80068da:	061a      	lsls	r2, r3, #24
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	4313      	orrs	r3, r2
 80068e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068e8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80068ec:	0212      	lsls	r2, r2, #8
 80068ee:	4313      	orrs	r3, r2
 80068f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	7bdb      	ldrb	r3, [r3, #15]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	b21a      	sxth	r2, r3
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	7b9b      	ldrb	r3, [r3, #14]
 8006906:	b21b      	sxth	r3, r3
 8006908:	4313      	orrs	r3, r2
 800690a:	b21b      	sxth	r3, r3
 800690c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800690e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <find_volume+0x378>
 8006914:	230d      	movs	r3, #13
 8006916:	e168      	b.n	8006bea <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006918:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800691a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691c:	4413      	add	r3, r2
 800691e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006920:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006924:	8911      	ldrh	r1, [r2, #8]
 8006926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006928:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800692c:	8952      	ldrh	r2, [r2, #10]
 800692e:	0952      	lsrs	r2, r2, #5
 8006930:	b292      	uxth	r2, r2
 8006932:	fbb1 f2f2 	udiv	r2, r1, r2
 8006936:	b292      	uxth	r2, r2
 8006938:	4413      	add	r3, r2
 800693a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800693c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	429a      	cmp	r2, r3
 8006942:	d201      	bcs.n	8006948 <find_volume+0x3a8>
 8006944:	230d      	movs	r3, #13
 8006946:	e150      	b.n	8006bea <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006950:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006954:	7892      	ldrb	r2, [r2, #2]
 8006956:	fbb3 f3f2 	udiv	r3, r3, r2
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <find_volume+0x3c6>
 8006962:	230d      	movs	r3, #13
 8006964:	e141      	b.n	8006bea <find_volume+0x64a>
	fmt = FS_FAT12;
 8006966:	2301      	movs	r3, #1
 8006968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006972:	4293      	cmp	r3, r2
 8006974:	d902      	bls.n	800697c <find_volume+0x3dc>
 8006976:	2302      	movs	r3, #2
 8006978:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006982:	4293      	cmp	r3, r2
 8006984:	d902      	bls.n	800698c <find_volume+0x3ec>
 8006986:	2303      	movs	r3, #3
 8006988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	3302      	adds	r3, #2
 8006990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006996:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699e:	461a      	mov	r2, r3
 80069a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a2:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80069a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a8:	4413      	add	r3, r2
 80069aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069b0:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80069b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	4413      	add	r3, r2
 80069b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069be:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80069c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d124      	bne.n	8006a12 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ce:	891b      	ldrh	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <find_volume+0x438>
 80069d4:	230d      	movs	r3, #13
 80069d6:	e108      	b.n	8006bea <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80069de:	061a      	lsls	r2, r3, #24
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80069e6:	041b      	lsls	r3, r3, #16
 80069e8:	4313      	orrs	r3, r2
 80069ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ec:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80069f0:	0212      	lsls	r2, r2, #8
 80069f2:	4313      	orrs	r3, r2
 80069f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80069fa:	4313      	orrs	r3, r2
 80069fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a02:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a10:	e02b      	b.n	8006a6a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a18:	891b      	ldrh	r3, [r3, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <find_volume+0x482>
 8006a1e:	230d      	movs	r3, #13
 8006a20:	e0e3      	b.n	8006bea <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a28:	6a1a      	ldr	r2, [r3, #32]
 8006a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2c:	4413      	add	r3, r2
 8006a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a34:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d105      	bne.n	8006a4a <find_volume+0x4aa>
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	e00e      	b.n	8006a68 <find_volume+0x4c8>
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	4613      	mov	r3, r2
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	4413      	add	r3, r2
 8006a58:	085a      	lsrs	r2, r3, #1
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006a68:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a78:	895b      	ldrh	r3, [r3, #10]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a7e:	440b      	add	r3, r1
 8006a80:	3b01      	subs	r3, #1
 8006a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a84:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8006a88:	8949      	ldrh	r1, [r1, #10]
 8006a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d201      	bcs.n	8006a96 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8006a92:	230d      	movs	r3, #13
 8006a94:	e0a9      	b.n	8006bea <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa2:	6113      	str	r3, [r2, #16]
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ab2:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aba:	2280      	movs	r2, #128	; 0x80
 8006abc:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006abe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d17a      	bne.n	8006bbc <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	b21a      	sxth	r2, r3
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ad6:	b21b      	sxth	r3, r3
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	b21b      	sxth	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d16d      	bne.n	8006bbc <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ae8:	f7fe fb76 	bl	80051d8 <move_window>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d164      	bne.n	8006bbc <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af8:	2200      	movs	r2, #0
 8006afa:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	b21a      	sxth	r2, r3
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006b0c:	b21b      	sxth	r3, r3
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	b21b      	sxth	r3, r3
 8006b12:	4a38      	ldr	r2, [pc, #224]	; (8006bf4 <find_volume+0x654>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d151      	bne.n	8006bbc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	78db      	ldrb	r3, [r3, #3]
 8006b1c:	061a      	lsls	r2, r3, #24
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	789b      	ldrb	r3, [r3, #2]
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	4313      	orrs	r3, r2
 8006b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b28:	7852      	ldrb	r2, [r2, #1]
 8006b2a:	0212      	lsls	r2, r2, #8
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b30:	7812      	ldrb	r2, [r2, #0]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	4a30      	ldr	r2, [pc, #192]	; (8006bf8 <find_volume+0x658>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d140      	bne.n	8006bbc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006b40:	061a      	lsls	r2, r3, #24
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006b48:	041b      	lsls	r3, r3, #16
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b4e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006b52:	0212      	lsls	r2, r2, #8
 8006b54:	4313      	orrs	r3, r2
 8006b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b58:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	4a27      	ldr	r2, [pc, #156]	; (8006bfc <find_volume+0x65c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d12b      	bne.n	8006bbc <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006b6a:	061a      	lsls	r2, r3, #24
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006b72:	041b      	lsls	r3, r3, #16
 8006b74:	4313      	orrs	r3, r2
 8006b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b78:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006b7c:	0212      	lsls	r2, r2, #8
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b82:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006b86:	4313      	orrs	r3, r2
 8006b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b8e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006b96:	061a      	lsls	r2, r3, #24
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006b9e:	041b      	lsls	r3, r3, #16
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ba4:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006ba8:	0212      	lsls	r2, r2, #8
 8006baa:	4313      	orrs	r3, r2
 8006bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bae:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bba:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bc8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006bca:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <find_volume+0x660>)
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <find_volume+0x660>)
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <find_volume+0x660>)
 8006bd8:	881a      	ldrh	r2, [r3, #0]
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006be2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006be4:	f7fe fa7c 	bl	80050e0 <clear_lock>
#endif

	return FR_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3758      	adds	r7, #88	; 0x58
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	ffffaa55 	.word	0xffffaa55
 8006bf8:	41615252 	.word	0x41615252
 8006bfc:	61417272 	.word	0x61417272
 8006c00:	200023c4 	.word	0x200023c4

08006c04 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d02a      	beq.n	8006c6c <validate+0x68>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d024      	beq.n	8006c6c <validate+0x68>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01b      	beq.n	8006c6c <validate+0x68>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c40:	88da      	ldrh	r2, [r3, #6]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c48:	889b      	ldrh	r3, [r3, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d10e      	bne.n	8006c6c <validate+0x68>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fd ff95 	bl	8004b8c <disk_status>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8006c6c:	2309      	movs	r3, #9
 8006c6e:	e000      	b.n	8006c72 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006c8e:	f107 0310 	add.w	r3, r7, #16
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff fbd2 	bl	800643c <get_ldnumber>
 8006c98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	da01      	bge.n	8006ca4 <f_mount+0x28>
 8006ca0:	230b      	movs	r3, #11
 8006ca2:	e02f      	b.n	8006d04 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ca4:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <f_mount+0x90>)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d007      	beq.n	8006cc4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006cb4:	69b8      	ldr	r0, [r7, #24]
 8006cb6:	f7fe fa13 	bl	80050e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	490d      	ldr	r1, [pc, #52]	; (8006d0c <f_mount+0x90>)
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <f_mount+0x6e>
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d001      	beq.n	8006cee <f_mount+0x72>
 8006cea:	2300      	movs	r3, #0
 8006cec:	e00a      	b.n	8006d04 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006cee:	f107 0108 	add.w	r1, r7, #8
 8006cf2:	f107 030c 	add.w	r3, r7, #12
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fc51 	bl	80065a0 <find_volume>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3720      	adds	r7, #32
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	200023c0 	.word	0x200023c0

08006d10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d1e:	f843 0c44 	str.w	r0, [r3, #-68]
 8006d22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d26:	f843 1c48 	str.w	r1, [r3, #-72]
 8006d2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d2e:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006d32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <f_open+0x32>
 8006d3e:	2309      	movs	r3, #9
 8006d40:	e2e6      	b.n	8007310 <f_open+0x600>
	fp->fs = 0;			/* Clear file object */
 8006d42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2300      	movs	r3, #0
 8006d52:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d5e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006d6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d6e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	f107 0110 	add.w	r1, r7, #16
 8006d7c:	3908      	subs	r1, #8
 8006d7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d82:	3b10      	subs	r3, #16
 8006d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff fc09 	bl	80065a0 <find_volume>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d94:	f102 020f 	add.w	r2, r2, #15
 8006d98:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006d9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d9e:	f103 030f 	add.w	r3, r3, #15
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f040 82ae 	bne.w	8007306 <f_open+0x5f6>
		INIT_BUF(dj);
 8006daa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006dae:	461a      	mov	r2, r3
 8006db0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006db4:	3b1c      	subs	r3, #28
 8006db6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8006dba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006dbe:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8006dc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dc6:	3b10      	subs	r3, #16
 8006dc8:	4611      	mov	r1, r2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff fac0 	bl	8006350 <follow_path>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006dd6:	f102 020f 	add.w	r2, r2, #15
 8006dda:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8006ddc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006de0:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8006de4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006de8:	f102 0208 	add.w	r2, r2, #8
 8006dec:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006dee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006df2:	f103 030f 	add.w	r3, r3, #15
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d126      	bne.n	8006e4a <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 8006dfc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e00:	f103 0308 	add.w	r3, r3, #8
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <f_open+0x108>
				res = FR_INVALID_NAME;
 8006e0a:	2306      	movs	r3, #6
 8006e0c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e10:	f102 020f 	add.w	r2, r2, #15
 8006e14:	7013      	strb	r3, [r2, #0]
 8006e16:	e018      	b.n	8006e4a <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e1c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006e20:	f023 0301 	bic.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf14      	ite	ne
 8006e28:	2301      	movne	r3, #1
 8006e2a:	2300      	moveq	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e34:	3b10      	subs	r3, #16
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fd ffbd 	bl	8004db8 <chk_lock>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e44:	f102 020f 	add.w	r2, r2, #15
 8006e48:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006e4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e4e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006e52:	f003 031c 	and.w	r3, r3, #28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8134 	beq.w	80070c4 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 8006e5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e60:	f103 030f 	add.w	r3, r3, #15
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d02e      	beq.n	8006ec8 <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006e6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e6e:	f103 030f 	add.w	r3, r3, #15
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d112      	bne.n	8006e9e <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006e78:	f7fe f80e 	bl	8004e98 <enq_lock>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <f_open+0x182>
 8006e82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e86:	3b10      	subs	r3, #16
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff f95f 	bl	800614c <dir_register>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	e000      	b.n	8006e94 <f_open+0x184>
 8006e92:	2312      	movs	r3, #18
 8006e94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006e98:	f102 020f 	add.w	r2, r2, #15
 8006e9c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006e9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ea8:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006eac:	f043 0308 	orr.w	r3, r3, #8
 8006eb0:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8006eb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006eb8:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8006ebc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ec0:	f102 0208 	add.w	r2, r2, #8
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	e01f      	b.n	8006f08 <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006ec8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ecc:	f103 0308 	add.w	r3, r3, #8
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330b      	adds	r3, #11
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	f003 0311 	and.w	r3, r3, #17
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d006      	beq.n	8006eec <f_open+0x1dc>
					res = FR_DENIED;
 8006ede:	2307      	movs	r3, #7
 8006ee0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ee4:	f102 020f 	add.w	r2, r2, #15
 8006ee8:	7013      	strb	r3, [r2, #0]
 8006eea:	e00d      	b.n	8006f08 <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006eec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ef0:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <f_open+0x1f8>
						res = FR_EXIST;
 8006efc:	2308      	movs	r3, #8
 8006efe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f02:	f102 020f 	add.w	r2, r2, #15
 8006f06:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006f08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f0c:	f103 030f 	add.w	r3, r3, #15
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f040 8108 	bne.w	8007128 <f_open+0x418>
 8006f18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f1c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80ff 	beq.w	8007128 <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 8006f2a:	f7fd fdcd 	bl	8004ac8 <get_fattime>
 8006f2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f32:	f103 0304 	add.w	r3, r3, #4
 8006f36:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006f38:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f3c:	f103 0308 	add.w	r3, r3, #8
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330e      	adds	r3, #14
 8006f44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f48:	f102 0204 	add.w	r2, r2, #4
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f56:	f103 0304 	add.w	r3, r3, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	0a1b      	lsrs	r3, r3, #8
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f66:	f103 0308 	add.w	r3, r3, #8
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	330f      	adds	r3, #15
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f76:	f103 0304 	add.w	r3, r3, #4
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	0c1a      	lsrs	r2, r3, #16
 8006f7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f82:	f103 0308 	add.w	r3, r3, #8
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3310      	adds	r3, #16
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f92:	f103 0304 	add.w	r3, r3, #4
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	0e1a      	lsrs	r2, r3, #24
 8006f9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f9e:	f103 0308 	add.w	r3, r3, #8
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3311      	adds	r3, #17
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006faa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fae:	f103 0308 	add.w	r3, r3, #8
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330b      	adds	r3, #11
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006fba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fbe:	f103 0308 	add.w	r3, r3, #8
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	331c      	adds	r3, #28
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fce:	f103 0308 	add.w	r3, r3, #8
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	331d      	adds	r3, #29
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fde:	f103 0308 	add.w	r3, r3, #8
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	331e      	adds	r3, #30
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006fee:	f103 0308 	add.w	r3, r3, #8
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	331f      	adds	r3, #31
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006ffa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ffe:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007002:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007006:	f102 0208 	add.w	r2, r2, #8
 800700a:	6811      	ldr	r1, [r2, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe fff6 	bl	8005ffe <ld_clust>
 8007012:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007016:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007018:	2100      	movs	r1, #0
 800701a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800701e:	f103 0308 	add.w	r3, r3, #8
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	f7ff f819 	bl	800605a <st_clust>
				dj.fs->wflag = 1;
 8007028:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800702c:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007034:	2201      	movs	r2, #1
 8007036:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8007038:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d072      	beq.n	8007128 <f_open+0x418>
					dw = dj.fs->winsect;
 8007042:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007046:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800704a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007054:	f102 0204 	add.w	r2, r2, #4
 8007058:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800705a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800705e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007062:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007066:	6811      	ldr	r1, [r2, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fc19 	bl	80058a0 <remove_chain>
 800706e:	4603      	mov	r3, r0
 8007070:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007074:	f102 020f 	add.w	r2, r2, #15
 8007078:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800707a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800707e:	f103 030f 	add.w	r3, r3, #15
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d14f      	bne.n	8007128 <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007088:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800708c:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 8007090:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3b01      	subs	r3, #1
 8007098:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800709c:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800709e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070a2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80070a6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070aa:	f102 0204 	add.w	r2, r2, #4
 80070ae:	6811      	ldr	r1, [r2, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe f891 	bl	80051d8 <move_window>
 80070b6:	4603      	mov	r3, r0
 80070b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070bc:	f102 020f 	add.w	r2, r2, #15
 80070c0:	7013      	strb	r3, [r2, #0]
 80070c2:	e031      	b.n	8007128 <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80070c4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070c8:	f103 030f 	add.w	r3, r3, #15
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d12a      	bne.n	8007128 <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80070d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070d6:	f103 0308 	add.w	r3, r3, #8
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330b      	adds	r3, #11
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f003 0310 	and.w	r3, r3, #16
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d006      	beq.n	80070f6 <f_open+0x3e6>
					res = FR_NO_FILE;
 80070e8:	2304      	movs	r3, #4
 80070ea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070ee:	f102 020f 	add.w	r2, r2, #15
 80070f2:	7013      	strb	r3, [r2, #0]
 80070f4:	e018      	b.n	8007128 <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80070f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070fa:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d010      	beq.n	8007128 <f_open+0x418>
 8007106:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800710a:	f103 0308 	add.w	r3, r3, #8
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	330b      	adds	r3, #11
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <f_open+0x418>
						res = FR_DENIED;
 800711c:	2307      	movs	r3, #7
 800711e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007122:	f102 020f 	add.w	r2, r2, #15
 8007126:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007128:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800712c:	f103 030f 	add.w	r3, r3, #15
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d157      	bne.n	80071e6 <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007136:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800713a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <f_open+0x44c>
				mode |= FA__WRITTEN;
 8007146:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800714a:	461a      	mov	r2, r3
 800714c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007150:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007154:	f043 0320 	orr.w	r3, r3, #32
 8007158:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800715c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007160:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800716e:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8007172:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007176:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8007178:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800717c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007184:	461a      	mov	r2, r3
 8007186:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800718a:	f103 0308 	add.w	r3, r3, #8
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007192:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007196:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800719a:	f023 0301 	bic.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bf14      	ite	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	2300      	moveq	r3, #0
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071ae:	3b10      	subs	r3, #16
 80071b0:	4611      	mov	r1, r2
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fd fe94 	bl	8004ee0 <inc_lock>
 80071b8:	4602      	mov	r2, r0
 80071ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80071c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 80071c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071cc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80071d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d105      	bne.n	80071e6 <f_open+0x4d6>
 80071da:	2302      	movs	r3, #2
 80071dc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80071e0:	f102 020f 	add.w	r2, r2, #15
 80071e4:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80071e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071ea:	f103 030f 	add.w	r3, r3, #15
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f040 8088 	bne.w	8007306 <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 80071f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80071fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007202:	461a      	mov	r2, r3
 8007204:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007208:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800720c:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800720e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007212:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721a:	2200      	movs	r2, #0
 800721c:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800721e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007222:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8007226:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800722a:	f102 0208 	add.w	r2, r2, #8
 800722e:	6811      	ldr	r1, [r2, #0]
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fee4 	bl	8005ffe <ld_clust>
 8007236:	4602      	mov	r2, r0
 8007238:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800723c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007244:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007246:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800724a:	f103 0308 	add.w	r3, r3, #8
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	331f      	adds	r3, #31
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	061a      	lsls	r2, r3, #24
 8007256:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800725a:	f103 0308 	add.w	r3, r3, #8
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	331e      	adds	r3, #30
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	041b      	lsls	r3, r3, #16
 8007266:	4313      	orrs	r3, r2
 8007268:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800726c:	f102 0208 	add.w	r2, r2, #8
 8007270:	6812      	ldr	r2, [r2, #0]
 8007272:	321d      	adds	r2, #29
 8007274:	7812      	ldrb	r2, [r2, #0]
 8007276:	0212      	lsls	r2, r2, #8
 8007278:	4313      	orrs	r3, r2
 800727a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800727e:	f102 0208 	add.w	r2, r2, #8
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	321c      	adds	r2, #28
 8007286:	7812      	ldrb	r2, [r2, #0]
 8007288:	4313      	orrs	r3, r2
 800728a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800728e:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8007292:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007296:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8007298:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800729c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80072a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a4:	461a      	mov	r2, r3
 80072a6:	2300      	movs	r3, #0
 80072a8:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80072aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80072b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b6:	461a      	mov	r2, r3
 80072b8:	2300      	movs	r3, #0
 80072ba:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80072bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072c0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80072c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c8:	461a      	mov	r2, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80072ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072d2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80072d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80072da:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80072de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072e2:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 80072e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072e8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80072ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f6:	88da      	ldrh	r2, [r3, #6]
 80072f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072fc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007304:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007306:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800730a:	f103 030f 	add.w	r3, r3, #15
 800730e:	781b      	ldrb	r3, [r3, #0]
}
 8007310:	4618      	mov	r0, r3
 8007312:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08a      	sub	sp, #40	; 0x28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7ff fc65 	bl	8006c04 <validate>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800733e:	7dfb      	ldrb	r3, [r7, #23]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <f_write+0x2c>
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	e21e      	b.n	8007786 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734e:	79db      	ldrb	r3, [r3, #7]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d004      	beq.n	800735e <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735a:	79db      	ldrb	r3, [r3, #7]
 800735c:	e213      	b.n	8007786 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007364:	799b      	ldrb	r3, [r3, #6]
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800736e:	2307      	movs	r3, #7
 8007370:	e209      	b.n	8007786 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	441a      	add	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	429a      	cmp	r2, r3
 8007388:	f080 81d9 	bcs.w	800773e <f_write+0x422>
 800738c:	2300      	movs	r3, #0
 800738e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007390:	e1d5      	b.n	800773e <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073a6:	8952      	ldrh	r2, [r2, #10]
 80073a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80073ac:	fb01 f202 	mul.w	r2, r1, r2
 80073b0:	1a9b      	subs	r3, r3, r2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f040 8169 	bne.w	800768a <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073cc:	8952      	ldrh	r2, [r2, #10]
 80073ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e0:	789b      	ldrb	r3, [r3, #2]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	4013      	ands	r3, r2
 80073e8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80073ea:	7dbb      	ldrb	r3, [r7, #22]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d15f      	bne.n	80074b0 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d111      	bne.n	8007420 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	d126      	bne.n	800745a <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe faa3 	bl	8005962 <create_chain>
 800741c:	6278      	str	r0, [r7, #36]	; 0x24
 800741e:	e01c      	b.n	800745a <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	4619      	mov	r1, r3
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7fe fb3b 	bl	8005ab2 <clmt_clust>
 800743c:	6278      	str	r0, [r7, #36]	; 0x24
 800743e:	e00c      	b.n	800745a <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f7fe fa85 	bl	8005962 <create_chain>
 8007458:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8173 	beq.w	8007748 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	2b01      	cmp	r3, #1
 8007466:	d106      	bne.n	8007476 <f_write+0x15a>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746e:	2202      	movs	r2, #2
 8007470:	71da      	strb	r2, [r3, #7]
 8007472:	2302      	movs	r3, #2
 8007474:	e187      	b.n	8007786 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d106      	bne.n	800748c <f_write+0x170>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007484:	2201      	movs	r2, #1
 8007486:	71da      	strb	r2, [r3, #7]
 8007488:	2301      	movs	r3, #1
 800748a:	e17c      	b.n	8007786 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007492:	461a      	mov	r2, r3
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <f_write+0x194>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074aa:	461a      	mov	r2, r3
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b6:	799b      	ldrb	r3, [r3, #6]
 80074b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d023      	beq.n	8007508 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074cc:	7858      	ldrb	r0, [r3, #1]
 80074ce:	68f9      	ldr	r1, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d6:	699a      	ldr	r2, [r3, #24]
 80074d8:	2301      	movs	r3, #1
 80074da:	f7fd fbb7 	bl	8004c4c <disk_write>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ea:	2201      	movs	r2, #1
 80074ec:	71da      	strb	r2, [r3, #7]
 80074ee:	2301      	movs	r3, #1
 80074f0:	e149      	b.n	8007786 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f8:	799b      	ldrb	r3, [r3, #6]
 80074fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007506:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f7fd ff4d 	bl	80053ba <clust2sect>
 8007520:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d106      	bne.n	8007536 <f_write+0x21a>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752e:	2202      	movs	r2, #2
 8007530:	71da      	strb	r2, [r3, #7]
 8007532:	2302      	movs	r3, #2
 8007534:	e127      	b.n	8007786 <f_write+0x46a>
			sect += csect;
 8007536:	7dbb      	ldrb	r3, [r7, #22]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4413      	add	r3, r2
 800753c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800754a:	895b      	ldrh	r3, [r3, #10]
 800754c:	461a      	mov	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	fbb3 f3f2 	udiv	r3, r3, r2
 8007554:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d069      	beq.n	8007630 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800755c:	7dba      	ldrb	r2, [r7, #22]
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800756e:	7892      	ldrb	r2, [r2, #2]
 8007570:	4293      	cmp	r3, r2
 8007572:	d90a      	bls.n	800758a <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007580:	789b      	ldrb	r3, [r3, #2]
 8007582:	461a      	mov	r2, r3
 8007584:	7dbb      	ldrb	r3, [r7, #22]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007596:	7858      	ldrb	r0, [r3, #1]
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	69b9      	ldr	r1, [r7, #24]
 800759e:	f7fd fb55 	bl	8004c4c <disk_write>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d006      	beq.n	80075b6 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ae:	2201      	movs	r2, #1
 80075b0:	71da      	strb	r2, [r3, #7]
 80075b2:	2301      	movs	r3, #1
 80075b4:	e0e7      	b.n	8007786 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d926      	bls.n	8007616 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075e2:	8952      	ldrh	r2, [r2, #10]
 80075e4:	fb02 f303 	mul.w	r3, r2, r3
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	18d1      	adds	r1, r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f8:	895b      	ldrh	r3, [r3, #10]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7fd fb64 	bl	8004cc8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007606:	799b      	ldrb	r3, [r3, #6]
 8007608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760c:	b2da      	uxtb	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007614:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007622:	895b      	ldrh	r3, [r3, #10]
 8007624:	461a      	mov	r2, r3
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	fb02 f303 	mul.w	r3, r2, r3
 800762c:	623b      	str	r3, [r7, #32]
				continue;
 800762e:	e06e      	b.n	800770e <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	429a      	cmp	r2, r3
 800763c:	d01f      	beq.n	800767e <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007644:	689a      	ldr	r2, [r3, #8]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	429a      	cmp	r2, r3
 8007650:	d215      	bcs.n	800767e <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800765e:	7858      	ldrb	r0, [r3, #1]
 8007660:	68f9      	ldr	r1, [r7, #12]
 8007662:	2301      	movs	r3, #1
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	f7fd fad1 	bl	8004c0c <disk_read>
 800766a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800766c:	2b00      	cmp	r3, #0
 800766e:	d006      	beq.n	800767e <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007676:	2201      	movs	r2, #1
 8007678:	71da      	strb	r2, [r3, #7]
 800767a:	2301      	movs	r3, #1
 800767c:	e083      	b.n	8007786 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007684:	461a      	mov	r2, r3
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007696:	895b      	ldrh	r3, [r3, #10]
 8007698:	4618      	mov	r0, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076ae:	8952      	ldrh	r2, [r2, #10]
 80076b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80076b4:	fb01 f202 	mul.w	r2, r1, r2
 80076b8:	1a9b      	subs	r3, r3, r2
 80076ba:	1ac3      	subs	r3, r0, r3
 80076bc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80076be:	6a3a      	ldr	r2, [r7, #32]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d901      	bls.n	80076ca <f_write+0x3ae>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076de:	8952      	ldrh	r2, [r2, #10]
 80076e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80076e4:	fb01 f202 	mul.w	r2, r1, r2
 80076e8:	1a9b      	subs	r3, r3, r2
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	6a3a      	ldr	r2, [r7, #32]
 80076f0:	69b9      	ldr	r1, [r7, #24]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fd fae8 	bl	8004cc8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fe:	799b      	ldrb	r3, [r3, #6]
 8007700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007704:	b2da      	uxtb	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770c:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	4413      	add	r3, r2
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	4413      	add	r3, r2
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007728:	6093      	str	r3, [r2, #8]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	441a      	add	r2, r3
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f47f ae26 	bne.w	8007392 <f_write+0x76>
 8007746:	e000      	b.n	800774a <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007748:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	429a      	cmp	r2, r3
 800775c:	d907      	bls.n	800776e <f_write+0x452>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800776c:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007774:	799b      	ldrb	r3, [r3, #6]
 8007776:	f043 0320 	orr.w	r3, r3, #32
 800777a:	b2da      	uxtb	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007782:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3728      	adds	r7, #40	; 0x28
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b086      	sub	sp, #24
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff fa34 	bl	8006c04 <validate>
 800779c:	4603      	mov	r3, r0
 800779e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f040 80bc 	bne.w	8007920 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ae:	799b      	ldrb	r3, [r3, #6]
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80b3 	beq.w	8007920 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c0:	799b      	ldrb	r3, [r3, #6]
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d01e      	beq.n	8007808 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d6:	7858      	ldrb	r0, [r3, #1]
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	2301      	movs	r3, #1
 80077e4:	f7fd fa32 	bl	8004c4c <disk_write>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80077ee:	2301      	movs	r3, #1
 80077f0:	e097      	b.n	8007922 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f8:	799b      	ldrb	r3, [r3, #6]
 80077fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007806:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fd fcdc 	bl	80051d8 <move_window>
 8007820:	4603      	mov	r3, r0
 8007822:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d17a      	bne.n	8007920 <f_sync+0x192>
				dir = fp->dir_ptr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	330b      	adds	r3, #11
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	330b      	adds	r3, #11
 800783e:	f042 0220 	orr.w	r2, r2, #32
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	331c      	adds	r3, #28
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	b29b      	uxth	r3, r3
 8007860:	0a1b      	lsrs	r3, r3, #8
 8007862:	b29a      	uxth	r2, r3
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	331d      	adds	r3, #29
 8007868:	b2d2      	uxtb	r2, r2
 800786a:	701a      	strb	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	0c1a      	lsrs	r2, r3, #16
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	331e      	adds	r3, #30
 800787a:	b2d2      	uxtb	r2, r2
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	0e1a      	lsrs	r2, r3, #24
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	331f      	adds	r3, #31
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	4619      	mov	r1, r3
 800789a:	6938      	ldr	r0, [r7, #16]
 800789c:	f7fe fbdd 	bl	800605a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80078a0:	f7fd f912 	bl	8004ac8 <get_fattime>
 80078a4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	3316      	adds	r3, #22
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	0a1b      	lsrs	r3, r3, #8
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	3317      	adds	r3, #23
 80078bc:	b2d2      	uxtb	r2, r2
 80078be:	701a      	strb	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	0c1a      	lsrs	r2, r3, #16
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	3318      	adds	r3, #24
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	701a      	strb	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	0e1a      	lsrs	r2, r3, #24
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	3319      	adds	r3, #25
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	3312      	adds	r3, #18
 80078dc:	2200      	movs	r2, #0
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	3313      	adds	r3, #19
 80078e4:	2200      	movs	r2, #0
 80078e6:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ee:	799b      	ldrb	r3, [r3, #6]
 80078f0:	f023 0320 	bic.w	r3, r3, #32
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fc:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800790a:	2201      	movs	r2, #1
 800790c:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f7fd fc90 	bl	800523c <sync_fs>
 800791c:	4603      	mov	r3, r0
 800791e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007920:	7dfb      	ldrb	r3, [r7, #23]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff ff2b 	bl	800778e <f_sync>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d119      	bne.n	8007976 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff f95e 	bl	8006c04 <validate>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d111      	bne.n	8007976 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	4618      	mov	r0, r3
 800795c:	f7fd fb7c 	bl	8005058 <dec_lock>
 8007960:	4603      	mov	r3, r0
 8007962:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d105      	bne.n	8007976 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007970:	461a      	mov	r2, r3
 8007972:	2300      	movs	r3, #0
 8007974:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b090      	sub	sp, #64	; 0x40
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff f93a 	bl	8006c04 <validate>
 8007990:	4603      	mov	r3, r0
 8007992:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007996:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <f_lseek+0x24>
 800799e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079a2:	e2da      	b.n	8007f5a <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079aa:	79db      	ldrb	r3, [r3, #7]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b6:	79db      	ldrb	r3, [r3, #7]
 80079b8:	e2cf      	b.n	8007f5a <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8124 	beq.w	8007c10 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d16c      	bne.n	8007aaa <f_lseek+0x12a>
			tbl = fp->cltbl;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	1d1a      	adds	r2, r3, #4
 80079de:	627a      	str	r2, [r7, #36]	; 0x24
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	2302      	movs	r3, #2
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d046      	beq.n	8007a86 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	2300      	movs	r3, #0
 80079fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	3302      	adds	r3, #2
 8007a04:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fd fcf1 	bl	8005402 <get_fat>
 8007a20:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d806      	bhi.n	8007a36 <f_lseek+0xb6>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2e:	2202      	movs	r2, #2
 8007a30:	71da      	strb	r2, [r3, #7]
 8007a32:	2302      	movs	r3, #2
 8007a34:	e291      	b.n	8007f5a <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3c:	d106      	bne.n	8007a4c <f_lseek+0xcc>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a44:	2201      	movs	r2, #1
 8007a46:	71da      	strb	r2, [r3, #7]
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e286      	b.n	8007f5a <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d0d7      	beq.n	8007a06 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d809      	bhi.n	8007a72 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	1d1a      	adds	r2, r3, #4
 8007a62:	627a      	str	r2, [r7, #36]	; 0x24
 8007a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	1d1a      	adds	r2, r3, #4
 8007a6c:	627a      	str	r2, [r7, #36]	; 0x24
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d3b8      	bcc.n	80079f8 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a90:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d803      	bhi.n	8007aa2 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	e259      	b.n	8007f56 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007aa2:	2311      	movs	r3, #17
 8007aa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007aa8:	e255      	b.n	8007f56 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d904      	bls.n	8007ac2 <f_lseek+0x142>
				ofs = fp->fsize;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac8:	461a      	mov	r2, r3
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 8240 	beq.w	8007f56 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7fd ffe8 	bl	8005ab2 <clmt_clust>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aea:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f7fd fc5b 	bl	80053ba <clust2sect>
 8007b04:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <f_lseek+0x19a>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b12:	2202      	movs	r2, #2
 8007b14:	71da      	strb	r2, [r3, #7]
 8007b16:	2302      	movs	r3, #2
 8007b18:	e21f      	b.n	8007f5a <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b24:	6812      	ldr	r2, [r2, #0]
 8007b26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b2a:	8952      	ldrh	r2, [r2, #10]
 8007b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b3c:	7892      	ldrb	r2, [r2, #2]
 8007b3e:	3a01      	subs	r2, #1
 8007b40:	4013      	ands	r3, r2
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	4413      	add	r3, r2
 8007b46:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b5c:	8952      	ldrh	r2, [r2, #10]
 8007b5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b62:	fb01 f202 	mul.w	r2, r1, r2
 8007b66:	1a9b      	subs	r3, r3, r2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 81f4 	beq.w	8007f56 <f_lseek+0x5d6>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	f000 81ec 	beq.w	8007f56 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b84:	799b      	ldrb	r3, [r3, #6]
 8007b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d023      	beq.n	8007bd6 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b9a:	7858      	ldrb	r0, [r3, #1]
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f7fd f850 	bl	8004c4c <disk_write>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d006      	beq.n	8007bc0 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb8:	2201      	movs	r2, #1
 8007bba:	71da      	strb	r2, [r3, #7]
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e1cc      	b.n	8007f5a <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc6:	799b      	ldrb	r3, [r3, #6]
 8007bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd4:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be2:	7858      	ldrb	r0, [r3, #1]
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	2301      	movs	r3, #1
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	f7fd f80f 	bl	8004c0c <disk_read>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d006      	beq.n	8007c02 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	71da      	strb	r2, [r3, #7]
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e1ab      	b.n	8007f5a <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c08:	461a      	mov	r2, r3
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	6193      	str	r3, [r2, #24]
 8007c0e:	e1a2      	b.n	8007f56 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d90c      	bls.n	8007c38 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c24:	799b      	ldrb	r3, [r3, #6]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 8100 	beq.w	8007e5a <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c66:	789b      	ldrb	r3, [r3, #2]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c76:	895b      	ldrh	r3, [r3, #10]
 8007c78:	fb02 f303 	mul.w	r3, r2, r3
 8007c7c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d021      	beq.n	8007cc8 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	1e5a      	subs	r2, r3, #1
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	1e59      	subs	r1, r3, #1
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d315      	bcc.n	8007cc8 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	1e5a      	subs	r2, r3, #1
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	425b      	negs	r3, r3
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cac:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cc6:	e031      	b.n	8007d2c <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d123      	bne.n	8007d20 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fd fe3d 	bl	8005962 <create_chain>
 8007ce8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d106      	bne.n	8007cfe <f_lseek+0x37e>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	71da      	strb	r2, [r3, #7]
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e12d      	b.n	8007f5a <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d106      	bne.n	8007d14 <f_lseek+0x394>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	71da      	strb	r2, [r3, #7]
 8007d10:	2301      	movs	r3, #1
 8007d12:	e122      	b.n	8007f5a <f_lseek+0x5da>
					fp->sclust = clst;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d26:	461a      	mov	r2, r3
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 8093 	beq.w	8007e5a <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8007d34:	e052      	b.n	8007ddc <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d3c:	799b      	ldrb	r3, [r3, #6]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00e      	beq.n	8007d64 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fd fe06 	bl	8005962 <create_chain>
 8007d56:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10b      	bne.n	8007d76 <f_lseek+0x3f6>
							ofs = bcs; break;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	e03f      	b.n	8007de4 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fd fb47 	bl	8005402 <get_fat>
 8007d74:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d106      	bne.n	8007d8c <f_lseek+0x40c>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d84:	2201      	movs	r2, #1
 8007d86:	71da      	strb	r2, [r3, #7]
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e0e6      	b.n	8007f5a <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d909      	bls.n	8007da6 <f_lseek+0x426>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d306      	bcc.n	8007db4 <f_lseek+0x434>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dac:	2202      	movs	r2, #2
 8007dae:	71da      	strb	r2, [r3, #7]
 8007db0:	2302      	movs	r3, #2
 8007db2:	e0d2      	b.n	8007f5a <f_lseek+0x5da>
					fp->clust = clst;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	4413      	add	r3, r2
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007dd2:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d8a8      	bhi.n	8007d36 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	4413      	add	r3, r2
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007df6:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e04:	895b      	ldrh	r3, [r3, #10]
 8007e06:	461a      	mov	r2, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e0e:	fb01 f202 	mul.w	r2, r1, r2
 8007e12:	1a9b      	subs	r3, r3, r2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d020      	beq.n	8007e5a <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fd fac9 	bl	80053ba <clust2sect>
 8007e28:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d106      	bne.n	8007e3e <f_lseek+0x4be>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e36:	2202      	movs	r2, #2
 8007e38:	71da      	strb	r2, [r3, #7]
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	e08d      	b.n	8007f5a <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4a:	895b      	ldrh	r3, [r3, #10]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e56:	4413      	add	r3, r2
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e68:	6812      	ldr	r2, [r2, #0]
 8007e6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e6e:	8952      	ldrh	r2, [r2, #10]
 8007e70:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e74:	fb01 f202 	mul.w	r2, r1, r2
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d04e      	beq.n	8007f1c <f_lseek+0x59c>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d047      	beq.n	8007f1c <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e92:	799b      	ldrb	r3, [r3, #6]
 8007e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d023      	beq.n	8007ee4 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea8:	7858      	ldrb	r0, [r3, #1]
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f7fc fec9 	bl	8004c4c <disk_write>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	71da      	strb	r2, [r3, #7]
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e045      	b.n	8007f5a <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed4:	799b      	ldrb	r3, [r3, #6]
 8007ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee2:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef0:	7858      	ldrb	r0, [r3, #1]
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ef8:	f7fc fe88 	bl	8004c0c <disk_read>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d006      	beq.n	8007f10 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f08:	2201      	movs	r2, #1
 8007f0a:	71da      	strb	r2, [r3, #7]
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e024      	b.n	8007f5a <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f16:	461a      	mov	r2, r3
 8007f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1a:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d912      	bls.n	8007f56 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f3e:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f46:	799b      	ldrb	r3, [r3, #6]
 8007f48:	f043 0320 	orr.w	r3, r3, #32
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f54:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007f56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3740      	adds	r7, #64	; 0x40
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	2b0a      	cmp	r3, #10
 8007f72:	d103      	bne.n	8007f7c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007f74:	210d      	movs	r1, #13
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff fff3 	bl	8007f62 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	db25      	blt.n	8007fd4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	60fa      	str	r2, [r7, #12]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	4413      	add	r3, r2
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b3c      	cmp	r3, #60	; 0x3c
 8007f9a:	dd12      	ble.n	8007fc2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f103 010c 	add.w	r1, r3, #12
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	f107 0308 	add.w	r3, r7, #8
 8007fac:	f7ff f9b6 	bl	800731c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d101      	bne.n	8007fbc <putc_bfd+0x5a>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e001      	b.n	8007fc0 <putc_bfd+0x5e>
 8007fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	1c5a      	adds	r2, r3, #1
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	609a      	str	r2, [r3, #8]
 8007fd2:	e000      	b.n	8007fd6 <putc_bfd+0x74>
	if (i < 0) return;
 8007fd4:	bf00      	nop
}
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007fdc:	b590      	push	{r4, r7, lr}
 8007fde:	b097      	sub	sp, #92	; 0x5c
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	613b      	str	r3, [r7, #16]
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8007ff2:	e009      	b.n	8008008 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	607a      	str	r2, [r7, #4]
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	f107 030c 	add.w	r3, r7, #12
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff ffad 	bl	8007f62 <putc_bfd>
	while (*str)			/* Put the string */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1f1      	bne.n	8007ff4 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	db15      	blt.n	8008042 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	461c      	mov	r4, r3
 800801c:	f107 0208 	add.w	r2, r7, #8
 8008020:	f107 030c 	add.w	r3, r7, #12
 8008024:	f103 010c 	add.w	r1, r3, #12
 8008028:	4613      	mov	r3, r2
 800802a:	4622      	mov	r2, r4
 800802c:	f7ff f976 	bl	800731c <f_write>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d105      	bne.n	8008042 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	4293      	cmp	r3, r2
 800803c:	d101      	bne.n	8008042 <f_puts+0x66>
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	e001      	b.n	8008046 <f_puts+0x6a>
	return EOF;
 8008042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008046:	4618      	mov	r0, r3
 8008048:	375c      	adds	r7, #92	; 0x5c
 800804a:	46bd      	mov	sp, r7
 800804c:	bd90      	pop	{r4, r7, pc}
	...

08008050 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800805e:	2301      	movs	r3, #1
 8008060:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008066:	4b1e      	ldr	r3, [pc, #120]	; (80080e0 <FATFS_LinkDriverEx+0x90>)
 8008068:	7a5b      	ldrb	r3, [r3, #9]
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b01      	cmp	r3, #1
 800806e:	d831      	bhi.n	80080d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008070:	4b1b      	ldr	r3, [pc, #108]	; (80080e0 <FATFS_LinkDriverEx+0x90>)
 8008072:	7a5b      	ldrb	r3, [r3, #9]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <FATFS_LinkDriverEx+0x90>)
 800807a:	2100      	movs	r1, #0
 800807c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800807e:	4b18      	ldr	r3, [pc, #96]	; (80080e0 <FATFS_LinkDriverEx+0x90>)
 8008080:	7a5b      	ldrb	r3, [r3, #9]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <FATFS_LinkDriverEx+0x90>)
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800808e:	4b14      	ldr	r3, [pc, #80]	; (80080e0 <FATFS_LinkDriverEx+0x90>)
 8008090:	7a5b      	ldrb	r3, [r3, #9]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <FATFS_LinkDriverEx+0x90>)
 8008098:	4413      	add	r3, r2
 800809a:	79fa      	ldrb	r2, [r7, #7]
 800809c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800809e:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <FATFS_LinkDriverEx+0x90>)
 80080a0:	7a5b      	ldrb	r3, [r3, #9]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	b2d1      	uxtb	r1, r2
 80080a8:	4a0d      	ldr	r2, [pc, #52]	; (80080e0 <FATFS_LinkDriverEx+0x90>)
 80080aa:	7251      	strb	r1, [r2, #9]
 80080ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80080ae:	7dbb      	ldrb	r3, [r7, #22]
 80080b0:	3330      	adds	r3, #48	; 0x30
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	3301      	adds	r3, #1
 80080bc:	223a      	movs	r2, #58	; 0x3a
 80080be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	3302      	adds	r3, #2
 80080c4:	222f      	movs	r2, #47	; 0x2f
 80080c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	3303      	adds	r3, #3
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	bc80      	pop	{r7}
 80080de:	4770      	bx	lr
 80080e0:	200023e0 	.word	0x200023e0

080080e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80080ee:	2200      	movs	r2, #0
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff ffac 	bl	8008050 <FATFS_LinkDriverEx>
 80080f8:	4603      	mov	r3, r0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <__errno>:
 8008104:	4b01      	ldr	r3, [pc, #4]	; (800810c <__errno+0x8>)
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000024 	.word	0x20000024

08008110 <__libc_init_array>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	2600      	movs	r6, #0
 8008114:	4d0c      	ldr	r5, [pc, #48]	; (8008148 <__libc_init_array+0x38>)
 8008116:	4c0d      	ldr	r4, [pc, #52]	; (800814c <__libc_init_array+0x3c>)
 8008118:	1b64      	subs	r4, r4, r5
 800811a:	10a4      	asrs	r4, r4, #2
 800811c:	42a6      	cmp	r6, r4
 800811e:	d109      	bne.n	8008134 <__libc_init_array+0x24>
 8008120:	f003 fddc 	bl	800bcdc <_init>
 8008124:	2600      	movs	r6, #0
 8008126:	4d0a      	ldr	r5, [pc, #40]	; (8008150 <__libc_init_array+0x40>)
 8008128:	4c0a      	ldr	r4, [pc, #40]	; (8008154 <__libc_init_array+0x44>)
 800812a:	1b64      	subs	r4, r4, r5
 800812c:	10a4      	asrs	r4, r4, #2
 800812e:	42a6      	cmp	r6, r4
 8008130:	d105      	bne.n	800813e <__libc_init_array+0x2e>
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	f855 3b04 	ldr.w	r3, [r5], #4
 8008138:	4798      	blx	r3
 800813a:	3601      	adds	r6, #1
 800813c:	e7ee      	b.n	800811c <__libc_init_array+0xc>
 800813e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008142:	4798      	blx	r3
 8008144:	3601      	adds	r6, #1
 8008146:	e7f2      	b.n	800812e <__libc_init_array+0x1e>
 8008148:	0800c288 	.word	0x0800c288
 800814c:	0800c288 	.word	0x0800c288
 8008150:	0800c288 	.word	0x0800c288
 8008154:	0800c28c 	.word	0x0800c28c

08008158 <memset>:
 8008158:	4603      	mov	r3, r0
 800815a:	4402      	add	r2, r0
 800815c:	4293      	cmp	r3, r2
 800815e:	d100      	bne.n	8008162 <memset+0xa>
 8008160:	4770      	bx	lr
 8008162:	f803 1b01 	strb.w	r1, [r3], #1
 8008166:	e7f9      	b.n	800815c <memset+0x4>

08008168 <__cvt>:
 8008168:	2b00      	cmp	r3, #0
 800816a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800816e:	461f      	mov	r7, r3
 8008170:	bfbb      	ittet	lt
 8008172:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008176:	461f      	movlt	r7, r3
 8008178:	2300      	movge	r3, #0
 800817a:	232d      	movlt	r3, #45	; 0x2d
 800817c:	b088      	sub	sp, #32
 800817e:	4614      	mov	r4, r2
 8008180:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008182:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008184:	7013      	strb	r3, [r2, #0]
 8008186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008188:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800818c:	f023 0820 	bic.w	r8, r3, #32
 8008190:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008194:	d005      	beq.n	80081a2 <__cvt+0x3a>
 8008196:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800819a:	d100      	bne.n	800819e <__cvt+0x36>
 800819c:	3501      	adds	r5, #1
 800819e:	2302      	movs	r3, #2
 80081a0:	e000      	b.n	80081a4 <__cvt+0x3c>
 80081a2:	2303      	movs	r3, #3
 80081a4:	aa07      	add	r2, sp, #28
 80081a6:	9204      	str	r2, [sp, #16]
 80081a8:	aa06      	add	r2, sp, #24
 80081aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80081ae:	e9cd 3500 	strd	r3, r5, [sp]
 80081b2:	4622      	mov	r2, r4
 80081b4:	463b      	mov	r3, r7
 80081b6:	f000 fce3 	bl	8008b80 <_dtoa_r>
 80081ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081be:	4606      	mov	r6, r0
 80081c0:	d102      	bne.n	80081c8 <__cvt+0x60>
 80081c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081c4:	07db      	lsls	r3, r3, #31
 80081c6:	d522      	bpl.n	800820e <__cvt+0xa6>
 80081c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081cc:	eb06 0905 	add.w	r9, r6, r5
 80081d0:	d110      	bne.n	80081f4 <__cvt+0x8c>
 80081d2:	7833      	ldrb	r3, [r6, #0]
 80081d4:	2b30      	cmp	r3, #48	; 0x30
 80081d6:	d10a      	bne.n	80081ee <__cvt+0x86>
 80081d8:	2200      	movs	r2, #0
 80081da:	2300      	movs	r3, #0
 80081dc:	4620      	mov	r0, r4
 80081de:	4639      	mov	r1, r7
 80081e0:	f7f8 fc96 	bl	8000b10 <__aeabi_dcmpeq>
 80081e4:	b918      	cbnz	r0, 80081ee <__cvt+0x86>
 80081e6:	f1c5 0501 	rsb	r5, r5, #1
 80081ea:	f8ca 5000 	str.w	r5, [sl]
 80081ee:	f8da 3000 	ldr.w	r3, [sl]
 80081f2:	4499      	add	r9, r3
 80081f4:	2200      	movs	r2, #0
 80081f6:	2300      	movs	r3, #0
 80081f8:	4620      	mov	r0, r4
 80081fa:	4639      	mov	r1, r7
 80081fc:	f7f8 fc88 	bl	8000b10 <__aeabi_dcmpeq>
 8008200:	b108      	cbz	r0, 8008206 <__cvt+0x9e>
 8008202:	f8cd 901c 	str.w	r9, [sp, #28]
 8008206:	2230      	movs	r2, #48	; 0x30
 8008208:	9b07      	ldr	r3, [sp, #28]
 800820a:	454b      	cmp	r3, r9
 800820c:	d307      	bcc.n	800821e <__cvt+0xb6>
 800820e:	4630      	mov	r0, r6
 8008210:	9b07      	ldr	r3, [sp, #28]
 8008212:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008214:	1b9b      	subs	r3, r3, r6
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	b008      	add	sp, #32
 800821a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800821e:	1c59      	adds	r1, r3, #1
 8008220:	9107      	str	r1, [sp, #28]
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	e7f0      	b.n	8008208 <__cvt+0xa0>

08008226 <__exponent>:
 8008226:	4603      	mov	r3, r0
 8008228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800822a:	2900      	cmp	r1, #0
 800822c:	f803 2b02 	strb.w	r2, [r3], #2
 8008230:	bfb6      	itet	lt
 8008232:	222d      	movlt	r2, #45	; 0x2d
 8008234:	222b      	movge	r2, #43	; 0x2b
 8008236:	4249      	neglt	r1, r1
 8008238:	2909      	cmp	r1, #9
 800823a:	7042      	strb	r2, [r0, #1]
 800823c:	dd2b      	ble.n	8008296 <__exponent+0x70>
 800823e:	f10d 0407 	add.w	r4, sp, #7
 8008242:	46a4      	mov	ip, r4
 8008244:	270a      	movs	r7, #10
 8008246:	fb91 f6f7 	sdiv	r6, r1, r7
 800824a:	460a      	mov	r2, r1
 800824c:	46a6      	mov	lr, r4
 800824e:	fb07 1516 	mls	r5, r7, r6, r1
 8008252:	2a63      	cmp	r2, #99	; 0x63
 8008254:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008258:	4631      	mov	r1, r6
 800825a:	f104 34ff 	add.w	r4, r4, #4294967295
 800825e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008262:	dcf0      	bgt.n	8008246 <__exponent+0x20>
 8008264:	3130      	adds	r1, #48	; 0x30
 8008266:	f1ae 0502 	sub.w	r5, lr, #2
 800826a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800826e:	4629      	mov	r1, r5
 8008270:	1c44      	adds	r4, r0, #1
 8008272:	4561      	cmp	r1, ip
 8008274:	d30a      	bcc.n	800828c <__exponent+0x66>
 8008276:	f10d 0209 	add.w	r2, sp, #9
 800827a:	eba2 020e 	sub.w	r2, r2, lr
 800827e:	4565      	cmp	r5, ip
 8008280:	bf88      	it	hi
 8008282:	2200      	movhi	r2, #0
 8008284:	4413      	add	r3, r2
 8008286:	1a18      	subs	r0, r3, r0
 8008288:	b003      	add	sp, #12
 800828a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800828c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008290:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008294:	e7ed      	b.n	8008272 <__exponent+0x4c>
 8008296:	2330      	movs	r3, #48	; 0x30
 8008298:	3130      	adds	r1, #48	; 0x30
 800829a:	7083      	strb	r3, [r0, #2]
 800829c:	70c1      	strb	r1, [r0, #3]
 800829e:	1d03      	adds	r3, r0, #4
 80082a0:	e7f1      	b.n	8008286 <__exponent+0x60>
	...

080082a4 <_printf_float>:
 80082a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	b091      	sub	sp, #68	; 0x44
 80082aa:	460c      	mov	r4, r1
 80082ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80082b0:	4616      	mov	r6, r2
 80082b2:	461f      	mov	r7, r3
 80082b4:	4605      	mov	r5, r0
 80082b6:	f001 fa51 	bl	800975c <_localeconv_r>
 80082ba:	6803      	ldr	r3, [r0, #0]
 80082bc:	4618      	mov	r0, r3
 80082be:	9309      	str	r3, [sp, #36]	; 0x24
 80082c0:	f7f7 ff46 	bl	8000150 <strlen>
 80082c4:	2300      	movs	r3, #0
 80082c6:	930e      	str	r3, [sp, #56]	; 0x38
 80082c8:	f8d8 3000 	ldr.w	r3, [r8]
 80082cc:	900a      	str	r0, [sp, #40]	; 0x28
 80082ce:	3307      	adds	r3, #7
 80082d0:	f023 0307 	bic.w	r3, r3, #7
 80082d4:	f103 0208 	add.w	r2, r3, #8
 80082d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80082dc:	f8d4 b000 	ldr.w	fp, [r4]
 80082e0:	f8c8 2000 	str.w	r2, [r8]
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80082ec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80082f0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80082f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80082f6:	f04f 32ff 	mov.w	r2, #4294967295
 80082fa:	4640      	mov	r0, r8
 80082fc:	4b9c      	ldr	r3, [pc, #624]	; (8008570 <_printf_float+0x2cc>)
 80082fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008300:	f7f8 fc38 	bl	8000b74 <__aeabi_dcmpun>
 8008304:	bb70      	cbnz	r0, 8008364 <_printf_float+0xc0>
 8008306:	f04f 32ff 	mov.w	r2, #4294967295
 800830a:	4640      	mov	r0, r8
 800830c:	4b98      	ldr	r3, [pc, #608]	; (8008570 <_printf_float+0x2cc>)
 800830e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008310:	f7f8 fc12 	bl	8000b38 <__aeabi_dcmple>
 8008314:	bb30      	cbnz	r0, 8008364 <_printf_float+0xc0>
 8008316:	2200      	movs	r2, #0
 8008318:	2300      	movs	r3, #0
 800831a:	4640      	mov	r0, r8
 800831c:	4651      	mov	r1, sl
 800831e:	f7f8 fc01 	bl	8000b24 <__aeabi_dcmplt>
 8008322:	b110      	cbz	r0, 800832a <_printf_float+0x86>
 8008324:	232d      	movs	r3, #45	; 0x2d
 8008326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800832a:	4b92      	ldr	r3, [pc, #584]	; (8008574 <_printf_float+0x2d0>)
 800832c:	4892      	ldr	r0, [pc, #584]	; (8008578 <_printf_float+0x2d4>)
 800832e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008332:	bf94      	ite	ls
 8008334:	4698      	movls	r8, r3
 8008336:	4680      	movhi	r8, r0
 8008338:	2303      	movs	r3, #3
 800833a:	f04f 0a00 	mov.w	sl, #0
 800833e:	6123      	str	r3, [r4, #16]
 8008340:	f02b 0304 	bic.w	r3, fp, #4
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	4633      	mov	r3, r6
 8008348:	4621      	mov	r1, r4
 800834a:	4628      	mov	r0, r5
 800834c:	9700      	str	r7, [sp, #0]
 800834e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008350:	f000 f9d4 	bl	80086fc <_printf_common>
 8008354:	3001      	adds	r0, #1
 8008356:	f040 8090 	bne.w	800847a <_printf_float+0x1d6>
 800835a:	f04f 30ff 	mov.w	r0, #4294967295
 800835e:	b011      	add	sp, #68	; 0x44
 8008360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008364:	4642      	mov	r2, r8
 8008366:	4653      	mov	r3, sl
 8008368:	4640      	mov	r0, r8
 800836a:	4651      	mov	r1, sl
 800836c:	f7f8 fc02 	bl	8000b74 <__aeabi_dcmpun>
 8008370:	b148      	cbz	r0, 8008386 <_printf_float+0xe2>
 8008372:	f1ba 0f00 	cmp.w	sl, #0
 8008376:	bfb8      	it	lt
 8008378:	232d      	movlt	r3, #45	; 0x2d
 800837a:	4880      	ldr	r0, [pc, #512]	; (800857c <_printf_float+0x2d8>)
 800837c:	bfb8      	it	lt
 800837e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008382:	4b7f      	ldr	r3, [pc, #508]	; (8008580 <_printf_float+0x2dc>)
 8008384:	e7d3      	b.n	800832e <_printf_float+0x8a>
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	d142      	bne.n	8008416 <_printf_float+0x172>
 8008390:	2306      	movs	r3, #6
 8008392:	6063      	str	r3, [r4, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	9206      	str	r2, [sp, #24]
 8008398:	aa0e      	add	r2, sp, #56	; 0x38
 800839a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800839e:	aa0d      	add	r2, sp, #52	; 0x34
 80083a0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80083a4:	9203      	str	r2, [sp, #12]
 80083a6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80083aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	6863      	ldr	r3, [r4, #4]
 80083b2:	4642      	mov	r2, r8
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	4628      	mov	r0, r5
 80083b8:	4653      	mov	r3, sl
 80083ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80083bc:	f7ff fed4 	bl	8008168 <__cvt>
 80083c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083c2:	4680      	mov	r8, r0
 80083c4:	2947      	cmp	r1, #71	; 0x47
 80083c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80083c8:	d108      	bne.n	80083dc <_printf_float+0x138>
 80083ca:	1cc8      	adds	r0, r1, #3
 80083cc:	db02      	blt.n	80083d4 <_printf_float+0x130>
 80083ce:	6863      	ldr	r3, [r4, #4]
 80083d0:	4299      	cmp	r1, r3
 80083d2:	dd40      	ble.n	8008456 <_printf_float+0x1b2>
 80083d4:	f1a9 0902 	sub.w	r9, r9, #2
 80083d8:	fa5f f989 	uxtb.w	r9, r9
 80083dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80083e0:	d81f      	bhi.n	8008422 <_printf_float+0x17e>
 80083e2:	464a      	mov	r2, r9
 80083e4:	3901      	subs	r1, #1
 80083e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80083ea:	910d      	str	r1, [sp, #52]	; 0x34
 80083ec:	f7ff ff1b 	bl	8008226 <__exponent>
 80083f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083f2:	4682      	mov	sl, r0
 80083f4:	1813      	adds	r3, r2, r0
 80083f6:	2a01      	cmp	r2, #1
 80083f8:	6123      	str	r3, [r4, #16]
 80083fa:	dc02      	bgt.n	8008402 <_printf_float+0x15e>
 80083fc:	6822      	ldr	r2, [r4, #0]
 80083fe:	07d2      	lsls	r2, r2, #31
 8008400:	d501      	bpl.n	8008406 <_printf_float+0x162>
 8008402:	3301      	adds	r3, #1
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800840a:	2b00      	cmp	r3, #0
 800840c:	d09b      	beq.n	8008346 <_printf_float+0xa2>
 800840e:	232d      	movs	r3, #45	; 0x2d
 8008410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008414:	e797      	b.n	8008346 <_printf_float+0xa2>
 8008416:	2947      	cmp	r1, #71	; 0x47
 8008418:	d1bc      	bne.n	8008394 <_printf_float+0xf0>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1ba      	bne.n	8008394 <_printf_float+0xf0>
 800841e:	2301      	movs	r3, #1
 8008420:	e7b7      	b.n	8008392 <_printf_float+0xee>
 8008422:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008426:	d118      	bne.n	800845a <_printf_float+0x1b6>
 8008428:	2900      	cmp	r1, #0
 800842a:	6863      	ldr	r3, [r4, #4]
 800842c:	dd0b      	ble.n	8008446 <_printf_float+0x1a2>
 800842e:	6121      	str	r1, [r4, #16]
 8008430:	b913      	cbnz	r3, 8008438 <_printf_float+0x194>
 8008432:	6822      	ldr	r2, [r4, #0]
 8008434:	07d0      	lsls	r0, r2, #31
 8008436:	d502      	bpl.n	800843e <_printf_float+0x19a>
 8008438:	3301      	adds	r3, #1
 800843a:	440b      	add	r3, r1
 800843c:	6123      	str	r3, [r4, #16]
 800843e:	f04f 0a00 	mov.w	sl, #0
 8008442:	65a1      	str	r1, [r4, #88]	; 0x58
 8008444:	e7df      	b.n	8008406 <_printf_float+0x162>
 8008446:	b913      	cbnz	r3, 800844e <_printf_float+0x1aa>
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	07d2      	lsls	r2, r2, #31
 800844c:	d501      	bpl.n	8008452 <_printf_float+0x1ae>
 800844e:	3302      	adds	r3, #2
 8008450:	e7f4      	b.n	800843c <_printf_float+0x198>
 8008452:	2301      	movs	r3, #1
 8008454:	e7f2      	b.n	800843c <_printf_float+0x198>
 8008456:	f04f 0967 	mov.w	r9, #103	; 0x67
 800845a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800845c:	4299      	cmp	r1, r3
 800845e:	db05      	blt.n	800846c <_printf_float+0x1c8>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	6121      	str	r1, [r4, #16]
 8008464:	07d8      	lsls	r0, r3, #31
 8008466:	d5ea      	bpl.n	800843e <_printf_float+0x19a>
 8008468:	1c4b      	adds	r3, r1, #1
 800846a:	e7e7      	b.n	800843c <_printf_float+0x198>
 800846c:	2900      	cmp	r1, #0
 800846e:	bfcc      	ite	gt
 8008470:	2201      	movgt	r2, #1
 8008472:	f1c1 0202 	rsble	r2, r1, #2
 8008476:	4413      	add	r3, r2
 8008478:	e7e0      	b.n	800843c <_printf_float+0x198>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	055a      	lsls	r2, r3, #21
 800847e:	d407      	bmi.n	8008490 <_printf_float+0x1ec>
 8008480:	6923      	ldr	r3, [r4, #16]
 8008482:	4642      	mov	r2, r8
 8008484:	4631      	mov	r1, r6
 8008486:	4628      	mov	r0, r5
 8008488:	47b8      	blx	r7
 800848a:	3001      	adds	r0, #1
 800848c:	d12b      	bne.n	80084e6 <_printf_float+0x242>
 800848e:	e764      	b.n	800835a <_printf_float+0xb6>
 8008490:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008494:	f240 80dd 	bls.w	8008652 <_printf_float+0x3ae>
 8008498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800849c:	2200      	movs	r2, #0
 800849e:	2300      	movs	r3, #0
 80084a0:	f7f8 fb36 	bl	8000b10 <__aeabi_dcmpeq>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d033      	beq.n	8008510 <_printf_float+0x26c>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4631      	mov	r1, r6
 80084ac:	4628      	mov	r0, r5
 80084ae:	4a35      	ldr	r2, [pc, #212]	; (8008584 <_printf_float+0x2e0>)
 80084b0:	47b8      	blx	r7
 80084b2:	3001      	adds	r0, #1
 80084b4:	f43f af51 	beq.w	800835a <_printf_float+0xb6>
 80084b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084bc:	429a      	cmp	r2, r3
 80084be:	db02      	blt.n	80084c6 <_printf_float+0x222>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	07d8      	lsls	r0, r3, #31
 80084c4:	d50f      	bpl.n	80084e6 <_printf_float+0x242>
 80084c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	f43f af42 	beq.w	800835a <_printf_float+0xb6>
 80084d6:	f04f 0800 	mov.w	r8, #0
 80084da:	f104 091a 	add.w	r9, r4, #26
 80084de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084e0:	3b01      	subs	r3, #1
 80084e2:	4543      	cmp	r3, r8
 80084e4:	dc09      	bgt.n	80084fa <_printf_float+0x256>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	079b      	lsls	r3, r3, #30
 80084ea:	f100 8102 	bmi.w	80086f2 <_printf_float+0x44e>
 80084ee:	68e0      	ldr	r0, [r4, #12]
 80084f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084f2:	4298      	cmp	r0, r3
 80084f4:	bfb8      	it	lt
 80084f6:	4618      	movlt	r0, r3
 80084f8:	e731      	b.n	800835e <_printf_float+0xba>
 80084fa:	2301      	movs	r3, #1
 80084fc:	464a      	mov	r2, r9
 80084fe:	4631      	mov	r1, r6
 8008500:	4628      	mov	r0, r5
 8008502:	47b8      	blx	r7
 8008504:	3001      	adds	r0, #1
 8008506:	f43f af28 	beq.w	800835a <_printf_float+0xb6>
 800850a:	f108 0801 	add.w	r8, r8, #1
 800850e:	e7e6      	b.n	80084de <_printf_float+0x23a>
 8008510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008512:	2b00      	cmp	r3, #0
 8008514:	dc38      	bgt.n	8008588 <_printf_float+0x2e4>
 8008516:	2301      	movs	r3, #1
 8008518:	4631      	mov	r1, r6
 800851a:	4628      	mov	r0, r5
 800851c:	4a19      	ldr	r2, [pc, #100]	; (8008584 <_printf_float+0x2e0>)
 800851e:	47b8      	blx	r7
 8008520:	3001      	adds	r0, #1
 8008522:	f43f af1a 	beq.w	800835a <_printf_float+0xb6>
 8008526:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800852a:	4313      	orrs	r3, r2
 800852c:	d102      	bne.n	8008534 <_printf_float+0x290>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	07d9      	lsls	r1, r3, #31
 8008532:	d5d8      	bpl.n	80084e6 <_printf_float+0x242>
 8008534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008538:	4631      	mov	r1, r6
 800853a:	4628      	mov	r0, r5
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	f43f af0b 	beq.w	800835a <_printf_float+0xb6>
 8008544:	f04f 0900 	mov.w	r9, #0
 8008548:	f104 0a1a 	add.w	sl, r4, #26
 800854c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800854e:	425b      	negs	r3, r3
 8008550:	454b      	cmp	r3, r9
 8008552:	dc01      	bgt.n	8008558 <_printf_float+0x2b4>
 8008554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008556:	e794      	b.n	8008482 <_printf_float+0x1de>
 8008558:	2301      	movs	r3, #1
 800855a:	4652      	mov	r2, sl
 800855c:	4631      	mov	r1, r6
 800855e:	4628      	mov	r0, r5
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	f43f aef9 	beq.w	800835a <_printf_float+0xb6>
 8008568:	f109 0901 	add.w	r9, r9, #1
 800856c:	e7ee      	b.n	800854c <_printf_float+0x2a8>
 800856e:	bf00      	nop
 8008570:	7fefffff 	.word	0x7fefffff
 8008574:	0800be80 	.word	0x0800be80
 8008578:	0800be84 	.word	0x0800be84
 800857c:	0800be8c 	.word	0x0800be8c
 8008580:	0800be88 	.word	0x0800be88
 8008584:	0800be90 	.word	0x0800be90
 8008588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800858a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800858c:	429a      	cmp	r2, r3
 800858e:	bfa8      	it	ge
 8008590:	461a      	movge	r2, r3
 8008592:	2a00      	cmp	r2, #0
 8008594:	4691      	mov	r9, r2
 8008596:	dc37      	bgt.n	8008608 <_printf_float+0x364>
 8008598:	f04f 0b00 	mov.w	fp, #0
 800859c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085a0:	f104 021a 	add.w	r2, r4, #26
 80085a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80085a8:	ebaa 0309 	sub.w	r3, sl, r9
 80085ac:	455b      	cmp	r3, fp
 80085ae:	dc33      	bgt.n	8008618 <_printf_float+0x374>
 80085b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80085b4:	429a      	cmp	r2, r3
 80085b6:	db3b      	blt.n	8008630 <_printf_float+0x38c>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	07da      	lsls	r2, r3, #31
 80085bc:	d438      	bmi.n	8008630 <_printf_float+0x38c>
 80085be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80085c2:	eba3 020a 	sub.w	r2, r3, sl
 80085c6:	eba3 0901 	sub.w	r9, r3, r1
 80085ca:	4591      	cmp	r9, r2
 80085cc:	bfa8      	it	ge
 80085ce:	4691      	movge	r9, r2
 80085d0:	f1b9 0f00 	cmp.w	r9, #0
 80085d4:	dc34      	bgt.n	8008640 <_printf_float+0x39c>
 80085d6:	f04f 0800 	mov.w	r8, #0
 80085da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085de:	f104 0a1a 	add.w	sl, r4, #26
 80085e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80085e6:	1a9b      	subs	r3, r3, r2
 80085e8:	eba3 0309 	sub.w	r3, r3, r9
 80085ec:	4543      	cmp	r3, r8
 80085ee:	f77f af7a 	ble.w	80084e6 <_printf_float+0x242>
 80085f2:	2301      	movs	r3, #1
 80085f4:	4652      	mov	r2, sl
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	f43f aeac 	beq.w	800835a <_printf_float+0xb6>
 8008602:	f108 0801 	add.w	r8, r8, #1
 8008606:	e7ec      	b.n	80085e2 <_printf_float+0x33e>
 8008608:	4613      	mov	r3, r2
 800860a:	4631      	mov	r1, r6
 800860c:	4642      	mov	r2, r8
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	d1c0      	bne.n	8008598 <_printf_float+0x2f4>
 8008616:	e6a0      	b.n	800835a <_printf_float+0xb6>
 8008618:	2301      	movs	r3, #1
 800861a:	4631      	mov	r1, r6
 800861c:	4628      	mov	r0, r5
 800861e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008620:	47b8      	blx	r7
 8008622:	3001      	adds	r0, #1
 8008624:	f43f ae99 	beq.w	800835a <_printf_float+0xb6>
 8008628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800862a:	f10b 0b01 	add.w	fp, fp, #1
 800862e:	e7b9      	b.n	80085a4 <_printf_float+0x300>
 8008630:	4631      	mov	r1, r6
 8008632:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008636:	4628      	mov	r0, r5
 8008638:	47b8      	blx	r7
 800863a:	3001      	adds	r0, #1
 800863c:	d1bf      	bne.n	80085be <_printf_float+0x31a>
 800863e:	e68c      	b.n	800835a <_printf_float+0xb6>
 8008640:	464b      	mov	r3, r9
 8008642:	4631      	mov	r1, r6
 8008644:	4628      	mov	r0, r5
 8008646:	eb08 020a 	add.w	r2, r8, sl
 800864a:	47b8      	blx	r7
 800864c:	3001      	adds	r0, #1
 800864e:	d1c2      	bne.n	80085d6 <_printf_float+0x332>
 8008650:	e683      	b.n	800835a <_printf_float+0xb6>
 8008652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008654:	2a01      	cmp	r2, #1
 8008656:	dc01      	bgt.n	800865c <_printf_float+0x3b8>
 8008658:	07db      	lsls	r3, r3, #31
 800865a:	d537      	bpl.n	80086cc <_printf_float+0x428>
 800865c:	2301      	movs	r3, #1
 800865e:	4642      	mov	r2, r8
 8008660:	4631      	mov	r1, r6
 8008662:	4628      	mov	r0, r5
 8008664:	47b8      	blx	r7
 8008666:	3001      	adds	r0, #1
 8008668:	f43f ae77 	beq.w	800835a <_printf_float+0xb6>
 800866c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008670:	4631      	mov	r1, r6
 8008672:	4628      	mov	r0, r5
 8008674:	47b8      	blx	r7
 8008676:	3001      	adds	r0, #1
 8008678:	f43f ae6f 	beq.w	800835a <_printf_float+0xb6>
 800867c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008680:	2200      	movs	r2, #0
 8008682:	2300      	movs	r3, #0
 8008684:	f7f8 fa44 	bl	8000b10 <__aeabi_dcmpeq>
 8008688:	b9d8      	cbnz	r0, 80086c2 <_printf_float+0x41e>
 800868a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800868c:	f108 0201 	add.w	r2, r8, #1
 8008690:	3b01      	subs	r3, #1
 8008692:	4631      	mov	r1, r6
 8008694:	4628      	mov	r0, r5
 8008696:	47b8      	blx	r7
 8008698:	3001      	adds	r0, #1
 800869a:	d10e      	bne.n	80086ba <_printf_float+0x416>
 800869c:	e65d      	b.n	800835a <_printf_float+0xb6>
 800869e:	2301      	movs	r3, #1
 80086a0:	464a      	mov	r2, r9
 80086a2:	4631      	mov	r1, r6
 80086a4:	4628      	mov	r0, r5
 80086a6:	47b8      	blx	r7
 80086a8:	3001      	adds	r0, #1
 80086aa:	f43f ae56 	beq.w	800835a <_printf_float+0xb6>
 80086ae:	f108 0801 	add.w	r8, r8, #1
 80086b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086b4:	3b01      	subs	r3, #1
 80086b6:	4543      	cmp	r3, r8
 80086b8:	dcf1      	bgt.n	800869e <_printf_float+0x3fa>
 80086ba:	4653      	mov	r3, sl
 80086bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80086c0:	e6e0      	b.n	8008484 <_printf_float+0x1e0>
 80086c2:	f04f 0800 	mov.w	r8, #0
 80086c6:	f104 091a 	add.w	r9, r4, #26
 80086ca:	e7f2      	b.n	80086b2 <_printf_float+0x40e>
 80086cc:	2301      	movs	r3, #1
 80086ce:	4642      	mov	r2, r8
 80086d0:	e7df      	b.n	8008692 <_printf_float+0x3ee>
 80086d2:	2301      	movs	r3, #1
 80086d4:	464a      	mov	r2, r9
 80086d6:	4631      	mov	r1, r6
 80086d8:	4628      	mov	r0, r5
 80086da:	47b8      	blx	r7
 80086dc:	3001      	adds	r0, #1
 80086de:	f43f ae3c 	beq.w	800835a <_printf_float+0xb6>
 80086e2:	f108 0801 	add.w	r8, r8, #1
 80086e6:	68e3      	ldr	r3, [r4, #12]
 80086e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80086ea:	1a5b      	subs	r3, r3, r1
 80086ec:	4543      	cmp	r3, r8
 80086ee:	dcf0      	bgt.n	80086d2 <_printf_float+0x42e>
 80086f0:	e6fd      	b.n	80084ee <_printf_float+0x24a>
 80086f2:	f04f 0800 	mov.w	r8, #0
 80086f6:	f104 0919 	add.w	r9, r4, #25
 80086fa:	e7f4      	b.n	80086e6 <_printf_float+0x442>

080086fc <_printf_common>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	4616      	mov	r6, r2
 8008702:	4699      	mov	r9, r3
 8008704:	688a      	ldr	r2, [r1, #8]
 8008706:	690b      	ldr	r3, [r1, #16]
 8008708:	4607      	mov	r7, r0
 800870a:	4293      	cmp	r3, r2
 800870c:	bfb8      	it	lt
 800870e:	4613      	movlt	r3, r2
 8008710:	6033      	str	r3, [r6, #0]
 8008712:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008716:	460c      	mov	r4, r1
 8008718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800871c:	b10a      	cbz	r2, 8008722 <_printf_common+0x26>
 800871e:	3301      	adds	r3, #1
 8008720:	6033      	str	r3, [r6, #0]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	0699      	lsls	r1, r3, #26
 8008726:	bf42      	ittt	mi
 8008728:	6833      	ldrmi	r3, [r6, #0]
 800872a:	3302      	addmi	r3, #2
 800872c:	6033      	strmi	r3, [r6, #0]
 800872e:	6825      	ldr	r5, [r4, #0]
 8008730:	f015 0506 	ands.w	r5, r5, #6
 8008734:	d106      	bne.n	8008744 <_printf_common+0x48>
 8008736:	f104 0a19 	add.w	sl, r4, #25
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	6832      	ldr	r2, [r6, #0]
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	42ab      	cmp	r3, r5
 8008742:	dc28      	bgt.n	8008796 <_printf_common+0x9a>
 8008744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008748:	1e13      	subs	r3, r2, #0
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	bf18      	it	ne
 800874e:	2301      	movne	r3, #1
 8008750:	0692      	lsls	r2, r2, #26
 8008752:	d42d      	bmi.n	80087b0 <_printf_common+0xb4>
 8008754:	4649      	mov	r1, r9
 8008756:	4638      	mov	r0, r7
 8008758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800875c:	47c0      	blx	r8
 800875e:	3001      	adds	r0, #1
 8008760:	d020      	beq.n	80087a4 <_printf_common+0xa8>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	68e5      	ldr	r5, [r4, #12]
 8008766:	f003 0306 	and.w	r3, r3, #6
 800876a:	2b04      	cmp	r3, #4
 800876c:	bf18      	it	ne
 800876e:	2500      	movne	r5, #0
 8008770:	6832      	ldr	r2, [r6, #0]
 8008772:	f04f 0600 	mov.w	r6, #0
 8008776:	68a3      	ldr	r3, [r4, #8]
 8008778:	bf08      	it	eq
 800877a:	1aad      	subeq	r5, r5, r2
 800877c:	6922      	ldr	r2, [r4, #16]
 800877e:	bf08      	it	eq
 8008780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008784:	4293      	cmp	r3, r2
 8008786:	bfc4      	itt	gt
 8008788:	1a9b      	subgt	r3, r3, r2
 800878a:	18ed      	addgt	r5, r5, r3
 800878c:	341a      	adds	r4, #26
 800878e:	42b5      	cmp	r5, r6
 8008790:	d11a      	bne.n	80087c8 <_printf_common+0xcc>
 8008792:	2000      	movs	r0, #0
 8008794:	e008      	b.n	80087a8 <_printf_common+0xac>
 8008796:	2301      	movs	r3, #1
 8008798:	4652      	mov	r2, sl
 800879a:	4649      	mov	r1, r9
 800879c:	4638      	mov	r0, r7
 800879e:	47c0      	blx	r8
 80087a0:	3001      	adds	r0, #1
 80087a2:	d103      	bne.n	80087ac <_printf_common+0xb0>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ac:	3501      	adds	r5, #1
 80087ae:	e7c4      	b.n	800873a <_printf_common+0x3e>
 80087b0:	2030      	movs	r0, #48	; 0x30
 80087b2:	18e1      	adds	r1, r4, r3
 80087b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087be:	4422      	add	r2, r4
 80087c0:	3302      	adds	r3, #2
 80087c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087c6:	e7c5      	b.n	8008754 <_printf_common+0x58>
 80087c8:	2301      	movs	r3, #1
 80087ca:	4622      	mov	r2, r4
 80087cc:	4649      	mov	r1, r9
 80087ce:	4638      	mov	r0, r7
 80087d0:	47c0      	blx	r8
 80087d2:	3001      	adds	r0, #1
 80087d4:	d0e6      	beq.n	80087a4 <_printf_common+0xa8>
 80087d6:	3601      	adds	r6, #1
 80087d8:	e7d9      	b.n	800878e <_printf_common+0x92>
	...

080087dc <_printf_i>:
 80087dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e0:	7e0f      	ldrb	r7, [r1, #24]
 80087e2:	4691      	mov	r9, r2
 80087e4:	2f78      	cmp	r7, #120	; 0x78
 80087e6:	4680      	mov	r8, r0
 80087e8:	460c      	mov	r4, r1
 80087ea:	469a      	mov	sl, r3
 80087ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087f2:	d807      	bhi.n	8008804 <_printf_i+0x28>
 80087f4:	2f62      	cmp	r7, #98	; 0x62
 80087f6:	d80a      	bhi.n	800880e <_printf_i+0x32>
 80087f8:	2f00      	cmp	r7, #0
 80087fa:	f000 80d9 	beq.w	80089b0 <_printf_i+0x1d4>
 80087fe:	2f58      	cmp	r7, #88	; 0x58
 8008800:	f000 80a4 	beq.w	800894c <_printf_i+0x170>
 8008804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800880c:	e03a      	b.n	8008884 <_printf_i+0xa8>
 800880e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008812:	2b15      	cmp	r3, #21
 8008814:	d8f6      	bhi.n	8008804 <_printf_i+0x28>
 8008816:	a101      	add	r1, pc, #4	; (adr r1, 800881c <_printf_i+0x40>)
 8008818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800881c:	08008875 	.word	0x08008875
 8008820:	08008889 	.word	0x08008889
 8008824:	08008805 	.word	0x08008805
 8008828:	08008805 	.word	0x08008805
 800882c:	08008805 	.word	0x08008805
 8008830:	08008805 	.word	0x08008805
 8008834:	08008889 	.word	0x08008889
 8008838:	08008805 	.word	0x08008805
 800883c:	08008805 	.word	0x08008805
 8008840:	08008805 	.word	0x08008805
 8008844:	08008805 	.word	0x08008805
 8008848:	08008997 	.word	0x08008997
 800884c:	080088b9 	.word	0x080088b9
 8008850:	08008979 	.word	0x08008979
 8008854:	08008805 	.word	0x08008805
 8008858:	08008805 	.word	0x08008805
 800885c:	080089b9 	.word	0x080089b9
 8008860:	08008805 	.word	0x08008805
 8008864:	080088b9 	.word	0x080088b9
 8008868:	08008805 	.word	0x08008805
 800886c:	08008805 	.word	0x08008805
 8008870:	08008981 	.word	0x08008981
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	1d1a      	adds	r2, r3, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	602a      	str	r2, [r5, #0]
 800887c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008884:	2301      	movs	r3, #1
 8008886:	e0a4      	b.n	80089d2 <_printf_i+0x1f6>
 8008888:	6820      	ldr	r0, [r4, #0]
 800888a:	6829      	ldr	r1, [r5, #0]
 800888c:	0606      	lsls	r6, r0, #24
 800888e:	f101 0304 	add.w	r3, r1, #4
 8008892:	d50a      	bpl.n	80088aa <_printf_i+0xce>
 8008894:	680e      	ldr	r6, [r1, #0]
 8008896:	602b      	str	r3, [r5, #0]
 8008898:	2e00      	cmp	r6, #0
 800889a:	da03      	bge.n	80088a4 <_printf_i+0xc8>
 800889c:	232d      	movs	r3, #45	; 0x2d
 800889e:	4276      	negs	r6, r6
 80088a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a4:	230a      	movs	r3, #10
 80088a6:	485e      	ldr	r0, [pc, #376]	; (8008a20 <_printf_i+0x244>)
 80088a8:	e019      	b.n	80088de <_printf_i+0x102>
 80088aa:	680e      	ldr	r6, [r1, #0]
 80088ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	bf18      	it	ne
 80088b4:	b236      	sxthne	r6, r6
 80088b6:	e7ef      	b.n	8008898 <_printf_i+0xbc>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	6820      	ldr	r0, [r4, #0]
 80088bc:	1d19      	adds	r1, r3, #4
 80088be:	6029      	str	r1, [r5, #0]
 80088c0:	0601      	lsls	r1, r0, #24
 80088c2:	d501      	bpl.n	80088c8 <_printf_i+0xec>
 80088c4:	681e      	ldr	r6, [r3, #0]
 80088c6:	e002      	b.n	80088ce <_printf_i+0xf2>
 80088c8:	0646      	lsls	r6, r0, #25
 80088ca:	d5fb      	bpl.n	80088c4 <_printf_i+0xe8>
 80088cc:	881e      	ldrh	r6, [r3, #0]
 80088ce:	2f6f      	cmp	r7, #111	; 0x6f
 80088d0:	bf0c      	ite	eq
 80088d2:	2308      	moveq	r3, #8
 80088d4:	230a      	movne	r3, #10
 80088d6:	4852      	ldr	r0, [pc, #328]	; (8008a20 <_printf_i+0x244>)
 80088d8:	2100      	movs	r1, #0
 80088da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088de:	6865      	ldr	r5, [r4, #4]
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	bfa8      	it	ge
 80088e4:	6821      	ldrge	r1, [r4, #0]
 80088e6:	60a5      	str	r5, [r4, #8]
 80088e8:	bfa4      	itt	ge
 80088ea:	f021 0104 	bicge.w	r1, r1, #4
 80088ee:	6021      	strge	r1, [r4, #0]
 80088f0:	b90e      	cbnz	r6, 80088f6 <_printf_i+0x11a>
 80088f2:	2d00      	cmp	r5, #0
 80088f4:	d04d      	beq.n	8008992 <_printf_i+0x1b6>
 80088f6:	4615      	mov	r5, r2
 80088f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80088fc:	fb03 6711 	mls	r7, r3, r1, r6
 8008900:	5dc7      	ldrb	r7, [r0, r7]
 8008902:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008906:	4637      	mov	r7, r6
 8008908:	42bb      	cmp	r3, r7
 800890a:	460e      	mov	r6, r1
 800890c:	d9f4      	bls.n	80088f8 <_printf_i+0x11c>
 800890e:	2b08      	cmp	r3, #8
 8008910:	d10b      	bne.n	800892a <_printf_i+0x14e>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	07de      	lsls	r6, r3, #31
 8008916:	d508      	bpl.n	800892a <_printf_i+0x14e>
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	6861      	ldr	r1, [r4, #4]
 800891c:	4299      	cmp	r1, r3
 800891e:	bfde      	ittt	le
 8008920:	2330      	movle	r3, #48	; 0x30
 8008922:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008926:	f105 35ff 	addle.w	r5, r5, #4294967295
 800892a:	1b52      	subs	r2, r2, r5
 800892c:	6122      	str	r2, [r4, #16]
 800892e:	464b      	mov	r3, r9
 8008930:	4621      	mov	r1, r4
 8008932:	4640      	mov	r0, r8
 8008934:	f8cd a000 	str.w	sl, [sp]
 8008938:	aa03      	add	r2, sp, #12
 800893a:	f7ff fedf 	bl	80086fc <_printf_common>
 800893e:	3001      	adds	r0, #1
 8008940:	d14c      	bne.n	80089dc <_printf_i+0x200>
 8008942:	f04f 30ff 	mov.w	r0, #4294967295
 8008946:	b004      	add	sp, #16
 8008948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894c:	4834      	ldr	r0, [pc, #208]	; (8008a20 <_printf_i+0x244>)
 800894e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008952:	6829      	ldr	r1, [r5, #0]
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	f851 6b04 	ldr.w	r6, [r1], #4
 800895a:	6029      	str	r1, [r5, #0]
 800895c:	061d      	lsls	r5, r3, #24
 800895e:	d514      	bpl.n	800898a <_printf_i+0x1ae>
 8008960:	07df      	lsls	r7, r3, #31
 8008962:	bf44      	itt	mi
 8008964:	f043 0320 	orrmi.w	r3, r3, #32
 8008968:	6023      	strmi	r3, [r4, #0]
 800896a:	b91e      	cbnz	r6, 8008974 <_printf_i+0x198>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	f023 0320 	bic.w	r3, r3, #32
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	2310      	movs	r3, #16
 8008976:	e7af      	b.n	80088d8 <_printf_i+0xfc>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	f043 0320 	orr.w	r3, r3, #32
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	2378      	movs	r3, #120	; 0x78
 8008982:	4828      	ldr	r0, [pc, #160]	; (8008a24 <_printf_i+0x248>)
 8008984:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008988:	e7e3      	b.n	8008952 <_printf_i+0x176>
 800898a:	0659      	lsls	r1, r3, #25
 800898c:	bf48      	it	mi
 800898e:	b2b6      	uxthmi	r6, r6
 8008990:	e7e6      	b.n	8008960 <_printf_i+0x184>
 8008992:	4615      	mov	r5, r2
 8008994:	e7bb      	b.n	800890e <_printf_i+0x132>
 8008996:	682b      	ldr	r3, [r5, #0]
 8008998:	6826      	ldr	r6, [r4, #0]
 800899a:	1d18      	adds	r0, r3, #4
 800899c:	6961      	ldr	r1, [r4, #20]
 800899e:	6028      	str	r0, [r5, #0]
 80089a0:	0635      	lsls	r5, r6, #24
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	d501      	bpl.n	80089aa <_printf_i+0x1ce>
 80089a6:	6019      	str	r1, [r3, #0]
 80089a8:	e002      	b.n	80089b0 <_printf_i+0x1d4>
 80089aa:	0670      	lsls	r0, r6, #25
 80089ac:	d5fb      	bpl.n	80089a6 <_printf_i+0x1ca>
 80089ae:	8019      	strh	r1, [r3, #0]
 80089b0:	2300      	movs	r3, #0
 80089b2:	4615      	mov	r5, r2
 80089b4:	6123      	str	r3, [r4, #16]
 80089b6:	e7ba      	b.n	800892e <_printf_i+0x152>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	2100      	movs	r1, #0
 80089bc:	1d1a      	adds	r2, r3, #4
 80089be:	602a      	str	r2, [r5, #0]
 80089c0:	681d      	ldr	r5, [r3, #0]
 80089c2:	6862      	ldr	r2, [r4, #4]
 80089c4:	4628      	mov	r0, r5
 80089c6:	f000 fed5 	bl	8009774 <memchr>
 80089ca:	b108      	cbz	r0, 80089d0 <_printf_i+0x1f4>
 80089cc:	1b40      	subs	r0, r0, r5
 80089ce:	6060      	str	r0, [r4, #4]
 80089d0:	6863      	ldr	r3, [r4, #4]
 80089d2:	6123      	str	r3, [r4, #16]
 80089d4:	2300      	movs	r3, #0
 80089d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089da:	e7a8      	b.n	800892e <_printf_i+0x152>
 80089dc:	462a      	mov	r2, r5
 80089de:	4649      	mov	r1, r9
 80089e0:	4640      	mov	r0, r8
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	47d0      	blx	sl
 80089e6:	3001      	adds	r0, #1
 80089e8:	d0ab      	beq.n	8008942 <_printf_i+0x166>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	079b      	lsls	r3, r3, #30
 80089ee:	d413      	bmi.n	8008a18 <_printf_i+0x23c>
 80089f0:	68e0      	ldr	r0, [r4, #12]
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	4298      	cmp	r0, r3
 80089f6:	bfb8      	it	lt
 80089f8:	4618      	movlt	r0, r3
 80089fa:	e7a4      	b.n	8008946 <_printf_i+0x16a>
 80089fc:	2301      	movs	r3, #1
 80089fe:	4632      	mov	r2, r6
 8008a00:	4649      	mov	r1, r9
 8008a02:	4640      	mov	r0, r8
 8008a04:	47d0      	blx	sl
 8008a06:	3001      	adds	r0, #1
 8008a08:	d09b      	beq.n	8008942 <_printf_i+0x166>
 8008a0a:	3501      	adds	r5, #1
 8008a0c:	68e3      	ldr	r3, [r4, #12]
 8008a0e:	9903      	ldr	r1, [sp, #12]
 8008a10:	1a5b      	subs	r3, r3, r1
 8008a12:	42ab      	cmp	r3, r5
 8008a14:	dcf2      	bgt.n	80089fc <_printf_i+0x220>
 8008a16:	e7eb      	b.n	80089f0 <_printf_i+0x214>
 8008a18:	2500      	movs	r5, #0
 8008a1a:	f104 0619 	add.w	r6, r4, #25
 8008a1e:	e7f5      	b.n	8008a0c <_printf_i+0x230>
 8008a20:	0800be92 	.word	0x0800be92
 8008a24:	0800bea3 	.word	0x0800bea3

08008a28 <siprintf>:
 8008a28:	b40e      	push	{r1, r2, r3}
 8008a2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a2e:	b500      	push	{lr}
 8008a30:	b09c      	sub	sp, #112	; 0x70
 8008a32:	ab1d      	add	r3, sp, #116	; 0x74
 8008a34:	9002      	str	r0, [sp, #8]
 8008a36:	9006      	str	r0, [sp, #24]
 8008a38:	9107      	str	r1, [sp, #28]
 8008a3a:	9104      	str	r1, [sp, #16]
 8008a3c:	4808      	ldr	r0, [pc, #32]	; (8008a60 <siprintf+0x38>)
 8008a3e:	4909      	ldr	r1, [pc, #36]	; (8008a64 <siprintf+0x3c>)
 8008a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a44:	9105      	str	r1, [sp, #20]
 8008a46:	6800      	ldr	r0, [r0, #0]
 8008a48:	a902      	add	r1, sp, #8
 8008a4a:	9301      	str	r3, [sp, #4]
 8008a4c:	f001 fb7c 	bl	800a148 <_svfiprintf_r>
 8008a50:	2200      	movs	r2, #0
 8008a52:	9b02      	ldr	r3, [sp, #8]
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	b01c      	add	sp, #112	; 0x70
 8008a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a5c:	b003      	add	sp, #12
 8008a5e:	4770      	bx	lr
 8008a60:	20000024 	.word	0x20000024
 8008a64:	ffff0208 	.word	0xffff0208

08008a68 <quorem>:
 8008a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	6903      	ldr	r3, [r0, #16]
 8008a6e:	690c      	ldr	r4, [r1, #16]
 8008a70:	4607      	mov	r7, r0
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	f2c0 8082 	blt.w	8008b7c <quorem+0x114>
 8008a78:	3c01      	subs	r4, #1
 8008a7a:	f100 0514 	add.w	r5, r0, #20
 8008a7e:	f101 0814 	add.w	r8, r1, #20
 8008a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a90:	3301      	adds	r3, #1
 8008a92:	429a      	cmp	r2, r3
 8008a94:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008aa0:	d331      	bcc.n	8008b06 <quorem+0x9e>
 8008aa2:	f04f 0e00 	mov.w	lr, #0
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	46ac      	mov	ip, r5
 8008aaa:	46f2      	mov	sl, lr
 8008aac:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ab0:	b293      	uxth	r3, r2
 8008ab2:	fb06 e303 	mla	r3, r6, r3, lr
 8008ab6:	0c12      	lsrs	r2, r2, #16
 8008ab8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	fb06 e202 	mla	r2, r6, r2, lr
 8008ac2:	ebaa 0303 	sub.w	r3, sl, r3
 8008ac6:	f8dc a000 	ldr.w	sl, [ip]
 8008aca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ace:	fa1f fa8a 	uxth.w	sl, sl
 8008ad2:	4453      	add	r3, sl
 8008ad4:	f8dc a000 	ldr.w	sl, [ip]
 8008ad8:	b292      	uxth	r2, r2
 8008ada:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ade:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ae8:	4581      	cmp	r9, r0
 8008aea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008aee:	f84c 3b04 	str.w	r3, [ip], #4
 8008af2:	d2db      	bcs.n	8008aac <quorem+0x44>
 8008af4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008af8:	b92b      	cbnz	r3, 8008b06 <quorem+0x9e>
 8008afa:	9b01      	ldr	r3, [sp, #4]
 8008afc:	3b04      	subs	r3, #4
 8008afe:	429d      	cmp	r5, r3
 8008b00:	461a      	mov	r2, r3
 8008b02:	d32f      	bcc.n	8008b64 <quorem+0xfc>
 8008b04:	613c      	str	r4, [r7, #16]
 8008b06:	4638      	mov	r0, r7
 8008b08:	f001 f8ce 	bl	8009ca8 <__mcmp>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	db25      	blt.n	8008b5c <quorem+0xf4>
 8008b10:	4628      	mov	r0, r5
 8008b12:	f04f 0c00 	mov.w	ip, #0
 8008b16:	3601      	adds	r6, #1
 8008b18:	f858 1b04 	ldr.w	r1, [r8], #4
 8008b1c:	f8d0 e000 	ldr.w	lr, [r0]
 8008b20:	b28b      	uxth	r3, r1
 8008b22:	ebac 0303 	sub.w	r3, ip, r3
 8008b26:	fa1f f28e 	uxth.w	r2, lr
 8008b2a:	4413      	add	r3, r2
 8008b2c:	0c0a      	lsrs	r2, r1, #16
 8008b2e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b3c:	45c1      	cmp	r9, r8
 8008b3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b42:	f840 3b04 	str.w	r3, [r0], #4
 8008b46:	d2e7      	bcs.n	8008b18 <quorem+0xb0>
 8008b48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b50:	b922      	cbnz	r2, 8008b5c <quorem+0xf4>
 8008b52:	3b04      	subs	r3, #4
 8008b54:	429d      	cmp	r5, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	d30a      	bcc.n	8008b70 <quorem+0x108>
 8008b5a:	613c      	str	r4, [r7, #16]
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	b003      	add	sp, #12
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b64:	6812      	ldr	r2, [r2, #0]
 8008b66:	3b04      	subs	r3, #4
 8008b68:	2a00      	cmp	r2, #0
 8008b6a:	d1cb      	bne.n	8008b04 <quorem+0x9c>
 8008b6c:	3c01      	subs	r4, #1
 8008b6e:	e7c6      	b.n	8008afe <quorem+0x96>
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	3b04      	subs	r3, #4
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	d1f0      	bne.n	8008b5a <quorem+0xf2>
 8008b78:	3c01      	subs	r4, #1
 8008b7a:	e7eb      	b.n	8008b54 <quorem+0xec>
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e7ee      	b.n	8008b5e <quorem+0xf6>

08008b80 <_dtoa_r>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	4616      	mov	r6, r2
 8008b86:	461f      	mov	r7, r3
 8008b88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b8a:	b099      	sub	sp, #100	; 0x64
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008b92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008b96:	b974      	cbnz	r4, 8008bb6 <_dtoa_r+0x36>
 8008b98:	2010      	movs	r0, #16
 8008b9a:	f000 fde3 	bl	8009764 <malloc>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	6268      	str	r0, [r5, #36]	; 0x24
 8008ba2:	b920      	cbnz	r0, 8008bae <_dtoa_r+0x2e>
 8008ba4:	21ea      	movs	r1, #234	; 0xea
 8008ba6:	4ba8      	ldr	r3, [pc, #672]	; (8008e48 <_dtoa_r+0x2c8>)
 8008ba8:	48a8      	ldr	r0, [pc, #672]	; (8008e4c <_dtoa_r+0x2cc>)
 8008baa:	f001 fbdd 	bl	800a368 <__assert_func>
 8008bae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bb2:	6004      	str	r4, [r0, #0]
 8008bb4:	60c4      	str	r4, [r0, #12]
 8008bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bb8:	6819      	ldr	r1, [r3, #0]
 8008bba:	b151      	cbz	r1, 8008bd2 <_dtoa_r+0x52>
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4093      	lsls	r3, r2
 8008bc2:	604a      	str	r2, [r1, #4]
 8008bc4:	608b      	str	r3, [r1, #8]
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 fe30 	bl	800982c <_Bfree>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	1e3b      	subs	r3, r7, #0
 8008bd4:	bfaf      	iteee	ge
 8008bd6:	2300      	movge	r3, #0
 8008bd8:	2201      	movlt	r2, #1
 8008bda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bde:	9305      	strlt	r3, [sp, #20]
 8008be0:	bfa8      	it	ge
 8008be2:	f8c8 3000 	strge.w	r3, [r8]
 8008be6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008bea:	4b99      	ldr	r3, [pc, #612]	; (8008e50 <_dtoa_r+0x2d0>)
 8008bec:	bfb8      	it	lt
 8008bee:	f8c8 2000 	strlt.w	r2, [r8]
 8008bf2:	ea33 0309 	bics.w	r3, r3, r9
 8008bf6:	d119      	bne.n	8008c2c <_dtoa_r+0xac>
 8008bf8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c04:	4333      	orrs	r3, r6
 8008c06:	f000 857f 	beq.w	8009708 <_dtoa_r+0xb88>
 8008c0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c0c:	b953      	cbnz	r3, 8008c24 <_dtoa_r+0xa4>
 8008c0e:	4b91      	ldr	r3, [pc, #580]	; (8008e54 <_dtoa_r+0x2d4>)
 8008c10:	e022      	b.n	8008c58 <_dtoa_r+0xd8>
 8008c12:	4b91      	ldr	r3, [pc, #580]	; (8008e58 <_dtoa_r+0x2d8>)
 8008c14:	9303      	str	r3, [sp, #12]
 8008c16:	3308      	adds	r3, #8
 8008c18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	9803      	ldr	r0, [sp, #12]
 8008c1e:	b019      	add	sp, #100	; 0x64
 8008c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c24:	4b8b      	ldr	r3, [pc, #556]	; (8008e54 <_dtoa_r+0x2d4>)
 8008c26:	9303      	str	r3, [sp, #12]
 8008c28:	3303      	adds	r3, #3
 8008c2a:	e7f5      	b.n	8008c18 <_dtoa_r+0x98>
 8008c2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008c30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008c34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f7f7 ff68 	bl	8000b10 <__aeabi_dcmpeq>
 8008c40:	4680      	mov	r8, r0
 8008c42:	b158      	cbz	r0, 8008c5c <_dtoa_r+0xdc>
 8008c44:	2301      	movs	r3, #1
 8008c46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 8558 	beq.w	8009702 <_dtoa_r+0xb82>
 8008c52:	4882      	ldr	r0, [pc, #520]	; (8008e5c <_dtoa_r+0x2dc>)
 8008c54:	6018      	str	r0, [r3, #0]
 8008c56:	1e43      	subs	r3, r0, #1
 8008c58:	9303      	str	r3, [sp, #12]
 8008c5a:	e7df      	b.n	8008c1c <_dtoa_r+0x9c>
 8008c5c:	ab16      	add	r3, sp, #88	; 0x58
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	ab17      	add	r3, sp, #92	; 0x5c
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	4628      	mov	r0, r5
 8008c66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c6a:	f001 f8c5 	bl	8009df8 <__d2b>
 8008c6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008c72:	4683      	mov	fp, r0
 8008c74:	2c00      	cmp	r4, #0
 8008c76:	d07f      	beq.n	8008d78 <_dtoa_r+0x1f8>
 8008c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c7e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008c8a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008c8e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008c92:	2200      	movs	r2, #0
 8008c94:	4b72      	ldr	r3, [pc, #456]	; (8008e60 <_dtoa_r+0x2e0>)
 8008c96:	f7f7 fb1b 	bl	80002d0 <__aeabi_dsub>
 8008c9a:	a365      	add	r3, pc, #404	; (adr r3, 8008e30 <_dtoa_r+0x2b0>)
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	f7f7 fcce 	bl	8000640 <__aeabi_dmul>
 8008ca4:	a364      	add	r3, pc, #400	; (adr r3, 8008e38 <_dtoa_r+0x2b8>)
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f7f7 fb13 	bl	80002d4 <__adddf3>
 8008cae:	4606      	mov	r6, r0
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	460f      	mov	r7, r1
 8008cb4:	f7f7 fc5a 	bl	800056c <__aeabi_i2d>
 8008cb8:	a361      	add	r3, pc, #388	; (adr r3, 8008e40 <_dtoa_r+0x2c0>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fcbf 	bl	8000640 <__aeabi_dmul>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	4639      	mov	r1, r7
 8008cca:	f7f7 fb03 	bl	80002d4 <__adddf3>
 8008cce:	4606      	mov	r6, r0
 8008cd0:	460f      	mov	r7, r1
 8008cd2:	f7f7 ff65 	bl	8000ba0 <__aeabi_d2iz>
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	4682      	mov	sl, r0
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4630      	mov	r0, r6
 8008cde:	4639      	mov	r1, r7
 8008ce0:	f7f7 ff20 	bl	8000b24 <__aeabi_dcmplt>
 8008ce4:	b148      	cbz	r0, 8008cfa <_dtoa_r+0x17a>
 8008ce6:	4650      	mov	r0, sl
 8008ce8:	f7f7 fc40 	bl	800056c <__aeabi_i2d>
 8008cec:	4632      	mov	r2, r6
 8008cee:	463b      	mov	r3, r7
 8008cf0:	f7f7 ff0e 	bl	8000b10 <__aeabi_dcmpeq>
 8008cf4:	b908      	cbnz	r0, 8008cfa <_dtoa_r+0x17a>
 8008cf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cfa:	f1ba 0f16 	cmp.w	sl, #22
 8008cfe:	d858      	bhi.n	8008db2 <_dtoa_r+0x232>
 8008d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d04:	4b57      	ldr	r3, [pc, #348]	; (8008e64 <_dtoa_r+0x2e4>)
 8008d06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 ff09 	bl	8000b24 <__aeabi_dcmplt>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d04f      	beq.n	8008db6 <_dtoa_r+0x236>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008d20:	1b1c      	subs	r4, r3, r4
 8008d22:	1e63      	subs	r3, r4, #1
 8008d24:	9309      	str	r3, [sp, #36]	; 0x24
 8008d26:	bf49      	itett	mi
 8008d28:	f1c4 0301 	rsbmi	r3, r4, #1
 8008d2c:	2300      	movpl	r3, #0
 8008d2e:	9306      	strmi	r3, [sp, #24]
 8008d30:	2300      	movmi	r3, #0
 8008d32:	bf54      	ite	pl
 8008d34:	9306      	strpl	r3, [sp, #24]
 8008d36:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008d38:	f1ba 0f00 	cmp.w	sl, #0
 8008d3c:	db3d      	blt.n	8008dba <_dtoa_r+0x23a>
 8008d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d40:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008d44:	4453      	add	r3, sl
 8008d46:	9309      	str	r3, [sp, #36]	; 0x24
 8008d48:	2300      	movs	r3, #0
 8008d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d4e:	2b09      	cmp	r3, #9
 8008d50:	f200 808c 	bhi.w	8008e6c <_dtoa_r+0x2ec>
 8008d54:	2b05      	cmp	r3, #5
 8008d56:	bfc4      	itt	gt
 8008d58:	3b04      	subgt	r3, #4
 8008d5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008d5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d5e:	bfc8      	it	gt
 8008d60:	2400      	movgt	r4, #0
 8008d62:	f1a3 0302 	sub.w	r3, r3, #2
 8008d66:	bfd8      	it	le
 8008d68:	2401      	movle	r4, #1
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	f200 808a 	bhi.w	8008e84 <_dtoa_r+0x304>
 8008d70:	e8df f003 	tbb	[pc, r3]
 8008d74:	5b4d4f2d 	.word	0x5b4d4f2d
 8008d78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008d7c:	441c      	add	r4, r3
 8008d7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008d82:	2b20      	cmp	r3, #32
 8008d84:	bfc3      	ittte	gt
 8008d86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d8a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008d8e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008d92:	f1c3 0320 	rsble	r3, r3, #32
 8008d96:	bfc6      	itte	gt
 8008d98:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d9c:	4318      	orrgt	r0, r3
 8008d9e:	fa06 f003 	lslle.w	r0, r6, r3
 8008da2:	f7f7 fbd3 	bl	800054c <__aeabi_ui2d>
 8008da6:	2301      	movs	r3, #1
 8008da8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008dac:	3c01      	subs	r4, #1
 8008dae:	9313      	str	r3, [sp, #76]	; 0x4c
 8008db0:	e76f      	b.n	8008c92 <_dtoa_r+0x112>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e7b2      	b.n	8008d1c <_dtoa_r+0x19c>
 8008db6:	900f      	str	r0, [sp, #60]	; 0x3c
 8008db8:	e7b1      	b.n	8008d1e <_dtoa_r+0x19e>
 8008dba:	9b06      	ldr	r3, [sp, #24]
 8008dbc:	eba3 030a 	sub.w	r3, r3, sl
 8008dc0:	9306      	str	r3, [sp, #24]
 8008dc2:	f1ca 0300 	rsb	r3, sl, #0
 8008dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8008dc8:	2300      	movs	r3, #0
 8008dca:	930e      	str	r3, [sp, #56]	; 0x38
 8008dcc:	e7be      	b.n	8008d4c <_dtoa_r+0x1cc>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	dc58      	bgt.n	8008e8a <_dtoa_r+0x30a>
 8008dd8:	f04f 0901 	mov.w	r9, #1
 8008ddc:	464b      	mov	r3, r9
 8008dde:	f8cd 9020 	str.w	r9, [sp, #32]
 8008de2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008de6:	2200      	movs	r2, #0
 8008de8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008dea:	6042      	str	r2, [r0, #4]
 8008dec:	2204      	movs	r2, #4
 8008dee:	f102 0614 	add.w	r6, r2, #20
 8008df2:	429e      	cmp	r6, r3
 8008df4:	6841      	ldr	r1, [r0, #4]
 8008df6:	d94e      	bls.n	8008e96 <_dtoa_r+0x316>
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f000 fcd7 	bl	80097ac <_Balloc>
 8008dfe:	9003      	str	r0, [sp, #12]
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d14c      	bne.n	8008e9e <_dtoa_r+0x31e>
 8008e04:	4602      	mov	r2, r0
 8008e06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e0a:	4b17      	ldr	r3, [pc, #92]	; (8008e68 <_dtoa_r+0x2e8>)
 8008e0c:	e6cc      	b.n	8008ba8 <_dtoa_r+0x28>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e7de      	b.n	8008dd0 <_dtoa_r+0x250>
 8008e12:	2300      	movs	r3, #0
 8008e14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e18:	eb0a 0903 	add.w	r9, sl, r3
 8008e1c:	f109 0301 	add.w	r3, r9, #1
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	9308      	str	r3, [sp, #32]
 8008e24:	bfb8      	it	lt
 8008e26:	2301      	movlt	r3, #1
 8008e28:	e7dd      	b.n	8008de6 <_dtoa_r+0x266>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e7f2      	b.n	8008e14 <_dtoa_r+0x294>
 8008e2e:	bf00      	nop
 8008e30:	636f4361 	.word	0x636f4361
 8008e34:	3fd287a7 	.word	0x3fd287a7
 8008e38:	8b60c8b3 	.word	0x8b60c8b3
 8008e3c:	3fc68a28 	.word	0x3fc68a28
 8008e40:	509f79fb 	.word	0x509f79fb
 8008e44:	3fd34413 	.word	0x3fd34413
 8008e48:	0800bec1 	.word	0x0800bec1
 8008e4c:	0800bed8 	.word	0x0800bed8
 8008e50:	7ff00000 	.word	0x7ff00000
 8008e54:	0800bebd 	.word	0x0800bebd
 8008e58:	0800beb4 	.word	0x0800beb4
 8008e5c:	0800be91 	.word	0x0800be91
 8008e60:	3ff80000 	.word	0x3ff80000
 8008e64:	0800bfc8 	.word	0x0800bfc8
 8008e68:	0800bf33 	.word	0x0800bf33
 8008e6c:	2401      	movs	r4, #1
 8008e6e:	2300      	movs	r3, #0
 8008e70:	940b      	str	r4, [sp, #44]	; 0x2c
 8008e72:	9322      	str	r3, [sp, #136]	; 0x88
 8008e74:	f04f 39ff 	mov.w	r9, #4294967295
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2312      	movs	r3, #18
 8008e7c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008e80:	9223      	str	r2, [sp, #140]	; 0x8c
 8008e82:	e7b0      	b.n	8008de6 <_dtoa_r+0x266>
 8008e84:	2301      	movs	r3, #1
 8008e86:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e88:	e7f4      	b.n	8008e74 <_dtoa_r+0x2f4>
 8008e8a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008e8e:	464b      	mov	r3, r9
 8008e90:	f8cd 9020 	str.w	r9, [sp, #32]
 8008e94:	e7a7      	b.n	8008de6 <_dtoa_r+0x266>
 8008e96:	3101      	adds	r1, #1
 8008e98:	6041      	str	r1, [r0, #4]
 8008e9a:	0052      	lsls	r2, r2, #1
 8008e9c:	e7a7      	b.n	8008dee <_dtoa_r+0x26e>
 8008e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ea0:	9a03      	ldr	r2, [sp, #12]
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	9b08      	ldr	r3, [sp, #32]
 8008ea6:	2b0e      	cmp	r3, #14
 8008ea8:	f200 80a8 	bhi.w	8008ffc <_dtoa_r+0x47c>
 8008eac:	2c00      	cmp	r4, #0
 8008eae:	f000 80a5 	beq.w	8008ffc <_dtoa_r+0x47c>
 8008eb2:	f1ba 0f00 	cmp.w	sl, #0
 8008eb6:	dd34      	ble.n	8008f22 <_dtoa_r+0x3a2>
 8008eb8:	4a9a      	ldr	r2, [pc, #616]	; (8009124 <_dtoa_r+0x5a4>)
 8008eba:	f00a 030f 	and.w	r3, sl, #15
 8008ebe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ec2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008ec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008eca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008ece:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008ed2:	d016      	beq.n	8008f02 <_dtoa_r+0x382>
 8008ed4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ed8:	4b93      	ldr	r3, [pc, #588]	; (8009128 <_dtoa_r+0x5a8>)
 8008eda:	2703      	movs	r7, #3
 8008edc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ee0:	f7f7 fcd8 	bl	8000894 <__aeabi_ddiv>
 8008ee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ee8:	f004 040f 	and.w	r4, r4, #15
 8008eec:	4e8e      	ldr	r6, [pc, #568]	; (8009128 <_dtoa_r+0x5a8>)
 8008eee:	b954      	cbnz	r4, 8008f06 <_dtoa_r+0x386>
 8008ef0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ef8:	f7f7 fccc 	bl	8000894 <__aeabi_ddiv>
 8008efc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f00:	e029      	b.n	8008f56 <_dtoa_r+0x3d6>
 8008f02:	2702      	movs	r7, #2
 8008f04:	e7f2      	b.n	8008eec <_dtoa_r+0x36c>
 8008f06:	07e1      	lsls	r1, r4, #31
 8008f08:	d508      	bpl.n	8008f1c <_dtoa_r+0x39c>
 8008f0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f12:	f7f7 fb95 	bl	8000640 <__aeabi_dmul>
 8008f16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f1a:	3701      	adds	r7, #1
 8008f1c:	1064      	asrs	r4, r4, #1
 8008f1e:	3608      	adds	r6, #8
 8008f20:	e7e5      	b.n	8008eee <_dtoa_r+0x36e>
 8008f22:	f000 80a5 	beq.w	8009070 <_dtoa_r+0x4f0>
 8008f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f2a:	f1ca 0400 	rsb	r4, sl, #0
 8008f2e:	4b7d      	ldr	r3, [pc, #500]	; (8009124 <_dtoa_r+0x5a4>)
 8008f30:	f004 020f 	and.w	r2, r4, #15
 8008f34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3c:	f7f7 fb80 	bl	8000640 <__aeabi_dmul>
 8008f40:	2702      	movs	r7, #2
 8008f42:	2300      	movs	r3, #0
 8008f44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f48:	4e77      	ldr	r6, [pc, #476]	; (8009128 <_dtoa_r+0x5a8>)
 8008f4a:	1124      	asrs	r4, r4, #4
 8008f4c:	2c00      	cmp	r4, #0
 8008f4e:	f040 8084 	bne.w	800905a <_dtoa_r+0x4da>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1d2      	bne.n	8008efc <_dtoa_r+0x37c>
 8008f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 808b 	beq.w	8009074 <_dtoa_r+0x4f4>
 8008f5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008f62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008f66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	4b6f      	ldr	r3, [pc, #444]	; (800912c <_dtoa_r+0x5ac>)
 8008f6e:	f7f7 fdd9 	bl	8000b24 <__aeabi_dcmplt>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d07e      	beq.n	8009074 <_dtoa_r+0x4f4>
 8008f76:	9b08      	ldr	r3, [sp, #32]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d07b      	beq.n	8009074 <_dtoa_r+0x4f4>
 8008f7c:	f1b9 0f00 	cmp.w	r9, #0
 8008f80:	dd38      	ble.n	8008ff4 <_dtoa_r+0x474>
 8008f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f86:	2200      	movs	r2, #0
 8008f88:	4b69      	ldr	r3, [pc, #420]	; (8009130 <_dtoa_r+0x5b0>)
 8008f8a:	f7f7 fb59 	bl	8000640 <__aeabi_dmul>
 8008f8e:	464c      	mov	r4, r9
 8008f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f94:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008f98:	3701      	adds	r7, #1
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	f7f7 fae6 	bl	800056c <__aeabi_i2d>
 8008fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fa4:	f7f7 fb4c 	bl	8000640 <__aeabi_dmul>
 8008fa8:	2200      	movs	r2, #0
 8008faa:	4b62      	ldr	r3, [pc, #392]	; (8009134 <_dtoa_r+0x5b4>)
 8008fac:	f7f7 f992 	bl	80002d4 <__adddf3>
 8008fb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008fb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008fb8:	9611      	str	r6, [sp, #68]	; 0x44
 8008fba:	2c00      	cmp	r4, #0
 8008fbc:	d15d      	bne.n	800907a <_dtoa_r+0x4fa>
 8008fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	4b5c      	ldr	r3, [pc, #368]	; (8009138 <_dtoa_r+0x5b8>)
 8008fc6:	f7f7 f983 	bl	80002d0 <__aeabi_dsub>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fd2:	4633      	mov	r3, r6
 8008fd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fd6:	f7f7 fdc3 	bl	8000b60 <__aeabi_dcmpgt>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	f040 829c 	bne.w	8009518 <_dtoa_r+0x998>
 8008fe0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fe6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008fea:	f7f7 fd9b 	bl	8000b24 <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f040 8290 	bne.w	8009514 <_dtoa_r+0x994>
 8008ff4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008ff8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f2c0 8152 	blt.w	80092a8 <_dtoa_r+0x728>
 8009004:	f1ba 0f0e 	cmp.w	sl, #14
 8009008:	f300 814e 	bgt.w	80092a8 <_dtoa_r+0x728>
 800900c:	4b45      	ldr	r3, [pc, #276]	; (8009124 <_dtoa_r+0x5a4>)
 800900e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009012:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009016:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800901a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800901c:	2b00      	cmp	r3, #0
 800901e:	f280 80db 	bge.w	80091d8 <_dtoa_r+0x658>
 8009022:	9b08      	ldr	r3, [sp, #32]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f300 80d7 	bgt.w	80091d8 <_dtoa_r+0x658>
 800902a:	f040 8272 	bne.w	8009512 <_dtoa_r+0x992>
 800902e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009032:	2200      	movs	r2, #0
 8009034:	4b40      	ldr	r3, [pc, #256]	; (8009138 <_dtoa_r+0x5b8>)
 8009036:	f7f7 fb03 	bl	8000640 <__aeabi_dmul>
 800903a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800903e:	f7f7 fd85 	bl	8000b4c <__aeabi_dcmpge>
 8009042:	9c08      	ldr	r4, [sp, #32]
 8009044:	4626      	mov	r6, r4
 8009046:	2800      	cmp	r0, #0
 8009048:	f040 8248 	bne.w	80094dc <_dtoa_r+0x95c>
 800904c:	2331      	movs	r3, #49	; 0x31
 800904e:	9f03      	ldr	r7, [sp, #12]
 8009050:	f10a 0a01 	add.w	sl, sl, #1
 8009054:	f807 3b01 	strb.w	r3, [r7], #1
 8009058:	e244      	b.n	80094e4 <_dtoa_r+0x964>
 800905a:	07e2      	lsls	r2, r4, #31
 800905c:	d505      	bpl.n	800906a <_dtoa_r+0x4ea>
 800905e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009062:	f7f7 faed 	bl	8000640 <__aeabi_dmul>
 8009066:	2301      	movs	r3, #1
 8009068:	3701      	adds	r7, #1
 800906a:	1064      	asrs	r4, r4, #1
 800906c:	3608      	adds	r6, #8
 800906e:	e76d      	b.n	8008f4c <_dtoa_r+0x3cc>
 8009070:	2702      	movs	r7, #2
 8009072:	e770      	b.n	8008f56 <_dtoa_r+0x3d6>
 8009074:	46d0      	mov	r8, sl
 8009076:	9c08      	ldr	r4, [sp, #32]
 8009078:	e78f      	b.n	8008f9a <_dtoa_r+0x41a>
 800907a:	9903      	ldr	r1, [sp, #12]
 800907c:	4b29      	ldr	r3, [pc, #164]	; (8009124 <_dtoa_r+0x5a4>)
 800907e:	4421      	add	r1, r4
 8009080:	9112      	str	r1, [sp, #72]	; 0x48
 8009082:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009084:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009088:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800908c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009090:	2900      	cmp	r1, #0
 8009092:	d055      	beq.n	8009140 <_dtoa_r+0x5c0>
 8009094:	2000      	movs	r0, #0
 8009096:	4929      	ldr	r1, [pc, #164]	; (800913c <_dtoa_r+0x5bc>)
 8009098:	f7f7 fbfc 	bl	8000894 <__aeabi_ddiv>
 800909c:	463b      	mov	r3, r7
 800909e:	4632      	mov	r2, r6
 80090a0:	f7f7 f916 	bl	80002d0 <__aeabi_dsub>
 80090a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090a8:	9f03      	ldr	r7, [sp, #12]
 80090aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090ae:	f7f7 fd77 	bl	8000ba0 <__aeabi_d2iz>
 80090b2:	4604      	mov	r4, r0
 80090b4:	f7f7 fa5a 	bl	800056c <__aeabi_i2d>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090c0:	f7f7 f906 	bl	80002d0 <__aeabi_dsub>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	3430      	adds	r4, #48	; 0x30
 80090ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090d2:	f807 4b01 	strb.w	r4, [r7], #1
 80090d6:	f7f7 fd25 	bl	8000b24 <__aeabi_dcmplt>
 80090da:	2800      	cmp	r0, #0
 80090dc:	d174      	bne.n	80091c8 <_dtoa_r+0x648>
 80090de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090e2:	2000      	movs	r0, #0
 80090e4:	4911      	ldr	r1, [pc, #68]	; (800912c <_dtoa_r+0x5ac>)
 80090e6:	f7f7 f8f3 	bl	80002d0 <__aeabi_dsub>
 80090ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090ee:	f7f7 fd19 	bl	8000b24 <__aeabi_dcmplt>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	f040 80b7 	bne.w	8009266 <_dtoa_r+0x6e6>
 80090f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090fa:	429f      	cmp	r7, r3
 80090fc:	f43f af7a 	beq.w	8008ff4 <_dtoa_r+0x474>
 8009100:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009104:	2200      	movs	r2, #0
 8009106:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <_dtoa_r+0x5b0>)
 8009108:	f7f7 fa9a 	bl	8000640 <__aeabi_dmul>
 800910c:	2200      	movs	r2, #0
 800910e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009116:	4b06      	ldr	r3, [pc, #24]	; (8009130 <_dtoa_r+0x5b0>)
 8009118:	f7f7 fa92 	bl	8000640 <__aeabi_dmul>
 800911c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009120:	e7c3      	b.n	80090aa <_dtoa_r+0x52a>
 8009122:	bf00      	nop
 8009124:	0800bfc8 	.word	0x0800bfc8
 8009128:	0800bfa0 	.word	0x0800bfa0
 800912c:	3ff00000 	.word	0x3ff00000
 8009130:	40240000 	.word	0x40240000
 8009134:	401c0000 	.word	0x401c0000
 8009138:	40140000 	.word	0x40140000
 800913c:	3fe00000 	.word	0x3fe00000
 8009140:	4630      	mov	r0, r6
 8009142:	4639      	mov	r1, r7
 8009144:	f7f7 fa7c 	bl	8000640 <__aeabi_dmul>
 8009148:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800914a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800914e:	9c03      	ldr	r4, [sp, #12]
 8009150:	9314      	str	r3, [sp, #80]	; 0x50
 8009152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009156:	f7f7 fd23 	bl	8000ba0 <__aeabi_d2iz>
 800915a:	9015      	str	r0, [sp, #84]	; 0x54
 800915c:	f7f7 fa06 	bl	800056c <__aeabi_i2d>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009168:	f7f7 f8b2 	bl	80002d0 <__aeabi_dsub>
 800916c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800916e:	4606      	mov	r6, r0
 8009170:	3330      	adds	r3, #48	; 0x30
 8009172:	f804 3b01 	strb.w	r3, [r4], #1
 8009176:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009178:	460f      	mov	r7, r1
 800917a:	429c      	cmp	r4, r3
 800917c:	f04f 0200 	mov.w	r2, #0
 8009180:	d124      	bne.n	80091cc <_dtoa_r+0x64c>
 8009182:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009186:	4bb0      	ldr	r3, [pc, #704]	; (8009448 <_dtoa_r+0x8c8>)
 8009188:	f7f7 f8a4 	bl	80002d4 <__adddf3>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4630      	mov	r0, r6
 8009192:	4639      	mov	r1, r7
 8009194:	f7f7 fce4 	bl	8000b60 <__aeabi_dcmpgt>
 8009198:	2800      	cmp	r0, #0
 800919a:	d163      	bne.n	8009264 <_dtoa_r+0x6e4>
 800919c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091a0:	2000      	movs	r0, #0
 80091a2:	49a9      	ldr	r1, [pc, #676]	; (8009448 <_dtoa_r+0x8c8>)
 80091a4:	f7f7 f894 	bl	80002d0 <__aeabi_dsub>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4630      	mov	r0, r6
 80091ae:	4639      	mov	r1, r7
 80091b0:	f7f7 fcb8 	bl	8000b24 <__aeabi_dcmplt>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f43f af1d 	beq.w	8008ff4 <_dtoa_r+0x474>
 80091ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80091bc:	1e7b      	subs	r3, r7, #1
 80091be:	9314      	str	r3, [sp, #80]	; 0x50
 80091c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80091c4:	2b30      	cmp	r3, #48	; 0x30
 80091c6:	d0f8      	beq.n	80091ba <_dtoa_r+0x63a>
 80091c8:	46c2      	mov	sl, r8
 80091ca:	e03b      	b.n	8009244 <_dtoa_r+0x6c4>
 80091cc:	4b9f      	ldr	r3, [pc, #636]	; (800944c <_dtoa_r+0x8cc>)
 80091ce:	f7f7 fa37 	bl	8000640 <__aeabi_dmul>
 80091d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091d6:	e7bc      	b.n	8009152 <_dtoa_r+0x5d2>
 80091d8:	9f03      	ldr	r7, [sp, #12]
 80091da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80091de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091e2:	4640      	mov	r0, r8
 80091e4:	4649      	mov	r1, r9
 80091e6:	f7f7 fb55 	bl	8000894 <__aeabi_ddiv>
 80091ea:	f7f7 fcd9 	bl	8000ba0 <__aeabi_d2iz>
 80091ee:	4604      	mov	r4, r0
 80091f0:	f7f7 f9bc 	bl	800056c <__aeabi_i2d>
 80091f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091f8:	f7f7 fa22 	bl	8000640 <__aeabi_dmul>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4640      	mov	r0, r8
 8009202:	4649      	mov	r1, r9
 8009204:	f7f7 f864 	bl	80002d0 <__aeabi_dsub>
 8009208:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800920c:	f807 6b01 	strb.w	r6, [r7], #1
 8009210:	9e03      	ldr	r6, [sp, #12]
 8009212:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009216:	1bbe      	subs	r6, r7, r6
 8009218:	45b4      	cmp	ip, r6
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	d136      	bne.n	800928e <_dtoa_r+0x70e>
 8009220:	f7f7 f858 	bl	80002d4 <__adddf3>
 8009224:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009228:	4680      	mov	r8, r0
 800922a:	4689      	mov	r9, r1
 800922c:	f7f7 fc98 	bl	8000b60 <__aeabi_dcmpgt>
 8009230:	bb58      	cbnz	r0, 800928a <_dtoa_r+0x70a>
 8009232:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009236:	4640      	mov	r0, r8
 8009238:	4649      	mov	r1, r9
 800923a:	f7f7 fc69 	bl	8000b10 <__aeabi_dcmpeq>
 800923e:	b108      	cbz	r0, 8009244 <_dtoa_r+0x6c4>
 8009240:	07e1      	lsls	r1, r4, #31
 8009242:	d422      	bmi.n	800928a <_dtoa_r+0x70a>
 8009244:	4628      	mov	r0, r5
 8009246:	4659      	mov	r1, fp
 8009248:	f000 faf0 	bl	800982c <_Bfree>
 800924c:	2300      	movs	r3, #0
 800924e:	703b      	strb	r3, [r7, #0]
 8009250:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009252:	f10a 0001 	add.w	r0, sl, #1
 8009256:	6018      	str	r0, [r3, #0]
 8009258:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800925a:	2b00      	cmp	r3, #0
 800925c:	f43f acde 	beq.w	8008c1c <_dtoa_r+0x9c>
 8009260:	601f      	str	r7, [r3, #0]
 8009262:	e4db      	b.n	8008c1c <_dtoa_r+0x9c>
 8009264:	4627      	mov	r7, r4
 8009266:	463b      	mov	r3, r7
 8009268:	461f      	mov	r7, r3
 800926a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800926e:	2a39      	cmp	r2, #57	; 0x39
 8009270:	d107      	bne.n	8009282 <_dtoa_r+0x702>
 8009272:	9a03      	ldr	r2, [sp, #12]
 8009274:	429a      	cmp	r2, r3
 8009276:	d1f7      	bne.n	8009268 <_dtoa_r+0x6e8>
 8009278:	2230      	movs	r2, #48	; 0x30
 800927a:	9903      	ldr	r1, [sp, #12]
 800927c:	f108 0801 	add.w	r8, r8, #1
 8009280:	700a      	strb	r2, [r1, #0]
 8009282:	781a      	ldrb	r2, [r3, #0]
 8009284:	3201      	adds	r2, #1
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	e79e      	b.n	80091c8 <_dtoa_r+0x648>
 800928a:	46d0      	mov	r8, sl
 800928c:	e7eb      	b.n	8009266 <_dtoa_r+0x6e6>
 800928e:	2200      	movs	r2, #0
 8009290:	4b6e      	ldr	r3, [pc, #440]	; (800944c <_dtoa_r+0x8cc>)
 8009292:	f7f7 f9d5 	bl	8000640 <__aeabi_dmul>
 8009296:	2200      	movs	r2, #0
 8009298:	2300      	movs	r3, #0
 800929a:	4680      	mov	r8, r0
 800929c:	4689      	mov	r9, r1
 800929e:	f7f7 fc37 	bl	8000b10 <__aeabi_dcmpeq>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d09b      	beq.n	80091de <_dtoa_r+0x65e>
 80092a6:	e7cd      	b.n	8009244 <_dtoa_r+0x6c4>
 80092a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092aa:	2a00      	cmp	r2, #0
 80092ac:	f000 80d0 	beq.w	8009450 <_dtoa_r+0x8d0>
 80092b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80092b2:	2a01      	cmp	r2, #1
 80092b4:	f300 80ae 	bgt.w	8009414 <_dtoa_r+0x894>
 80092b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	f000 80a6 	beq.w	800940c <_dtoa_r+0x88c>
 80092c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80092c6:	9f06      	ldr	r7, [sp, #24]
 80092c8:	9a06      	ldr	r2, [sp, #24]
 80092ca:	2101      	movs	r1, #1
 80092cc:	441a      	add	r2, r3
 80092ce:	9206      	str	r2, [sp, #24]
 80092d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092d2:	4628      	mov	r0, r5
 80092d4:	441a      	add	r2, r3
 80092d6:	9209      	str	r2, [sp, #36]	; 0x24
 80092d8:	f000 fb5e 	bl	8009998 <__i2b>
 80092dc:	4606      	mov	r6, r0
 80092de:	2f00      	cmp	r7, #0
 80092e0:	dd0c      	ble.n	80092fc <_dtoa_r+0x77c>
 80092e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dd09      	ble.n	80092fc <_dtoa_r+0x77c>
 80092e8:	42bb      	cmp	r3, r7
 80092ea:	bfa8      	it	ge
 80092ec:	463b      	movge	r3, r7
 80092ee:	9a06      	ldr	r2, [sp, #24]
 80092f0:	1aff      	subs	r7, r7, r3
 80092f2:	1ad2      	subs	r2, r2, r3
 80092f4:	9206      	str	r2, [sp, #24]
 80092f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	9309      	str	r3, [sp, #36]	; 0x24
 80092fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fe:	b1f3      	cbz	r3, 800933e <_dtoa_r+0x7be>
 8009300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 80a8 	beq.w	8009458 <_dtoa_r+0x8d8>
 8009308:	2c00      	cmp	r4, #0
 800930a:	dd10      	ble.n	800932e <_dtoa_r+0x7ae>
 800930c:	4631      	mov	r1, r6
 800930e:	4622      	mov	r2, r4
 8009310:	4628      	mov	r0, r5
 8009312:	f000 fbff 	bl	8009b14 <__pow5mult>
 8009316:	465a      	mov	r2, fp
 8009318:	4601      	mov	r1, r0
 800931a:	4606      	mov	r6, r0
 800931c:	4628      	mov	r0, r5
 800931e:	f000 fb51 	bl	80099c4 <__multiply>
 8009322:	4680      	mov	r8, r0
 8009324:	4659      	mov	r1, fp
 8009326:	4628      	mov	r0, r5
 8009328:	f000 fa80 	bl	800982c <_Bfree>
 800932c:	46c3      	mov	fp, r8
 800932e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009330:	1b1a      	subs	r2, r3, r4
 8009332:	d004      	beq.n	800933e <_dtoa_r+0x7be>
 8009334:	4659      	mov	r1, fp
 8009336:	4628      	mov	r0, r5
 8009338:	f000 fbec 	bl	8009b14 <__pow5mult>
 800933c:	4683      	mov	fp, r0
 800933e:	2101      	movs	r1, #1
 8009340:	4628      	mov	r0, r5
 8009342:	f000 fb29 	bl	8009998 <__i2b>
 8009346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009348:	4604      	mov	r4, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	f340 8086 	ble.w	800945c <_dtoa_r+0x8dc>
 8009350:	461a      	mov	r2, r3
 8009352:	4601      	mov	r1, r0
 8009354:	4628      	mov	r0, r5
 8009356:	f000 fbdd 	bl	8009b14 <__pow5mult>
 800935a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800935c:	4604      	mov	r4, r0
 800935e:	2b01      	cmp	r3, #1
 8009360:	dd7f      	ble.n	8009462 <_dtoa_r+0x8e2>
 8009362:	f04f 0800 	mov.w	r8, #0
 8009366:	6923      	ldr	r3, [r4, #16]
 8009368:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800936c:	6918      	ldr	r0, [r3, #16]
 800936e:	f000 fac5 	bl	80098fc <__hi0bits>
 8009372:	f1c0 0020 	rsb	r0, r0, #32
 8009376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009378:	4418      	add	r0, r3
 800937a:	f010 001f 	ands.w	r0, r0, #31
 800937e:	f000 8092 	beq.w	80094a6 <_dtoa_r+0x926>
 8009382:	f1c0 0320 	rsb	r3, r0, #32
 8009386:	2b04      	cmp	r3, #4
 8009388:	f340 808a 	ble.w	80094a0 <_dtoa_r+0x920>
 800938c:	f1c0 001c 	rsb	r0, r0, #28
 8009390:	9b06      	ldr	r3, [sp, #24]
 8009392:	4407      	add	r7, r0
 8009394:	4403      	add	r3, r0
 8009396:	9306      	str	r3, [sp, #24]
 8009398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939a:	4403      	add	r3, r0
 800939c:	9309      	str	r3, [sp, #36]	; 0x24
 800939e:	9b06      	ldr	r3, [sp, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	dd05      	ble.n	80093b0 <_dtoa_r+0x830>
 80093a4:	4659      	mov	r1, fp
 80093a6:	461a      	mov	r2, r3
 80093a8:	4628      	mov	r0, r5
 80093aa:	f000 fc0d 	bl	8009bc8 <__lshift>
 80093ae:	4683      	mov	fp, r0
 80093b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dd05      	ble.n	80093c2 <_dtoa_r+0x842>
 80093b6:	4621      	mov	r1, r4
 80093b8:	461a      	mov	r2, r3
 80093ba:	4628      	mov	r0, r5
 80093bc:	f000 fc04 	bl	8009bc8 <__lshift>
 80093c0:	4604      	mov	r4, r0
 80093c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d070      	beq.n	80094aa <_dtoa_r+0x92a>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4658      	mov	r0, fp
 80093cc:	f000 fc6c 	bl	8009ca8 <__mcmp>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	da6a      	bge.n	80094aa <_dtoa_r+0x92a>
 80093d4:	2300      	movs	r3, #0
 80093d6:	4659      	mov	r1, fp
 80093d8:	220a      	movs	r2, #10
 80093da:	4628      	mov	r0, r5
 80093dc:	f000 fa48 	bl	8009870 <__multadd>
 80093e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e2:	4683      	mov	fp, r0
 80093e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 8194 	beq.w	8009716 <_dtoa_r+0xb96>
 80093ee:	4631      	mov	r1, r6
 80093f0:	2300      	movs	r3, #0
 80093f2:	220a      	movs	r2, #10
 80093f4:	4628      	mov	r0, r5
 80093f6:	f000 fa3b 	bl	8009870 <__multadd>
 80093fa:	f1b9 0f00 	cmp.w	r9, #0
 80093fe:	4606      	mov	r6, r0
 8009400:	f300 8093 	bgt.w	800952a <_dtoa_r+0x9aa>
 8009404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009406:	2b02      	cmp	r3, #2
 8009408:	dc57      	bgt.n	80094ba <_dtoa_r+0x93a>
 800940a:	e08e      	b.n	800952a <_dtoa_r+0x9aa>
 800940c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800940e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009412:	e757      	b.n	80092c4 <_dtoa_r+0x744>
 8009414:	9b08      	ldr	r3, [sp, #32]
 8009416:	1e5c      	subs	r4, r3, #1
 8009418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800941a:	42a3      	cmp	r3, r4
 800941c:	bfb7      	itett	lt
 800941e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009420:	1b1c      	subge	r4, r3, r4
 8009422:	1ae2      	sublt	r2, r4, r3
 8009424:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009426:	bfbe      	ittt	lt
 8009428:	940a      	strlt	r4, [sp, #40]	; 0x28
 800942a:	189b      	addlt	r3, r3, r2
 800942c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800942e:	9b08      	ldr	r3, [sp, #32]
 8009430:	bfb8      	it	lt
 8009432:	2400      	movlt	r4, #0
 8009434:	2b00      	cmp	r3, #0
 8009436:	bfbb      	ittet	lt
 8009438:	9b06      	ldrlt	r3, [sp, #24]
 800943a:	9a08      	ldrlt	r2, [sp, #32]
 800943c:	9f06      	ldrge	r7, [sp, #24]
 800943e:	1a9f      	sublt	r7, r3, r2
 8009440:	bfac      	ite	ge
 8009442:	9b08      	ldrge	r3, [sp, #32]
 8009444:	2300      	movlt	r3, #0
 8009446:	e73f      	b.n	80092c8 <_dtoa_r+0x748>
 8009448:	3fe00000 	.word	0x3fe00000
 800944c:	40240000 	.word	0x40240000
 8009450:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009452:	9f06      	ldr	r7, [sp, #24]
 8009454:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009456:	e742      	b.n	80092de <_dtoa_r+0x75e>
 8009458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945a:	e76b      	b.n	8009334 <_dtoa_r+0x7b4>
 800945c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800945e:	2b01      	cmp	r3, #1
 8009460:	dc19      	bgt.n	8009496 <_dtoa_r+0x916>
 8009462:	9b04      	ldr	r3, [sp, #16]
 8009464:	b9bb      	cbnz	r3, 8009496 <_dtoa_r+0x916>
 8009466:	9b05      	ldr	r3, [sp, #20]
 8009468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800946c:	b99b      	cbnz	r3, 8009496 <_dtoa_r+0x916>
 800946e:	9b05      	ldr	r3, [sp, #20]
 8009470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009474:	0d1b      	lsrs	r3, r3, #20
 8009476:	051b      	lsls	r3, r3, #20
 8009478:	b183      	cbz	r3, 800949c <_dtoa_r+0x91c>
 800947a:	f04f 0801 	mov.w	r8, #1
 800947e:	9b06      	ldr	r3, [sp, #24]
 8009480:	3301      	adds	r3, #1
 8009482:	9306      	str	r3, [sp, #24]
 8009484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009486:	3301      	adds	r3, #1
 8009488:	9309      	str	r3, [sp, #36]	; 0x24
 800948a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800948c:	2b00      	cmp	r3, #0
 800948e:	f47f af6a 	bne.w	8009366 <_dtoa_r+0x7e6>
 8009492:	2001      	movs	r0, #1
 8009494:	e76f      	b.n	8009376 <_dtoa_r+0x7f6>
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	e7f6      	b.n	800948a <_dtoa_r+0x90a>
 800949c:	4698      	mov	r8, r3
 800949e:	e7f4      	b.n	800948a <_dtoa_r+0x90a>
 80094a0:	f43f af7d 	beq.w	800939e <_dtoa_r+0x81e>
 80094a4:	4618      	mov	r0, r3
 80094a6:	301c      	adds	r0, #28
 80094a8:	e772      	b.n	8009390 <_dtoa_r+0x810>
 80094aa:	9b08      	ldr	r3, [sp, #32]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	dc36      	bgt.n	800951e <_dtoa_r+0x99e>
 80094b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	dd33      	ble.n	800951e <_dtoa_r+0x99e>
 80094b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094ba:	f1b9 0f00 	cmp.w	r9, #0
 80094be:	d10d      	bne.n	80094dc <_dtoa_r+0x95c>
 80094c0:	4621      	mov	r1, r4
 80094c2:	464b      	mov	r3, r9
 80094c4:	2205      	movs	r2, #5
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 f9d2 	bl	8009870 <__multadd>
 80094cc:	4601      	mov	r1, r0
 80094ce:	4604      	mov	r4, r0
 80094d0:	4658      	mov	r0, fp
 80094d2:	f000 fbe9 	bl	8009ca8 <__mcmp>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f73f adb8 	bgt.w	800904c <_dtoa_r+0x4cc>
 80094dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094de:	9f03      	ldr	r7, [sp, #12]
 80094e0:	ea6f 0a03 	mvn.w	sl, r3
 80094e4:	f04f 0800 	mov.w	r8, #0
 80094e8:	4621      	mov	r1, r4
 80094ea:	4628      	mov	r0, r5
 80094ec:	f000 f99e 	bl	800982c <_Bfree>
 80094f0:	2e00      	cmp	r6, #0
 80094f2:	f43f aea7 	beq.w	8009244 <_dtoa_r+0x6c4>
 80094f6:	f1b8 0f00 	cmp.w	r8, #0
 80094fa:	d005      	beq.n	8009508 <_dtoa_r+0x988>
 80094fc:	45b0      	cmp	r8, r6
 80094fe:	d003      	beq.n	8009508 <_dtoa_r+0x988>
 8009500:	4641      	mov	r1, r8
 8009502:	4628      	mov	r0, r5
 8009504:	f000 f992 	bl	800982c <_Bfree>
 8009508:	4631      	mov	r1, r6
 800950a:	4628      	mov	r0, r5
 800950c:	f000 f98e 	bl	800982c <_Bfree>
 8009510:	e698      	b.n	8009244 <_dtoa_r+0x6c4>
 8009512:	2400      	movs	r4, #0
 8009514:	4626      	mov	r6, r4
 8009516:	e7e1      	b.n	80094dc <_dtoa_r+0x95c>
 8009518:	46c2      	mov	sl, r8
 800951a:	4626      	mov	r6, r4
 800951c:	e596      	b.n	800904c <_dtoa_r+0x4cc>
 800951e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 80fd 	beq.w	8009724 <_dtoa_r+0xba4>
 800952a:	2f00      	cmp	r7, #0
 800952c:	dd05      	ble.n	800953a <_dtoa_r+0x9ba>
 800952e:	4631      	mov	r1, r6
 8009530:	463a      	mov	r2, r7
 8009532:	4628      	mov	r0, r5
 8009534:	f000 fb48 	bl	8009bc8 <__lshift>
 8009538:	4606      	mov	r6, r0
 800953a:	f1b8 0f00 	cmp.w	r8, #0
 800953e:	d05c      	beq.n	80095fa <_dtoa_r+0xa7a>
 8009540:	4628      	mov	r0, r5
 8009542:	6871      	ldr	r1, [r6, #4]
 8009544:	f000 f932 	bl	80097ac <_Balloc>
 8009548:	4607      	mov	r7, r0
 800954a:	b928      	cbnz	r0, 8009558 <_dtoa_r+0x9d8>
 800954c:	4602      	mov	r2, r0
 800954e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009552:	4b7f      	ldr	r3, [pc, #508]	; (8009750 <_dtoa_r+0xbd0>)
 8009554:	f7ff bb28 	b.w	8008ba8 <_dtoa_r+0x28>
 8009558:	6932      	ldr	r2, [r6, #16]
 800955a:	f106 010c 	add.w	r1, r6, #12
 800955e:	3202      	adds	r2, #2
 8009560:	0092      	lsls	r2, r2, #2
 8009562:	300c      	adds	r0, #12
 8009564:	f000 f914 	bl	8009790 <memcpy>
 8009568:	2201      	movs	r2, #1
 800956a:	4639      	mov	r1, r7
 800956c:	4628      	mov	r0, r5
 800956e:	f000 fb2b 	bl	8009bc8 <__lshift>
 8009572:	46b0      	mov	r8, r6
 8009574:	4606      	mov	r6, r0
 8009576:	9b03      	ldr	r3, [sp, #12]
 8009578:	3301      	adds	r3, #1
 800957a:	9308      	str	r3, [sp, #32]
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	444b      	add	r3, r9
 8009580:	930a      	str	r3, [sp, #40]	; 0x28
 8009582:	9b04      	ldr	r3, [sp, #16]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	9309      	str	r3, [sp, #36]	; 0x24
 800958a:	9b08      	ldr	r3, [sp, #32]
 800958c:	4621      	mov	r1, r4
 800958e:	3b01      	subs	r3, #1
 8009590:	4658      	mov	r0, fp
 8009592:	9304      	str	r3, [sp, #16]
 8009594:	f7ff fa68 	bl	8008a68 <quorem>
 8009598:	4603      	mov	r3, r0
 800959a:	4641      	mov	r1, r8
 800959c:	3330      	adds	r3, #48	; 0x30
 800959e:	9006      	str	r0, [sp, #24]
 80095a0:	4658      	mov	r0, fp
 80095a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80095a4:	f000 fb80 	bl	8009ca8 <__mcmp>
 80095a8:	4632      	mov	r2, r6
 80095aa:	4681      	mov	r9, r0
 80095ac:	4621      	mov	r1, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 fb96 	bl	8009ce0 <__mdiff>
 80095b4:	68c2      	ldr	r2, [r0, #12]
 80095b6:	4607      	mov	r7, r0
 80095b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ba:	bb02      	cbnz	r2, 80095fe <_dtoa_r+0xa7e>
 80095bc:	4601      	mov	r1, r0
 80095be:	4658      	mov	r0, fp
 80095c0:	f000 fb72 	bl	8009ca8 <__mcmp>
 80095c4:	4602      	mov	r2, r0
 80095c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c8:	4639      	mov	r1, r7
 80095ca:	4628      	mov	r0, r5
 80095cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80095d0:	f000 f92c 	bl	800982c <_Bfree>
 80095d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095d8:	9f08      	ldr	r7, [sp, #32]
 80095da:	ea43 0102 	orr.w	r1, r3, r2
 80095de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e0:	430b      	orrs	r3, r1
 80095e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e4:	d10d      	bne.n	8009602 <_dtoa_r+0xa82>
 80095e6:	2b39      	cmp	r3, #57	; 0x39
 80095e8:	d029      	beq.n	800963e <_dtoa_r+0xabe>
 80095ea:	f1b9 0f00 	cmp.w	r9, #0
 80095ee:	dd01      	ble.n	80095f4 <_dtoa_r+0xa74>
 80095f0:	9b06      	ldr	r3, [sp, #24]
 80095f2:	3331      	adds	r3, #49	; 0x31
 80095f4:	9a04      	ldr	r2, [sp, #16]
 80095f6:	7013      	strb	r3, [r2, #0]
 80095f8:	e776      	b.n	80094e8 <_dtoa_r+0x968>
 80095fa:	4630      	mov	r0, r6
 80095fc:	e7b9      	b.n	8009572 <_dtoa_r+0x9f2>
 80095fe:	2201      	movs	r2, #1
 8009600:	e7e2      	b.n	80095c8 <_dtoa_r+0xa48>
 8009602:	f1b9 0f00 	cmp.w	r9, #0
 8009606:	db06      	blt.n	8009616 <_dtoa_r+0xa96>
 8009608:	9922      	ldr	r1, [sp, #136]	; 0x88
 800960a:	ea41 0909 	orr.w	r9, r1, r9
 800960e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009610:	ea59 0101 	orrs.w	r1, r9, r1
 8009614:	d120      	bne.n	8009658 <_dtoa_r+0xad8>
 8009616:	2a00      	cmp	r2, #0
 8009618:	ddec      	ble.n	80095f4 <_dtoa_r+0xa74>
 800961a:	4659      	mov	r1, fp
 800961c:	2201      	movs	r2, #1
 800961e:	4628      	mov	r0, r5
 8009620:	9308      	str	r3, [sp, #32]
 8009622:	f000 fad1 	bl	8009bc8 <__lshift>
 8009626:	4621      	mov	r1, r4
 8009628:	4683      	mov	fp, r0
 800962a:	f000 fb3d 	bl	8009ca8 <__mcmp>
 800962e:	2800      	cmp	r0, #0
 8009630:	9b08      	ldr	r3, [sp, #32]
 8009632:	dc02      	bgt.n	800963a <_dtoa_r+0xaba>
 8009634:	d1de      	bne.n	80095f4 <_dtoa_r+0xa74>
 8009636:	07da      	lsls	r2, r3, #31
 8009638:	d5dc      	bpl.n	80095f4 <_dtoa_r+0xa74>
 800963a:	2b39      	cmp	r3, #57	; 0x39
 800963c:	d1d8      	bne.n	80095f0 <_dtoa_r+0xa70>
 800963e:	2339      	movs	r3, #57	; 0x39
 8009640:	9a04      	ldr	r2, [sp, #16]
 8009642:	7013      	strb	r3, [r2, #0]
 8009644:	463b      	mov	r3, r7
 8009646:	461f      	mov	r7, r3
 8009648:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800964c:	3b01      	subs	r3, #1
 800964e:	2a39      	cmp	r2, #57	; 0x39
 8009650:	d050      	beq.n	80096f4 <_dtoa_r+0xb74>
 8009652:	3201      	adds	r2, #1
 8009654:	701a      	strb	r2, [r3, #0]
 8009656:	e747      	b.n	80094e8 <_dtoa_r+0x968>
 8009658:	2a00      	cmp	r2, #0
 800965a:	dd03      	ble.n	8009664 <_dtoa_r+0xae4>
 800965c:	2b39      	cmp	r3, #57	; 0x39
 800965e:	d0ee      	beq.n	800963e <_dtoa_r+0xabe>
 8009660:	3301      	adds	r3, #1
 8009662:	e7c7      	b.n	80095f4 <_dtoa_r+0xa74>
 8009664:	9a08      	ldr	r2, [sp, #32]
 8009666:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009668:	f802 3c01 	strb.w	r3, [r2, #-1]
 800966c:	428a      	cmp	r2, r1
 800966e:	d02a      	beq.n	80096c6 <_dtoa_r+0xb46>
 8009670:	4659      	mov	r1, fp
 8009672:	2300      	movs	r3, #0
 8009674:	220a      	movs	r2, #10
 8009676:	4628      	mov	r0, r5
 8009678:	f000 f8fa 	bl	8009870 <__multadd>
 800967c:	45b0      	cmp	r8, r6
 800967e:	4683      	mov	fp, r0
 8009680:	f04f 0300 	mov.w	r3, #0
 8009684:	f04f 020a 	mov.w	r2, #10
 8009688:	4641      	mov	r1, r8
 800968a:	4628      	mov	r0, r5
 800968c:	d107      	bne.n	800969e <_dtoa_r+0xb1e>
 800968e:	f000 f8ef 	bl	8009870 <__multadd>
 8009692:	4680      	mov	r8, r0
 8009694:	4606      	mov	r6, r0
 8009696:	9b08      	ldr	r3, [sp, #32]
 8009698:	3301      	adds	r3, #1
 800969a:	9308      	str	r3, [sp, #32]
 800969c:	e775      	b.n	800958a <_dtoa_r+0xa0a>
 800969e:	f000 f8e7 	bl	8009870 <__multadd>
 80096a2:	4631      	mov	r1, r6
 80096a4:	4680      	mov	r8, r0
 80096a6:	2300      	movs	r3, #0
 80096a8:	220a      	movs	r2, #10
 80096aa:	4628      	mov	r0, r5
 80096ac:	f000 f8e0 	bl	8009870 <__multadd>
 80096b0:	4606      	mov	r6, r0
 80096b2:	e7f0      	b.n	8009696 <_dtoa_r+0xb16>
 80096b4:	f1b9 0f00 	cmp.w	r9, #0
 80096b8:	bfcc      	ite	gt
 80096ba:	464f      	movgt	r7, r9
 80096bc:	2701      	movle	r7, #1
 80096be:	f04f 0800 	mov.w	r8, #0
 80096c2:	9a03      	ldr	r2, [sp, #12]
 80096c4:	4417      	add	r7, r2
 80096c6:	4659      	mov	r1, fp
 80096c8:	2201      	movs	r2, #1
 80096ca:	4628      	mov	r0, r5
 80096cc:	9308      	str	r3, [sp, #32]
 80096ce:	f000 fa7b 	bl	8009bc8 <__lshift>
 80096d2:	4621      	mov	r1, r4
 80096d4:	4683      	mov	fp, r0
 80096d6:	f000 fae7 	bl	8009ca8 <__mcmp>
 80096da:	2800      	cmp	r0, #0
 80096dc:	dcb2      	bgt.n	8009644 <_dtoa_r+0xac4>
 80096de:	d102      	bne.n	80096e6 <_dtoa_r+0xb66>
 80096e0:	9b08      	ldr	r3, [sp, #32]
 80096e2:	07db      	lsls	r3, r3, #31
 80096e4:	d4ae      	bmi.n	8009644 <_dtoa_r+0xac4>
 80096e6:	463b      	mov	r3, r7
 80096e8:	461f      	mov	r7, r3
 80096ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096ee:	2a30      	cmp	r2, #48	; 0x30
 80096f0:	d0fa      	beq.n	80096e8 <_dtoa_r+0xb68>
 80096f2:	e6f9      	b.n	80094e8 <_dtoa_r+0x968>
 80096f4:	9a03      	ldr	r2, [sp, #12]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d1a5      	bne.n	8009646 <_dtoa_r+0xac6>
 80096fa:	2331      	movs	r3, #49	; 0x31
 80096fc:	f10a 0a01 	add.w	sl, sl, #1
 8009700:	e779      	b.n	80095f6 <_dtoa_r+0xa76>
 8009702:	4b14      	ldr	r3, [pc, #80]	; (8009754 <_dtoa_r+0xbd4>)
 8009704:	f7ff baa8 	b.w	8008c58 <_dtoa_r+0xd8>
 8009708:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800970a:	2b00      	cmp	r3, #0
 800970c:	f47f aa81 	bne.w	8008c12 <_dtoa_r+0x92>
 8009710:	4b11      	ldr	r3, [pc, #68]	; (8009758 <_dtoa_r+0xbd8>)
 8009712:	f7ff baa1 	b.w	8008c58 <_dtoa_r+0xd8>
 8009716:	f1b9 0f00 	cmp.w	r9, #0
 800971a:	dc03      	bgt.n	8009724 <_dtoa_r+0xba4>
 800971c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800971e:	2b02      	cmp	r3, #2
 8009720:	f73f aecb 	bgt.w	80094ba <_dtoa_r+0x93a>
 8009724:	9f03      	ldr	r7, [sp, #12]
 8009726:	4621      	mov	r1, r4
 8009728:	4658      	mov	r0, fp
 800972a:	f7ff f99d 	bl	8008a68 <quorem>
 800972e:	9a03      	ldr	r2, [sp, #12]
 8009730:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009734:	f807 3b01 	strb.w	r3, [r7], #1
 8009738:	1aba      	subs	r2, r7, r2
 800973a:	4591      	cmp	r9, r2
 800973c:	ddba      	ble.n	80096b4 <_dtoa_r+0xb34>
 800973e:	4659      	mov	r1, fp
 8009740:	2300      	movs	r3, #0
 8009742:	220a      	movs	r2, #10
 8009744:	4628      	mov	r0, r5
 8009746:	f000 f893 	bl	8009870 <__multadd>
 800974a:	4683      	mov	fp, r0
 800974c:	e7eb      	b.n	8009726 <_dtoa_r+0xba6>
 800974e:	bf00      	nop
 8009750:	0800bf33 	.word	0x0800bf33
 8009754:	0800be90 	.word	0x0800be90
 8009758:	0800beb4 	.word	0x0800beb4

0800975c <_localeconv_r>:
 800975c:	4800      	ldr	r0, [pc, #0]	; (8009760 <_localeconv_r+0x4>)
 800975e:	4770      	bx	lr
 8009760:	20000178 	.word	0x20000178

08009764 <malloc>:
 8009764:	4b02      	ldr	r3, [pc, #8]	; (8009770 <malloc+0xc>)
 8009766:	4601      	mov	r1, r0
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	f000 bc1d 	b.w	8009fa8 <_malloc_r>
 800976e:	bf00      	nop
 8009770:	20000024 	.word	0x20000024

08009774 <memchr>:
 8009774:	4603      	mov	r3, r0
 8009776:	b510      	push	{r4, lr}
 8009778:	b2c9      	uxtb	r1, r1
 800977a:	4402      	add	r2, r0
 800977c:	4293      	cmp	r3, r2
 800977e:	4618      	mov	r0, r3
 8009780:	d101      	bne.n	8009786 <memchr+0x12>
 8009782:	2000      	movs	r0, #0
 8009784:	e003      	b.n	800978e <memchr+0x1a>
 8009786:	7804      	ldrb	r4, [r0, #0]
 8009788:	3301      	adds	r3, #1
 800978a:	428c      	cmp	r4, r1
 800978c:	d1f6      	bne.n	800977c <memchr+0x8>
 800978e:	bd10      	pop	{r4, pc}

08009790 <memcpy>:
 8009790:	440a      	add	r2, r1
 8009792:	4291      	cmp	r1, r2
 8009794:	f100 33ff 	add.w	r3, r0, #4294967295
 8009798:	d100      	bne.n	800979c <memcpy+0xc>
 800979a:	4770      	bx	lr
 800979c:	b510      	push	{r4, lr}
 800979e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097a2:	4291      	cmp	r1, r2
 80097a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097a8:	d1f9      	bne.n	800979e <memcpy+0xe>
 80097aa:	bd10      	pop	{r4, pc}

080097ac <_Balloc>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097b0:	4604      	mov	r4, r0
 80097b2:	460d      	mov	r5, r1
 80097b4:	b976      	cbnz	r6, 80097d4 <_Balloc+0x28>
 80097b6:	2010      	movs	r0, #16
 80097b8:	f7ff ffd4 	bl	8009764 <malloc>
 80097bc:	4602      	mov	r2, r0
 80097be:	6260      	str	r0, [r4, #36]	; 0x24
 80097c0:	b920      	cbnz	r0, 80097cc <_Balloc+0x20>
 80097c2:	2166      	movs	r1, #102	; 0x66
 80097c4:	4b17      	ldr	r3, [pc, #92]	; (8009824 <_Balloc+0x78>)
 80097c6:	4818      	ldr	r0, [pc, #96]	; (8009828 <_Balloc+0x7c>)
 80097c8:	f000 fdce 	bl	800a368 <__assert_func>
 80097cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097d0:	6006      	str	r6, [r0, #0]
 80097d2:	60c6      	str	r6, [r0, #12]
 80097d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097d6:	68f3      	ldr	r3, [r6, #12]
 80097d8:	b183      	cbz	r3, 80097fc <_Balloc+0x50>
 80097da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097e2:	b9b8      	cbnz	r0, 8009814 <_Balloc+0x68>
 80097e4:	2101      	movs	r1, #1
 80097e6:	fa01 f605 	lsl.w	r6, r1, r5
 80097ea:	1d72      	adds	r2, r6, #5
 80097ec:	4620      	mov	r0, r4
 80097ee:	0092      	lsls	r2, r2, #2
 80097f0:	f000 fb5e 	bl	8009eb0 <_calloc_r>
 80097f4:	b160      	cbz	r0, 8009810 <_Balloc+0x64>
 80097f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097fa:	e00e      	b.n	800981a <_Balloc+0x6e>
 80097fc:	2221      	movs	r2, #33	; 0x21
 80097fe:	2104      	movs	r1, #4
 8009800:	4620      	mov	r0, r4
 8009802:	f000 fb55 	bl	8009eb0 <_calloc_r>
 8009806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009808:	60f0      	str	r0, [r6, #12]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1e4      	bne.n	80097da <_Balloc+0x2e>
 8009810:	2000      	movs	r0, #0
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	6802      	ldr	r2, [r0, #0]
 8009816:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800981a:	2300      	movs	r3, #0
 800981c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009820:	e7f7      	b.n	8009812 <_Balloc+0x66>
 8009822:	bf00      	nop
 8009824:	0800bec1 	.word	0x0800bec1
 8009828:	0800bf44 	.word	0x0800bf44

0800982c <_Bfree>:
 800982c:	b570      	push	{r4, r5, r6, lr}
 800982e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009830:	4605      	mov	r5, r0
 8009832:	460c      	mov	r4, r1
 8009834:	b976      	cbnz	r6, 8009854 <_Bfree+0x28>
 8009836:	2010      	movs	r0, #16
 8009838:	f7ff ff94 	bl	8009764 <malloc>
 800983c:	4602      	mov	r2, r0
 800983e:	6268      	str	r0, [r5, #36]	; 0x24
 8009840:	b920      	cbnz	r0, 800984c <_Bfree+0x20>
 8009842:	218a      	movs	r1, #138	; 0x8a
 8009844:	4b08      	ldr	r3, [pc, #32]	; (8009868 <_Bfree+0x3c>)
 8009846:	4809      	ldr	r0, [pc, #36]	; (800986c <_Bfree+0x40>)
 8009848:	f000 fd8e 	bl	800a368 <__assert_func>
 800984c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009850:	6006      	str	r6, [r0, #0]
 8009852:	60c6      	str	r6, [r0, #12]
 8009854:	b13c      	cbz	r4, 8009866 <_Bfree+0x3a>
 8009856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009858:	6862      	ldr	r2, [r4, #4]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009860:	6021      	str	r1, [r4, #0]
 8009862:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	0800bec1 	.word	0x0800bec1
 800986c:	0800bf44 	.word	0x0800bf44

08009870 <__multadd>:
 8009870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009874:	4607      	mov	r7, r0
 8009876:	460c      	mov	r4, r1
 8009878:	461e      	mov	r6, r3
 800987a:	2000      	movs	r0, #0
 800987c:	690d      	ldr	r5, [r1, #16]
 800987e:	f101 0c14 	add.w	ip, r1, #20
 8009882:	f8dc 3000 	ldr.w	r3, [ip]
 8009886:	3001      	adds	r0, #1
 8009888:	b299      	uxth	r1, r3
 800988a:	fb02 6101 	mla	r1, r2, r1, r6
 800988e:	0c1e      	lsrs	r6, r3, #16
 8009890:	0c0b      	lsrs	r3, r1, #16
 8009892:	fb02 3306 	mla	r3, r2, r6, r3
 8009896:	b289      	uxth	r1, r1
 8009898:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800989c:	4285      	cmp	r5, r0
 800989e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098a2:	f84c 1b04 	str.w	r1, [ip], #4
 80098a6:	dcec      	bgt.n	8009882 <__multadd+0x12>
 80098a8:	b30e      	cbz	r6, 80098ee <__multadd+0x7e>
 80098aa:	68a3      	ldr	r3, [r4, #8]
 80098ac:	42ab      	cmp	r3, r5
 80098ae:	dc19      	bgt.n	80098e4 <__multadd+0x74>
 80098b0:	6861      	ldr	r1, [r4, #4]
 80098b2:	4638      	mov	r0, r7
 80098b4:	3101      	adds	r1, #1
 80098b6:	f7ff ff79 	bl	80097ac <_Balloc>
 80098ba:	4680      	mov	r8, r0
 80098bc:	b928      	cbnz	r0, 80098ca <__multadd+0x5a>
 80098be:	4602      	mov	r2, r0
 80098c0:	21b5      	movs	r1, #181	; 0xb5
 80098c2:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <__multadd+0x84>)
 80098c4:	480c      	ldr	r0, [pc, #48]	; (80098f8 <__multadd+0x88>)
 80098c6:	f000 fd4f 	bl	800a368 <__assert_func>
 80098ca:	6922      	ldr	r2, [r4, #16]
 80098cc:	f104 010c 	add.w	r1, r4, #12
 80098d0:	3202      	adds	r2, #2
 80098d2:	0092      	lsls	r2, r2, #2
 80098d4:	300c      	adds	r0, #12
 80098d6:	f7ff ff5b 	bl	8009790 <memcpy>
 80098da:	4621      	mov	r1, r4
 80098dc:	4638      	mov	r0, r7
 80098de:	f7ff ffa5 	bl	800982c <_Bfree>
 80098e2:	4644      	mov	r4, r8
 80098e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098e8:	3501      	adds	r5, #1
 80098ea:	615e      	str	r6, [r3, #20]
 80098ec:	6125      	str	r5, [r4, #16]
 80098ee:	4620      	mov	r0, r4
 80098f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f4:	0800bf33 	.word	0x0800bf33
 80098f8:	0800bf44 	.word	0x0800bf44

080098fc <__hi0bits>:
 80098fc:	0c02      	lsrs	r2, r0, #16
 80098fe:	0412      	lsls	r2, r2, #16
 8009900:	4603      	mov	r3, r0
 8009902:	b9ca      	cbnz	r2, 8009938 <__hi0bits+0x3c>
 8009904:	0403      	lsls	r3, r0, #16
 8009906:	2010      	movs	r0, #16
 8009908:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800990c:	bf04      	itt	eq
 800990e:	021b      	lsleq	r3, r3, #8
 8009910:	3008      	addeq	r0, #8
 8009912:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009916:	bf04      	itt	eq
 8009918:	011b      	lsleq	r3, r3, #4
 800991a:	3004      	addeq	r0, #4
 800991c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009920:	bf04      	itt	eq
 8009922:	009b      	lsleq	r3, r3, #2
 8009924:	3002      	addeq	r0, #2
 8009926:	2b00      	cmp	r3, #0
 8009928:	db05      	blt.n	8009936 <__hi0bits+0x3a>
 800992a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800992e:	f100 0001 	add.w	r0, r0, #1
 8009932:	bf08      	it	eq
 8009934:	2020      	moveq	r0, #32
 8009936:	4770      	bx	lr
 8009938:	2000      	movs	r0, #0
 800993a:	e7e5      	b.n	8009908 <__hi0bits+0xc>

0800993c <__lo0bits>:
 800993c:	6803      	ldr	r3, [r0, #0]
 800993e:	4602      	mov	r2, r0
 8009940:	f013 0007 	ands.w	r0, r3, #7
 8009944:	d00b      	beq.n	800995e <__lo0bits+0x22>
 8009946:	07d9      	lsls	r1, r3, #31
 8009948:	d421      	bmi.n	800998e <__lo0bits+0x52>
 800994a:	0798      	lsls	r0, r3, #30
 800994c:	bf49      	itett	mi
 800994e:	085b      	lsrmi	r3, r3, #1
 8009950:	089b      	lsrpl	r3, r3, #2
 8009952:	2001      	movmi	r0, #1
 8009954:	6013      	strmi	r3, [r2, #0]
 8009956:	bf5c      	itt	pl
 8009958:	2002      	movpl	r0, #2
 800995a:	6013      	strpl	r3, [r2, #0]
 800995c:	4770      	bx	lr
 800995e:	b299      	uxth	r1, r3
 8009960:	b909      	cbnz	r1, 8009966 <__lo0bits+0x2a>
 8009962:	2010      	movs	r0, #16
 8009964:	0c1b      	lsrs	r3, r3, #16
 8009966:	b2d9      	uxtb	r1, r3
 8009968:	b909      	cbnz	r1, 800996e <__lo0bits+0x32>
 800996a:	3008      	adds	r0, #8
 800996c:	0a1b      	lsrs	r3, r3, #8
 800996e:	0719      	lsls	r1, r3, #28
 8009970:	bf04      	itt	eq
 8009972:	091b      	lsreq	r3, r3, #4
 8009974:	3004      	addeq	r0, #4
 8009976:	0799      	lsls	r1, r3, #30
 8009978:	bf04      	itt	eq
 800997a:	089b      	lsreq	r3, r3, #2
 800997c:	3002      	addeq	r0, #2
 800997e:	07d9      	lsls	r1, r3, #31
 8009980:	d403      	bmi.n	800998a <__lo0bits+0x4e>
 8009982:	085b      	lsrs	r3, r3, #1
 8009984:	f100 0001 	add.w	r0, r0, #1
 8009988:	d003      	beq.n	8009992 <__lo0bits+0x56>
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	4770      	bx	lr
 800998e:	2000      	movs	r0, #0
 8009990:	4770      	bx	lr
 8009992:	2020      	movs	r0, #32
 8009994:	4770      	bx	lr
	...

08009998 <__i2b>:
 8009998:	b510      	push	{r4, lr}
 800999a:	460c      	mov	r4, r1
 800999c:	2101      	movs	r1, #1
 800999e:	f7ff ff05 	bl	80097ac <_Balloc>
 80099a2:	4602      	mov	r2, r0
 80099a4:	b928      	cbnz	r0, 80099b2 <__i2b+0x1a>
 80099a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099aa:	4b04      	ldr	r3, [pc, #16]	; (80099bc <__i2b+0x24>)
 80099ac:	4804      	ldr	r0, [pc, #16]	; (80099c0 <__i2b+0x28>)
 80099ae:	f000 fcdb 	bl	800a368 <__assert_func>
 80099b2:	2301      	movs	r3, #1
 80099b4:	6144      	str	r4, [r0, #20]
 80099b6:	6103      	str	r3, [r0, #16]
 80099b8:	bd10      	pop	{r4, pc}
 80099ba:	bf00      	nop
 80099bc:	0800bf33 	.word	0x0800bf33
 80099c0:	0800bf44 	.word	0x0800bf44

080099c4 <__multiply>:
 80099c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c8:	4691      	mov	r9, r2
 80099ca:	690a      	ldr	r2, [r1, #16]
 80099cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099d0:	460c      	mov	r4, r1
 80099d2:	429a      	cmp	r2, r3
 80099d4:	bfbe      	ittt	lt
 80099d6:	460b      	movlt	r3, r1
 80099d8:	464c      	movlt	r4, r9
 80099da:	4699      	movlt	r9, r3
 80099dc:	6927      	ldr	r7, [r4, #16]
 80099de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80099e2:	68a3      	ldr	r3, [r4, #8]
 80099e4:	6861      	ldr	r1, [r4, #4]
 80099e6:	eb07 060a 	add.w	r6, r7, sl
 80099ea:	42b3      	cmp	r3, r6
 80099ec:	b085      	sub	sp, #20
 80099ee:	bfb8      	it	lt
 80099f0:	3101      	addlt	r1, #1
 80099f2:	f7ff fedb 	bl	80097ac <_Balloc>
 80099f6:	b930      	cbnz	r0, 8009a06 <__multiply+0x42>
 80099f8:	4602      	mov	r2, r0
 80099fa:	f240 115d 	movw	r1, #349	; 0x15d
 80099fe:	4b43      	ldr	r3, [pc, #268]	; (8009b0c <__multiply+0x148>)
 8009a00:	4843      	ldr	r0, [pc, #268]	; (8009b10 <__multiply+0x14c>)
 8009a02:	f000 fcb1 	bl	800a368 <__assert_func>
 8009a06:	f100 0514 	add.w	r5, r0, #20
 8009a0a:	462b      	mov	r3, r5
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a12:	4543      	cmp	r3, r8
 8009a14:	d321      	bcc.n	8009a5a <__multiply+0x96>
 8009a16:	f104 0314 	add.w	r3, r4, #20
 8009a1a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a1e:	f109 0314 	add.w	r3, r9, #20
 8009a22:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a26:	9202      	str	r2, [sp, #8]
 8009a28:	1b3a      	subs	r2, r7, r4
 8009a2a:	3a15      	subs	r2, #21
 8009a2c:	f022 0203 	bic.w	r2, r2, #3
 8009a30:	3204      	adds	r2, #4
 8009a32:	f104 0115 	add.w	r1, r4, #21
 8009a36:	428f      	cmp	r7, r1
 8009a38:	bf38      	it	cc
 8009a3a:	2204      	movcc	r2, #4
 8009a3c:	9201      	str	r2, [sp, #4]
 8009a3e:	9a02      	ldr	r2, [sp, #8]
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d80c      	bhi.n	8009a60 <__multiply+0x9c>
 8009a46:	2e00      	cmp	r6, #0
 8009a48:	dd03      	ble.n	8009a52 <__multiply+0x8e>
 8009a4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d059      	beq.n	8009b06 <__multiply+0x142>
 8009a52:	6106      	str	r6, [r0, #16]
 8009a54:	b005      	add	sp, #20
 8009a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5a:	f843 2b04 	str.w	r2, [r3], #4
 8009a5e:	e7d8      	b.n	8009a12 <__multiply+0x4e>
 8009a60:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a64:	f1ba 0f00 	cmp.w	sl, #0
 8009a68:	d023      	beq.n	8009ab2 <__multiply+0xee>
 8009a6a:	46a9      	mov	r9, r5
 8009a6c:	f04f 0c00 	mov.w	ip, #0
 8009a70:	f104 0e14 	add.w	lr, r4, #20
 8009a74:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a78:	f8d9 1000 	ldr.w	r1, [r9]
 8009a7c:	fa1f fb82 	uxth.w	fp, r2
 8009a80:	b289      	uxth	r1, r1
 8009a82:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a86:	4461      	add	r1, ip
 8009a88:	f8d9 c000 	ldr.w	ip, [r9]
 8009a8c:	0c12      	lsrs	r2, r2, #16
 8009a8e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009a92:	fb0a c202 	mla	r2, sl, r2, ip
 8009a96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a9a:	b289      	uxth	r1, r1
 8009a9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009aa0:	4577      	cmp	r7, lr
 8009aa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009aa6:	f849 1b04 	str.w	r1, [r9], #4
 8009aaa:	d8e3      	bhi.n	8009a74 <__multiply+0xb0>
 8009aac:	9a01      	ldr	r2, [sp, #4]
 8009aae:	f845 c002 	str.w	ip, [r5, r2]
 8009ab2:	9a03      	ldr	r2, [sp, #12]
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009aba:	f1b9 0f00 	cmp.w	r9, #0
 8009abe:	d020      	beq.n	8009b02 <__multiply+0x13e>
 8009ac0:	46ae      	mov	lr, r5
 8009ac2:	f04f 0a00 	mov.w	sl, #0
 8009ac6:	6829      	ldr	r1, [r5, #0]
 8009ac8:	f104 0c14 	add.w	ip, r4, #20
 8009acc:	f8bc b000 	ldrh.w	fp, [ip]
 8009ad0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ad4:	b289      	uxth	r1, r1
 8009ad6:	fb09 220b 	mla	r2, r9, fp, r2
 8009ada:	4492      	add	sl, r2
 8009adc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ae0:	f84e 1b04 	str.w	r1, [lr], #4
 8009ae4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ae8:	f8be 1000 	ldrh.w	r1, [lr]
 8009aec:	0c12      	lsrs	r2, r2, #16
 8009aee:	fb09 1102 	mla	r1, r9, r2, r1
 8009af2:	4567      	cmp	r7, ip
 8009af4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009af8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009afc:	d8e6      	bhi.n	8009acc <__multiply+0x108>
 8009afe:	9a01      	ldr	r2, [sp, #4]
 8009b00:	50a9      	str	r1, [r5, r2]
 8009b02:	3504      	adds	r5, #4
 8009b04:	e79b      	b.n	8009a3e <__multiply+0x7a>
 8009b06:	3e01      	subs	r6, #1
 8009b08:	e79d      	b.n	8009a46 <__multiply+0x82>
 8009b0a:	bf00      	nop
 8009b0c:	0800bf33 	.word	0x0800bf33
 8009b10:	0800bf44 	.word	0x0800bf44

08009b14 <__pow5mult>:
 8009b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b18:	4615      	mov	r5, r2
 8009b1a:	f012 0203 	ands.w	r2, r2, #3
 8009b1e:	4606      	mov	r6, r0
 8009b20:	460f      	mov	r7, r1
 8009b22:	d007      	beq.n	8009b34 <__pow5mult+0x20>
 8009b24:	4c25      	ldr	r4, [pc, #148]	; (8009bbc <__pow5mult+0xa8>)
 8009b26:	3a01      	subs	r2, #1
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b2e:	f7ff fe9f 	bl	8009870 <__multadd>
 8009b32:	4607      	mov	r7, r0
 8009b34:	10ad      	asrs	r5, r5, #2
 8009b36:	d03d      	beq.n	8009bb4 <__pow5mult+0xa0>
 8009b38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b3a:	b97c      	cbnz	r4, 8009b5c <__pow5mult+0x48>
 8009b3c:	2010      	movs	r0, #16
 8009b3e:	f7ff fe11 	bl	8009764 <malloc>
 8009b42:	4602      	mov	r2, r0
 8009b44:	6270      	str	r0, [r6, #36]	; 0x24
 8009b46:	b928      	cbnz	r0, 8009b54 <__pow5mult+0x40>
 8009b48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b4c:	4b1c      	ldr	r3, [pc, #112]	; (8009bc0 <__pow5mult+0xac>)
 8009b4e:	481d      	ldr	r0, [pc, #116]	; (8009bc4 <__pow5mult+0xb0>)
 8009b50:	f000 fc0a 	bl	800a368 <__assert_func>
 8009b54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b58:	6004      	str	r4, [r0, #0]
 8009b5a:	60c4      	str	r4, [r0, #12]
 8009b5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b64:	b94c      	cbnz	r4, 8009b7a <__pow5mult+0x66>
 8009b66:	f240 2171 	movw	r1, #625	; 0x271
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7ff ff14 	bl	8009998 <__i2b>
 8009b70:	2300      	movs	r3, #0
 8009b72:	4604      	mov	r4, r0
 8009b74:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b78:	6003      	str	r3, [r0, #0]
 8009b7a:	f04f 0900 	mov.w	r9, #0
 8009b7e:	07eb      	lsls	r3, r5, #31
 8009b80:	d50a      	bpl.n	8009b98 <__pow5mult+0x84>
 8009b82:	4639      	mov	r1, r7
 8009b84:	4622      	mov	r2, r4
 8009b86:	4630      	mov	r0, r6
 8009b88:	f7ff ff1c 	bl	80099c4 <__multiply>
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	4639      	mov	r1, r7
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7ff fe4b 	bl	800982c <_Bfree>
 8009b96:	4647      	mov	r7, r8
 8009b98:	106d      	asrs	r5, r5, #1
 8009b9a:	d00b      	beq.n	8009bb4 <__pow5mult+0xa0>
 8009b9c:	6820      	ldr	r0, [r4, #0]
 8009b9e:	b938      	cbnz	r0, 8009bb0 <__pow5mult+0x9c>
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7ff ff0d 	bl	80099c4 <__multiply>
 8009baa:	6020      	str	r0, [r4, #0]
 8009bac:	f8c0 9000 	str.w	r9, [r0]
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	e7e4      	b.n	8009b7e <__pow5mult+0x6a>
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bba:	bf00      	nop
 8009bbc:	0800c090 	.word	0x0800c090
 8009bc0:	0800bec1 	.word	0x0800bec1
 8009bc4:	0800bf44 	.word	0x0800bf44

08009bc8 <__lshift>:
 8009bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	460c      	mov	r4, r1
 8009bce:	4607      	mov	r7, r0
 8009bd0:	4691      	mov	r9, r2
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	6849      	ldr	r1, [r1, #4]
 8009bd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009be0:	f108 0601 	add.w	r6, r8, #1
 8009be4:	42b3      	cmp	r3, r6
 8009be6:	db0b      	blt.n	8009c00 <__lshift+0x38>
 8009be8:	4638      	mov	r0, r7
 8009bea:	f7ff fddf 	bl	80097ac <_Balloc>
 8009bee:	4605      	mov	r5, r0
 8009bf0:	b948      	cbnz	r0, 8009c06 <__lshift+0x3e>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009bf8:	4b29      	ldr	r3, [pc, #164]	; (8009ca0 <__lshift+0xd8>)
 8009bfa:	482a      	ldr	r0, [pc, #168]	; (8009ca4 <__lshift+0xdc>)
 8009bfc:	f000 fbb4 	bl	800a368 <__assert_func>
 8009c00:	3101      	adds	r1, #1
 8009c02:	005b      	lsls	r3, r3, #1
 8009c04:	e7ee      	b.n	8009be4 <__lshift+0x1c>
 8009c06:	2300      	movs	r3, #0
 8009c08:	f100 0114 	add.w	r1, r0, #20
 8009c0c:	f100 0210 	add.w	r2, r0, #16
 8009c10:	4618      	mov	r0, r3
 8009c12:	4553      	cmp	r3, sl
 8009c14:	db37      	blt.n	8009c86 <__lshift+0xbe>
 8009c16:	6920      	ldr	r0, [r4, #16]
 8009c18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c1c:	f104 0314 	add.w	r3, r4, #20
 8009c20:	f019 091f 	ands.w	r9, r9, #31
 8009c24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c2c:	d02f      	beq.n	8009c8e <__lshift+0xc6>
 8009c2e:	468a      	mov	sl, r1
 8009c30:	f04f 0c00 	mov.w	ip, #0
 8009c34:	f1c9 0e20 	rsb	lr, r9, #32
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	fa02 f209 	lsl.w	r2, r2, r9
 8009c3e:	ea42 020c 	orr.w	r2, r2, ip
 8009c42:	f84a 2b04 	str.w	r2, [sl], #4
 8009c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c4a:	4298      	cmp	r0, r3
 8009c4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009c50:	d8f2      	bhi.n	8009c38 <__lshift+0x70>
 8009c52:	1b03      	subs	r3, r0, r4
 8009c54:	3b15      	subs	r3, #21
 8009c56:	f023 0303 	bic.w	r3, r3, #3
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	f104 0215 	add.w	r2, r4, #21
 8009c60:	4290      	cmp	r0, r2
 8009c62:	bf38      	it	cc
 8009c64:	2304      	movcc	r3, #4
 8009c66:	f841 c003 	str.w	ip, [r1, r3]
 8009c6a:	f1bc 0f00 	cmp.w	ip, #0
 8009c6e:	d001      	beq.n	8009c74 <__lshift+0xac>
 8009c70:	f108 0602 	add.w	r6, r8, #2
 8009c74:	3e01      	subs	r6, #1
 8009c76:	4638      	mov	r0, r7
 8009c78:	4621      	mov	r1, r4
 8009c7a:	612e      	str	r6, [r5, #16]
 8009c7c:	f7ff fdd6 	bl	800982c <_Bfree>
 8009c80:	4628      	mov	r0, r5
 8009c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c86:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	e7c1      	b.n	8009c12 <__lshift+0x4a>
 8009c8e:	3904      	subs	r1, #4
 8009c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c94:	4298      	cmp	r0, r3
 8009c96:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c9a:	d8f9      	bhi.n	8009c90 <__lshift+0xc8>
 8009c9c:	e7ea      	b.n	8009c74 <__lshift+0xac>
 8009c9e:	bf00      	nop
 8009ca0:	0800bf33 	.word	0x0800bf33
 8009ca4:	0800bf44 	.word	0x0800bf44

08009ca8 <__mcmp>:
 8009ca8:	4603      	mov	r3, r0
 8009caa:	690a      	ldr	r2, [r1, #16]
 8009cac:	6900      	ldr	r0, [r0, #16]
 8009cae:	b530      	push	{r4, r5, lr}
 8009cb0:	1a80      	subs	r0, r0, r2
 8009cb2:	d10d      	bne.n	8009cd0 <__mcmp+0x28>
 8009cb4:	3314      	adds	r3, #20
 8009cb6:	3114      	adds	r1, #20
 8009cb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009cbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009cc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009cc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009cc8:	4295      	cmp	r5, r2
 8009cca:	d002      	beq.n	8009cd2 <__mcmp+0x2a>
 8009ccc:	d304      	bcc.n	8009cd8 <__mcmp+0x30>
 8009cce:	2001      	movs	r0, #1
 8009cd0:	bd30      	pop	{r4, r5, pc}
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	d3f4      	bcc.n	8009cc0 <__mcmp+0x18>
 8009cd6:	e7fb      	b.n	8009cd0 <__mcmp+0x28>
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cdc:	e7f8      	b.n	8009cd0 <__mcmp+0x28>
	...

08009ce0 <__mdiff>:
 8009ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	460d      	mov	r5, r1
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	4611      	mov	r1, r2
 8009cea:	4628      	mov	r0, r5
 8009cec:	4614      	mov	r4, r2
 8009cee:	f7ff ffdb 	bl	8009ca8 <__mcmp>
 8009cf2:	1e06      	subs	r6, r0, #0
 8009cf4:	d111      	bne.n	8009d1a <__mdiff+0x3a>
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	f7ff fd57 	bl	80097ac <_Balloc>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	b928      	cbnz	r0, 8009d0e <__mdiff+0x2e>
 8009d02:	f240 2132 	movw	r1, #562	; 0x232
 8009d06:	4b3a      	ldr	r3, [pc, #232]	; (8009df0 <__mdiff+0x110>)
 8009d08:	483a      	ldr	r0, [pc, #232]	; (8009df4 <__mdiff+0x114>)
 8009d0a:	f000 fb2d 	bl	800a368 <__assert_func>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d14:	4610      	mov	r0, r2
 8009d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1a:	bfa4      	itt	ge
 8009d1c:	4623      	movge	r3, r4
 8009d1e:	462c      	movge	r4, r5
 8009d20:	4638      	mov	r0, r7
 8009d22:	6861      	ldr	r1, [r4, #4]
 8009d24:	bfa6      	itte	ge
 8009d26:	461d      	movge	r5, r3
 8009d28:	2600      	movge	r6, #0
 8009d2a:	2601      	movlt	r6, #1
 8009d2c:	f7ff fd3e 	bl	80097ac <_Balloc>
 8009d30:	4602      	mov	r2, r0
 8009d32:	b918      	cbnz	r0, 8009d3c <__mdiff+0x5c>
 8009d34:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d38:	4b2d      	ldr	r3, [pc, #180]	; (8009df0 <__mdiff+0x110>)
 8009d3a:	e7e5      	b.n	8009d08 <__mdiff+0x28>
 8009d3c:	f102 0814 	add.w	r8, r2, #20
 8009d40:	46c2      	mov	sl, r8
 8009d42:	f04f 0c00 	mov.w	ip, #0
 8009d46:	6927      	ldr	r7, [r4, #16]
 8009d48:	60c6      	str	r6, [r0, #12]
 8009d4a:	692e      	ldr	r6, [r5, #16]
 8009d4c:	f104 0014 	add.w	r0, r4, #20
 8009d50:	f105 0914 	add.w	r9, r5, #20
 8009d54:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009d58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d5c:	3410      	adds	r4, #16
 8009d5e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009d62:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d66:	fa1f f18b 	uxth.w	r1, fp
 8009d6a:	448c      	add	ip, r1
 8009d6c:	b299      	uxth	r1, r3
 8009d6e:	0c1b      	lsrs	r3, r3, #16
 8009d70:	ebac 0101 	sub.w	r1, ip, r1
 8009d74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d78:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009d7c:	b289      	uxth	r1, r1
 8009d7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009d82:	454e      	cmp	r6, r9
 8009d84:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009d88:	f84a 3b04 	str.w	r3, [sl], #4
 8009d8c:	d8e7      	bhi.n	8009d5e <__mdiff+0x7e>
 8009d8e:	1b73      	subs	r3, r6, r5
 8009d90:	3b15      	subs	r3, #21
 8009d92:	f023 0303 	bic.w	r3, r3, #3
 8009d96:	3515      	adds	r5, #21
 8009d98:	3304      	adds	r3, #4
 8009d9a:	42ae      	cmp	r6, r5
 8009d9c:	bf38      	it	cc
 8009d9e:	2304      	movcc	r3, #4
 8009da0:	4418      	add	r0, r3
 8009da2:	4443      	add	r3, r8
 8009da4:	461e      	mov	r6, r3
 8009da6:	4605      	mov	r5, r0
 8009da8:	4575      	cmp	r5, lr
 8009daa:	d30e      	bcc.n	8009dca <__mdiff+0xea>
 8009dac:	f10e 0103 	add.w	r1, lr, #3
 8009db0:	1a09      	subs	r1, r1, r0
 8009db2:	f021 0103 	bic.w	r1, r1, #3
 8009db6:	3803      	subs	r0, #3
 8009db8:	4586      	cmp	lr, r0
 8009dba:	bf38      	it	cc
 8009dbc:	2100      	movcc	r1, #0
 8009dbe:	4419      	add	r1, r3
 8009dc0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009dc4:	b18b      	cbz	r3, 8009dea <__mdiff+0x10a>
 8009dc6:	6117      	str	r7, [r2, #16]
 8009dc8:	e7a4      	b.n	8009d14 <__mdiff+0x34>
 8009dca:	f855 8b04 	ldr.w	r8, [r5], #4
 8009dce:	fa1f f188 	uxth.w	r1, r8
 8009dd2:	4461      	add	r1, ip
 8009dd4:	140c      	asrs	r4, r1, #16
 8009dd6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009dda:	b289      	uxth	r1, r1
 8009ddc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009de0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009de4:	f846 1b04 	str.w	r1, [r6], #4
 8009de8:	e7de      	b.n	8009da8 <__mdiff+0xc8>
 8009dea:	3f01      	subs	r7, #1
 8009dec:	e7e8      	b.n	8009dc0 <__mdiff+0xe0>
 8009dee:	bf00      	nop
 8009df0:	0800bf33 	.word	0x0800bf33
 8009df4:	0800bf44 	.word	0x0800bf44

08009df8 <__d2b>:
 8009df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009e02:	4690      	mov	r8, r2
 8009e04:	461d      	mov	r5, r3
 8009e06:	f7ff fcd1 	bl	80097ac <_Balloc>
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	b930      	cbnz	r0, 8009e1c <__d2b+0x24>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	f240 310a 	movw	r1, #778	; 0x30a
 8009e14:	4b24      	ldr	r3, [pc, #144]	; (8009ea8 <__d2b+0xb0>)
 8009e16:	4825      	ldr	r0, [pc, #148]	; (8009eac <__d2b+0xb4>)
 8009e18:	f000 faa6 	bl	800a368 <__assert_func>
 8009e1c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009e20:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009e24:	bb2d      	cbnz	r5, 8009e72 <__d2b+0x7a>
 8009e26:	9301      	str	r3, [sp, #4]
 8009e28:	f1b8 0300 	subs.w	r3, r8, #0
 8009e2c:	d026      	beq.n	8009e7c <__d2b+0x84>
 8009e2e:	4668      	mov	r0, sp
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	f7ff fd83 	bl	800993c <__lo0bits>
 8009e36:	9900      	ldr	r1, [sp, #0]
 8009e38:	b1f0      	cbz	r0, 8009e78 <__d2b+0x80>
 8009e3a:	9a01      	ldr	r2, [sp, #4]
 8009e3c:	f1c0 0320 	rsb	r3, r0, #32
 8009e40:	fa02 f303 	lsl.w	r3, r2, r3
 8009e44:	430b      	orrs	r3, r1
 8009e46:	40c2      	lsrs	r2, r0
 8009e48:	6163      	str	r3, [r4, #20]
 8009e4a:	9201      	str	r2, [sp, #4]
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	bf14      	ite	ne
 8009e52:	2102      	movne	r1, #2
 8009e54:	2101      	moveq	r1, #1
 8009e56:	61a3      	str	r3, [r4, #24]
 8009e58:	6121      	str	r1, [r4, #16]
 8009e5a:	b1c5      	cbz	r5, 8009e8e <__d2b+0x96>
 8009e5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e60:	4405      	add	r5, r0
 8009e62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e66:	603d      	str	r5, [r7, #0]
 8009e68:	6030      	str	r0, [r6, #0]
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	b002      	add	sp, #8
 8009e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e76:	e7d6      	b.n	8009e26 <__d2b+0x2e>
 8009e78:	6161      	str	r1, [r4, #20]
 8009e7a:	e7e7      	b.n	8009e4c <__d2b+0x54>
 8009e7c:	a801      	add	r0, sp, #4
 8009e7e:	f7ff fd5d 	bl	800993c <__lo0bits>
 8009e82:	2101      	movs	r1, #1
 8009e84:	9b01      	ldr	r3, [sp, #4]
 8009e86:	6121      	str	r1, [r4, #16]
 8009e88:	6163      	str	r3, [r4, #20]
 8009e8a:	3020      	adds	r0, #32
 8009e8c:	e7e5      	b.n	8009e5a <__d2b+0x62>
 8009e8e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009e92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e96:	6038      	str	r0, [r7, #0]
 8009e98:	6918      	ldr	r0, [r3, #16]
 8009e9a:	f7ff fd2f 	bl	80098fc <__hi0bits>
 8009e9e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009ea2:	6031      	str	r1, [r6, #0]
 8009ea4:	e7e1      	b.n	8009e6a <__d2b+0x72>
 8009ea6:	bf00      	nop
 8009ea8:	0800bf33 	.word	0x0800bf33
 8009eac:	0800bf44 	.word	0x0800bf44

08009eb0 <_calloc_r>:
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	fba1 5402 	umull	r5, r4, r1, r2
 8009eb6:	b934      	cbnz	r4, 8009ec6 <_calloc_r+0x16>
 8009eb8:	4629      	mov	r1, r5
 8009eba:	f000 f875 	bl	8009fa8 <_malloc_r>
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	b928      	cbnz	r0, 8009ece <_calloc_r+0x1e>
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	bd70      	pop	{r4, r5, r6, pc}
 8009ec6:	220c      	movs	r2, #12
 8009ec8:	2600      	movs	r6, #0
 8009eca:	6002      	str	r2, [r0, #0]
 8009ecc:	e7f9      	b.n	8009ec2 <_calloc_r+0x12>
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	f7fe f941 	bl	8008158 <memset>
 8009ed6:	e7f4      	b.n	8009ec2 <_calloc_r+0x12>

08009ed8 <_free_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4605      	mov	r5, r0
 8009edc:	2900      	cmp	r1, #0
 8009ede:	d040      	beq.n	8009f62 <_free_r+0x8a>
 8009ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ee4:	1f0c      	subs	r4, r1, #4
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	bfb8      	it	lt
 8009eea:	18e4      	addlt	r4, r4, r3
 8009eec:	f000 fa98 	bl	800a420 <__malloc_lock>
 8009ef0:	4a1c      	ldr	r2, [pc, #112]	; (8009f64 <_free_r+0x8c>)
 8009ef2:	6813      	ldr	r3, [r2, #0]
 8009ef4:	b933      	cbnz	r3, 8009f04 <_free_r+0x2c>
 8009ef6:	6063      	str	r3, [r4, #4]
 8009ef8:	6014      	str	r4, [r2, #0]
 8009efa:	4628      	mov	r0, r5
 8009efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f00:	f000 ba94 	b.w	800a42c <__malloc_unlock>
 8009f04:	42a3      	cmp	r3, r4
 8009f06:	d908      	bls.n	8009f1a <_free_r+0x42>
 8009f08:	6820      	ldr	r0, [r4, #0]
 8009f0a:	1821      	adds	r1, r4, r0
 8009f0c:	428b      	cmp	r3, r1
 8009f0e:	bf01      	itttt	eq
 8009f10:	6819      	ldreq	r1, [r3, #0]
 8009f12:	685b      	ldreq	r3, [r3, #4]
 8009f14:	1809      	addeq	r1, r1, r0
 8009f16:	6021      	streq	r1, [r4, #0]
 8009f18:	e7ed      	b.n	8009ef6 <_free_r+0x1e>
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	b10b      	cbz	r3, 8009f24 <_free_r+0x4c>
 8009f20:	42a3      	cmp	r3, r4
 8009f22:	d9fa      	bls.n	8009f1a <_free_r+0x42>
 8009f24:	6811      	ldr	r1, [r2, #0]
 8009f26:	1850      	adds	r0, r2, r1
 8009f28:	42a0      	cmp	r0, r4
 8009f2a:	d10b      	bne.n	8009f44 <_free_r+0x6c>
 8009f2c:	6820      	ldr	r0, [r4, #0]
 8009f2e:	4401      	add	r1, r0
 8009f30:	1850      	adds	r0, r2, r1
 8009f32:	4283      	cmp	r3, r0
 8009f34:	6011      	str	r1, [r2, #0]
 8009f36:	d1e0      	bne.n	8009efa <_free_r+0x22>
 8009f38:	6818      	ldr	r0, [r3, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	4401      	add	r1, r0
 8009f3e:	6011      	str	r1, [r2, #0]
 8009f40:	6053      	str	r3, [r2, #4]
 8009f42:	e7da      	b.n	8009efa <_free_r+0x22>
 8009f44:	d902      	bls.n	8009f4c <_free_r+0x74>
 8009f46:	230c      	movs	r3, #12
 8009f48:	602b      	str	r3, [r5, #0]
 8009f4a:	e7d6      	b.n	8009efa <_free_r+0x22>
 8009f4c:	6820      	ldr	r0, [r4, #0]
 8009f4e:	1821      	adds	r1, r4, r0
 8009f50:	428b      	cmp	r3, r1
 8009f52:	bf01      	itttt	eq
 8009f54:	6819      	ldreq	r1, [r3, #0]
 8009f56:	685b      	ldreq	r3, [r3, #4]
 8009f58:	1809      	addeq	r1, r1, r0
 8009f5a:	6021      	streq	r1, [r4, #0]
 8009f5c:	6063      	str	r3, [r4, #4]
 8009f5e:	6054      	str	r4, [r2, #4]
 8009f60:	e7cb      	b.n	8009efa <_free_r+0x22>
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	200023ec 	.word	0x200023ec

08009f68 <sbrk_aligned>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	4e0e      	ldr	r6, [pc, #56]	; (8009fa4 <sbrk_aligned+0x3c>)
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	6831      	ldr	r1, [r6, #0]
 8009f70:	4605      	mov	r5, r0
 8009f72:	b911      	cbnz	r1, 8009f7a <sbrk_aligned+0x12>
 8009f74:	f000 f9e8 	bl	800a348 <_sbrk_r>
 8009f78:	6030      	str	r0, [r6, #0]
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	f000 f9e3 	bl	800a348 <_sbrk_r>
 8009f82:	1c43      	adds	r3, r0, #1
 8009f84:	d00a      	beq.n	8009f9c <sbrk_aligned+0x34>
 8009f86:	1cc4      	adds	r4, r0, #3
 8009f88:	f024 0403 	bic.w	r4, r4, #3
 8009f8c:	42a0      	cmp	r0, r4
 8009f8e:	d007      	beq.n	8009fa0 <sbrk_aligned+0x38>
 8009f90:	1a21      	subs	r1, r4, r0
 8009f92:	4628      	mov	r0, r5
 8009f94:	f000 f9d8 	bl	800a348 <_sbrk_r>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d101      	bne.n	8009fa0 <sbrk_aligned+0x38>
 8009f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	bd70      	pop	{r4, r5, r6, pc}
 8009fa4:	200023f0 	.word	0x200023f0

08009fa8 <_malloc_r>:
 8009fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fac:	1ccd      	adds	r5, r1, #3
 8009fae:	f025 0503 	bic.w	r5, r5, #3
 8009fb2:	3508      	adds	r5, #8
 8009fb4:	2d0c      	cmp	r5, #12
 8009fb6:	bf38      	it	cc
 8009fb8:	250c      	movcc	r5, #12
 8009fba:	2d00      	cmp	r5, #0
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	db01      	blt.n	8009fc4 <_malloc_r+0x1c>
 8009fc0:	42a9      	cmp	r1, r5
 8009fc2:	d905      	bls.n	8009fd0 <_malloc_r+0x28>
 8009fc4:	230c      	movs	r3, #12
 8009fc6:	2600      	movs	r6, #0
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	4630      	mov	r0, r6
 8009fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd0:	4e2e      	ldr	r6, [pc, #184]	; (800a08c <_malloc_r+0xe4>)
 8009fd2:	f000 fa25 	bl	800a420 <__malloc_lock>
 8009fd6:	6833      	ldr	r3, [r6, #0]
 8009fd8:	461c      	mov	r4, r3
 8009fda:	bb34      	cbnz	r4, 800a02a <_malloc_r+0x82>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4638      	mov	r0, r7
 8009fe0:	f7ff ffc2 	bl	8009f68 <sbrk_aligned>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	d14d      	bne.n	800a086 <_malloc_r+0xde>
 8009fea:	6834      	ldr	r4, [r6, #0]
 8009fec:	4626      	mov	r6, r4
 8009fee:	2e00      	cmp	r6, #0
 8009ff0:	d140      	bne.n	800a074 <_malloc_r+0xcc>
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	eb04 0803 	add.w	r8, r4, r3
 8009ffc:	f000 f9a4 	bl	800a348 <_sbrk_r>
 800a000:	4580      	cmp	r8, r0
 800a002:	d13a      	bne.n	800a07a <_malloc_r+0xd2>
 800a004:	6821      	ldr	r1, [r4, #0]
 800a006:	3503      	adds	r5, #3
 800a008:	1a6d      	subs	r5, r5, r1
 800a00a:	f025 0503 	bic.w	r5, r5, #3
 800a00e:	3508      	adds	r5, #8
 800a010:	2d0c      	cmp	r5, #12
 800a012:	bf38      	it	cc
 800a014:	250c      	movcc	r5, #12
 800a016:	4638      	mov	r0, r7
 800a018:	4629      	mov	r1, r5
 800a01a:	f7ff ffa5 	bl	8009f68 <sbrk_aligned>
 800a01e:	3001      	adds	r0, #1
 800a020:	d02b      	beq.n	800a07a <_malloc_r+0xd2>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	442b      	add	r3, r5
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	e00e      	b.n	800a048 <_malloc_r+0xa0>
 800a02a:	6822      	ldr	r2, [r4, #0]
 800a02c:	1b52      	subs	r2, r2, r5
 800a02e:	d41e      	bmi.n	800a06e <_malloc_r+0xc6>
 800a030:	2a0b      	cmp	r2, #11
 800a032:	d916      	bls.n	800a062 <_malloc_r+0xba>
 800a034:	1961      	adds	r1, r4, r5
 800a036:	42a3      	cmp	r3, r4
 800a038:	6025      	str	r5, [r4, #0]
 800a03a:	bf18      	it	ne
 800a03c:	6059      	strne	r1, [r3, #4]
 800a03e:	6863      	ldr	r3, [r4, #4]
 800a040:	bf08      	it	eq
 800a042:	6031      	streq	r1, [r6, #0]
 800a044:	5162      	str	r2, [r4, r5]
 800a046:	604b      	str	r3, [r1, #4]
 800a048:	4638      	mov	r0, r7
 800a04a:	f104 060b 	add.w	r6, r4, #11
 800a04e:	f000 f9ed 	bl	800a42c <__malloc_unlock>
 800a052:	f026 0607 	bic.w	r6, r6, #7
 800a056:	1d23      	adds	r3, r4, #4
 800a058:	1af2      	subs	r2, r6, r3
 800a05a:	d0b6      	beq.n	8009fca <_malloc_r+0x22>
 800a05c:	1b9b      	subs	r3, r3, r6
 800a05e:	50a3      	str	r3, [r4, r2]
 800a060:	e7b3      	b.n	8009fca <_malloc_r+0x22>
 800a062:	6862      	ldr	r2, [r4, #4]
 800a064:	42a3      	cmp	r3, r4
 800a066:	bf0c      	ite	eq
 800a068:	6032      	streq	r2, [r6, #0]
 800a06a:	605a      	strne	r2, [r3, #4]
 800a06c:	e7ec      	b.n	800a048 <_malloc_r+0xa0>
 800a06e:	4623      	mov	r3, r4
 800a070:	6864      	ldr	r4, [r4, #4]
 800a072:	e7b2      	b.n	8009fda <_malloc_r+0x32>
 800a074:	4634      	mov	r4, r6
 800a076:	6876      	ldr	r6, [r6, #4]
 800a078:	e7b9      	b.n	8009fee <_malloc_r+0x46>
 800a07a:	230c      	movs	r3, #12
 800a07c:	4638      	mov	r0, r7
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	f000 f9d4 	bl	800a42c <__malloc_unlock>
 800a084:	e7a1      	b.n	8009fca <_malloc_r+0x22>
 800a086:	6025      	str	r5, [r4, #0]
 800a088:	e7de      	b.n	800a048 <_malloc_r+0xa0>
 800a08a:	bf00      	nop
 800a08c:	200023ec 	.word	0x200023ec

0800a090 <__ssputs_r>:
 800a090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a094:	688e      	ldr	r6, [r1, #8]
 800a096:	4682      	mov	sl, r0
 800a098:	429e      	cmp	r6, r3
 800a09a:	460c      	mov	r4, r1
 800a09c:	4690      	mov	r8, r2
 800a09e:	461f      	mov	r7, r3
 800a0a0:	d838      	bhi.n	800a114 <__ssputs_r+0x84>
 800a0a2:	898a      	ldrh	r2, [r1, #12]
 800a0a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0a8:	d032      	beq.n	800a110 <__ssputs_r+0x80>
 800a0aa:	6825      	ldr	r5, [r4, #0]
 800a0ac:	6909      	ldr	r1, [r1, #16]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	eba5 0901 	sub.w	r9, r5, r1
 800a0b4:	6965      	ldr	r5, [r4, #20]
 800a0b6:	444b      	add	r3, r9
 800a0b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0c0:	106d      	asrs	r5, r5, #1
 800a0c2:	429d      	cmp	r5, r3
 800a0c4:	bf38      	it	cc
 800a0c6:	461d      	movcc	r5, r3
 800a0c8:	0553      	lsls	r3, r2, #21
 800a0ca:	d531      	bpl.n	800a130 <__ssputs_r+0xa0>
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	f7ff ff6b 	bl	8009fa8 <_malloc_r>
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	b950      	cbnz	r0, 800a0ec <__ssputs_r+0x5c>
 800a0d6:	230c      	movs	r3, #12
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	f8ca 3000 	str.w	r3, [sl]
 800a0e0:	89a3      	ldrh	r3, [r4, #12]
 800a0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0e6:	81a3      	strh	r3, [r4, #12]
 800a0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ec:	464a      	mov	r2, r9
 800a0ee:	6921      	ldr	r1, [r4, #16]
 800a0f0:	f7ff fb4e 	bl	8009790 <memcpy>
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fe:	81a3      	strh	r3, [r4, #12]
 800a100:	6126      	str	r6, [r4, #16]
 800a102:	444e      	add	r6, r9
 800a104:	6026      	str	r6, [r4, #0]
 800a106:	463e      	mov	r6, r7
 800a108:	6165      	str	r5, [r4, #20]
 800a10a:	eba5 0509 	sub.w	r5, r5, r9
 800a10e:	60a5      	str	r5, [r4, #8]
 800a110:	42be      	cmp	r6, r7
 800a112:	d900      	bls.n	800a116 <__ssputs_r+0x86>
 800a114:	463e      	mov	r6, r7
 800a116:	4632      	mov	r2, r6
 800a118:	4641      	mov	r1, r8
 800a11a:	6820      	ldr	r0, [r4, #0]
 800a11c:	f000 f966 	bl	800a3ec <memmove>
 800a120:	68a3      	ldr	r3, [r4, #8]
 800a122:	2000      	movs	r0, #0
 800a124:	1b9b      	subs	r3, r3, r6
 800a126:	60a3      	str	r3, [r4, #8]
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	4433      	add	r3, r6
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	e7db      	b.n	800a0e8 <__ssputs_r+0x58>
 800a130:	462a      	mov	r2, r5
 800a132:	f000 f981 	bl	800a438 <_realloc_r>
 800a136:	4606      	mov	r6, r0
 800a138:	2800      	cmp	r0, #0
 800a13a:	d1e1      	bne.n	800a100 <__ssputs_r+0x70>
 800a13c:	4650      	mov	r0, sl
 800a13e:	6921      	ldr	r1, [r4, #16]
 800a140:	f7ff feca 	bl	8009ed8 <_free_r>
 800a144:	e7c7      	b.n	800a0d6 <__ssputs_r+0x46>
	...

0800a148 <_svfiprintf_r>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	4698      	mov	r8, r3
 800a14e:	898b      	ldrh	r3, [r1, #12]
 800a150:	4607      	mov	r7, r0
 800a152:	061b      	lsls	r3, r3, #24
 800a154:	460d      	mov	r5, r1
 800a156:	4614      	mov	r4, r2
 800a158:	b09d      	sub	sp, #116	; 0x74
 800a15a:	d50e      	bpl.n	800a17a <_svfiprintf_r+0x32>
 800a15c:	690b      	ldr	r3, [r1, #16]
 800a15e:	b963      	cbnz	r3, 800a17a <_svfiprintf_r+0x32>
 800a160:	2140      	movs	r1, #64	; 0x40
 800a162:	f7ff ff21 	bl	8009fa8 <_malloc_r>
 800a166:	6028      	str	r0, [r5, #0]
 800a168:	6128      	str	r0, [r5, #16]
 800a16a:	b920      	cbnz	r0, 800a176 <_svfiprintf_r+0x2e>
 800a16c:	230c      	movs	r3, #12
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	f04f 30ff 	mov.w	r0, #4294967295
 800a174:	e0d1      	b.n	800a31a <_svfiprintf_r+0x1d2>
 800a176:	2340      	movs	r3, #64	; 0x40
 800a178:	616b      	str	r3, [r5, #20]
 800a17a:	2300      	movs	r3, #0
 800a17c:	9309      	str	r3, [sp, #36]	; 0x24
 800a17e:	2320      	movs	r3, #32
 800a180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a184:	2330      	movs	r3, #48	; 0x30
 800a186:	f04f 0901 	mov.w	r9, #1
 800a18a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a18e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a334 <_svfiprintf_r+0x1ec>
 800a192:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a196:	4623      	mov	r3, r4
 800a198:	469a      	mov	sl, r3
 800a19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a19e:	b10a      	cbz	r2, 800a1a4 <_svfiprintf_r+0x5c>
 800a1a0:	2a25      	cmp	r2, #37	; 0x25
 800a1a2:	d1f9      	bne.n	800a198 <_svfiprintf_r+0x50>
 800a1a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a1a8:	d00b      	beq.n	800a1c2 <_svfiprintf_r+0x7a>
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	4622      	mov	r2, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	f7ff ff6d 	bl	800a090 <__ssputs_r>
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	f000 80aa 	beq.w	800a310 <_svfiprintf_r+0x1c8>
 800a1bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1be:	445a      	add	r2, fp
 800a1c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 80a2 	beq.w	800a310 <_svfiprintf_r+0x1c8>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1d6:	f10a 0a01 	add.w	sl, sl, #1
 800a1da:	9304      	str	r3, [sp, #16]
 800a1dc:	9307      	str	r3, [sp, #28]
 800a1de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a1e4:	4654      	mov	r4, sl
 800a1e6:	2205      	movs	r2, #5
 800a1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ec:	4851      	ldr	r0, [pc, #324]	; (800a334 <_svfiprintf_r+0x1ec>)
 800a1ee:	f7ff fac1 	bl	8009774 <memchr>
 800a1f2:	9a04      	ldr	r2, [sp, #16]
 800a1f4:	b9d8      	cbnz	r0, 800a22e <_svfiprintf_r+0xe6>
 800a1f6:	06d0      	lsls	r0, r2, #27
 800a1f8:	bf44      	itt	mi
 800a1fa:	2320      	movmi	r3, #32
 800a1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a200:	0711      	lsls	r1, r2, #28
 800a202:	bf44      	itt	mi
 800a204:	232b      	movmi	r3, #43	; 0x2b
 800a206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a20a:	f89a 3000 	ldrb.w	r3, [sl]
 800a20e:	2b2a      	cmp	r3, #42	; 0x2a
 800a210:	d015      	beq.n	800a23e <_svfiprintf_r+0xf6>
 800a212:	4654      	mov	r4, sl
 800a214:	2000      	movs	r0, #0
 800a216:	f04f 0c0a 	mov.w	ip, #10
 800a21a:	9a07      	ldr	r2, [sp, #28]
 800a21c:	4621      	mov	r1, r4
 800a21e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a222:	3b30      	subs	r3, #48	; 0x30
 800a224:	2b09      	cmp	r3, #9
 800a226:	d94e      	bls.n	800a2c6 <_svfiprintf_r+0x17e>
 800a228:	b1b0      	cbz	r0, 800a258 <_svfiprintf_r+0x110>
 800a22a:	9207      	str	r2, [sp, #28]
 800a22c:	e014      	b.n	800a258 <_svfiprintf_r+0x110>
 800a22e:	eba0 0308 	sub.w	r3, r0, r8
 800a232:	fa09 f303 	lsl.w	r3, r9, r3
 800a236:	4313      	orrs	r3, r2
 800a238:	46a2      	mov	sl, r4
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	e7d2      	b.n	800a1e4 <_svfiprintf_r+0x9c>
 800a23e:	9b03      	ldr	r3, [sp, #12]
 800a240:	1d19      	adds	r1, r3, #4
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	9103      	str	r1, [sp, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	bfbb      	ittet	lt
 800a24a:	425b      	neglt	r3, r3
 800a24c:	f042 0202 	orrlt.w	r2, r2, #2
 800a250:	9307      	strge	r3, [sp, #28]
 800a252:	9307      	strlt	r3, [sp, #28]
 800a254:	bfb8      	it	lt
 800a256:	9204      	strlt	r2, [sp, #16]
 800a258:	7823      	ldrb	r3, [r4, #0]
 800a25a:	2b2e      	cmp	r3, #46	; 0x2e
 800a25c:	d10c      	bne.n	800a278 <_svfiprintf_r+0x130>
 800a25e:	7863      	ldrb	r3, [r4, #1]
 800a260:	2b2a      	cmp	r3, #42	; 0x2a
 800a262:	d135      	bne.n	800a2d0 <_svfiprintf_r+0x188>
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	3402      	adds	r4, #2
 800a268:	1d1a      	adds	r2, r3, #4
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	9203      	str	r2, [sp, #12]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	bfb8      	it	lt
 800a272:	f04f 33ff 	movlt.w	r3, #4294967295
 800a276:	9305      	str	r3, [sp, #20]
 800a278:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a338 <_svfiprintf_r+0x1f0>
 800a27c:	2203      	movs	r2, #3
 800a27e:	4650      	mov	r0, sl
 800a280:	7821      	ldrb	r1, [r4, #0]
 800a282:	f7ff fa77 	bl	8009774 <memchr>
 800a286:	b140      	cbz	r0, 800a29a <_svfiprintf_r+0x152>
 800a288:	2340      	movs	r3, #64	; 0x40
 800a28a:	eba0 000a 	sub.w	r0, r0, sl
 800a28e:	fa03 f000 	lsl.w	r0, r3, r0
 800a292:	9b04      	ldr	r3, [sp, #16]
 800a294:	3401      	adds	r4, #1
 800a296:	4303      	orrs	r3, r0
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29e:	2206      	movs	r2, #6
 800a2a0:	4826      	ldr	r0, [pc, #152]	; (800a33c <_svfiprintf_r+0x1f4>)
 800a2a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2a6:	f7ff fa65 	bl	8009774 <memchr>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d038      	beq.n	800a320 <_svfiprintf_r+0x1d8>
 800a2ae:	4b24      	ldr	r3, [pc, #144]	; (800a340 <_svfiprintf_r+0x1f8>)
 800a2b0:	bb1b      	cbnz	r3, 800a2fa <_svfiprintf_r+0x1b2>
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	3307      	adds	r3, #7
 800a2b6:	f023 0307 	bic.w	r3, r3, #7
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	9303      	str	r3, [sp, #12]
 800a2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c0:	4433      	add	r3, r6
 800a2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c4:	e767      	b.n	800a196 <_svfiprintf_r+0x4e>
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	2001      	movs	r0, #1
 800a2ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2ce:	e7a5      	b.n	800a21c <_svfiprintf_r+0xd4>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f04f 0c0a 	mov.w	ip, #10
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	3401      	adds	r4, #1
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2e2:	3a30      	subs	r2, #48	; 0x30
 800a2e4:	2a09      	cmp	r2, #9
 800a2e6:	d903      	bls.n	800a2f0 <_svfiprintf_r+0x1a8>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d0c5      	beq.n	800a278 <_svfiprintf_r+0x130>
 800a2ec:	9105      	str	r1, [sp, #20]
 800a2ee:	e7c3      	b.n	800a278 <_svfiprintf_r+0x130>
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2f8:	e7f0      	b.n	800a2dc <_svfiprintf_r+0x194>
 800a2fa:	ab03      	add	r3, sp, #12
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	462a      	mov	r2, r5
 800a300:	4638      	mov	r0, r7
 800a302:	4b10      	ldr	r3, [pc, #64]	; (800a344 <_svfiprintf_r+0x1fc>)
 800a304:	a904      	add	r1, sp, #16
 800a306:	f7fd ffcd 	bl	80082a4 <_printf_float>
 800a30a:	1c42      	adds	r2, r0, #1
 800a30c:	4606      	mov	r6, r0
 800a30e:	d1d6      	bne.n	800a2be <_svfiprintf_r+0x176>
 800a310:	89ab      	ldrh	r3, [r5, #12]
 800a312:	065b      	lsls	r3, r3, #25
 800a314:	f53f af2c 	bmi.w	800a170 <_svfiprintf_r+0x28>
 800a318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a31a:	b01d      	add	sp, #116	; 0x74
 800a31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a320:	ab03      	add	r3, sp, #12
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	462a      	mov	r2, r5
 800a326:	4638      	mov	r0, r7
 800a328:	4b06      	ldr	r3, [pc, #24]	; (800a344 <_svfiprintf_r+0x1fc>)
 800a32a:	a904      	add	r1, sp, #16
 800a32c:	f7fe fa56 	bl	80087dc <_printf_i>
 800a330:	e7eb      	b.n	800a30a <_svfiprintf_r+0x1c2>
 800a332:	bf00      	nop
 800a334:	0800c09c 	.word	0x0800c09c
 800a338:	0800c0a2 	.word	0x0800c0a2
 800a33c:	0800c0a6 	.word	0x0800c0a6
 800a340:	080082a5 	.word	0x080082a5
 800a344:	0800a091 	.word	0x0800a091

0800a348 <_sbrk_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	2300      	movs	r3, #0
 800a34c:	4d05      	ldr	r5, [pc, #20]	; (800a364 <_sbrk_r+0x1c>)
 800a34e:	4604      	mov	r4, r0
 800a350:	4608      	mov	r0, r1
 800a352:	602b      	str	r3, [r5, #0]
 800a354:	f7f8 fba0 	bl	8002a98 <_sbrk>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d102      	bne.n	800a362 <_sbrk_r+0x1a>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	b103      	cbz	r3, 800a362 <_sbrk_r+0x1a>
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	200023f4 	.word	0x200023f4

0800a368 <__assert_func>:
 800a368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a36a:	4614      	mov	r4, r2
 800a36c:	461a      	mov	r2, r3
 800a36e:	4b09      	ldr	r3, [pc, #36]	; (800a394 <__assert_func+0x2c>)
 800a370:	4605      	mov	r5, r0
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68d8      	ldr	r0, [r3, #12]
 800a376:	b14c      	cbz	r4, 800a38c <__assert_func+0x24>
 800a378:	4b07      	ldr	r3, [pc, #28]	; (800a398 <__assert_func+0x30>)
 800a37a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a37e:	9100      	str	r1, [sp, #0]
 800a380:	462b      	mov	r3, r5
 800a382:	4906      	ldr	r1, [pc, #24]	; (800a39c <__assert_func+0x34>)
 800a384:	f000 f80e 	bl	800a3a4 <fiprintf>
 800a388:	f000 faaa 	bl	800a8e0 <abort>
 800a38c:	4b04      	ldr	r3, [pc, #16]	; (800a3a0 <__assert_func+0x38>)
 800a38e:	461c      	mov	r4, r3
 800a390:	e7f3      	b.n	800a37a <__assert_func+0x12>
 800a392:	bf00      	nop
 800a394:	20000024 	.word	0x20000024
 800a398:	0800c0ad 	.word	0x0800c0ad
 800a39c:	0800c0ba 	.word	0x0800c0ba
 800a3a0:	0800c0e8 	.word	0x0800c0e8

0800a3a4 <fiprintf>:
 800a3a4:	b40e      	push	{r1, r2, r3}
 800a3a6:	b503      	push	{r0, r1, lr}
 800a3a8:	4601      	mov	r1, r0
 800a3aa:	ab03      	add	r3, sp, #12
 800a3ac:	4805      	ldr	r0, [pc, #20]	; (800a3c4 <fiprintf+0x20>)
 800a3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b2:	6800      	ldr	r0, [r0, #0]
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	f000 f895 	bl	800a4e4 <_vfiprintf_r>
 800a3ba:	b002      	add	sp, #8
 800a3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3c0:	b003      	add	sp, #12
 800a3c2:	4770      	bx	lr
 800a3c4:	20000024 	.word	0x20000024

0800a3c8 <__ascii_mbtowc>:
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	b901      	cbnz	r1, 800a3ce <__ascii_mbtowc+0x6>
 800a3cc:	a901      	add	r1, sp, #4
 800a3ce:	b142      	cbz	r2, 800a3e2 <__ascii_mbtowc+0x1a>
 800a3d0:	b14b      	cbz	r3, 800a3e6 <__ascii_mbtowc+0x1e>
 800a3d2:	7813      	ldrb	r3, [r2, #0]
 800a3d4:	600b      	str	r3, [r1, #0]
 800a3d6:	7812      	ldrb	r2, [r2, #0]
 800a3d8:	1e10      	subs	r0, r2, #0
 800a3da:	bf18      	it	ne
 800a3dc:	2001      	movne	r0, #1
 800a3de:	b002      	add	sp, #8
 800a3e0:	4770      	bx	lr
 800a3e2:	4610      	mov	r0, r2
 800a3e4:	e7fb      	b.n	800a3de <__ascii_mbtowc+0x16>
 800a3e6:	f06f 0001 	mvn.w	r0, #1
 800a3ea:	e7f8      	b.n	800a3de <__ascii_mbtowc+0x16>

0800a3ec <memmove>:
 800a3ec:	4288      	cmp	r0, r1
 800a3ee:	b510      	push	{r4, lr}
 800a3f0:	eb01 0402 	add.w	r4, r1, r2
 800a3f4:	d902      	bls.n	800a3fc <memmove+0x10>
 800a3f6:	4284      	cmp	r4, r0
 800a3f8:	4623      	mov	r3, r4
 800a3fa:	d807      	bhi.n	800a40c <memmove+0x20>
 800a3fc:	1e43      	subs	r3, r0, #1
 800a3fe:	42a1      	cmp	r1, r4
 800a400:	d008      	beq.n	800a414 <memmove+0x28>
 800a402:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a40a:	e7f8      	b.n	800a3fe <memmove+0x12>
 800a40c:	4601      	mov	r1, r0
 800a40e:	4402      	add	r2, r0
 800a410:	428a      	cmp	r2, r1
 800a412:	d100      	bne.n	800a416 <memmove+0x2a>
 800a414:	bd10      	pop	{r4, pc}
 800a416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a41a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a41e:	e7f7      	b.n	800a410 <memmove+0x24>

0800a420 <__malloc_lock>:
 800a420:	4801      	ldr	r0, [pc, #4]	; (800a428 <__malloc_lock+0x8>)
 800a422:	f000 bc19 	b.w	800ac58 <__retarget_lock_acquire_recursive>
 800a426:	bf00      	nop
 800a428:	200023f8 	.word	0x200023f8

0800a42c <__malloc_unlock>:
 800a42c:	4801      	ldr	r0, [pc, #4]	; (800a434 <__malloc_unlock+0x8>)
 800a42e:	f000 bc14 	b.w	800ac5a <__retarget_lock_release_recursive>
 800a432:	bf00      	nop
 800a434:	200023f8 	.word	0x200023f8

0800a438 <_realloc_r>:
 800a438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a43c:	4680      	mov	r8, r0
 800a43e:	4614      	mov	r4, r2
 800a440:	460e      	mov	r6, r1
 800a442:	b921      	cbnz	r1, 800a44e <_realloc_r+0x16>
 800a444:	4611      	mov	r1, r2
 800a446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a44a:	f7ff bdad 	b.w	8009fa8 <_malloc_r>
 800a44e:	b92a      	cbnz	r2, 800a45c <_realloc_r+0x24>
 800a450:	f7ff fd42 	bl	8009ed8 <_free_r>
 800a454:	4625      	mov	r5, r4
 800a456:	4628      	mov	r0, r5
 800a458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a45c:	f000 fc64 	bl	800ad28 <_malloc_usable_size_r>
 800a460:	4284      	cmp	r4, r0
 800a462:	4607      	mov	r7, r0
 800a464:	d802      	bhi.n	800a46c <_realloc_r+0x34>
 800a466:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a46a:	d812      	bhi.n	800a492 <_realloc_r+0x5a>
 800a46c:	4621      	mov	r1, r4
 800a46e:	4640      	mov	r0, r8
 800a470:	f7ff fd9a 	bl	8009fa8 <_malloc_r>
 800a474:	4605      	mov	r5, r0
 800a476:	2800      	cmp	r0, #0
 800a478:	d0ed      	beq.n	800a456 <_realloc_r+0x1e>
 800a47a:	42bc      	cmp	r4, r7
 800a47c:	4622      	mov	r2, r4
 800a47e:	4631      	mov	r1, r6
 800a480:	bf28      	it	cs
 800a482:	463a      	movcs	r2, r7
 800a484:	f7ff f984 	bl	8009790 <memcpy>
 800a488:	4631      	mov	r1, r6
 800a48a:	4640      	mov	r0, r8
 800a48c:	f7ff fd24 	bl	8009ed8 <_free_r>
 800a490:	e7e1      	b.n	800a456 <_realloc_r+0x1e>
 800a492:	4635      	mov	r5, r6
 800a494:	e7df      	b.n	800a456 <_realloc_r+0x1e>

0800a496 <__sfputc_r>:
 800a496:	6893      	ldr	r3, [r2, #8]
 800a498:	b410      	push	{r4}
 800a49a:	3b01      	subs	r3, #1
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	6093      	str	r3, [r2, #8]
 800a4a0:	da07      	bge.n	800a4b2 <__sfputc_r+0x1c>
 800a4a2:	6994      	ldr	r4, [r2, #24]
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	db01      	blt.n	800a4ac <__sfputc_r+0x16>
 800a4a8:	290a      	cmp	r1, #10
 800a4aa:	d102      	bne.n	800a4b2 <__sfputc_r+0x1c>
 800a4ac:	bc10      	pop	{r4}
 800a4ae:	f000 b949 	b.w	800a744 <__swbuf_r>
 800a4b2:	6813      	ldr	r3, [r2, #0]
 800a4b4:	1c58      	adds	r0, r3, #1
 800a4b6:	6010      	str	r0, [r2, #0]
 800a4b8:	7019      	strb	r1, [r3, #0]
 800a4ba:	4608      	mov	r0, r1
 800a4bc:	bc10      	pop	{r4}
 800a4be:	4770      	bx	lr

0800a4c0 <__sfputs_r>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	460f      	mov	r7, r1
 800a4c6:	4614      	mov	r4, r2
 800a4c8:	18d5      	adds	r5, r2, r3
 800a4ca:	42ac      	cmp	r4, r5
 800a4cc:	d101      	bne.n	800a4d2 <__sfputs_r+0x12>
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	e007      	b.n	800a4e2 <__sfputs_r+0x22>
 800a4d2:	463a      	mov	r2, r7
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4da:	f7ff ffdc 	bl	800a496 <__sfputc_r>
 800a4de:	1c43      	adds	r3, r0, #1
 800a4e0:	d1f3      	bne.n	800a4ca <__sfputs_r+0xa>
 800a4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a4e4 <_vfiprintf_r>:
 800a4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e8:	460d      	mov	r5, r1
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	4698      	mov	r8, r3
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	b09d      	sub	sp, #116	; 0x74
 800a4f2:	b118      	cbz	r0, 800a4fc <_vfiprintf_r+0x18>
 800a4f4:	6983      	ldr	r3, [r0, #24]
 800a4f6:	b90b      	cbnz	r3, 800a4fc <_vfiprintf_r+0x18>
 800a4f8:	f000 fb10 	bl	800ab1c <__sinit>
 800a4fc:	4b89      	ldr	r3, [pc, #548]	; (800a724 <_vfiprintf_r+0x240>)
 800a4fe:	429d      	cmp	r5, r3
 800a500:	d11b      	bne.n	800a53a <_vfiprintf_r+0x56>
 800a502:	6875      	ldr	r5, [r6, #4]
 800a504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a506:	07d9      	lsls	r1, r3, #31
 800a508:	d405      	bmi.n	800a516 <_vfiprintf_r+0x32>
 800a50a:	89ab      	ldrh	r3, [r5, #12]
 800a50c:	059a      	lsls	r2, r3, #22
 800a50e:	d402      	bmi.n	800a516 <_vfiprintf_r+0x32>
 800a510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a512:	f000 fba1 	bl	800ac58 <__retarget_lock_acquire_recursive>
 800a516:	89ab      	ldrh	r3, [r5, #12]
 800a518:	071b      	lsls	r3, r3, #28
 800a51a:	d501      	bpl.n	800a520 <_vfiprintf_r+0x3c>
 800a51c:	692b      	ldr	r3, [r5, #16]
 800a51e:	b9eb      	cbnz	r3, 800a55c <_vfiprintf_r+0x78>
 800a520:	4629      	mov	r1, r5
 800a522:	4630      	mov	r0, r6
 800a524:	f000 f96e 	bl	800a804 <__swsetup_r>
 800a528:	b1c0      	cbz	r0, 800a55c <_vfiprintf_r+0x78>
 800a52a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a52c:	07dc      	lsls	r4, r3, #31
 800a52e:	d50e      	bpl.n	800a54e <_vfiprintf_r+0x6a>
 800a530:	f04f 30ff 	mov.w	r0, #4294967295
 800a534:	b01d      	add	sp, #116	; 0x74
 800a536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53a:	4b7b      	ldr	r3, [pc, #492]	; (800a728 <_vfiprintf_r+0x244>)
 800a53c:	429d      	cmp	r5, r3
 800a53e:	d101      	bne.n	800a544 <_vfiprintf_r+0x60>
 800a540:	68b5      	ldr	r5, [r6, #8]
 800a542:	e7df      	b.n	800a504 <_vfiprintf_r+0x20>
 800a544:	4b79      	ldr	r3, [pc, #484]	; (800a72c <_vfiprintf_r+0x248>)
 800a546:	429d      	cmp	r5, r3
 800a548:	bf08      	it	eq
 800a54a:	68f5      	ldreq	r5, [r6, #12]
 800a54c:	e7da      	b.n	800a504 <_vfiprintf_r+0x20>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	0598      	lsls	r0, r3, #22
 800a552:	d4ed      	bmi.n	800a530 <_vfiprintf_r+0x4c>
 800a554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a556:	f000 fb80 	bl	800ac5a <__retarget_lock_release_recursive>
 800a55a:	e7e9      	b.n	800a530 <_vfiprintf_r+0x4c>
 800a55c:	2300      	movs	r3, #0
 800a55e:	9309      	str	r3, [sp, #36]	; 0x24
 800a560:	2320      	movs	r3, #32
 800a562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a566:	2330      	movs	r3, #48	; 0x30
 800a568:	f04f 0901 	mov.w	r9, #1
 800a56c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a570:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a730 <_vfiprintf_r+0x24c>
 800a574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a578:	4623      	mov	r3, r4
 800a57a:	469a      	mov	sl, r3
 800a57c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a580:	b10a      	cbz	r2, 800a586 <_vfiprintf_r+0xa2>
 800a582:	2a25      	cmp	r2, #37	; 0x25
 800a584:	d1f9      	bne.n	800a57a <_vfiprintf_r+0x96>
 800a586:	ebba 0b04 	subs.w	fp, sl, r4
 800a58a:	d00b      	beq.n	800a5a4 <_vfiprintf_r+0xc0>
 800a58c:	465b      	mov	r3, fp
 800a58e:	4622      	mov	r2, r4
 800a590:	4629      	mov	r1, r5
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ff94 	bl	800a4c0 <__sfputs_r>
 800a598:	3001      	adds	r0, #1
 800a59a:	f000 80aa 	beq.w	800a6f2 <_vfiprintf_r+0x20e>
 800a59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5a0:	445a      	add	r2, fp
 800a5a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 80a2 	beq.w	800a6f2 <_vfiprintf_r+0x20e>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5b8:	f10a 0a01 	add.w	sl, sl, #1
 800a5bc:	9304      	str	r3, [sp, #16]
 800a5be:	9307      	str	r3, [sp, #28]
 800a5c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5c4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5c6:	4654      	mov	r4, sl
 800a5c8:	2205      	movs	r2, #5
 800a5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ce:	4858      	ldr	r0, [pc, #352]	; (800a730 <_vfiprintf_r+0x24c>)
 800a5d0:	f7ff f8d0 	bl	8009774 <memchr>
 800a5d4:	9a04      	ldr	r2, [sp, #16]
 800a5d6:	b9d8      	cbnz	r0, 800a610 <_vfiprintf_r+0x12c>
 800a5d8:	06d1      	lsls	r1, r2, #27
 800a5da:	bf44      	itt	mi
 800a5dc:	2320      	movmi	r3, #32
 800a5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5e2:	0713      	lsls	r3, r2, #28
 800a5e4:	bf44      	itt	mi
 800a5e6:	232b      	movmi	r3, #43	; 0x2b
 800a5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5f2:	d015      	beq.n	800a620 <_vfiprintf_r+0x13c>
 800a5f4:	4654      	mov	r4, sl
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	f04f 0c0a 	mov.w	ip, #10
 800a5fc:	9a07      	ldr	r2, [sp, #28]
 800a5fe:	4621      	mov	r1, r4
 800a600:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a604:	3b30      	subs	r3, #48	; 0x30
 800a606:	2b09      	cmp	r3, #9
 800a608:	d94e      	bls.n	800a6a8 <_vfiprintf_r+0x1c4>
 800a60a:	b1b0      	cbz	r0, 800a63a <_vfiprintf_r+0x156>
 800a60c:	9207      	str	r2, [sp, #28]
 800a60e:	e014      	b.n	800a63a <_vfiprintf_r+0x156>
 800a610:	eba0 0308 	sub.w	r3, r0, r8
 800a614:	fa09 f303 	lsl.w	r3, r9, r3
 800a618:	4313      	orrs	r3, r2
 800a61a:	46a2      	mov	sl, r4
 800a61c:	9304      	str	r3, [sp, #16]
 800a61e:	e7d2      	b.n	800a5c6 <_vfiprintf_r+0xe2>
 800a620:	9b03      	ldr	r3, [sp, #12]
 800a622:	1d19      	adds	r1, r3, #4
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	9103      	str	r1, [sp, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bfbb      	ittet	lt
 800a62c:	425b      	neglt	r3, r3
 800a62e:	f042 0202 	orrlt.w	r2, r2, #2
 800a632:	9307      	strge	r3, [sp, #28]
 800a634:	9307      	strlt	r3, [sp, #28]
 800a636:	bfb8      	it	lt
 800a638:	9204      	strlt	r2, [sp, #16]
 800a63a:	7823      	ldrb	r3, [r4, #0]
 800a63c:	2b2e      	cmp	r3, #46	; 0x2e
 800a63e:	d10c      	bne.n	800a65a <_vfiprintf_r+0x176>
 800a640:	7863      	ldrb	r3, [r4, #1]
 800a642:	2b2a      	cmp	r3, #42	; 0x2a
 800a644:	d135      	bne.n	800a6b2 <_vfiprintf_r+0x1ce>
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	3402      	adds	r4, #2
 800a64a:	1d1a      	adds	r2, r3, #4
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	9203      	str	r2, [sp, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	bfb8      	it	lt
 800a654:	f04f 33ff 	movlt.w	r3, #4294967295
 800a658:	9305      	str	r3, [sp, #20]
 800a65a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a734 <_vfiprintf_r+0x250>
 800a65e:	2203      	movs	r2, #3
 800a660:	4650      	mov	r0, sl
 800a662:	7821      	ldrb	r1, [r4, #0]
 800a664:	f7ff f886 	bl	8009774 <memchr>
 800a668:	b140      	cbz	r0, 800a67c <_vfiprintf_r+0x198>
 800a66a:	2340      	movs	r3, #64	; 0x40
 800a66c:	eba0 000a 	sub.w	r0, r0, sl
 800a670:	fa03 f000 	lsl.w	r0, r3, r0
 800a674:	9b04      	ldr	r3, [sp, #16]
 800a676:	3401      	adds	r4, #1
 800a678:	4303      	orrs	r3, r0
 800a67a:	9304      	str	r3, [sp, #16]
 800a67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a680:	2206      	movs	r2, #6
 800a682:	482d      	ldr	r0, [pc, #180]	; (800a738 <_vfiprintf_r+0x254>)
 800a684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a688:	f7ff f874 	bl	8009774 <memchr>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d03f      	beq.n	800a710 <_vfiprintf_r+0x22c>
 800a690:	4b2a      	ldr	r3, [pc, #168]	; (800a73c <_vfiprintf_r+0x258>)
 800a692:	bb1b      	cbnz	r3, 800a6dc <_vfiprintf_r+0x1f8>
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	3307      	adds	r3, #7
 800a698:	f023 0307 	bic.w	r3, r3, #7
 800a69c:	3308      	adds	r3, #8
 800a69e:	9303      	str	r3, [sp, #12]
 800a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a2:	443b      	add	r3, r7
 800a6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a6:	e767      	b.n	800a578 <_vfiprintf_r+0x94>
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b0:	e7a5      	b.n	800a5fe <_vfiprintf_r+0x11a>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f04f 0c0a 	mov.w	ip, #10
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	3401      	adds	r4, #1
 800a6bc:	9305      	str	r3, [sp, #20]
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6c4:	3a30      	subs	r2, #48	; 0x30
 800a6c6:	2a09      	cmp	r2, #9
 800a6c8:	d903      	bls.n	800a6d2 <_vfiprintf_r+0x1ee>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0c5      	beq.n	800a65a <_vfiprintf_r+0x176>
 800a6ce:	9105      	str	r1, [sp, #20]
 800a6d0:	e7c3      	b.n	800a65a <_vfiprintf_r+0x176>
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6da:	e7f0      	b.n	800a6be <_vfiprintf_r+0x1da>
 800a6dc:	ab03      	add	r3, sp, #12
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	462a      	mov	r2, r5
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	4b16      	ldr	r3, [pc, #88]	; (800a740 <_vfiprintf_r+0x25c>)
 800a6e6:	a904      	add	r1, sp, #16
 800a6e8:	f7fd fddc 	bl	80082a4 <_printf_float>
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	1c78      	adds	r0, r7, #1
 800a6f0:	d1d6      	bne.n	800a6a0 <_vfiprintf_r+0x1bc>
 800a6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f4:	07d9      	lsls	r1, r3, #31
 800a6f6:	d405      	bmi.n	800a704 <_vfiprintf_r+0x220>
 800a6f8:	89ab      	ldrh	r3, [r5, #12]
 800a6fa:	059a      	lsls	r2, r3, #22
 800a6fc:	d402      	bmi.n	800a704 <_vfiprintf_r+0x220>
 800a6fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a700:	f000 faab 	bl	800ac5a <__retarget_lock_release_recursive>
 800a704:	89ab      	ldrh	r3, [r5, #12]
 800a706:	065b      	lsls	r3, r3, #25
 800a708:	f53f af12 	bmi.w	800a530 <_vfiprintf_r+0x4c>
 800a70c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a70e:	e711      	b.n	800a534 <_vfiprintf_r+0x50>
 800a710:	ab03      	add	r3, sp, #12
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	462a      	mov	r2, r5
 800a716:	4630      	mov	r0, r6
 800a718:	4b09      	ldr	r3, [pc, #36]	; (800a740 <_vfiprintf_r+0x25c>)
 800a71a:	a904      	add	r1, sp, #16
 800a71c:	f7fe f85e 	bl	80087dc <_printf_i>
 800a720:	e7e4      	b.n	800a6ec <_vfiprintf_r+0x208>
 800a722:	bf00      	nop
 800a724:	0800c214 	.word	0x0800c214
 800a728:	0800c234 	.word	0x0800c234
 800a72c:	0800c1f4 	.word	0x0800c1f4
 800a730:	0800c09c 	.word	0x0800c09c
 800a734:	0800c0a2 	.word	0x0800c0a2
 800a738:	0800c0a6 	.word	0x0800c0a6
 800a73c:	080082a5 	.word	0x080082a5
 800a740:	0800a4c1 	.word	0x0800a4c1

0800a744 <__swbuf_r>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	460e      	mov	r6, r1
 800a748:	4614      	mov	r4, r2
 800a74a:	4605      	mov	r5, r0
 800a74c:	b118      	cbz	r0, 800a756 <__swbuf_r+0x12>
 800a74e:	6983      	ldr	r3, [r0, #24]
 800a750:	b90b      	cbnz	r3, 800a756 <__swbuf_r+0x12>
 800a752:	f000 f9e3 	bl	800ab1c <__sinit>
 800a756:	4b21      	ldr	r3, [pc, #132]	; (800a7dc <__swbuf_r+0x98>)
 800a758:	429c      	cmp	r4, r3
 800a75a:	d12b      	bne.n	800a7b4 <__swbuf_r+0x70>
 800a75c:	686c      	ldr	r4, [r5, #4]
 800a75e:	69a3      	ldr	r3, [r4, #24]
 800a760:	60a3      	str	r3, [r4, #8]
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	071a      	lsls	r2, r3, #28
 800a766:	d52f      	bpl.n	800a7c8 <__swbuf_r+0x84>
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	b36b      	cbz	r3, 800a7c8 <__swbuf_r+0x84>
 800a76c:	6923      	ldr	r3, [r4, #16]
 800a76e:	6820      	ldr	r0, [r4, #0]
 800a770:	b2f6      	uxtb	r6, r6
 800a772:	1ac0      	subs	r0, r0, r3
 800a774:	6963      	ldr	r3, [r4, #20]
 800a776:	4637      	mov	r7, r6
 800a778:	4283      	cmp	r3, r0
 800a77a:	dc04      	bgt.n	800a786 <__swbuf_r+0x42>
 800a77c:	4621      	mov	r1, r4
 800a77e:	4628      	mov	r0, r5
 800a780:	f000 f938 	bl	800a9f4 <_fflush_r>
 800a784:	bb30      	cbnz	r0, 800a7d4 <__swbuf_r+0x90>
 800a786:	68a3      	ldr	r3, [r4, #8]
 800a788:	3001      	adds	r0, #1
 800a78a:	3b01      	subs	r3, #1
 800a78c:	60a3      	str	r3, [r4, #8]
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	6022      	str	r2, [r4, #0]
 800a794:	701e      	strb	r6, [r3, #0]
 800a796:	6963      	ldr	r3, [r4, #20]
 800a798:	4283      	cmp	r3, r0
 800a79a:	d004      	beq.n	800a7a6 <__swbuf_r+0x62>
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	07db      	lsls	r3, r3, #31
 800a7a0:	d506      	bpl.n	800a7b0 <__swbuf_r+0x6c>
 800a7a2:	2e0a      	cmp	r6, #10
 800a7a4:	d104      	bne.n	800a7b0 <__swbuf_r+0x6c>
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f000 f923 	bl	800a9f4 <_fflush_r>
 800a7ae:	b988      	cbnz	r0, 800a7d4 <__swbuf_r+0x90>
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b4:	4b0a      	ldr	r3, [pc, #40]	; (800a7e0 <__swbuf_r+0x9c>)
 800a7b6:	429c      	cmp	r4, r3
 800a7b8:	d101      	bne.n	800a7be <__swbuf_r+0x7a>
 800a7ba:	68ac      	ldr	r4, [r5, #8]
 800a7bc:	e7cf      	b.n	800a75e <__swbuf_r+0x1a>
 800a7be:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <__swbuf_r+0xa0>)
 800a7c0:	429c      	cmp	r4, r3
 800a7c2:	bf08      	it	eq
 800a7c4:	68ec      	ldreq	r4, [r5, #12]
 800a7c6:	e7ca      	b.n	800a75e <__swbuf_r+0x1a>
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f000 f81a 	bl	800a804 <__swsetup_r>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d0cb      	beq.n	800a76c <__swbuf_r+0x28>
 800a7d4:	f04f 37ff 	mov.w	r7, #4294967295
 800a7d8:	e7ea      	b.n	800a7b0 <__swbuf_r+0x6c>
 800a7da:	bf00      	nop
 800a7dc:	0800c214 	.word	0x0800c214
 800a7e0:	0800c234 	.word	0x0800c234
 800a7e4:	0800c1f4 	.word	0x0800c1f4

0800a7e8 <__ascii_wctomb>:
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	4608      	mov	r0, r1
 800a7ec:	b141      	cbz	r1, 800a800 <__ascii_wctomb+0x18>
 800a7ee:	2aff      	cmp	r2, #255	; 0xff
 800a7f0:	d904      	bls.n	800a7fc <__ascii_wctomb+0x14>
 800a7f2:	228a      	movs	r2, #138	; 0x8a
 800a7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	4770      	bx	lr
 800a7fc:	2001      	movs	r0, #1
 800a7fe:	700a      	strb	r2, [r1, #0]
 800a800:	4770      	bx	lr
	...

0800a804 <__swsetup_r>:
 800a804:	4b32      	ldr	r3, [pc, #200]	; (800a8d0 <__swsetup_r+0xcc>)
 800a806:	b570      	push	{r4, r5, r6, lr}
 800a808:	681d      	ldr	r5, [r3, #0]
 800a80a:	4606      	mov	r6, r0
 800a80c:	460c      	mov	r4, r1
 800a80e:	b125      	cbz	r5, 800a81a <__swsetup_r+0x16>
 800a810:	69ab      	ldr	r3, [r5, #24]
 800a812:	b913      	cbnz	r3, 800a81a <__swsetup_r+0x16>
 800a814:	4628      	mov	r0, r5
 800a816:	f000 f981 	bl	800ab1c <__sinit>
 800a81a:	4b2e      	ldr	r3, [pc, #184]	; (800a8d4 <__swsetup_r+0xd0>)
 800a81c:	429c      	cmp	r4, r3
 800a81e:	d10f      	bne.n	800a840 <__swsetup_r+0x3c>
 800a820:	686c      	ldr	r4, [r5, #4]
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a828:	0719      	lsls	r1, r3, #28
 800a82a:	d42c      	bmi.n	800a886 <__swsetup_r+0x82>
 800a82c:	06dd      	lsls	r5, r3, #27
 800a82e:	d411      	bmi.n	800a854 <__swsetup_r+0x50>
 800a830:	2309      	movs	r3, #9
 800a832:	6033      	str	r3, [r6, #0]
 800a834:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a838:	f04f 30ff 	mov.w	r0, #4294967295
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	e03e      	b.n	800a8be <__swsetup_r+0xba>
 800a840:	4b25      	ldr	r3, [pc, #148]	; (800a8d8 <__swsetup_r+0xd4>)
 800a842:	429c      	cmp	r4, r3
 800a844:	d101      	bne.n	800a84a <__swsetup_r+0x46>
 800a846:	68ac      	ldr	r4, [r5, #8]
 800a848:	e7eb      	b.n	800a822 <__swsetup_r+0x1e>
 800a84a:	4b24      	ldr	r3, [pc, #144]	; (800a8dc <__swsetup_r+0xd8>)
 800a84c:	429c      	cmp	r4, r3
 800a84e:	bf08      	it	eq
 800a850:	68ec      	ldreq	r4, [r5, #12]
 800a852:	e7e6      	b.n	800a822 <__swsetup_r+0x1e>
 800a854:	0758      	lsls	r0, r3, #29
 800a856:	d512      	bpl.n	800a87e <__swsetup_r+0x7a>
 800a858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a85a:	b141      	cbz	r1, 800a86e <__swsetup_r+0x6a>
 800a85c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a860:	4299      	cmp	r1, r3
 800a862:	d002      	beq.n	800a86a <__swsetup_r+0x66>
 800a864:	4630      	mov	r0, r6
 800a866:	f7ff fb37 	bl	8009ed8 <_free_r>
 800a86a:	2300      	movs	r3, #0
 800a86c:	6363      	str	r3, [r4, #52]	; 0x34
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a874:	81a3      	strh	r3, [r4, #12]
 800a876:	2300      	movs	r3, #0
 800a878:	6063      	str	r3, [r4, #4]
 800a87a:	6923      	ldr	r3, [r4, #16]
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	89a3      	ldrh	r3, [r4, #12]
 800a880:	f043 0308 	orr.w	r3, r3, #8
 800a884:	81a3      	strh	r3, [r4, #12]
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	b94b      	cbnz	r3, 800a89e <__swsetup_r+0x9a>
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a894:	d003      	beq.n	800a89e <__swsetup_r+0x9a>
 800a896:	4621      	mov	r1, r4
 800a898:	4630      	mov	r0, r6
 800a89a:	f000 fa05 	bl	800aca8 <__smakebuf_r>
 800a89e:	89a0      	ldrh	r0, [r4, #12]
 800a8a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8a4:	f010 0301 	ands.w	r3, r0, #1
 800a8a8:	d00a      	beq.n	800a8c0 <__swsetup_r+0xbc>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60a3      	str	r3, [r4, #8]
 800a8ae:	6963      	ldr	r3, [r4, #20]
 800a8b0:	425b      	negs	r3, r3
 800a8b2:	61a3      	str	r3, [r4, #24]
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	b943      	cbnz	r3, 800a8ca <__swsetup_r+0xc6>
 800a8b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8bc:	d1ba      	bne.n	800a834 <__swsetup_r+0x30>
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	0781      	lsls	r1, r0, #30
 800a8c2:	bf58      	it	pl
 800a8c4:	6963      	ldrpl	r3, [r4, #20]
 800a8c6:	60a3      	str	r3, [r4, #8]
 800a8c8:	e7f4      	b.n	800a8b4 <__swsetup_r+0xb0>
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	e7f7      	b.n	800a8be <__swsetup_r+0xba>
 800a8ce:	bf00      	nop
 800a8d0:	20000024 	.word	0x20000024
 800a8d4:	0800c214 	.word	0x0800c214
 800a8d8:	0800c234 	.word	0x0800c234
 800a8dc:	0800c1f4 	.word	0x0800c1f4

0800a8e0 <abort>:
 800a8e0:	2006      	movs	r0, #6
 800a8e2:	b508      	push	{r3, lr}
 800a8e4:	f000 fa50 	bl	800ad88 <raise>
 800a8e8:	2001      	movs	r0, #1
 800a8ea:	f7f8 f862 	bl	80029b2 <_exit>
	...

0800a8f0 <__sflush_r>:
 800a8f0:	898a      	ldrh	r2, [r1, #12]
 800a8f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	0710      	lsls	r0, r2, #28
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	d457      	bmi.n	800a9ac <__sflush_r+0xbc>
 800a8fc:	684b      	ldr	r3, [r1, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	dc04      	bgt.n	800a90c <__sflush_r+0x1c>
 800a902:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a904:	2b00      	cmp	r3, #0
 800a906:	dc01      	bgt.n	800a90c <__sflush_r+0x1c>
 800a908:	2000      	movs	r0, #0
 800a90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a90c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a90e:	2e00      	cmp	r6, #0
 800a910:	d0fa      	beq.n	800a908 <__sflush_r+0x18>
 800a912:	2300      	movs	r3, #0
 800a914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a918:	682f      	ldr	r7, [r5, #0]
 800a91a:	602b      	str	r3, [r5, #0]
 800a91c:	d032      	beq.n	800a984 <__sflush_r+0x94>
 800a91e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	075a      	lsls	r2, r3, #29
 800a924:	d505      	bpl.n	800a932 <__sflush_r+0x42>
 800a926:	6863      	ldr	r3, [r4, #4]
 800a928:	1ac0      	subs	r0, r0, r3
 800a92a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a92c:	b10b      	cbz	r3, 800a932 <__sflush_r+0x42>
 800a92e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a930:	1ac0      	subs	r0, r0, r3
 800a932:	2300      	movs	r3, #0
 800a934:	4602      	mov	r2, r0
 800a936:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a938:	4628      	mov	r0, r5
 800a93a:	6a21      	ldr	r1, [r4, #32]
 800a93c:	47b0      	blx	r6
 800a93e:	1c43      	adds	r3, r0, #1
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	d106      	bne.n	800a952 <__sflush_r+0x62>
 800a944:	6829      	ldr	r1, [r5, #0]
 800a946:	291d      	cmp	r1, #29
 800a948:	d82c      	bhi.n	800a9a4 <__sflush_r+0xb4>
 800a94a:	4a29      	ldr	r2, [pc, #164]	; (800a9f0 <__sflush_r+0x100>)
 800a94c:	40ca      	lsrs	r2, r1
 800a94e:	07d6      	lsls	r6, r2, #31
 800a950:	d528      	bpl.n	800a9a4 <__sflush_r+0xb4>
 800a952:	2200      	movs	r2, #0
 800a954:	6062      	str	r2, [r4, #4]
 800a956:	6922      	ldr	r2, [r4, #16]
 800a958:	04d9      	lsls	r1, r3, #19
 800a95a:	6022      	str	r2, [r4, #0]
 800a95c:	d504      	bpl.n	800a968 <__sflush_r+0x78>
 800a95e:	1c42      	adds	r2, r0, #1
 800a960:	d101      	bne.n	800a966 <__sflush_r+0x76>
 800a962:	682b      	ldr	r3, [r5, #0]
 800a964:	b903      	cbnz	r3, 800a968 <__sflush_r+0x78>
 800a966:	6560      	str	r0, [r4, #84]	; 0x54
 800a968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a96a:	602f      	str	r7, [r5, #0]
 800a96c:	2900      	cmp	r1, #0
 800a96e:	d0cb      	beq.n	800a908 <__sflush_r+0x18>
 800a970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a974:	4299      	cmp	r1, r3
 800a976:	d002      	beq.n	800a97e <__sflush_r+0x8e>
 800a978:	4628      	mov	r0, r5
 800a97a:	f7ff faad 	bl	8009ed8 <_free_r>
 800a97e:	2000      	movs	r0, #0
 800a980:	6360      	str	r0, [r4, #52]	; 0x34
 800a982:	e7c2      	b.n	800a90a <__sflush_r+0x1a>
 800a984:	6a21      	ldr	r1, [r4, #32]
 800a986:	2301      	movs	r3, #1
 800a988:	4628      	mov	r0, r5
 800a98a:	47b0      	blx	r6
 800a98c:	1c41      	adds	r1, r0, #1
 800a98e:	d1c7      	bne.n	800a920 <__sflush_r+0x30>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0c4      	beq.n	800a920 <__sflush_r+0x30>
 800a996:	2b1d      	cmp	r3, #29
 800a998:	d001      	beq.n	800a99e <__sflush_r+0xae>
 800a99a:	2b16      	cmp	r3, #22
 800a99c:	d101      	bne.n	800a9a2 <__sflush_r+0xb2>
 800a99e:	602f      	str	r7, [r5, #0]
 800a9a0:	e7b2      	b.n	800a908 <__sflush_r+0x18>
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a8:	81a3      	strh	r3, [r4, #12]
 800a9aa:	e7ae      	b.n	800a90a <__sflush_r+0x1a>
 800a9ac:	690f      	ldr	r7, [r1, #16]
 800a9ae:	2f00      	cmp	r7, #0
 800a9b0:	d0aa      	beq.n	800a908 <__sflush_r+0x18>
 800a9b2:	0793      	lsls	r3, r2, #30
 800a9b4:	bf18      	it	ne
 800a9b6:	2300      	movne	r3, #0
 800a9b8:	680e      	ldr	r6, [r1, #0]
 800a9ba:	bf08      	it	eq
 800a9bc:	694b      	ldreq	r3, [r1, #20]
 800a9be:	1bf6      	subs	r6, r6, r7
 800a9c0:	600f      	str	r7, [r1, #0]
 800a9c2:	608b      	str	r3, [r1, #8]
 800a9c4:	2e00      	cmp	r6, #0
 800a9c6:	dd9f      	ble.n	800a908 <__sflush_r+0x18>
 800a9c8:	4633      	mov	r3, r6
 800a9ca:	463a      	mov	r2, r7
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	6a21      	ldr	r1, [r4, #32]
 800a9d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a9d4:	47e0      	blx	ip
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	dc06      	bgt.n	800a9e8 <__sflush_r+0xf8>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9e4:	81a3      	strh	r3, [r4, #12]
 800a9e6:	e790      	b.n	800a90a <__sflush_r+0x1a>
 800a9e8:	4407      	add	r7, r0
 800a9ea:	1a36      	subs	r6, r6, r0
 800a9ec:	e7ea      	b.n	800a9c4 <__sflush_r+0xd4>
 800a9ee:	bf00      	nop
 800a9f0:	20400001 	.word	0x20400001

0800a9f4 <_fflush_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	690b      	ldr	r3, [r1, #16]
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	b913      	cbnz	r3, 800aa04 <_fflush_r+0x10>
 800a9fe:	2500      	movs	r5, #0
 800aa00:	4628      	mov	r0, r5
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	b118      	cbz	r0, 800aa0e <_fflush_r+0x1a>
 800aa06:	6983      	ldr	r3, [r0, #24]
 800aa08:	b90b      	cbnz	r3, 800aa0e <_fflush_r+0x1a>
 800aa0a:	f000 f887 	bl	800ab1c <__sinit>
 800aa0e:	4b14      	ldr	r3, [pc, #80]	; (800aa60 <_fflush_r+0x6c>)
 800aa10:	429c      	cmp	r4, r3
 800aa12:	d11b      	bne.n	800aa4c <_fflush_r+0x58>
 800aa14:	686c      	ldr	r4, [r5, #4]
 800aa16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d0ef      	beq.n	800a9fe <_fflush_r+0xa>
 800aa1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa20:	07d0      	lsls	r0, r2, #31
 800aa22:	d404      	bmi.n	800aa2e <_fflush_r+0x3a>
 800aa24:	0599      	lsls	r1, r3, #22
 800aa26:	d402      	bmi.n	800aa2e <_fflush_r+0x3a>
 800aa28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa2a:	f000 f915 	bl	800ac58 <__retarget_lock_acquire_recursive>
 800aa2e:	4628      	mov	r0, r5
 800aa30:	4621      	mov	r1, r4
 800aa32:	f7ff ff5d 	bl	800a8f0 <__sflush_r>
 800aa36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa38:	4605      	mov	r5, r0
 800aa3a:	07da      	lsls	r2, r3, #31
 800aa3c:	d4e0      	bmi.n	800aa00 <_fflush_r+0xc>
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	059b      	lsls	r3, r3, #22
 800aa42:	d4dd      	bmi.n	800aa00 <_fflush_r+0xc>
 800aa44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa46:	f000 f908 	bl	800ac5a <__retarget_lock_release_recursive>
 800aa4a:	e7d9      	b.n	800aa00 <_fflush_r+0xc>
 800aa4c:	4b05      	ldr	r3, [pc, #20]	; (800aa64 <_fflush_r+0x70>)
 800aa4e:	429c      	cmp	r4, r3
 800aa50:	d101      	bne.n	800aa56 <_fflush_r+0x62>
 800aa52:	68ac      	ldr	r4, [r5, #8]
 800aa54:	e7df      	b.n	800aa16 <_fflush_r+0x22>
 800aa56:	4b04      	ldr	r3, [pc, #16]	; (800aa68 <_fflush_r+0x74>)
 800aa58:	429c      	cmp	r4, r3
 800aa5a:	bf08      	it	eq
 800aa5c:	68ec      	ldreq	r4, [r5, #12]
 800aa5e:	e7da      	b.n	800aa16 <_fflush_r+0x22>
 800aa60:	0800c214 	.word	0x0800c214
 800aa64:	0800c234 	.word	0x0800c234
 800aa68:	0800c1f4 	.word	0x0800c1f4

0800aa6c <std>:
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	b510      	push	{r4, lr}
 800aa70:	4604      	mov	r4, r0
 800aa72:	e9c0 3300 	strd	r3, r3, [r0]
 800aa76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa7a:	6083      	str	r3, [r0, #8]
 800aa7c:	8181      	strh	r1, [r0, #12]
 800aa7e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa80:	81c2      	strh	r2, [r0, #14]
 800aa82:	6183      	str	r3, [r0, #24]
 800aa84:	4619      	mov	r1, r3
 800aa86:	2208      	movs	r2, #8
 800aa88:	305c      	adds	r0, #92	; 0x5c
 800aa8a:	f7fd fb65 	bl	8008158 <memset>
 800aa8e:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <std+0x38>)
 800aa90:	6224      	str	r4, [r4, #32]
 800aa92:	6263      	str	r3, [r4, #36]	; 0x24
 800aa94:	4b04      	ldr	r3, [pc, #16]	; (800aaa8 <std+0x3c>)
 800aa96:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa98:	4b04      	ldr	r3, [pc, #16]	; (800aaac <std+0x40>)
 800aa9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa9c:	4b04      	ldr	r3, [pc, #16]	; (800aab0 <std+0x44>)
 800aa9e:	6323      	str	r3, [r4, #48]	; 0x30
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	bf00      	nop
 800aaa4:	0800adc1 	.word	0x0800adc1
 800aaa8:	0800ade3 	.word	0x0800ade3
 800aaac:	0800ae1b 	.word	0x0800ae1b
 800aab0:	0800ae3f 	.word	0x0800ae3f

0800aab4 <_cleanup_r>:
 800aab4:	4901      	ldr	r1, [pc, #4]	; (800aabc <_cleanup_r+0x8>)
 800aab6:	f000 b8af 	b.w	800ac18 <_fwalk_reent>
 800aaba:	bf00      	nop
 800aabc:	0800a9f5 	.word	0x0800a9f5

0800aac0 <__sfmoreglue>:
 800aac0:	2268      	movs	r2, #104	; 0x68
 800aac2:	b570      	push	{r4, r5, r6, lr}
 800aac4:	1e4d      	subs	r5, r1, #1
 800aac6:	4355      	muls	r5, r2
 800aac8:	460e      	mov	r6, r1
 800aaca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aace:	f7ff fa6b 	bl	8009fa8 <_malloc_r>
 800aad2:	4604      	mov	r4, r0
 800aad4:	b140      	cbz	r0, 800aae8 <__sfmoreglue+0x28>
 800aad6:	2100      	movs	r1, #0
 800aad8:	e9c0 1600 	strd	r1, r6, [r0]
 800aadc:	300c      	adds	r0, #12
 800aade:	60a0      	str	r0, [r4, #8]
 800aae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aae4:	f7fd fb38 	bl	8008158 <memset>
 800aae8:	4620      	mov	r0, r4
 800aaea:	bd70      	pop	{r4, r5, r6, pc}

0800aaec <__sfp_lock_acquire>:
 800aaec:	4801      	ldr	r0, [pc, #4]	; (800aaf4 <__sfp_lock_acquire+0x8>)
 800aaee:	f000 b8b3 	b.w	800ac58 <__retarget_lock_acquire_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	200023f9 	.word	0x200023f9

0800aaf8 <__sfp_lock_release>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	; (800ab00 <__sfp_lock_release+0x8>)
 800aafa:	f000 b8ae 	b.w	800ac5a <__retarget_lock_release_recursive>
 800aafe:	bf00      	nop
 800ab00:	200023f9 	.word	0x200023f9

0800ab04 <__sinit_lock_acquire>:
 800ab04:	4801      	ldr	r0, [pc, #4]	; (800ab0c <__sinit_lock_acquire+0x8>)
 800ab06:	f000 b8a7 	b.w	800ac58 <__retarget_lock_acquire_recursive>
 800ab0a:	bf00      	nop
 800ab0c:	200023fa 	.word	0x200023fa

0800ab10 <__sinit_lock_release>:
 800ab10:	4801      	ldr	r0, [pc, #4]	; (800ab18 <__sinit_lock_release+0x8>)
 800ab12:	f000 b8a2 	b.w	800ac5a <__retarget_lock_release_recursive>
 800ab16:	bf00      	nop
 800ab18:	200023fa 	.word	0x200023fa

0800ab1c <__sinit>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	4604      	mov	r4, r0
 800ab20:	f7ff fff0 	bl	800ab04 <__sinit_lock_acquire>
 800ab24:	69a3      	ldr	r3, [r4, #24]
 800ab26:	b11b      	cbz	r3, 800ab30 <__sinit+0x14>
 800ab28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab2c:	f7ff bff0 	b.w	800ab10 <__sinit_lock_release>
 800ab30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab34:	6523      	str	r3, [r4, #80]	; 0x50
 800ab36:	4b13      	ldr	r3, [pc, #76]	; (800ab84 <__sinit+0x68>)
 800ab38:	4a13      	ldr	r2, [pc, #76]	; (800ab88 <__sinit+0x6c>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab3e:	42a3      	cmp	r3, r4
 800ab40:	bf08      	it	eq
 800ab42:	2301      	moveq	r3, #1
 800ab44:	4620      	mov	r0, r4
 800ab46:	bf08      	it	eq
 800ab48:	61a3      	streq	r3, [r4, #24]
 800ab4a:	f000 f81f 	bl	800ab8c <__sfp>
 800ab4e:	6060      	str	r0, [r4, #4]
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 f81b 	bl	800ab8c <__sfp>
 800ab56:	60a0      	str	r0, [r4, #8]
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 f817 	bl	800ab8c <__sfp>
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2104      	movs	r1, #4
 800ab62:	60e0      	str	r0, [r4, #12]
 800ab64:	6860      	ldr	r0, [r4, #4]
 800ab66:	f7ff ff81 	bl	800aa6c <std>
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	2109      	movs	r1, #9
 800ab6e:	68a0      	ldr	r0, [r4, #8]
 800ab70:	f7ff ff7c 	bl	800aa6c <std>
 800ab74:	2202      	movs	r2, #2
 800ab76:	2112      	movs	r1, #18
 800ab78:	68e0      	ldr	r0, [r4, #12]
 800ab7a:	f7ff ff77 	bl	800aa6c <std>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	61a3      	str	r3, [r4, #24]
 800ab82:	e7d1      	b.n	800ab28 <__sinit+0xc>
 800ab84:	0800be7c 	.word	0x0800be7c
 800ab88:	0800aab5 	.word	0x0800aab5

0800ab8c <__sfp>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	4607      	mov	r7, r0
 800ab90:	f7ff ffac 	bl	800aaec <__sfp_lock_acquire>
 800ab94:	4b1e      	ldr	r3, [pc, #120]	; (800ac10 <__sfp+0x84>)
 800ab96:	681e      	ldr	r6, [r3, #0]
 800ab98:	69b3      	ldr	r3, [r6, #24]
 800ab9a:	b913      	cbnz	r3, 800aba2 <__sfp+0x16>
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f7ff ffbd 	bl	800ab1c <__sinit>
 800aba2:	3648      	adds	r6, #72	; 0x48
 800aba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aba8:	3b01      	subs	r3, #1
 800abaa:	d503      	bpl.n	800abb4 <__sfp+0x28>
 800abac:	6833      	ldr	r3, [r6, #0]
 800abae:	b30b      	cbz	r3, 800abf4 <__sfp+0x68>
 800abb0:	6836      	ldr	r6, [r6, #0]
 800abb2:	e7f7      	b.n	800aba4 <__sfp+0x18>
 800abb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abb8:	b9d5      	cbnz	r5, 800abf0 <__sfp+0x64>
 800abba:	4b16      	ldr	r3, [pc, #88]	; (800ac14 <__sfp+0x88>)
 800abbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abc0:	60e3      	str	r3, [r4, #12]
 800abc2:	6665      	str	r5, [r4, #100]	; 0x64
 800abc4:	f000 f847 	bl	800ac56 <__retarget_lock_init_recursive>
 800abc8:	f7ff ff96 	bl	800aaf8 <__sfp_lock_release>
 800abcc:	2208      	movs	r2, #8
 800abce:	4629      	mov	r1, r5
 800abd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abd8:	6025      	str	r5, [r4, #0]
 800abda:	61a5      	str	r5, [r4, #24]
 800abdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abe0:	f7fd faba 	bl	8008158 <memset>
 800abe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abec:	4620      	mov	r0, r4
 800abee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf0:	3468      	adds	r4, #104	; 0x68
 800abf2:	e7d9      	b.n	800aba8 <__sfp+0x1c>
 800abf4:	2104      	movs	r1, #4
 800abf6:	4638      	mov	r0, r7
 800abf8:	f7ff ff62 	bl	800aac0 <__sfmoreglue>
 800abfc:	4604      	mov	r4, r0
 800abfe:	6030      	str	r0, [r6, #0]
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d1d5      	bne.n	800abb0 <__sfp+0x24>
 800ac04:	f7ff ff78 	bl	800aaf8 <__sfp_lock_release>
 800ac08:	230c      	movs	r3, #12
 800ac0a:	603b      	str	r3, [r7, #0]
 800ac0c:	e7ee      	b.n	800abec <__sfp+0x60>
 800ac0e:	bf00      	nop
 800ac10:	0800be7c 	.word	0x0800be7c
 800ac14:	ffff0001 	.word	0xffff0001

0800ac18 <_fwalk_reent>:
 800ac18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac1c:	4606      	mov	r6, r0
 800ac1e:	4688      	mov	r8, r1
 800ac20:	2700      	movs	r7, #0
 800ac22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac2a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac2e:	d505      	bpl.n	800ac3c <_fwalk_reent+0x24>
 800ac30:	6824      	ldr	r4, [r4, #0]
 800ac32:	2c00      	cmp	r4, #0
 800ac34:	d1f7      	bne.n	800ac26 <_fwalk_reent+0xe>
 800ac36:	4638      	mov	r0, r7
 800ac38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac3c:	89ab      	ldrh	r3, [r5, #12]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d907      	bls.n	800ac52 <_fwalk_reent+0x3a>
 800ac42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac46:	3301      	adds	r3, #1
 800ac48:	d003      	beq.n	800ac52 <_fwalk_reent+0x3a>
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	47c0      	blx	r8
 800ac50:	4307      	orrs	r7, r0
 800ac52:	3568      	adds	r5, #104	; 0x68
 800ac54:	e7e9      	b.n	800ac2a <_fwalk_reent+0x12>

0800ac56 <__retarget_lock_init_recursive>:
 800ac56:	4770      	bx	lr

0800ac58 <__retarget_lock_acquire_recursive>:
 800ac58:	4770      	bx	lr

0800ac5a <__retarget_lock_release_recursive>:
 800ac5a:	4770      	bx	lr

0800ac5c <__swhatbuf_r>:
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	460e      	mov	r6, r1
 800ac60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac64:	4614      	mov	r4, r2
 800ac66:	2900      	cmp	r1, #0
 800ac68:	461d      	mov	r5, r3
 800ac6a:	b096      	sub	sp, #88	; 0x58
 800ac6c:	da08      	bge.n	800ac80 <__swhatbuf_r+0x24>
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac74:	602a      	str	r2, [r5, #0]
 800ac76:	061a      	lsls	r2, r3, #24
 800ac78:	d410      	bmi.n	800ac9c <__swhatbuf_r+0x40>
 800ac7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac7e:	e00e      	b.n	800ac9e <__swhatbuf_r+0x42>
 800ac80:	466a      	mov	r2, sp
 800ac82:	f000 f903 	bl	800ae8c <_fstat_r>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	dbf1      	blt.n	800ac6e <__swhatbuf_r+0x12>
 800ac8a:	9a01      	ldr	r2, [sp, #4]
 800ac8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac94:	425a      	negs	r2, r3
 800ac96:	415a      	adcs	r2, r3
 800ac98:	602a      	str	r2, [r5, #0]
 800ac9a:	e7ee      	b.n	800ac7a <__swhatbuf_r+0x1e>
 800ac9c:	2340      	movs	r3, #64	; 0x40
 800ac9e:	2000      	movs	r0, #0
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	b016      	add	sp, #88	; 0x58
 800aca4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aca8 <__smakebuf_r>:
 800aca8:	898b      	ldrh	r3, [r1, #12]
 800acaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acac:	079d      	lsls	r5, r3, #30
 800acae:	4606      	mov	r6, r0
 800acb0:	460c      	mov	r4, r1
 800acb2:	d507      	bpl.n	800acc4 <__smakebuf_r+0x1c>
 800acb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	6123      	str	r3, [r4, #16]
 800acbc:	2301      	movs	r3, #1
 800acbe:	6163      	str	r3, [r4, #20]
 800acc0:	b002      	add	sp, #8
 800acc2:	bd70      	pop	{r4, r5, r6, pc}
 800acc4:	466a      	mov	r2, sp
 800acc6:	ab01      	add	r3, sp, #4
 800acc8:	f7ff ffc8 	bl	800ac5c <__swhatbuf_r>
 800accc:	9900      	ldr	r1, [sp, #0]
 800acce:	4605      	mov	r5, r0
 800acd0:	4630      	mov	r0, r6
 800acd2:	f7ff f969 	bl	8009fa8 <_malloc_r>
 800acd6:	b948      	cbnz	r0, 800acec <__smakebuf_r+0x44>
 800acd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acdc:	059a      	lsls	r2, r3, #22
 800acde:	d4ef      	bmi.n	800acc0 <__smakebuf_r+0x18>
 800ace0:	f023 0303 	bic.w	r3, r3, #3
 800ace4:	f043 0302 	orr.w	r3, r3, #2
 800ace8:	81a3      	strh	r3, [r4, #12]
 800acea:	e7e3      	b.n	800acb4 <__smakebuf_r+0xc>
 800acec:	4b0d      	ldr	r3, [pc, #52]	; (800ad24 <__smakebuf_r+0x7c>)
 800acee:	62b3      	str	r3, [r6, #40]	; 0x28
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	6020      	str	r0, [r4, #0]
 800acf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf8:	81a3      	strh	r3, [r4, #12]
 800acfa:	9b00      	ldr	r3, [sp, #0]
 800acfc:	6120      	str	r0, [r4, #16]
 800acfe:	6163      	str	r3, [r4, #20]
 800ad00:	9b01      	ldr	r3, [sp, #4]
 800ad02:	b15b      	cbz	r3, 800ad1c <__smakebuf_r+0x74>
 800ad04:	4630      	mov	r0, r6
 800ad06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad0a:	f000 f8d1 	bl	800aeb0 <_isatty_r>
 800ad0e:	b128      	cbz	r0, 800ad1c <__smakebuf_r+0x74>
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	f023 0303 	bic.w	r3, r3, #3
 800ad16:	f043 0301 	orr.w	r3, r3, #1
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	89a0      	ldrh	r0, [r4, #12]
 800ad1e:	4305      	orrs	r5, r0
 800ad20:	81a5      	strh	r5, [r4, #12]
 800ad22:	e7cd      	b.n	800acc0 <__smakebuf_r+0x18>
 800ad24:	0800aab5 	.word	0x0800aab5

0800ad28 <_malloc_usable_size_r>:
 800ad28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad2c:	1f18      	subs	r0, r3, #4
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfbc      	itt	lt
 800ad32:	580b      	ldrlt	r3, [r1, r0]
 800ad34:	18c0      	addlt	r0, r0, r3
 800ad36:	4770      	bx	lr

0800ad38 <_raise_r>:
 800ad38:	291f      	cmp	r1, #31
 800ad3a:	b538      	push	{r3, r4, r5, lr}
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	460d      	mov	r5, r1
 800ad40:	d904      	bls.n	800ad4c <_raise_r+0x14>
 800ad42:	2316      	movs	r3, #22
 800ad44:	6003      	str	r3, [r0, #0]
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad4e:	b112      	cbz	r2, 800ad56 <_raise_r+0x1e>
 800ad50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad54:	b94b      	cbnz	r3, 800ad6a <_raise_r+0x32>
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 f830 	bl	800adbc <_getpid_r>
 800ad5c:	462a      	mov	r2, r5
 800ad5e:	4601      	mov	r1, r0
 800ad60:	4620      	mov	r0, r4
 800ad62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad66:	f000 b817 	b.w	800ad98 <_kill_r>
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d00a      	beq.n	800ad84 <_raise_r+0x4c>
 800ad6e:	1c59      	adds	r1, r3, #1
 800ad70:	d103      	bne.n	800ad7a <_raise_r+0x42>
 800ad72:	2316      	movs	r3, #22
 800ad74:	6003      	str	r3, [r0, #0]
 800ad76:	2001      	movs	r0, #1
 800ad78:	e7e7      	b.n	800ad4a <_raise_r+0x12>
 800ad7a:	2400      	movs	r4, #0
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad82:	4798      	blx	r3
 800ad84:	2000      	movs	r0, #0
 800ad86:	e7e0      	b.n	800ad4a <_raise_r+0x12>

0800ad88 <raise>:
 800ad88:	4b02      	ldr	r3, [pc, #8]	; (800ad94 <raise+0xc>)
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	f7ff bfd3 	b.w	800ad38 <_raise_r>
 800ad92:	bf00      	nop
 800ad94:	20000024 	.word	0x20000024

0800ad98 <_kill_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4d06      	ldr	r5, [pc, #24]	; (800adb8 <_kill_r+0x20>)
 800ad9e:	4604      	mov	r4, r0
 800ada0:	4608      	mov	r0, r1
 800ada2:	4611      	mov	r1, r2
 800ada4:	602b      	str	r3, [r5, #0]
 800ada6:	f7f7 fdf4 	bl	8002992 <_kill>
 800adaa:	1c43      	adds	r3, r0, #1
 800adac:	d102      	bne.n	800adb4 <_kill_r+0x1c>
 800adae:	682b      	ldr	r3, [r5, #0]
 800adb0:	b103      	cbz	r3, 800adb4 <_kill_r+0x1c>
 800adb2:	6023      	str	r3, [r4, #0]
 800adb4:	bd38      	pop	{r3, r4, r5, pc}
 800adb6:	bf00      	nop
 800adb8:	200023f4 	.word	0x200023f4

0800adbc <_getpid_r>:
 800adbc:	f7f7 bde2 	b.w	8002984 <_getpid>

0800adc0 <__sread>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	460c      	mov	r4, r1
 800adc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc8:	f000 f894 	bl	800aef4 <_read_r>
 800adcc:	2800      	cmp	r0, #0
 800adce:	bfab      	itete	ge
 800add0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800add2:	89a3      	ldrhlt	r3, [r4, #12]
 800add4:	181b      	addge	r3, r3, r0
 800add6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adda:	bfac      	ite	ge
 800addc:	6563      	strge	r3, [r4, #84]	; 0x54
 800adde:	81a3      	strhlt	r3, [r4, #12]
 800ade0:	bd10      	pop	{r4, pc}

0800ade2 <__swrite>:
 800ade2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade6:	461f      	mov	r7, r3
 800ade8:	898b      	ldrh	r3, [r1, #12]
 800adea:	4605      	mov	r5, r0
 800adec:	05db      	lsls	r3, r3, #23
 800adee:	460c      	mov	r4, r1
 800adf0:	4616      	mov	r6, r2
 800adf2:	d505      	bpl.n	800ae00 <__swrite+0x1e>
 800adf4:	2302      	movs	r3, #2
 800adf6:	2200      	movs	r2, #0
 800adf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adfc:	f000 f868 	bl	800aed0 <_lseek_r>
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	4632      	mov	r2, r6
 800ae04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	463b      	mov	r3, r7
 800ae0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae16:	f000 b817 	b.w	800ae48 <_write_r>

0800ae1a <__sseek>:
 800ae1a:	b510      	push	{r4, lr}
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae22:	f000 f855 	bl	800aed0 <_lseek_r>
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	bf15      	itete	ne
 800ae2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae36:	81a3      	strheq	r3, [r4, #12]
 800ae38:	bf18      	it	ne
 800ae3a:	81a3      	strhne	r3, [r4, #12]
 800ae3c:	bd10      	pop	{r4, pc}

0800ae3e <__sclose>:
 800ae3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae42:	f000 b813 	b.w	800ae6c <_close_r>
	...

0800ae48 <_write_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	4611      	mov	r1, r2
 800ae50:	2200      	movs	r2, #0
 800ae52:	4d05      	ldr	r5, [pc, #20]	; (800ae68 <_write_r+0x20>)
 800ae54:	602a      	str	r2, [r5, #0]
 800ae56:	461a      	mov	r2, r3
 800ae58:	f7f7 fdd2 	bl	8002a00 <_write>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_write_r+0x1e>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_write_r+0x1e>
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	200023f4 	.word	0x200023f4

0800ae6c <_close_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4d05      	ldr	r5, [pc, #20]	; (800ae88 <_close_r+0x1c>)
 800ae72:	4604      	mov	r4, r0
 800ae74:	4608      	mov	r0, r1
 800ae76:	602b      	str	r3, [r5, #0]
 800ae78:	f7f7 fdde 	bl	8002a38 <_close>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	d102      	bne.n	800ae86 <_close_r+0x1a>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	b103      	cbz	r3, 800ae86 <_close_r+0x1a>
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	200023f4 	.word	0x200023f4

0800ae8c <_fstat_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	2300      	movs	r3, #0
 800ae90:	4d06      	ldr	r5, [pc, #24]	; (800aeac <_fstat_r+0x20>)
 800ae92:	4604      	mov	r4, r0
 800ae94:	4608      	mov	r0, r1
 800ae96:	4611      	mov	r1, r2
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	f7f7 fdd8 	bl	8002a4e <_fstat>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d102      	bne.n	800aea8 <_fstat_r+0x1c>
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	b103      	cbz	r3, 800aea8 <_fstat_r+0x1c>
 800aea6:	6023      	str	r3, [r4, #0]
 800aea8:	bd38      	pop	{r3, r4, r5, pc}
 800aeaa:	bf00      	nop
 800aeac:	200023f4 	.word	0x200023f4

0800aeb0 <_isatty_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4d05      	ldr	r5, [pc, #20]	; (800aecc <_isatty_r+0x1c>)
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	602b      	str	r3, [r5, #0]
 800aebc:	f7f7 fdd6 	bl	8002a6c <_isatty>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_isatty_r+0x1a>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_isatty_r+0x1a>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	200023f4 	.word	0x200023f4

0800aed0 <_lseek_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4604      	mov	r4, r0
 800aed4:	4608      	mov	r0, r1
 800aed6:	4611      	mov	r1, r2
 800aed8:	2200      	movs	r2, #0
 800aeda:	4d05      	ldr	r5, [pc, #20]	; (800aef0 <_lseek_r+0x20>)
 800aedc:	602a      	str	r2, [r5, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	f7f7 fdce 	bl	8002a80 <_lseek>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_lseek_r+0x1e>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_lseek_r+0x1e>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	200023f4 	.word	0x200023f4

0800aef4 <_read_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	4611      	mov	r1, r2
 800aefc:	2200      	movs	r2, #0
 800aefe:	4d05      	ldr	r5, [pc, #20]	; (800af14 <_read_r+0x20>)
 800af00:	602a      	str	r2, [r5, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	f7f7 fd5f 	bl	80029c6 <_read>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_read_r+0x1e>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_read_r+0x1e>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	200023f4 	.word	0x200023f4

0800af18 <pow>:
 800af18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af1c:	4614      	mov	r4, r2
 800af1e:	461d      	mov	r5, r3
 800af20:	4680      	mov	r8, r0
 800af22:	4689      	mov	r9, r1
 800af24:	f000 f860 	bl	800afe8 <__ieee754_pow>
 800af28:	4622      	mov	r2, r4
 800af2a:	4606      	mov	r6, r0
 800af2c:	460f      	mov	r7, r1
 800af2e:	462b      	mov	r3, r5
 800af30:	4620      	mov	r0, r4
 800af32:	4629      	mov	r1, r5
 800af34:	f7f5 fe1e 	bl	8000b74 <__aeabi_dcmpun>
 800af38:	bbc8      	cbnz	r0, 800afae <pow+0x96>
 800af3a:	2200      	movs	r2, #0
 800af3c:	2300      	movs	r3, #0
 800af3e:	4640      	mov	r0, r8
 800af40:	4649      	mov	r1, r9
 800af42:	f7f5 fde5 	bl	8000b10 <__aeabi_dcmpeq>
 800af46:	b1b8      	cbz	r0, 800af78 <pow+0x60>
 800af48:	2200      	movs	r2, #0
 800af4a:	2300      	movs	r3, #0
 800af4c:	4620      	mov	r0, r4
 800af4e:	4629      	mov	r1, r5
 800af50:	f7f5 fdde 	bl	8000b10 <__aeabi_dcmpeq>
 800af54:	2800      	cmp	r0, #0
 800af56:	d141      	bne.n	800afdc <pow+0xc4>
 800af58:	4620      	mov	r0, r4
 800af5a:	4629      	mov	r1, r5
 800af5c:	f000 fe39 	bl	800bbd2 <finite>
 800af60:	b328      	cbz	r0, 800afae <pow+0x96>
 800af62:	2200      	movs	r2, #0
 800af64:	2300      	movs	r3, #0
 800af66:	4620      	mov	r0, r4
 800af68:	4629      	mov	r1, r5
 800af6a:	f7f5 fddb 	bl	8000b24 <__aeabi_dcmplt>
 800af6e:	b1f0      	cbz	r0, 800afae <pow+0x96>
 800af70:	f7fd f8c8 	bl	8008104 <__errno>
 800af74:	2322      	movs	r3, #34	; 0x22
 800af76:	e019      	b.n	800afac <pow+0x94>
 800af78:	4630      	mov	r0, r6
 800af7a:	4639      	mov	r1, r7
 800af7c:	f000 fe29 	bl	800bbd2 <finite>
 800af80:	b9c8      	cbnz	r0, 800afb6 <pow+0x9e>
 800af82:	4640      	mov	r0, r8
 800af84:	4649      	mov	r1, r9
 800af86:	f000 fe24 	bl	800bbd2 <finite>
 800af8a:	b1a0      	cbz	r0, 800afb6 <pow+0x9e>
 800af8c:	4620      	mov	r0, r4
 800af8e:	4629      	mov	r1, r5
 800af90:	f000 fe1f 	bl	800bbd2 <finite>
 800af94:	b178      	cbz	r0, 800afb6 <pow+0x9e>
 800af96:	4632      	mov	r2, r6
 800af98:	463b      	mov	r3, r7
 800af9a:	4630      	mov	r0, r6
 800af9c:	4639      	mov	r1, r7
 800af9e:	f7f5 fde9 	bl	8000b74 <__aeabi_dcmpun>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d0e4      	beq.n	800af70 <pow+0x58>
 800afa6:	f7fd f8ad 	bl	8008104 <__errno>
 800afaa:	2321      	movs	r3, #33	; 0x21
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	4630      	mov	r0, r6
 800afb0:	4639      	mov	r1, r7
 800afb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afb6:	2200      	movs	r2, #0
 800afb8:	2300      	movs	r3, #0
 800afba:	4630      	mov	r0, r6
 800afbc:	4639      	mov	r1, r7
 800afbe:	f7f5 fda7 	bl	8000b10 <__aeabi_dcmpeq>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d0f3      	beq.n	800afae <pow+0x96>
 800afc6:	4640      	mov	r0, r8
 800afc8:	4649      	mov	r1, r9
 800afca:	f000 fe02 	bl	800bbd2 <finite>
 800afce:	2800      	cmp	r0, #0
 800afd0:	d0ed      	beq.n	800afae <pow+0x96>
 800afd2:	4620      	mov	r0, r4
 800afd4:	4629      	mov	r1, r5
 800afd6:	f000 fdfc 	bl	800bbd2 <finite>
 800afda:	e7c8      	b.n	800af6e <pow+0x56>
 800afdc:	2600      	movs	r6, #0
 800afde:	4f01      	ldr	r7, [pc, #4]	; (800afe4 <pow+0xcc>)
 800afe0:	e7e5      	b.n	800afae <pow+0x96>
 800afe2:	bf00      	nop
 800afe4:	3ff00000 	.word	0x3ff00000

0800afe8 <__ieee754_pow>:
 800afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afec:	b093      	sub	sp, #76	; 0x4c
 800afee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aff2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800aff6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800affa:	4689      	mov	r9, r1
 800affc:	ea56 0102 	orrs.w	r1, r6, r2
 800b000:	4680      	mov	r8, r0
 800b002:	d111      	bne.n	800b028 <__ieee754_pow+0x40>
 800b004:	1803      	adds	r3, r0, r0
 800b006:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b00a:	4152      	adcs	r2, r2
 800b00c:	4299      	cmp	r1, r3
 800b00e:	4b82      	ldr	r3, [pc, #520]	; (800b218 <__ieee754_pow+0x230>)
 800b010:	4193      	sbcs	r3, r2
 800b012:	f080 84b9 	bcs.w	800b988 <__ieee754_pow+0x9a0>
 800b016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b01a:	4640      	mov	r0, r8
 800b01c:	4649      	mov	r1, r9
 800b01e:	f7f5 f959 	bl	80002d4 <__adddf3>
 800b022:	4683      	mov	fp, r0
 800b024:	468c      	mov	ip, r1
 800b026:	e06f      	b.n	800b108 <__ieee754_pow+0x120>
 800b028:	4b7c      	ldr	r3, [pc, #496]	; (800b21c <__ieee754_pow+0x234>)
 800b02a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b02e:	429c      	cmp	r4, r3
 800b030:	464d      	mov	r5, r9
 800b032:	4682      	mov	sl, r0
 800b034:	dc06      	bgt.n	800b044 <__ieee754_pow+0x5c>
 800b036:	d101      	bne.n	800b03c <__ieee754_pow+0x54>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d1ec      	bne.n	800b016 <__ieee754_pow+0x2e>
 800b03c:	429e      	cmp	r6, r3
 800b03e:	dc01      	bgt.n	800b044 <__ieee754_pow+0x5c>
 800b040:	d10f      	bne.n	800b062 <__ieee754_pow+0x7a>
 800b042:	b172      	cbz	r2, 800b062 <__ieee754_pow+0x7a>
 800b044:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b048:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b04c:	ea55 050a 	orrs.w	r5, r5, sl
 800b050:	d1e1      	bne.n	800b016 <__ieee754_pow+0x2e>
 800b052:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b056:	18db      	adds	r3, r3, r3
 800b058:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b05c:	4152      	adcs	r2, r2
 800b05e:	429d      	cmp	r5, r3
 800b060:	e7d5      	b.n	800b00e <__ieee754_pow+0x26>
 800b062:	2d00      	cmp	r5, #0
 800b064:	da39      	bge.n	800b0da <__ieee754_pow+0xf2>
 800b066:	4b6e      	ldr	r3, [pc, #440]	; (800b220 <__ieee754_pow+0x238>)
 800b068:	429e      	cmp	r6, r3
 800b06a:	dc52      	bgt.n	800b112 <__ieee754_pow+0x12a>
 800b06c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b070:	429e      	cmp	r6, r3
 800b072:	f340 849c 	ble.w	800b9ae <__ieee754_pow+0x9c6>
 800b076:	1533      	asrs	r3, r6, #20
 800b078:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b07c:	2b14      	cmp	r3, #20
 800b07e:	dd0f      	ble.n	800b0a0 <__ieee754_pow+0xb8>
 800b080:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b084:	fa22 f103 	lsr.w	r1, r2, r3
 800b088:	fa01 f303 	lsl.w	r3, r1, r3
 800b08c:	4293      	cmp	r3, r2
 800b08e:	f040 848e 	bne.w	800b9ae <__ieee754_pow+0x9c6>
 800b092:	f001 0101 	and.w	r1, r1, #1
 800b096:	f1c1 0302 	rsb	r3, r1, #2
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	b182      	cbz	r2, 800b0c0 <__ieee754_pow+0xd8>
 800b09e:	e05d      	b.n	800b15c <__ieee754_pow+0x174>
 800b0a0:	2a00      	cmp	r2, #0
 800b0a2:	d159      	bne.n	800b158 <__ieee754_pow+0x170>
 800b0a4:	f1c3 0314 	rsb	r3, r3, #20
 800b0a8:	fa46 f103 	asr.w	r1, r6, r3
 800b0ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b0b0:	42b3      	cmp	r3, r6
 800b0b2:	f040 8479 	bne.w	800b9a8 <__ieee754_pow+0x9c0>
 800b0b6:	f001 0101 	and.w	r1, r1, #1
 800b0ba:	f1c1 0302 	rsb	r3, r1, #2
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	4b58      	ldr	r3, [pc, #352]	; (800b224 <__ieee754_pow+0x23c>)
 800b0c2:	429e      	cmp	r6, r3
 800b0c4:	d132      	bne.n	800b12c <__ieee754_pow+0x144>
 800b0c6:	2f00      	cmp	r7, #0
 800b0c8:	f280 846a 	bge.w	800b9a0 <__ieee754_pow+0x9b8>
 800b0cc:	4642      	mov	r2, r8
 800b0ce:	464b      	mov	r3, r9
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	4954      	ldr	r1, [pc, #336]	; (800b224 <__ieee754_pow+0x23c>)
 800b0d4:	f7f5 fbde 	bl	8000894 <__aeabi_ddiv>
 800b0d8:	e7a3      	b.n	800b022 <__ieee754_pow+0x3a>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	2a00      	cmp	r2, #0
 800b0e0:	d13c      	bne.n	800b15c <__ieee754_pow+0x174>
 800b0e2:	4b4e      	ldr	r3, [pc, #312]	; (800b21c <__ieee754_pow+0x234>)
 800b0e4:	429e      	cmp	r6, r3
 800b0e6:	d1eb      	bne.n	800b0c0 <__ieee754_pow+0xd8>
 800b0e8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b0ec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b0f0:	ea53 030a 	orrs.w	r3, r3, sl
 800b0f4:	f000 8448 	beq.w	800b988 <__ieee754_pow+0x9a0>
 800b0f8:	4b4b      	ldr	r3, [pc, #300]	; (800b228 <__ieee754_pow+0x240>)
 800b0fa:	429c      	cmp	r4, r3
 800b0fc:	dd0b      	ble.n	800b116 <__ieee754_pow+0x12e>
 800b0fe:	2f00      	cmp	r7, #0
 800b100:	f2c0 8448 	blt.w	800b994 <__ieee754_pow+0x9ac>
 800b104:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b108:	4658      	mov	r0, fp
 800b10a:	4661      	mov	r1, ip
 800b10c:	b013      	add	sp, #76	; 0x4c
 800b10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b112:	2302      	movs	r3, #2
 800b114:	e7e2      	b.n	800b0dc <__ieee754_pow+0xf4>
 800b116:	2f00      	cmp	r7, #0
 800b118:	f04f 0b00 	mov.w	fp, #0
 800b11c:	f04f 0c00 	mov.w	ip, #0
 800b120:	daf2      	bge.n	800b108 <__ieee754_pow+0x120>
 800b122:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b126:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b12a:	e7ed      	b.n	800b108 <__ieee754_pow+0x120>
 800b12c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b130:	d106      	bne.n	800b140 <__ieee754_pow+0x158>
 800b132:	4642      	mov	r2, r8
 800b134:	464b      	mov	r3, r9
 800b136:	4640      	mov	r0, r8
 800b138:	4649      	mov	r1, r9
 800b13a:	f7f5 fa81 	bl	8000640 <__aeabi_dmul>
 800b13e:	e770      	b.n	800b022 <__ieee754_pow+0x3a>
 800b140:	4b3a      	ldr	r3, [pc, #232]	; (800b22c <__ieee754_pow+0x244>)
 800b142:	429f      	cmp	r7, r3
 800b144:	d10a      	bne.n	800b15c <__ieee754_pow+0x174>
 800b146:	2d00      	cmp	r5, #0
 800b148:	db08      	blt.n	800b15c <__ieee754_pow+0x174>
 800b14a:	4640      	mov	r0, r8
 800b14c:	4649      	mov	r1, r9
 800b14e:	b013      	add	sp, #76	; 0x4c
 800b150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	f000 bc5e 	b.w	800ba14 <__ieee754_sqrt>
 800b158:	2300      	movs	r3, #0
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	4640      	mov	r0, r8
 800b15e:	4649      	mov	r1, r9
 800b160:	f000 fd34 	bl	800bbcc <fabs>
 800b164:	4683      	mov	fp, r0
 800b166:	468c      	mov	ip, r1
 800b168:	f1ba 0f00 	cmp.w	sl, #0
 800b16c:	d128      	bne.n	800b1c0 <__ieee754_pow+0x1d8>
 800b16e:	b124      	cbz	r4, 800b17a <__ieee754_pow+0x192>
 800b170:	4b2c      	ldr	r3, [pc, #176]	; (800b224 <__ieee754_pow+0x23c>)
 800b172:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b176:	429a      	cmp	r2, r3
 800b178:	d122      	bne.n	800b1c0 <__ieee754_pow+0x1d8>
 800b17a:	2f00      	cmp	r7, #0
 800b17c:	da07      	bge.n	800b18e <__ieee754_pow+0x1a6>
 800b17e:	465a      	mov	r2, fp
 800b180:	4663      	mov	r3, ip
 800b182:	2000      	movs	r0, #0
 800b184:	4927      	ldr	r1, [pc, #156]	; (800b224 <__ieee754_pow+0x23c>)
 800b186:	f7f5 fb85 	bl	8000894 <__aeabi_ddiv>
 800b18a:	4683      	mov	fp, r0
 800b18c:	468c      	mov	ip, r1
 800b18e:	2d00      	cmp	r5, #0
 800b190:	daba      	bge.n	800b108 <__ieee754_pow+0x120>
 800b192:	9b00      	ldr	r3, [sp, #0]
 800b194:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b198:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b19c:	4323      	orrs	r3, r4
 800b19e:	d108      	bne.n	800b1b2 <__ieee754_pow+0x1ca>
 800b1a0:	465a      	mov	r2, fp
 800b1a2:	4663      	mov	r3, ip
 800b1a4:	4658      	mov	r0, fp
 800b1a6:	4661      	mov	r1, ip
 800b1a8:	f7f5 f892 	bl	80002d0 <__aeabi_dsub>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	e790      	b.n	800b0d4 <__ieee754_pow+0xec>
 800b1b2:	9b00      	ldr	r3, [sp, #0]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d1a7      	bne.n	800b108 <__ieee754_pow+0x120>
 800b1b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b1bc:	469c      	mov	ip, r3
 800b1be:	e7a3      	b.n	800b108 <__ieee754_pow+0x120>
 800b1c0:	0feb      	lsrs	r3, r5, #31
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	930c      	str	r3, [sp, #48]	; 0x30
 800b1c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1c8:	9b00      	ldr	r3, [sp, #0]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	d104      	bne.n	800b1d8 <__ieee754_pow+0x1f0>
 800b1ce:	4642      	mov	r2, r8
 800b1d0:	464b      	mov	r3, r9
 800b1d2:	4640      	mov	r0, r8
 800b1d4:	4649      	mov	r1, r9
 800b1d6:	e7e7      	b.n	800b1a8 <__ieee754_pow+0x1c0>
 800b1d8:	4b15      	ldr	r3, [pc, #84]	; (800b230 <__ieee754_pow+0x248>)
 800b1da:	429e      	cmp	r6, r3
 800b1dc:	f340 80f6 	ble.w	800b3cc <__ieee754_pow+0x3e4>
 800b1e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b1e4:	429e      	cmp	r6, r3
 800b1e6:	4b10      	ldr	r3, [pc, #64]	; (800b228 <__ieee754_pow+0x240>)
 800b1e8:	dd09      	ble.n	800b1fe <__ieee754_pow+0x216>
 800b1ea:	429c      	cmp	r4, r3
 800b1ec:	dc0c      	bgt.n	800b208 <__ieee754_pow+0x220>
 800b1ee:	2f00      	cmp	r7, #0
 800b1f0:	da0c      	bge.n	800b20c <__ieee754_pow+0x224>
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	b013      	add	sp, #76	; 0x4c
 800b1f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fa:	f000 bce2 	b.w	800bbc2 <__math_oflow>
 800b1fe:	429c      	cmp	r4, r3
 800b200:	dbf5      	blt.n	800b1ee <__ieee754_pow+0x206>
 800b202:	4b08      	ldr	r3, [pc, #32]	; (800b224 <__ieee754_pow+0x23c>)
 800b204:	429c      	cmp	r4, r3
 800b206:	dd15      	ble.n	800b234 <__ieee754_pow+0x24c>
 800b208:	2f00      	cmp	r7, #0
 800b20a:	dcf2      	bgt.n	800b1f2 <__ieee754_pow+0x20a>
 800b20c:	2000      	movs	r0, #0
 800b20e:	b013      	add	sp, #76	; 0x4c
 800b210:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	f000 bcd0 	b.w	800bbb8 <__math_uflow>
 800b218:	fff00000 	.word	0xfff00000
 800b21c:	7ff00000 	.word	0x7ff00000
 800b220:	433fffff 	.word	0x433fffff
 800b224:	3ff00000 	.word	0x3ff00000
 800b228:	3fefffff 	.word	0x3fefffff
 800b22c:	3fe00000 	.word	0x3fe00000
 800b230:	41e00000 	.word	0x41e00000
 800b234:	4661      	mov	r1, ip
 800b236:	2200      	movs	r2, #0
 800b238:	4658      	mov	r0, fp
 800b23a:	4b5f      	ldr	r3, [pc, #380]	; (800b3b8 <__ieee754_pow+0x3d0>)
 800b23c:	f7f5 f848 	bl	80002d0 <__aeabi_dsub>
 800b240:	a355      	add	r3, pc, #340	; (adr r3, 800b398 <__ieee754_pow+0x3b0>)
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	4604      	mov	r4, r0
 800b248:	460d      	mov	r5, r1
 800b24a:	f7f5 f9f9 	bl	8000640 <__aeabi_dmul>
 800b24e:	a354      	add	r3, pc, #336	; (adr r3, 800b3a0 <__ieee754_pow+0x3b8>)
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	4606      	mov	r6, r0
 800b256:	460f      	mov	r7, r1
 800b258:	4620      	mov	r0, r4
 800b25a:	4629      	mov	r1, r5
 800b25c:	f7f5 f9f0 	bl	8000640 <__aeabi_dmul>
 800b260:	2200      	movs	r2, #0
 800b262:	4682      	mov	sl, r0
 800b264:	468b      	mov	fp, r1
 800b266:	4620      	mov	r0, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	4b54      	ldr	r3, [pc, #336]	; (800b3bc <__ieee754_pow+0x3d4>)
 800b26c:	f7f5 f9e8 	bl	8000640 <__aeabi_dmul>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	a14c      	add	r1, pc, #304	; (adr r1, 800b3a8 <__ieee754_pow+0x3c0>)
 800b276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b27a:	f7f5 f829 	bl	80002d0 <__aeabi_dsub>
 800b27e:	4622      	mov	r2, r4
 800b280:	462b      	mov	r3, r5
 800b282:	f7f5 f9dd 	bl	8000640 <__aeabi_dmul>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	2000      	movs	r0, #0
 800b28c:	494c      	ldr	r1, [pc, #304]	; (800b3c0 <__ieee754_pow+0x3d8>)
 800b28e:	f7f5 f81f 	bl	80002d0 <__aeabi_dsub>
 800b292:	4622      	mov	r2, r4
 800b294:	462b      	mov	r3, r5
 800b296:	4680      	mov	r8, r0
 800b298:	4689      	mov	r9, r1
 800b29a:	4620      	mov	r0, r4
 800b29c:	4629      	mov	r1, r5
 800b29e:	f7f5 f9cf 	bl	8000640 <__aeabi_dmul>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	4649      	mov	r1, r9
 800b2aa:	f7f5 f9c9 	bl	8000640 <__aeabi_dmul>
 800b2ae:	a340      	add	r3, pc, #256	; (adr r3, 800b3b0 <__ieee754_pow+0x3c8>)
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	f7f5 f9c4 	bl	8000640 <__aeabi_dmul>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4650      	mov	r0, sl
 800b2be:	4659      	mov	r1, fp
 800b2c0:	f7f5 f806 	bl	80002d0 <__aeabi_dsub>
 800b2c4:	f04f 0a00 	mov.w	sl, #0
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	460d      	mov	r5, r1
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	4639      	mov	r1, r7
 800b2d4:	f7f4 fffe 	bl	80002d4 <__adddf3>
 800b2d8:	4632      	mov	r2, r6
 800b2da:	463b      	mov	r3, r7
 800b2dc:	4650      	mov	r0, sl
 800b2de:	468b      	mov	fp, r1
 800b2e0:	f7f4 fff6 	bl	80002d0 <__aeabi_dsub>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	f7f4 fff0 	bl	80002d0 <__aeabi_dsub>
 800b2f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b2f4:	9b00      	ldr	r3, [sp, #0]
 800b2f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	f04f 0600 	mov.w	r6, #0
 800b300:	f04f 0200 	mov.w	r2, #0
 800b304:	bf0c      	ite	eq
 800b306:	4b2f      	ldreq	r3, [pc, #188]	; (800b3c4 <__ieee754_pow+0x3dc>)
 800b308:	4b2b      	ldrne	r3, [pc, #172]	; (800b3b8 <__ieee754_pow+0x3d0>)
 800b30a:	4604      	mov	r4, r0
 800b30c:	460d      	mov	r5, r1
 800b30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b312:	e9cd 2300 	strd	r2, r3, [sp]
 800b316:	4632      	mov	r2, r6
 800b318:	463b      	mov	r3, r7
 800b31a:	f7f4 ffd9 	bl	80002d0 <__aeabi_dsub>
 800b31e:	4652      	mov	r2, sl
 800b320:	465b      	mov	r3, fp
 800b322:	f7f5 f98d 	bl	8000640 <__aeabi_dmul>
 800b326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b32a:	4680      	mov	r8, r0
 800b32c:	4689      	mov	r9, r1
 800b32e:	4620      	mov	r0, r4
 800b330:	4629      	mov	r1, r5
 800b332:	f7f5 f985 	bl	8000640 <__aeabi_dmul>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4640      	mov	r0, r8
 800b33c:	4649      	mov	r1, r9
 800b33e:	f7f4 ffc9 	bl	80002d4 <__adddf3>
 800b342:	4632      	mov	r2, r6
 800b344:	463b      	mov	r3, r7
 800b346:	4680      	mov	r8, r0
 800b348:	4689      	mov	r9, r1
 800b34a:	4650      	mov	r0, sl
 800b34c:	4659      	mov	r1, fp
 800b34e:	f7f5 f977 	bl	8000640 <__aeabi_dmul>
 800b352:	4604      	mov	r4, r0
 800b354:	460d      	mov	r5, r1
 800b356:	460b      	mov	r3, r1
 800b358:	4602      	mov	r2, r0
 800b35a:	4649      	mov	r1, r9
 800b35c:	4640      	mov	r0, r8
 800b35e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b362:	f7f4 ffb7 	bl	80002d4 <__adddf3>
 800b366:	4b18      	ldr	r3, [pc, #96]	; (800b3c8 <__ieee754_pow+0x3e0>)
 800b368:	4682      	mov	sl, r0
 800b36a:	4299      	cmp	r1, r3
 800b36c:	460f      	mov	r7, r1
 800b36e:	460e      	mov	r6, r1
 800b370:	f340 82e5 	ble.w	800b93e <__ieee754_pow+0x956>
 800b374:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b378:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b37c:	4303      	orrs	r3, r0
 800b37e:	f000 81df 	beq.w	800b740 <__ieee754_pow+0x758>
 800b382:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b386:	2200      	movs	r2, #0
 800b388:	2300      	movs	r3, #0
 800b38a:	f7f5 fbcb 	bl	8000b24 <__aeabi_dcmplt>
 800b38e:	3800      	subs	r0, #0
 800b390:	bf18      	it	ne
 800b392:	2001      	movne	r0, #1
 800b394:	e72e      	b.n	800b1f4 <__ieee754_pow+0x20c>
 800b396:	bf00      	nop
 800b398:	60000000 	.word	0x60000000
 800b39c:	3ff71547 	.word	0x3ff71547
 800b3a0:	f85ddf44 	.word	0xf85ddf44
 800b3a4:	3e54ae0b 	.word	0x3e54ae0b
 800b3a8:	55555555 	.word	0x55555555
 800b3ac:	3fd55555 	.word	0x3fd55555
 800b3b0:	652b82fe 	.word	0x652b82fe
 800b3b4:	3ff71547 	.word	0x3ff71547
 800b3b8:	3ff00000 	.word	0x3ff00000
 800b3bc:	3fd00000 	.word	0x3fd00000
 800b3c0:	3fe00000 	.word	0x3fe00000
 800b3c4:	bff00000 	.word	0xbff00000
 800b3c8:	408fffff 	.word	0x408fffff
 800b3cc:	4bd2      	ldr	r3, [pc, #840]	; (800b718 <__ieee754_pow+0x730>)
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	402b      	ands	r3, r5
 800b3d2:	b943      	cbnz	r3, 800b3e6 <__ieee754_pow+0x3fe>
 800b3d4:	4658      	mov	r0, fp
 800b3d6:	4661      	mov	r1, ip
 800b3d8:	4bd0      	ldr	r3, [pc, #832]	; (800b71c <__ieee754_pow+0x734>)
 800b3da:	f7f5 f931 	bl	8000640 <__aeabi_dmul>
 800b3de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b3e2:	4683      	mov	fp, r0
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	1523      	asrs	r3, r4, #20
 800b3e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b3ec:	4413      	add	r3, r2
 800b3ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3f0:	4bcb      	ldr	r3, [pc, #812]	; (800b720 <__ieee754_pow+0x738>)
 800b3f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b3f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b3fa:	429c      	cmp	r4, r3
 800b3fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b400:	dd08      	ble.n	800b414 <__ieee754_pow+0x42c>
 800b402:	4bc8      	ldr	r3, [pc, #800]	; (800b724 <__ieee754_pow+0x73c>)
 800b404:	429c      	cmp	r4, r3
 800b406:	f340 8199 	ble.w	800b73c <__ieee754_pow+0x754>
 800b40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b40c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b410:	3301      	adds	r3, #1
 800b412:	930b      	str	r3, [sp, #44]	; 0x2c
 800b414:	2600      	movs	r6, #0
 800b416:	00f3      	lsls	r3, r6, #3
 800b418:	930d      	str	r3, [sp, #52]	; 0x34
 800b41a:	4bc3      	ldr	r3, [pc, #780]	; (800b728 <__ieee754_pow+0x740>)
 800b41c:	4658      	mov	r0, fp
 800b41e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b422:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b426:	4629      	mov	r1, r5
 800b428:	461a      	mov	r2, r3
 800b42a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b42e:	4623      	mov	r3, r4
 800b430:	f7f4 ff4e 	bl	80002d0 <__aeabi_dsub>
 800b434:	46da      	mov	sl, fp
 800b436:	462b      	mov	r3, r5
 800b438:	4652      	mov	r2, sl
 800b43a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b43e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b442:	f7f4 ff47 	bl	80002d4 <__adddf3>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	2000      	movs	r0, #0
 800b44c:	49b7      	ldr	r1, [pc, #732]	; (800b72c <__ieee754_pow+0x744>)
 800b44e:	f7f5 fa21 	bl	8000894 <__aeabi_ddiv>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b45a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b45e:	f7f5 f8ef 	bl	8000640 <__aeabi_dmul>
 800b462:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b466:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b46a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b46e:	2300      	movs	r3, #0
 800b470:	2200      	movs	r2, #0
 800b472:	46ab      	mov	fp, r5
 800b474:	106d      	asrs	r5, r5, #1
 800b476:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b47a:	9304      	str	r3, [sp, #16]
 800b47c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b480:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b484:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b488:	4640      	mov	r0, r8
 800b48a:	4649      	mov	r1, r9
 800b48c:	4614      	mov	r4, r2
 800b48e:	461d      	mov	r5, r3
 800b490:	f7f5 f8d6 	bl	8000640 <__aeabi_dmul>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b49c:	f7f4 ff18 	bl	80002d0 <__aeabi_dsub>
 800b4a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	460f      	mov	r7, r1
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	f7f4 ff10 	bl	80002d0 <__aeabi_dsub>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4650      	mov	r0, sl
 800b4b6:	4659      	mov	r1, fp
 800b4b8:	f7f4 ff0a 	bl	80002d0 <__aeabi_dsub>
 800b4bc:	4642      	mov	r2, r8
 800b4be:	464b      	mov	r3, r9
 800b4c0:	f7f5 f8be 	bl	8000640 <__aeabi_dmul>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	4639      	mov	r1, r7
 800b4cc:	f7f4 ff00 	bl	80002d0 <__aeabi_dsub>
 800b4d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4d4:	f7f5 f8b4 	bl	8000640 <__aeabi_dmul>
 800b4d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	f7f5 f8ac 	bl	8000640 <__aeabi_dmul>
 800b4e8:	a379      	add	r3, pc, #484	; (adr r3, 800b6d0 <__ieee754_pow+0x6e8>)
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	460d      	mov	r5, r1
 800b4f2:	f7f5 f8a5 	bl	8000640 <__aeabi_dmul>
 800b4f6:	a378      	add	r3, pc, #480	; (adr r3, 800b6d8 <__ieee754_pow+0x6f0>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	f7f4 feea 	bl	80002d4 <__adddf3>
 800b500:	4622      	mov	r2, r4
 800b502:	462b      	mov	r3, r5
 800b504:	f7f5 f89c 	bl	8000640 <__aeabi_dmul>
 800b508:	a375      	add	r3, pc, #468	; (adr r3, 800b6e0 <__ieee754_pow+0x6f8>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f4 fee1 	bl	80002d4 <__adddf3>
 800b512:	4622      	mov	r2, r4
 800b514:	462b      	mov	r3, r5
 800b516:	f7f5 f893 	bl	8000640 <__aeabi_dmul>
 800b51a:	a373      	add	r3, pc, #460	; (adr r3, 800b6e8 <__ieee754_pow+0x700>)
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f7f4 fed8 	bl	80002d4 <__adddf3>
 800b524:	4622      	mov	r2, r4
 800b526:	462b      	mov	r3, r5
 800b528:	f7f5 f88a 	bl	8000640 <__aeabi_dmul>
 800b52c:	a370      	add	r3, pc, #448	; (adr r3, 800b6f0 <__ieee754_pow+0x708>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f7f4 fecf 	bl	80002d4 <__adddf3>
 800b536:	4622      	mov	r2, r4
 800b538:	462b      	mov	r3, r5
 800b53a:	f7f5 f881 	bl	8000640 <__aeabi_dmul>
 800b53e:	a36e      	add	r3, pc, #440	; (adr r3, 800b6f8 <__ieee754_pow+0x710>)
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	f7f4 fec6 	bl	80002d4 <__adddf3>
 800b548:	4622      	mov	r2, r4
 800b54a:	4606      	mov	r6, r0
 800b54c:	460f      	mov	r7, r1
 800b54e:	462b      	mov	r3, r5
 800b550:	4620      	mov	r0, r4
 800b552:	4629      	mov	r1, r5
 800b554:	f7f5 f874 	bl	8000640 <__aeabi_dmul>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4630      	mov	r0, r6
 800b55e:	4639      	mov	r1, r7
 800b560:	f7f5 f86e 	bl	8000640 <__aeabi_dmul>
 800b564:	4604      	mov	r4, r0
 800b566:	460d      	mov	r5, r1
 800b568:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b56c:	4642      	mov	r2, r8
 800b56e:	464b      	mov	r3, r9
 800b570:	f7f4 feb0 	bl	80002d4 <__adddf3>
 800b574:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b578:	f7f5 f862 	bl	8000640 <__aeabi_dmul>
 800b57c:	4622      	mov	r2, r4
 800b57e:	462b      	mov	r3, r5
 800b580:	f7f4 fea8 	bl	80002d4 <__adddf3>
 800b584:	4642      	mov	r2, r8
 800b586:	4606      	mov	r6, r0
 800b588:	460f      	mov	r7, r1
 800b58a:	464b      	mov	r3, r9
 800b58c:	4640      	mov	r0, r8
 800b58e:	4649      	mov	r1, r9
 800b590:	f7f5 f856 	bl	8000640 <__aeabi_dmul>
 800b594:	2200      	movs	r2, #0
 800b596:	4b66      	ldr	r3, [pc, #408]	; (800b730 <__ieee754_pow+0x748>)
 800b598:	4682      	mov	sl, r0
 800b59a:	468b      	mov	fp, r1
 800b59c:	f7f4 fe9a 	bl	80002d4 <__adddf3>
 800b5a0:	4632      	mov	r2, r6
 800b5a2:	463b      	mov	r3, r7
 800b5a4:	f7f4 fe96 	bl	80002d4 <__adddf3>
 800b5a8:	2400      	movs	r4, #0
 800b5aa:	460d      	mov	r5, r1
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	4649      	mov	r1, r9
 800b5b4:	f7f5 f844 	bl	8000640 <__aeabi_dmul>
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	4680      	mov	r8, r0
 800b5bc:	4689      	mov	r9, r1
 800b5be:	4620      	mov	r0, r4
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	4b5b      	ldr	r3, [pc, #364]	; (800b730 <__ieee754_pow+0x748>)
 800b5c4:	f7f4 fe84 	bl	80002d0 <__aeabi_dsub>
 800b5c8:	4652      	mov	r2, sl
 800b5ca:	465b      	mov	r3, fp
 800b5cc:	f7f4 fe80 	bl	80002d0 <__aeabi_dsub>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	4639      	mov	r1, r7
 800b5d8:	f7f4 fe7a 	bl	80002d0 <__aeabi_dsub>
 800b5dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5e0:	f7f5 f82e 	bl	8000640 <__aeabi_dmul>
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	460f      	mov	r7, r1
 800b5ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5ee:	462b      	mov	r3, r5
 800b5f0:	f7f5 f826 	bl	8000640 <__aeabi_dmul>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	f7f4 fe6a 	bl	80002d4 <__adddf3>
 800b600:	2400      	movs	r4, #0
 800b602:	4606      	mov	r6, r0
 800b604:	460f      	mov	r7, r1
 800b606:	4602      	mov	r2, r0
 800b608:	460b      	mov	r3, r1
 800b60a:	4640      	mov	r0, r8
 800b60c:	4649      	mov	r1, r9
 800b60e:	f7f4 fe61 	bl	80002d4 <__adddf3>
 800b612:	a33b      	add	r3, pc, #236	; (adr r3, 800b700 <__ieee754_pow+0x718>)
 800b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b618:	4620      	mov	r0, r4
 800b61a:	460d      	mov	r5, r1
 800b61c:	f7f5 f810 	bl	8000640 <__aeabi_dmul>
 800b620:	4642      	mov	r2, r8
 800b622:	464b      	mov	r3, r9
 800b624:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b628:	4620      	mov	r0, r4
 800b62a:	4629      	mov	r1, r5
 800b62c:	f7f4 fe50 	bl	80002d0 <__aeabi_dsub>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4630      	mov	r0, r6
 800b636:	4639      	mov	r1, r7
 800b638:	f7f4 fe4a 	bl	80002d0 <__aeabi_dsub>
 800b63c:	a332      	add	r3, pc, #200	; (adr r3, 800b708 <__ieee754_pow+0x720>)
 800b63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b642:	f7f4 fffd 	bl	8000640 <__aeabi_dmul>
 800b646:	a332      	add	r3, pc, #200	; (adr r3, 800b710 <__ieee754_pow+0x728>)
 800b648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64c:	4606      	mov	r6, r0
 800b64e:	460f      	mov	r7, r1
 800b650:	4620      	mov	r0, r4
 800b652:	4629      	mov	r1, r5
 800b654:	f7f4 fff4 	bl	8000640 <__aeabi_dmul>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4630      	mov	r0, r6
 800b65e:	4639      	mov	r1, r7
 800b660:	f7f4 fe38 	bl	80002d4 <__adddf3>
 800b664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b666:	4b33      	ldr	r3, [pc, #204]	; (800b734 <__ieee754_pow+0x74c>)
 800b668:	f04f 0a00 	mov.w	sl, #0
 800b66c:	4413      	add	r3, r2
 800b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b672:	f7f4 fe2f 	bl	80002d4 <__adddf3>
 800b676:	4680      	mov	r8, r0
 800b678:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b67a:	4689      	mov	r9, r1
 800b67c:	f7f4 ff76 	bl	800056c <__aeabi_i2d>
 800b680:	4604      	mov	r4, r0
 800b682:	460d      	mov	r5, r1
 800b684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b686:	4b2c      	ldr	r3, [pc, #176]	; (800b738 <__ieee754_pow+0x750>)
 800b688:	4413      	add	r3, r2
 800b68a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b68e:	4642      	mov	r2, r8
 800b690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b694:	464b      	mov	r3, r9
 800b696:	f7f4 fe1d 	bl	80002d4 <__adddf3>
 800b69a:	4632      	mov	r2, r6
 800b69c:	463b      	mov	r3, r7
 800b69e:	f7f4 fe19 	bl	80002d4 <__adddf3>
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	f7f4 fe15 	bl	80002d4 <__adddf3>
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	462b      	mov	r3, r5
 800b6ae:	4650      	mov	r0, sl
 800b6b0:	468b      	mov	fp, r1
 800b6b2:	f7f4 fe0d 	bl	80002d0 <__aeabi_dsub>
 800b6b6:	4632      	mov	r2, r6
 800b6b8:	463b      	mov	r3, r7
 800b6ba:	f7f4 fe09 	bl	80002d0 <__aeabi_dsub>
 800b6be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6c2:	f7f4 fe05 	bl	80002d0 <__aeabi_dsub>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	e60d      	b.n	800b2ec <__ieee754_pow+0x304>
 800b6d0:	4a454eef 	.word	0x4a454eef
 800b6d4:	3fca7e28 	.word	0x3fca7e28
 800b6d8:	93c9db65 	.word	0x93c9db65
 800b6dc:	3fcd864a 	.word	0x3fcd864a
 800b6e0:	a91d4101 	.word	0xa91d4101
 800b6e4:	3fd17460 	.word	0x3fd17460
 800b6e8:	518f264d 	.word	0x518f264d
 800b6ec:	3fd55555 	.word	0x3fd55555
 800b6f0:	db6fabff 	.word	0xdb6fabff
 800b6f4:	3fdb6db6 	.word	0x3fdb6db6
 800b6f8:	33333303 	.word	0x33333303
 800b6fc:	3fe33333 	.word	0x3fe33333
 800b700:	e0000000 	.word	0xe0000000
 800b704:	3feec709 	.word	0x3feec709
 800b708:	dc3a03fd 	.word	0xdc3a03fd
 800b70c:	3feec709 	.word	0x3feec709
 800b710:	145b01f5 	.word	0x145b01f5
 800b714:	be3e2fe0 	.word	0xbe3e2fe0
 800b718:	7ff00000 	.word	0x7ff00000
 800b71c:	43400000 	.word	0x43400000
 800b720:	0003988e 	.word	0x0003988e
 800b724:	000bb679 	.word	0x000bb679
 800b728:	0800c258 	.word	0x0800c258
 800b72c:	3ff00000 	.word	0x3ff00000
 800b730:	40080000 	.word	0x40080000
 800b734:	0800c278 	.word	0x0800c278
 800b738:	0800c268 	.word	0x0800c268
 800b73c:	2601      	movs	r6, #1
 800b73e:	e66a      	b.n	800b416 <__ieee754_pow+0x42e>
 800b740:	a39d      	add	r3, pc, #628	; (adr r3, 800b9b8 <__ieee754_pow+0x9d0>)
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	4640      	mov	r0, r8
 800b748:	4649      	mov	r1, r9
 800b74a:	f7f4 fdc3 	bl	80002d4 <__adddf3>
 800b74e:	4622      	mov	r2, r4
 800b750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b754:	462b      	mov	r3, r5
 800b756:	4650      	mov	r0, sl
 800b758:	4639      	mov	r1, r7
 800b75a:	f7f4 fdb9 	bl	80002d0 <__aeabi_dsub>
 800b75e:	4602      	mov	r2, r0
 800b760:	460b      	mov	r3, r1
 800b762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b766:	f7f5 f9fb 	bl	8000b60 <__aeabi_dcmpgt>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	f47f ae09 	bne.w	800b382 <__ieee754_pow+0x39a>
 800b770:	4aa3      	ldr	r2, [pc, #652]	; (800ba00 <__ieee754_pow+0xa18>)
 800b772:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b776:	4293      	cmp	r3, r2
 800b778:	f340 8101 	ble.w	800b97e <__ieee754_pow+0x996>
 800b77c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b780:	2000      	movs	r0, #0
 800b782:	151b      	asrs	r3, r3, #20
 800b784:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b788:	fa4a f303 	asr.w	r3, sl, r3
 800b78c:	4433      	add	r3, r6
 800b78e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b792:	4f9c      	ldr	r7, [pc, #624]	; (800ba04 <__ieee754_pow+0xa1c>)
 800b794:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b798:	4117      	asrs	r7, r2
 800b79a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b79e:	ea23 0107 	bic.w	r1, r3, r7
 800b7a2:	f1c2 0214 	rsb	r2, r2, #20
 800b7a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	fa4a fa02 	asr.w	sl, sl, r2
 800b7b0:	2e00      	cmp	r6, #0
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	bfb8      	it	lt
 800b7ba:	f1ca 0a00 	rsblt	sl, sl, #0
 800b7be:	f7f4 fd87 	bl	80002d0 <__aeabi_dsub>
 800b7c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ca:	2400      	movs	r4, #0
 800b7cc:	4642      	mov	r2, r8
 800b7ce:	464b      	mov	r3, r9
 800b7d0:	f7f4 fd80 	bl	80002d4 <__adddf3>
 800b7d4:	a37a      	add	r3, pc, #488	; (adr r3, 800b9c0 <__ieee754_pow+0x9d8>)
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	4620      	mov	r0, r4
 800b7dc:	460d      	mov	r5, r1
 800b7de:	f7f4 ff2f 	bl	8000640 <__aeabi_dmul>
 800b7e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	f7f4 fd6f 	bl	80002d0 <__aeabi_dsub>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4640      	mov	r0, r8
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	f7f4 fd69 	bl	80002d0 <__aeabi_dsub>
 800b7fe:	a372      	add	r3, pc, #456	; (adr r3, 800b9c8 <__ieee754_pow+0x9e0>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f7f4 ff1c 	bl	8000640 <__aeabi_dmul>
 800b808:	a371      	add	r3, pc, #452	; (adr r3, 800b9d0 <__ieee754_pow+0x9e8>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	4680      	mov	r8, r0
 800b810:	4689      	mov	r9, r1
 800b812:	4620      	mov	r0, r4
 800b814:	4629      	mov	r1, r5
 800b816:	f7f4 ff13 	bl	8000640 <__aeabi_dmul>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	4640      	mov	r0, r8
 800b820:	4649      	mov	r1, r9
 800b822:	f7f4 fd57 	bl	80002d4 <__adddf3>
 800b826:	4604      	mov	r4, r0
 800b828:	460d      	mov	r5, r1
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4630      	mov	r0, r6
 800b830:	4639      	mov	r1, r7
 800b832:	f7f4 fd4f 	bl	80002d4 <__adddf3>
 800b836:	4632      	mov	r2, r6
 800b838:	463b      	mov	r3, r7
 800b83a:	4680      	mov	r8, r0
 800b83c:	4689      	mov	r9, r1
 800b83e:	f7f4 fd47 	bl	80002d0 <__aeabi_dsub>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4620      	mov	r0, r4
 800b848:	4629      	mov	r1, r5
 800b84a:	f7f4 fd41 	bl	80002d0 <__aeabi_dsub>
 800b84e:	4642      	mov	r2, r8
 800b850:	4606      	mov	r6, r0
 800b852:	460f      	mov	r7, r1
 800b854:	464b      	mov	r3, r9
 800b856:	4640      	mov	r0, r8
 800b858:	4649      	mov	r1, r9
 800b85a:	f7f4 fef1 	bl	8000640 <__aeabi_dmul>
 800b85e:	a35e      	add	r3, pc, #376	; (adr r3, 800b9d8 <__ieee754_pow+0x9f0>)
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	4604      	mov	r4, r0
 800b866:	460d      	mov	r5, r1
 800b868:	f7f4 feea 	bl	8000640 <__aeabi_dmul>
 800b86c:	a35c      	add	r3, pc, #368	; (adr r3, 800b9e0 <__ieee754_pow+0x9f8>)
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	f7f4 fd2d 	bl	80002d0 <__aeabi_dsub>
 800b876:	4622      	mov	r2, r4
 800b878:	462b      	mov	r3, r5
 800b87a:	f7f4 fee1 	bl	8000640 <__aeabi_dmul>
 800b87e:	a35a      	add	r3, pc, #360	; (adr r3, 800b9e8 <__ieee754_pow+0xa00>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	f7f4 fd26 	bl	80002d4 <__adddf3>
 800b888:	4622      	mov	r2, r4
 800b88a:	462b      	mov	r3, r5
 800b88c:	f7f4 fed8 	bl	8000640 <__aeabi_dmul>
 800b890:	a357      	add	r3, pc, #348	; (adr r3, 800b9f0 <__ieee754_pow+0xa08>)
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	f7f4 fd1b 	bl	80002d0 <__aeabi_dsub>
 800b89a:	4622      	mov	r2, r4
 800b89c:	462b      	mov	r3, r5
 800b89e:	f7f4 fecf 	bl	8000640 <__aeabi_dmul>
 800b8a2:	a355      	add	r3, pc, #340	; (adr r3, 800b9f8 <__ieee754_pow+0xa10>)
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	f7f4 fd14 	bl	80002d4 <__adddf3>
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	462b      	mov	r3, r5
 800b8b0:	f7f4 fec6 	bl	8000640 <__aeabi_dmul>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4640      	mov	r0, r8
 800b8ba:	4649      	mov	r1, r9
 800b8bc:	f7f4 fd08 	bl	80002d0 <__aeabi_dsub>
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	460d      	mov	r5, r1
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	f7f4 feb8 	bl	8000640 <__aeabi_dmul>
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8da:	4620      	mov	r0, r4
 800b8dc:	4629      	mov	r1, r5
 800b8de:	f7f4 fcf7 	bl	80002d0 <__aeabi_dsub>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ea:	f7f4 ffd3 	bl	8000894 <__aeabi_ddiv>
 800b8ee:	4632      	mov	r2, r6
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	463b      	mov	r3, r7
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	f7f4 fea1 	bl	8000640 <__aeabi_dmul>
 800b8fe:	4632      	mov	r2, r6
 800b900:	463b      	mov	r3, r7
 800b902:	f7f4 fce7 	bl	80002d4 <__adddf3>
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
 800b90a:	4620      	mov	r0, r4
 800b90c:	4629      	mov	r1, r5
 800b90e:	f7f4 fcdf 	bl	80002d0 <__aeabi_dsub>
 800b912:	4642      	mov	r2, r8
 800b914:	464b      	mov	r3, r9
 800b916:	f7f4 fcdb 	bl	80002d0 <__aeabi_dsub>
 800b91a:	4602      	mov	r2, r0
 800b91c:	460b      	mov	r3, r1
 800b91e:	2000      	movs	r0, #0
 800b920:	4939      	ldr	r1, [pc, #228]	; (800ba08 <__ieee754_pow+0xa20>)
 800b922:	f7f4 fcd5 	bl	80002d0 <__aeabi_dsub>
 800b926:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b92a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b92e:	da29      	bge.n	800b984 <__ieee754_pow+0x99c>
 800b930:	4652      	mov	r2, sl
 800b932:	f000 f955 	bl	800bbe0 <scalbn>
 800b936:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b93a:	f7ff bbfe 	b.w	800b13a <__ieee754_pow+0x152>
 800b93e:	4b33      	ldr	r3, [pc, #204]	; (800ba0c <__ieee754_pow+0xa24>)
 800b940:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b944:	429f      	cmp	r7, r3
 800b946:	f77f af13 	ble.w	800b770 <__ieee754_pow+0x788>
 800b94a:	4b31      	ldr	r3, [pc, #196]	; (800ba10 <__ieee754_pow+0xa28>)
 800b94c:	440b      	add	r3, r1
 800b94e:	4303      	orrs	r3, r0
 800b950:	d009      	beq.n	800b966 <__ieee754_pow+0x97e>
 800b952:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b956:	2200      	movs	r2, #0
 800b958:	2300      	movs	r3, #0
 800b95a:	f7f5 f8e3 	bl	8000b24 <__aeabi_dcmplt>
 800b95e:	3800      	subs	r0, #0
 800b960:	bf18      	it	ne
 800b962:	2001      	movne	r0, #1
 800b964:	e453      	b.n	800b20e <__ieee754_pow+0x226>
 800b966:	4622      	mov	r2, r4
 800b968:	462b      	mov	r3, r5
 800b96a:	f7f4 fcb1 	bl	80002d0 <__aeabi_dsub>
 800b96e:	4642      	mov	r2, r8
 800b970:	464b      	mov	r3, r9
 800b972:	f7f5 f8eb 	bl	8000b4c <__aeabi_dcmpge>
 800b976:	2800      	cmp	r0, #0
 800b978:	f43f aefa 	beq.w	800b770 <__ieee754_pow+0x788>
 800b97c:	e7e9      	b.n	800b952 <__ieee754_pow+0x96a>
 800b97e:	f04f 0a00 	mov.w	sl, #0
 800b982:	e720      	b.n	800b7c6 <__ieee754_pow+0x7de>
 800b984:	4621      	mov	r1, r4
 800b986:	e7d6      	b.n	800b936 <__ieee754_pow+0x94e>
 800b988:	f04f 0b00 	mov.w	fp, #0
 800b98c:	f8df c078 	ldr.w	ip, [pc, #120]	; 800ba08 <__ieee754_pow+0xa20>
 800b990:	f7ff bbba 	b.w	800b108 <__ieee754_pow+0x120>
 800b994:	f04f 0b00 	mov.w	fp, #0
 800b998:	f04f 0c00 	mov.w	ip, #0
 800b99c:	f7ff bbb4 	b.w	800b108 <__ieee754_pow+0x120>
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	f7ff bb3d 	b.w	800b022 <__ieee754_pow+0x3a>
 800b9a8:	9200      	str	r2, [sp, #0]
 800b9aa:	f7ff bb89 	b.w	800b0c0 <__ieee754_pow+0xd8>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f7ff bb73 	b.w	800b09a <__ieee754_pow+0xb2>
 800b9b4:	f3af 8000 	nop.w
 800b9b8:	652b82fe 	.word	0x652b82fe
 800b9bc:	3c971547 	.word	0x3c971547
 800b9c0:	00000000 	.word	0x00000000
 800b9c4:	3fe62e43 	.word	0x3fe62e43
 800b9c8:	fefa39ef 	.word	0xfefa39ef
 800b9cc:	3fe62e42 	.word	0x3fe62e42
 800b9d0:	0ca86c39 	.word	0x0ca86c39
 800b9d4:	be205c61 	.word	0xbe205c61
 800b9d8:	72bea4d0 	.word	0x72bea4d0
 800b9dc:	3e663769 	.word	0x3e663769
 800b9e0:	c5d26bf1 	.word	0xc5d26bf1
 800b9e4:	3ebbbd41 	.word	0x3ebbbd41
 800b9e8:	af25de2c 	.word	0xaf25de2c
 800b9ec:	3f11566a 	.word	0x3f11566a
 800b9f0:	16bebd93 	.word	0x16bebd93
 800b9f4:	3f66c16c 	.word	0x3f66c16c
 800b9f8:	5555553e 	.word	0x5555553e
 800b9fc:	3fc55555 	.word	0x3fc55555
 800ba00:	3fe00000 	.word	0x3fe00000
 800ba04:	000fffff 	.word	0x000fffff
 800ba08:	3ff00000 	.word	0x3ff00000
 800ba0c:	4090cbff 	.word	0x4090cbff
 800ba10:	3f6f3400 	.word	0x3f6f3400

0800ba14 <__ieee754_sqrt>:
 800ba14:	f8df c158 	ldr.w	ip, [pc, #344]	; 800bb70 <__ieee754_sqrt+0x15c>
 800ba18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1c:	ea3c 0c01 	bics.w	ip, ip, r1
 800ba20:	4606      	mov	r6, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	460c      	mov	r4, r1
 800ba26:	460a      	mov	r2, r1
 800ba28:	4607      	mov	r7, r0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	d10f      	bne.n	800ba4e <__ieee754_sqrt+0x3a>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	f7f4 fe05 	bl	8000640 <__aeabi_dmul>
 800ba36:	4602      	mov	r2, r0
 800ba38:	460b      	mov	r3, r1
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	f7f4 fc49 	bl	80002d4 <__adddf3>
 800ba42:	4606      	mov	r6, r0
 800ba44:	460d      	mov	r5, r1
 800ba46:	4630      	mov	r0, r6
 800ba48:	4629      	mov	r1, r5
 800ba4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba4e:	2900      	cmp	r1, #0
 800ba50:	dc0e      	bgt.n	800ba70 <__ieee754_sqrt+0x5c>
 800ba52:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ba56:	ea5c 0707 	orrs.w	r7, ip, r7
 800ba5a:	d0f4      	beq.n	800ba46 <__ieee754_sqrt+0x32>
 800ba5c:	b141      	cbz	r1, 800ba70 <__ieee754_sqrt+0x5c>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	f7f4 fc35 	bl	80002d0 <__aeabi_dsub>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	f7f4 ff13 	bl	8000894 <__aeabi_ddiv>
 800ba6e:	e7e8      	b.n	800ba42 <__ieee754_sqrt+0x2e>
 800ba70:	1521      	asrs	r1, r4, #20
 800ba72:	d075      	beq.n	800bb60 <__ieee754_sqrt+0x14c>
 800ba74:	07cc      	lsls	r4, r1, #31
 800ba76:	f04f 0400 	mov.w	r4, #0
 800ba7a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ba7e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800ba82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ba86:	bf5e      	ittt	pl
 800ba88:	0fd9      	lsrpl	r1, r3, #31
 800ba8a:	005b      	lslpl	r3, r3, #1
 800ba8c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800ba90:	0fd9      	lsrs	r1, r3, #31
 800ba92:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ba96:	2516      	movs	r5, #22
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba9e:	107f      	asrs	r7, r7, #1
 800baa0:	005b      	lsls	r3, r3, #1
 800baa2:	1846      	adds	r6, r0, r1
 800baa4:	4296      	cmp	r6, r2
 800baa6:	bfde      	ittt	le
 800baa8:	1b92      	suble	r2, r2, r6
 800baaa:	1870      	addle	r0, r6, r1
 800baac:	1864      	addle	r4, r4, r1
 800baae:	0052      	lsls	r2, r2, #1
 800bab0:	3d01      	subs	r5, #1
 800bab2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bab6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800baba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800babe:	d1f0      	bne.n	800baa2 <__ieee754_sqrt+0x8e>
 800bac0:	4629      	mov	r1, r5
 800bac2:	f04f 0e20 	mov.w	lr, #32
 800bac6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800baca:	4282      	cmp	r2, r0
 800bacc:	eb06 0c05 	add.w	ip, r6, r5
 800bad0:	dc02      	bgt.n	800bad8 <__ieee754_sqrt+0xc4>
 800bad2:	d113      	bne.n	800bafc <__ieee754_sqrt+0xe8>
 800bad4:	459c      	cmp	ip, r3
 800bad6:	d811      	bhi.n	800bafc <__ieee754_sqrt+0xe8>
 800bad8:	f1bc 0f00 	cmp.w	ip, #0
 800badc:	eb0c 0506 	add.w	r5, ip, r6
 800bae0:	da43      	bge.n	800bb6a <__ieee754_sqrt+0x156>
 800bae2:	2d00      	cmp	r5, #0
 800bae4:	db41      	blt.n	800bb6a <__ieee754_sqrt+0x156>
 800bae6:	f100 0801 	add.w	r8, r0, #1
 800baea:	1a12      	subs	r2, r2, r0
 800baec:	4640      	mov	r0, r8
 800baee:	459c      	cmp	ip, r3
 800baf0:	bf88      	it	hi
 800baf2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800baf6:	eba3 030c 	sub.w	r3, r3, ip
 800bafa:	4431      	add	r1, r6
 800bafc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bb00:	f1be 0e01 	subs.w	lr, lr, #1
 800bb04:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800bb08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bb0c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bb10:	d1db      	bne.n	800baca <__ieee754_sqrt+0xb6>
 800bb12:	4313      	orrs	r3, r2
 800bb14:	d006      	beq.n	800bb24 <__ieee754_sqrt+0x110>
 800bb16:	1c48      	adds	r0, r1, #1
 800bb18:	bf0b      	itete	eq
 800bb1a:	4671      	moveq	r1, lr
 800bb1c:	3101      	addne	r1, #1
 800bb1e:	3401      	addeq	r4, #1
 800bb20:	f021 0101 	bicne.w	r1, r1, #1
 800bb24:	1063      	asrs	r3, r4, #1
 800bb26:	0849      	lsrs	r1, r1, #1
 800bb28:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bb2c:	07e2      	lsls	r2, r4, #31
 800bb2e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bb32:	bf48      	it	mi
 800bb34:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bb38:	460e      	mov	r6, r1
 800bb3a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bb3e:	e782      	b.n	800ba46 <__ieee754_sqrt+0x32>
 800bb40:	0ada      	lsrs	r2, r3, #11
 800bb42:	3815      	subs	r0, #21
 800bb44:	055b      	lsls	r3, r3, #21
 800bb46:	2a00      	cmp	r2, #0
 800bb48:	d0fa      	beq.n	800bb40 <__ieee754_sqrt+0x12c>
 800bb4a:	02d5      	lsls	r5, r2, #11
 800bb4c:	d50a      	bpl.n	800bb64 <__ieee754_sqrt+0x150>
 800bb4e:	f1c1 0420 	rsb	r4, r1, #32
 800bb52:	fa23 f404 	lsr.w	r4, r3, r4
 800bb56:	1e4d      	subs	r5, r1, #1
 800bb58:	408b      	lsls	r3, r1
 800bb5a:	4322      	orrs	r2, r4
 800bb5c:	1b41      	subs	r1, r0, r5
 800bb5e:	e789      	b.n	800ba74 <__ieee754_sqrt+0x60>
 800bb60:	4608      	mov	r0, r1
 800bb62:	e7f0      	b.n	800bb46 <__ieee754_sqrt+0x132>
 800bb64:	0052      	lsls	r2, r2, #1
 800bb66:	3101      	adds	r1, #1
 800bb68:	e7ef      	b.n	800bb4a <__ieee754_sqrt+0x136>
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	e7bd      	b.n	800baea <__ieee754_sqrt+0xd6>
 800bb6e:	bf00      	nop
 800bb70:	7ff00000 	.word	0x7ff00000

0800bb74 <with_errno>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	4604      	mov	r4, r0
 800bb78:	460d      	mov	r5, r1
 800bb7a:	4616      	mov	r6, r2
 800bb7c:	f7fc fac2 	bl	8008104 <__errno>
 800bb80:	4629      	mov	r1, r5
 800bb82:	6006      	str	r6, [r0, #0]
 800bb84:	4620      	mov	r0, r4
 800bb86:	bd70      	pop	{r4, r5, r6, pc}

0800bb88 <xflow>:
 800bb88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb8a:	4615      	mov	r5, r2
 800bb8c:	461c      	mov	r4, r3
 800bb8e:	b180      	cbz	r0, 800bbb2 <xflow+0x2a>
 800bb90:	4610      	mov	r0, r2
 800bb92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb96:	e9cd 0100 	strd	r0, r1, [sp]
 800bb9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb9e:	4628      	mov	r0, r5
 800bba0:	4621      	mov	r1, r4
 800bba2:	f7f4 fd4d 	bl	8000640 <__aeabi_dmul>
 800bba6:	2222      	movs	r2, #34	; 0x22
 800bba8:	b003      	add	sp, #12
 800bbaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbae:	f7ff bfe1 	b.w	800bb74 <with_errno>
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	e7ee      	b.n	800bb96 <xflow+0xe>

0800bbb8 <__math_uflow>:
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bbbe:	f7ff bfe3 	b.w	800bb88 <xflow>

0800bbc2 <__math_oflow>:
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bbc8:	f7ff bfde 	b.w	800bb88 <xflow>

0800bbcc <fabs>:
 800bbcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bbd0:	4770      	bx	lr

0800bbd2 <finite>:
 800bbd2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800bbd6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bbda:	0fc0      	lsrs	r0, r0, #31
 800bbdc:	4770      	bx	lr
	...

0800bbe0 <scalbn>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	460d      	mov	r5, r1
 800bbea:	4617      	mov	r7, r2
 800bbec:	460b      	mov	r3, r1
 800bbee:	b996      	cbnz	r6, 800bc16 <scalbn+0x36>
 800bbf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bbf4:	4303      	orrs	r3, r0
 800bbf6:	d039      	beq.n	800bc6c <scalbn+0x8c>
 800bbf8:	4b33      	ldr	r3, [pc, #204]	; (800bcc8 <scalbn+0xe8>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f7f4 fd20 	bl	8000640 <__aeabi_dmul>
 800bc00:	4b32      	ldr	r3, [pc, #200]	; (800bccc <scalbn+0xec>)
 800bc02:	4604      	mov	r4, r0
 800bc04:	429f      	cmp	r7, r3
 800bc06:	460d      	mov	r5, r1
 800bc08:	da0f      	bge.n	800bc2a <scalbn+0x4a>
 800bc0a:	a32b      	add	r3, pc, #172	; (adr r3, 800bcb8 <scalbn+0xd8>)
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	f7f4 fd16 	bl	8000640 <__aeabi_dmul>
 800bc14:	e006      	b.n	800bc24 <scalbn+0x44>
 800bc16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bc1a:	4296      	cmp	r6, r2
 800bc1c:	d10a      	bne.n	800bc34 <scalbn+0x54>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	f7f4 fb58 	bl	80002d4 <__adddf3>
 800bc24:	4604      	mov	r4, r0
 800bc26:	460d      	mov	r5, r1
 800bc28:	e020      	b.n	800bc6c <scalbn+0x8c>
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bc30:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800bc34:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800bc38:	19b9      	adds	r1, r7, r6
 800bc3a:	4291      	cmp	r1, r2
 800bc3c:	dd0e      	ble.n	800bc5c <scalbn+0x7c>
 800bc3e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800bc42:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800bc46:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800bc4a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800bc4e:	4820      	ldr	r0, [pc, #128]	; (800bcd0 <scalbn+0xf0>)
 800bc50:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800bc54:	a31a      	add	r3, pc, #104	; (adr r3, 800bcc0 <scalbn+0xe0>)
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	e7d9      	b.n	800bc10 <scalbn+0x30>
 800bc5c:	2900      	cmp	r1, #0
 800bc5e:	dd08      	ble.n	800bc72 <scalbn+0x92>
 800bc60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bc68:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	4629      	mov	r1, r5
 800bc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc72:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800bc76:	da12      	bge.n	800bc9e <scalbn+0xbe>
 800bc78:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bc7c:	429f      	cmp	r7, r3
 800bc7e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800bc82:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800bc86:	dcdc      	bgt.n	800bc42 <scalbn+0x62>
 800bc88:	a30b      	add	r3, pc, #44	; (adr r3, 800bcb8 <scalbn+0xd8>)
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800bc92:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800bc96:	480f      	ldr	r0, [pc, #60]	; (800bcd4 <scalbn+0xf4>)
 800bc98:	f041 011f 	orr.w	r1, r1, #31
 800bc9c:	e7b8      	b.n	800bc10 <scalbn+0x30>
 800bc9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bca2:	3136      	adds	r1, #54	; 0x36
 800bca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bca8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800bcac:	4620      	mov	r0, r4
 800bcae:	4629      	mov	r1, r5
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	4b09      	ldr	r3, [pc, #36]	; (800bcd8 <scalbn+0xf8>)
 800bcb4:	e7ac      	b.n	800bc10 <scalbn+0x30>
 800bcb6:	bf00      	nop
 800bcb8:	c2f8f359 	.word	0xc2f8f359
 800bcbc:	01a56e1f 	.word	0x01a56e1f
 800bcc0:	8800759c 	.word	0x8800759c
 800bcc4:	7e37e43c 	.word	0x7e37e43c
 800bcc8:	43500000 	.word	0x43500000
 800bccc:	ffff3cb0 	.word	0xffff3cb0
 800bcd0:	8800759c 	.word	0x8800759c
 800bcd4:	c2f8f359 	.word	0xc2f8f359
 800bcd8:	3c900000 	.word	0x3c900000

0800bcdc <_init>:
 800bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcde:	bf00      	nop
 800bce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bce2:	bc08      	pop	{r3}
 800bce4:	469e      	mov	lr, r3
 800bce6:	4770      	bx	lr

0800bce8 <_fini>:
 800bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcea:	bf00      	nop
 800bcec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcee:	bc08      	pop	{r3}
 800bcf0:	469e      	mov	lr, r3
 800bcf2:	4770      	bx	lr
