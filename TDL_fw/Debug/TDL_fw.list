
TDL_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08006d50  08006d50  00016d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071e0  080071e0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080071e0  080071e0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071e0  080071e0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080071e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001dc  080073c4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080073c4  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095d5  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aac  00000000  00000000  000297da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187e9  00000000  00000000  0002c710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b71e  00000000  00000000  00044ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0f5  00000000  00000000  00050617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da70c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004138  00000000  00000000  000da75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d34 	.word	0x08006d34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006d34 	.word	0x08006d34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_f2iz>:
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa0:	d30f      	bcc.n	8000fc2 <__aeabi_f2iz+0x2a>
 8000fa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d90d      	bls.n	8000fc8 <__aeabi_f2iz+0x30>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	bf18      	it	ne
 8000fbe:	4240      	negne	r0, r0
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2iz+0x3a>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d105      	bne.n	8000fde <__aeabi_f2iz+0x46>
 8000fd2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd6:	bf08      	it	eq
 8000fd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4770      	bx	lr

08000fe4 <Set_Pin_Output>:
#include "ds18b20.h"

extern TIM_HandleTypeDef htim1;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2302      	movs	r3, #2
 8001008:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4619      	mov	r1, r3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f001 f841 	bl	8002098 <HAL_GPIO_Init>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f001 f824 	bl	8002098 <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <delay_us>:

void delay_us (uint16_t us)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <delay_us+0x2c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800106a:	bf00      	nop
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <delay_us+0x2c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3f9      	bcc.n	800106c <delay_us+0x14>
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	200001f8 	.word	0x200001f8

08001088 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	4815      	ldr	r0, [pc, #84]	; (80010ec <DS18B20_Start+0x64>)
 8001098:	f7ff ffa4 	bl	8000fe4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <DS18B20_Start+0x64>)
 80010a4:	f001 f993 	bl	80023ce <HAL_GPIO_WritePin>
	delay_us (480);   // delay according to datasheet
 80010a8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80010ac:	f7ff ffd4 	bl	8001058 <delay_us>
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80010b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <DS18B20_Start+0x64>)
 80010b6:	f7ff ffb2 	bl	800101e <Set_Pin_Input>
	delay_us (80);    // delay according to datasheet
 80010ba:	2050      	movs	r0, #80	; 0x50
 80010bc:	f7ff ffcc 	bl	8001058 <delay_us>
	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN)))
 80010c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <DS18B20_Start+0x64>)
 80010c6:	f001 f96b 	bl	80023a0 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <DS18B20_Start+0x4e>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 80010d0:	2301      	movs	r3, #1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	e001      	b.n	80010da <DS18B20_Start+0x52>
	else Response = -1;
 80010d6:	23ff      	movs	r3, #255	; 0xff
 80010d8:	71fb      	strb	r3, [r7, #7]
	delay_us (400); // 480 us delay totally.
 80010da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010de:	f7ff ffbb 	bl	8001058 <delay_us>
	return Response;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40010c00 	.word	0x40010c00

080010f0 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fe:	4821      	ldr	r0, [pc, #132]	; (8001184 <DS18B20_Write+0x94>)
 8001100:	f7ff ff70 	bl	8000fe4 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e034      	b.n	8001174 <DS18B20_Write+0x84>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800110a:	79fa      	ldrb	r2, [r7, #7]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	fa42 f303 	asr.w	r3, r2, r3
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d016      	beq.n	8001148 <DS18B20_Write+0x58>
		{
			// write 1
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800111a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111e:	4819      	ldr	r0, [pc, #100]	; (8001184 <DS18B20_Write+0x94>)
 8001120:	f7ff ff60 	bl	8000fe4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <DS18B20_Write+0x94>)
 800112c:	f001 f94f 	bl	80023ce <HAL_GPIO_WritePin>
			delay_us (1);  // wait for 1 us
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff ff91 	bl	8001058 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <DS18B20_Write+0x94>)
 800113c:	f7ff ff6f 	bl	800101e <Set_Pin_Input>
			delay_us (50);  // wait for 60 us
 8001140:	2032      	movs	r0, #50	; 0x32
 8001142:	f7ff ff89 	bl	8001058 <delay_us>
 8001146:	e012      	b.n	800116e <DS18B20_Write+0x7e>
		}
		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <DS18B20_Write+0x94>)
 800114e:	f7ff ff49 	bl	8000fe4 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <DS18B20_Write+0x94>)
 800115a:	f001 f938 	bl	80023ce <HAL_GPIO_WritePin>
			delay_us (50);  // wait for 60 us
 800115e:	2032      	movs	r0, #50	; 0x32
 8001160:	f7ff ff7a 	bl	8001058 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <DS18B20_Write+0x94>)
 800116a:	f7ff ff58 	bl	800101e <Set_Pin_Input>
	for (int i=0; i<8; i++)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3301      	adds	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b07      	cmp	r3, #7
 8001178:	ddc7      	ble.n	800110a <DS18B20_Write+0x1a>
		}
	}
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010c00 	.word	0x40010c00

08001188 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <DS18B20_Read+0x80>)
 8001198:	f7ff ff41 	bl	800101e <Set_Pin_Input>
	for (int i=0;i<8;i++)
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	e02a      	b.n	80011f8 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80011a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a6:	4818      	ldr	r0, [pc, #96]	; (8001208 <DS18B20_Read+0x80>)
 80011a8:	f7ff ff1c 	bl	8000fe4 <Set_Pin_Output>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, 0);  // pull the data pin LOW
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	4815      	ldr	r0, [pc, #84]	; (8001208 <DS18B20_Read+0x80>)
 80011b4:	f001 f90b 	bl	80023ce <HAL_GPIO_WritePin>
		delay_us (2);  // wait for 2 us
 80011b8:	2002      	movs	r0, #2
 80011ba:	f7ff ff4d 	bl	8001058 <delay_us>
		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <DS18B20_Read+0x80>)
 80011c4:	f7ff ff2b 	bl	800101e <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_9))  // if the pin is HIGH
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <DS18B20_Read+0x80>)
 80011ce:	f001 f8e7 	bl	80023a0 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d009      	beq.n	80011ec <DS18B20_Read+0x64>
		{
			value |= 1<<i;  // read = 1
 80011d8:	2201      	movs	r2, #1
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	71fb      	strb	r3, [r7, #7]
		}
		delay_us (60);  // wait for 60 us
 80011ec:	203c      	movs	r0, #60	; 0x3c
 80011ee:	f7ff ff33 	bl	8001058 <delay_us>
	for (int i=0;i<8;i++)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	ddd1      	ble.n	80011a2 <DS18B20_Read+0x1a>
	}
	return value;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010c00 	.word	0x40010c00

0800120c <DS18B20_Temp2Float>:


float DS18B20_Temp2Float(uint16_t number)
{
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
	uint16_t aux;
	float result = 0;
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
	float signo;
	uint16_t mask = 0b1111100000000000;
 800121c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001220:	827b      	strh	r3, [r7, #18]
	// extracción del signo
	if((number & mask) > 0)
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	8a7b      	ldrh	r3, [r7, #18]
 8001226:	4013      	ands	r3, r2
 8001228:	b29b      	uxth	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <DS18B20_Temp2Float+0x28>
		signo = -1;
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <DS18B20_Temp2Float+0xec>)
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e002      	b.n	800123a <DS18B20_Temp2Float+0x2e>
	else
		signo = 1;
 8001234:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001238:	617b      	str	r3, [r7, #20]
	// calculo de la magnitud
	mask = 0b0000011111111111;
 800123a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800123e:	827b      	strh	r3, [r7, #18]
	// parte entera
	if (signo == -1)
 8001240:	492d      	ldr	r1, [pc, #180]	; (80012f8 <DS18B20_Temp2Float+0xec>)
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff fe76 	bl	8000f34 <__aeabi_fcmpeq>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00c      	beq.n	8001268 <DS18B20_Temp2Float+0x5c>
	{                     // complemento A2
		aux = ~number & mask;
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	43db      	mvns	r3, r3
 8001254:	b21a      	sxth	r2, r3
 8001256:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800125a:	4013      	ands	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	83fb      	strh	r3, [r7, #30]
		aux+=1;
 8001260:	8bfb      	ldrh	r3, [r7, #30]
 8001262:	3301      	adds	r3, #1
 8001264:	83fb      	strh	r3, [r7, #30]
 8001266:	e003      	b.n	8001270 <DS18B20_Temp2Float+0x64>
	}
	else
	{
		aux = number & mask;
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	8a7b      	ldrh	r3, [r7, #18]
 800126c:	4013      	ands	r3, r2
 800126e:	83fb      	strh	r3, [r7, #30]
	}
// parte decimal
	result = 0;
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
	mask = 0b0000000000000001;
 8001276:	2301      	movs	r3, #1
 8001278:	827b      	strh	r3, [r7, #18]
	for (int i=0;i<12;i++)
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	e02e      	b.n	80012de <DS18B20_Temp2Float+0xd2>
	{
		 if((aux & mask)>0)
 8001280:	8bfa      	ldrh	r2, [r7, #30]
 8001282:	8a7b      	ldrh	r3, [r7, #18]
 8001284:	4013      	ands	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d022      	beq.n	80012d2 <DS18B20_Temp2Float+0xc6>
			 result = result + .0625 *pow(2, i);
 800128c:	69b8      	ldr	r0, [r7, #24]
 800128e:	f7ff f97f 	bl	8000590 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff f968 	bl	800056c <__aeabi_i2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	f04f 0000 	mov.w	r0, #0
 80012a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012a8:	f004 fe62 	bl	8005f70 <pow>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <DS18B20_Temp2Float+0xf0>)
 80012b2:	f7ff f9c5 	bl	8000640 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f809 	bl	80002d4 <__adddf3>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc91 	bl	8000bf0 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
		 mask = mask << 1;
 80012d2:	8a7b      	ldrh	r3, [r7, #18]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	827b      	strh	r3, [r7, #18]
	for (int i=0;i<12;i++)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b0b      	cmp	r3, #11
 80012e2:	ddcd      	ble.n	8001280 <DS18B20_Temp2Float+0x74>
	}
	return (signo * result);
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7fe ff3a 	bl	8000160 <__aeabi_fmul>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bdb0      	pop	{r4, r5, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	bf800000 	.word	0xbf800000
 80012fc:	3fb00000 	.word	0x3fb00000

08001300 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800130e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001312:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8001316:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800131a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800131c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800131e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001320:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001322:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f80e 	bl	8001356 <Lcd_init>

	return lcd;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	461d      	mov	r5, r3
 800133e:	f107 0410 	add.w	r4, r7, #16
 8001342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001346:	e894 0003 	ldmia.w	r4, {r0, r1}
 800134a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bdb0      	pop	{r4, r5, r7, pc}

08001356 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7d9b      	ldrb	r3, [r3, #22]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001366:	2133      	movs	r1, #51	; 0x33
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f8bb 	bl	80014e4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800136e:	2132      	movs	r1, #50	; 0x32
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f8b7 	bl	80014e4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001376:	2128      	movs	r1, #40	; 0x28
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f8b3 	bl	80014e4 <lcd_write_command>
 800137e:	e003      	b.n	8001388 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001380:	2138      	movs	r1, #56	; 0x38
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f8ae 	bl	80014e4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001388:	2101      	movs	r1, #1
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f8aa 	bl	80014e4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001390:	210c      	movs	r1, #12
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f8a6 	bl	80014e4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001398:	2106      	movs	r1, #6
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f8a2 	bl	80014e4 <lcd_write_command>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	4906      	ldr	r1, [pc, #24]	; (80013d4 <Lcd_int+0x2c>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fb60 	bl	8003a80 <siprintf>
	Lcd_string(lcd, buffer);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f852 	bl	8001470 <Lcd_string>
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	08006d50 	.word	0x08006d50

080013d8 <Lcd_float_lim>:

/*
 * Write a number on the current position
 */
void Lcd_float_lim(Lcd_HandleTypeDef * lcd, float number, uint8_t decimal)
{
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	4613      	mov	r3, r2
 80013e4:	71fb      	strb	r3, [r7, #7]
	int intPart = (int) number;
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f7ff fdd6 	bl	8000f98 <__aeabi_f2iz>
 80013ec:	4603      	mov	r3, r0
 80013ee:	617b      	str	r3, [r7, #20]
	Lcd_int(lcd, intPart);
 80013f0:	6979      	ldr	r1, [r7, #20]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff ffd8 	bl	80013a8 <Lcd_int>
	Lcd_string(lcd, ".");
 80013f8:	491b      	ldr	r1, [pc, #108]	; (8001468 <Lcd_float_lim+0x90>)
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 f838 	bl	8001470 <Lcd_string>
	number = number - (float)intPart;
 8001400:	6978      	ldr	r0, [r7, #20]
 8001402:	f7ff fcff 	bl	8000e04 <__aeabi_i2f>
 8001406:	4603      	mov	r3, r0
 8001408:	4619      	mov	r1, r3
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f7ff fc44 	bl	8000c98 <__aeabi_fsub>
 8001410:	4603      	mov	r3, r0
 8001412:	60bb      	str	r3, [r7, #8]
	number = number * pow(10,decimal);
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f7ff f8bb 	bl	8000590 <__aeabi_f2d>
 800141a:	4604      	mov	r4, r0
 800141c:	460d      	mov	r5, r1
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f893 	bl	800054c <__aeabi_ui2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	f04f 0000 	mov.w	r0, #0
 800142e:	490f      	ldr	r1, [pc, #60]	; (800146c <Lcd_float_lim+0x94>)
 8001430:	f004 fd9e 	bl	8005f70 <pow>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4620      	mov	r0, r4
 800143a:	4629      	mov	r1, r5
 800143c:	f7ff f900 	bl	8000640 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fbd2 	bl	8000bf0 <__aeabi_d2f>
 800144c:	4603      	mov	r3, r0
 800144e:	60bb      	str	r3, [r7, #8]
	Lcd_int(lcd, (int)number);
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f7ff fda1 	bl	8000f98 <__aeabi_f2iz>
 8001456:	4603      	mov	r3, r0
 8001458:	4619      	mov	r1, r3
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff ffa4 	bl	80013a8 <Lcd_int>
}
 8001460:	bf00      	nop
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	08006d5c 	.word	0x08006d5c
 800146c:	40240000 	.word	0x40240000

08001470 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e00a      	b.n	8001496 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f858 	bl	8001540 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3301      	adds	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	7bfc      	ldrb	r4, [r7, #15]
 8001498:	6838      	ldr	r0, [r7, #0]
 800149a:	f7fe fe59 	bl	8000150 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	429c      	cmp	r4, r3
 80014a2:	d3ed      	bcc.n	8001480 <Lcd_string+0x10>
	}
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}
	...

080014b0 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
 80014bc:	4613      	mov	r3, r2
 80014be:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <Lcd_cursor+0x30>)
 80014c4:	5cd2      	ldrb	r2, [r2, r3]
 80014c6:	78bb      	ldrb	r3, [r7, #2]
 80014c8:	4413      	add	r3, r2
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3b80      	subs	r3, #128	; 0x80
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f806 	bl	80014e4 <lcd_write_command>
	#endif
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	08006da8 	.word	0x08006da8

080014e4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6898      	ldr	r0, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	899b      	ldrh	r3, [r3, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	f000 ff67 	bl	80023ce <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7d9b      	ldrb	r3, [r3, #22]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d111      	bne.n	800152c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2204      	movs	r2, #4
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f842 	bl	800159c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2204      	movs	r2, #4
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f839 	bl	800159c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800152a:	e005      	b.n	8001538 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	2208      	movs	r2, #8
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f832 	bl	800159c <lcd_write>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f000 ff39 	bl	80023ce <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7d9b      	ldrb	r3, [r3, #22]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d111      	bne.n	8001588 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2204      	movs	r2, #4
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f814 	bl	800159c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2204      	movs	r2, #4
 800157e:	4619      	mov	r1, r3
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f80b 	bl	800159c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001586:	e005      	b.n	8001594 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2208      	movs	r2, #8
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f804 	bl	800159c <lcd_write>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
 80015a8:	4613      	mov	r3, r2
 80015aa:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e019      	b.n	80015e6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	8819      	ldrh	r1, [r3, #0]
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	fa42 f303 	asr.w	r3, r2, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	f000 fef7 	bl	80023ce <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	3301      	adds	r3, #1
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	78bb      	ldrb	r3, [r7, #2]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3e1      	bcc.n	80015b2 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6918      	ldr	r0, [r3, #16]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	8a9b      	ldrh	r3, [r3, #20]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4619      	mov	r1, r3
 80015fa:	f000 fee8 	bl	80023ce <HAL_GPIO_WritePin>
	DELAY(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fc42 	bl	8001e88 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6918      	ldr	r0, [r3, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	8a9b      	ldrh	r3, [r3, #20]
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	f000 fedd 	bl	80023ce <HAL_GPIO_WritePin>
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b0a6      	sub	sp, #152	; 0x98
 8001620:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f000 fbcf 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f949 	bl	80018bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162a:	f000 f9dd 	bl	80019e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800162e:	f000 f98b 	bl	8001948 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001632:	4897      	ldr	r0, [pc, #604]	; (8001890 <main+0x274>)
 8001634:	f001 fb2a 	bl	8002c8c <HAL_TIM_Base_Start>
  uint8_t Presence;
  uint8_t scratchPad[8];
  uint16_t buffer;
  //float temperature;

  Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 8001638:	4b96      	ldr	r3, [pc, #600]	; (8001894 <main+0x278>)
 800163a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800163e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8001644:	4a94      	ldr	r2, [pc, #592]	; (8001898 <main+0x27c>)
 8001646:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800164a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800164e:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_1, LCD_4_BIT_MODE);
 8001652:	4638      	mov	r0, r7
 8001654:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001658:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800165c:	2300      	movs	r3, #0
 800165e:	9303      	str	r3, [sp, #12]
 8001660:	2302      	movs	r3, #2
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	4b8d      	ldr	r3, [pc, #564]	; (800189c <main+0x280>)
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2340      	movs	r3, #64	; 0x40
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4b8b      	ldr	r3, [pc, #556]	; (800189c <main+0x280>)
 800166e:	f7ff fe47 	bl	8001300 <Lcd_create>
 8001672:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001676:	463d      	mov	r5, r7
 8001678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001680:	e884 0003 	stmia.w	r4, {r0, r1}
    }
  Presence = Presence; // ToDo: chequeo de errores
  HAL_Delay(10000);
#endif
  // Sensor 1:
  uint8_t aux[N][8]= {{0x28, 0xEB, 0x42, 0x76, 0xE0, 0x01, 0x3C, 0x1A},
 8001684:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <main+0x284>)
 8001686:	f107 0418 	add.w	r4, r7, #24
 800168a:	461d      	mov	r5, r3
 800168c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001690:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  	  	  	 {0x28, 0x2F, 0x9B, 0x76, 0xE0, 0x01, 0x3C, 0xF4},
					 {0x28, 0x2C, 0x4D, 0x43, 0xD4, 0xE1, 0x3C, 0x93},
					 {0x28, 0xBF, 0x88, 0x43, 0xD4, 0xE1, 0x3C, 0x8B}};
  for(int j=0; j<N;j++)
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800169e:	e029      	b.n	80016f4 <main+0xd8>
	  for(int i=0; i<8; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016a6:	e01c      	b.n	80016e2 <main+0xc6>
	  {
		  sensor[j].ROM_NO[i]= aux[j][i];
 80016a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	3388      	adds	r3, #136	; 0x88
 80016b0:	19da      	adds	r2, r3, r7
 80016b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016b6:	4413      	add	r3, r2
 80016b8:	3b70      	subs	r3, #112	; 0x70
 80016ba:	7818      	ldrb	r0, [r3, #0]
 80016bc:	4979      	ldr	r1, [pc, #484]	; (80018a4 <main+0x288>)
 80016be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	18ca      	adds	r2, r1, r3
 80016cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016d0:	4413      	add	r3, r2
 80016d2:	3304      	adds	r3, #4
 80016d4:	4602      	mov	r2, r0
 80016d6:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<8; i++)
 80016d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016dc:	3301      	adds	r3, #1
 80016de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016e6:	2b07      	cmp	r3, #7
 80016e8:	ddde      	ble.n	80016a8 <main+0x8c>
  for(int j=0; j<N;j++)
 80016ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ee:	3301      	adds	r3, #1
 80016f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	ddd1      	ble.n	80016a0 <main+0x84>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Iniciar conversión
	  Presence = DS18B20_Start ();
 80016fc:	f7ff fcc4 	bl	8001088 <DS18B20_Start>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	  HAL_Delay (1);
 8001706:	2001      	movs	r0, #1
 8001708:	f000 fbbe 	bl	8001e88 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 800170c:	20cc      	movs	r0, #204	; 0xcc
 800170e:	f7ff fcef 	bl	80010f0 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8001712:	2044      	movs	r0, #68	; 0x44
 8001714:	f7ff fcec 	bl	80010f0 <DS18B20_Write>
	  HAL_Delay (999 - N);
 8001718:	f240 30e3 	movw	r0, #995	; 0x3e3
 800171c:	f000 fbb4 	bl	8001e88 <HAL_Delay>
//	  DS18B20_Write (0xBE);  // Read Scratch-pad
//	  for(int i = 0; i<8; i++)
//		  scratchPad[i] = DS18B20_Read();

///////////////////////////////////////////////////////////
	  for(int j=0; j<N; j++)
 8001720:	2300      	movs	r3, #0
 8001722:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001724:	e057      	b.n	80017d6 <main+0x1ba>
	  {
		  Presence = DS18B20_Start ();
 8001726:	f7ff fcaf 	bl	8001088 <DS18B20_Start>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		  HAL_Delay(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f000 fba9 	bl	8001e88 <HAL_Delay>
		  DS18B20_Write (0x55);  // match ROM
 8001736:	2055      	movs	r0, #85	; 0x55
 8001738:	f7ff fcda 	bl	80010f0 <DS18B20_Write>
		  for(int i=0;i<8;i++)
 800173c:	2300      	movs	r3, #0
 800173e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001740:	e010      	b.n	8001764 <main+0x148>
		  {
			  DS18B20_Write (sensor[j].ROM_NO[i]);
 8001742:	4958      	ldr	r1, [pc, #352]	; (80018a4 <main+0x288>)
 8001744:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	18ca      	adds	r2, r1, r3
 8001750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001752:	4413      	add	r3, r2
 8001754:	3304      	adds	r3, #4
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fcc9 	bl	80010f0 <DS18B20_Write>
		  for(int i=0;i<8;i++)
 800175e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001760:	3301      	adds	r3, #1
 8001762:	67bb      	str	r3, [r7, #120]	; 0x78
 8001764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001766:	2b07      	cmp	r3, #7
 8001768:	ddeb      	ble.n	8001742 <main+0x126>
		  }
		  DS18B20_Write (0xBE);  // Read Scratch-pad
 800176a:	20be      	movs	r0, #190	; 0xbe
 800176c:	f7ff fcc0 	bl	80010f0 <DS18B20_Write>
		  for(int i = 0; i<8; i++)
 8001770:	2300      	movs	r3, #0
 8001772:	677b      	str	r3, [r7, #116]	; 0x74
 8001774:	e00c      	b.n	8001790 <main+0x174>
			  scratchPad[i] = DS18B20_Read();
 8001776:	f7ff fd07 	bl	8001188 <DS18B20_Read>
 800177a:	4603      	mov	r3, r0
 800177c:	4619      	mov	r1, r3
 800177e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001784:	4413      	add	r3, r2
 8001786:	460a      	mov	r2, r1
 8001788:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i<8; i++)
 800178a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800178c:	3301      	adds	r3, #1
 800178e:	677b      	str	r3, [r7, #116]	; 0x74
 8001790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001792:	2b07      	cmp	r3, #7
 8001794:	ddef      	ble.n	8001776 <main+0x15a>
		  buffer = scratchPad[1];
 8001796:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800179a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		  buffer = (buffer << 8) + scratchPad[0];
 800179e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		  sensor[j].temp = DS18B20_Temp2Float(buffer);
 80017b2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fd28 	bl	800120c <DS18B20_Temp2Float>
 80017bc:	4601      	mov	r1, r0
 80017be:	4839      	ldr	r0, [pc, #228]	; (80018a4 <main+0x288>)
 80017c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4403      	add	r3, r0
 80017cc:	3310      	adds	r3, #16
 80017ce:	6019      	str	r1, [r3, #0]
	  for(int j=0; j<N; j++)
 80017d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017d2:	3301      	adds	r3, #1
 80017d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017d8:	2b03      	cmp	r3, #3
 80017da:	dda4      	ble.n	8001726 <main+0x10a>
	  }

	  Lcd_clear;
	  Lcd_cursor(&lcd, 0,0);
 80017dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fe63 	bl	80014b0 <Lcd_cursor>
	  Lcd_string(&lcd, "T1=");
 80017ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ee:	492e      	ldr	r1, [pc, #184]	; (80018a8 <main+0x28c>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe3d 	bl	8001470 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[0].temp, 1);
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <main+0x288>)
 80017f8:	6919      	ldr	r1, [r3, #16]
 80017fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017fe:	2201      	movs	r2, #1
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fde9 	bl	80013d8 <Lcd_float_lim>
	  Lcd_cursor(&lcd, 0,8);
 8001806:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800180a:	2208      	movs	r2, #8
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fe4e 	bl	80014b0 <Lcd_cursor>
	  Lcd_string(&lcd, "T2=");
 8001814:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001818:	4924      	ldr	r1, [pc, #144]	; (80018ac <main+0x290>)
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fe28 	bl	8001470 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[1].temp, 1);
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <main+0x288>)
 8001822:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001824:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001828:	2201      	movs	r2, #1
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fdd4 	bl	80013d8 <Lcd_float_lim>
	  Lcd_cursor(&lcd, 1,0);
 8001830:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001834:	2200      	movs	r2, #0
 8001836:	2101      	movs	r1, #1
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fe39 	bl	80014b0 <Lcd_cursor>
	  Lcd_string(&lcd, "T3=");
 800183e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001842:	491b      	ldr	r1, [pc, #108]	; (80018b0 <main+0x294>)
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fe13 	bl	8001470 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[2].temp, 1);
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <main+0x288>)
 800184c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800184e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001852:	2201      	movs	r2, #1
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fdbf 	bl	80013d8 <Lcd_float_lim>
	  Lcd_cursor(&lcd, 1,8);
 800185a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800185e:	2208      	movs	r2, #8
 8001860:	2101      	movs	r1, #1
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fe24 	bl	80014b0 <Lcd_cursor>
	  Lcd_string(&lcd, "T4=");
 8001868:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800186c:	4911      	ldr	r1, [pc, #68]	; (80018b4 <main+0x298>)
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fdfe 	bl	8001470 <Lcd_string>
	  Lcd_float_lim(&lcd, sensor[3].temp, 1);
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <main+0x288>)
 8001876:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001878:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800187c:	2201      	movs	r2, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fdaa 	bl	80013d8 <Lcd_float_lim>
	  //lcd_write_data(&lcd, 210); // imprime "°"
	  //Lcd_string(&lcd, "C");
	  HAL_GPIO_TogglePin (GPIOC, LED_Pin);
 8001884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001888:	480b      	ldr	r0, [pc, #44]	; (80018b8 <main+0x29c>)
 800188a:	f000 fdb8 	bl	80023fe <HAL_GPIO_TogglePin>
	  Presence = DS18B20_Start ();
 800188e:	e735      	b.n	80016fc <main+0xe0>
 8001890:	200001f8 	.word	0x200001f8
 8001894:	08006d70 	.word	0x08006d70
 8001898:	08006d80 	.word	0x08006d80
 800189c:	40010800 	.word	0x40010800
 80018a0:	08006d88 	.word	0x08006d88
 80018a4:	20000240 	.word	0x20000240
 80018a8:	08006d60 	.word	0x08006d60
 80018ac:	08006d64 	.word	0x08006d64
 80018b0:	08006d68 	.word	0x08006d68
 80018b4:	08006d6c 	.word	0x08006d6c
 80018b8:	40011000 	.word	0x40011000

080018bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b090      	sub	sp, #64	; 0x40
 80018c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c2:	f107 0318 	add.w	r3, r7, #24
 80018c6:	2228      	movs	r2, #40	; 0x28
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fc70 	bl	80031b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018de:	2301      	movs	r3, #1
 80018e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ec:	2301      	movs	r3, #1
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f0:	2302      	movs	r3, #2
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fd93 	bl	8002430 <HAL_RCC_OscConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001910:	f000 f8ee 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001914:	230f      	movs	r3, #15
 8001916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001918:	2302      	movs	r3, #2
 800191a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f001 f800 	bl	8002934 <HAL_RCC_ClockConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800193a:	f000 f8d9 	bl	8001af0 <Error_Handler>
  }
}
 800193e:	bf00      	nop
 8001940:	3740      	adds	r7, #64	; 0x40
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	463b      	mov	r3, r7
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_TIM1_Init+0x98>)
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <MX_TIM1_Init+0x9c>)
 8001968:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <MX_TIM1_Init+0x98>)
 800196c:	2247      	movs	r2, #71	; 0x47
 800196e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <MX_TIM1_Init+0x98>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <MX_TIM1_Init+0x98>)
 8001978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800197c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <MX_TIM1_Init+0x98>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <MX_TIM1_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <MX_TIM1_Init+0x98>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001990:	4813      	ldr	r0, [pc, #76]	; (80019e0 <MX_TIM1_Init+0x98>)
 8001992:	f001 f92b 	bl	8002bec <HAL_TIM_Base_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800199c:	f000 f8a8 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4619      	mov	r1, r3
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_TIM1_Init+0x98>)
 80019ae:	f001 f9b7 	bl	8002d20 <HAL_TIM_ConfigClockSource>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80019b8:	f000 f89a 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_TIM1_Init+0x98>)
 80019ca:	f001 fb69 	bl	80030a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019d4:	f000 f88c 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200001f8 	.word	0x200001f8
 80019e4:	40012c00 	.word	0x40012c00

080019e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	f107 0310 	add.w	r3, r7, #16
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fc:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a37      	ldr	r2, [pc, #220]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a02:	f043 0310 	orr.w	r3, r3, #16
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a14:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a1a:	f043 0320 	orr.w	r3, r3, #32
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a2b      	ldr	r2, [pc, #172]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <MX_GPIO_Init+0xf8>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a62:	4820      	ldr	r0, [pc, #128]	; (8001ae4 <MX_GPIO_Init+0xfc>)
 8001a64:	f000 fcb3 	bl	80023ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	217e      	movs	r1, #126	; 0x7e
 8001a6c:	481e      	ldr	r0, [pc, #120]	; (8001ae8 <MX_GPIO_Init+0x100>)
 8001a6e:	f000 fcae 	bl	80023ce <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a78:	481c      	ldr	r0, [pc, #112]	; (8001aec <MX_GPIO_Init+0x104>)
 8001a7a:	f000 fca8 	bl	80023ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	4813      	ldr	r0, [pc, #76]	; (8001ae4 <MX_GPIO_Init+0xfc>)
 8001a98:	f000 fafe 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001a9c:	237e      	movs	r3, #126	; 0x7e
 8001a9e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <MX_GPIO_Init+0x100>)
 8001ab4:	f000 faf0 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ab8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4806      	ldr	r0, [pc, #24]	; (8001aec <MX_GPIO_Init+0x104>)
 8001ad2:	f000 fae1 	bl	8002098 <HAL_GPIO_Init>

}
 8001ad6:	bf00      	nop
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40011000 	.word	0x40011000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40010c00 	.word	0x40010c00

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <Error_Handler+0x8>
	...

08001afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_MspInit+0x5c>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <HAL_MspInit+0x5c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6193      	str	r3, [r2, #24]
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_MspInit+0x5c>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_MspInit+0x5c>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_MspInit+0x5c>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_MspInit+0x5c>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_MspInit+0x60>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_MspInit+0x60>)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000

08001b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <HAL_TIM_Base_MspInit+0x34>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10b      	bne.n	8001b8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_TIM_Base_MspInit+0x38>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_TIM_Base_MspInit+0x38>)
 8001b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b7c:	6193      	str	r3, [r2, #24]
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_TIM_Base_MspInit+0x38>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40021000 	.word	0x40021000

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be2:	f000 f935 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  return 1;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <_kill>:

int _kill(int pid, int sig)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c02:	f001 faab 	bl	800315c <__errno>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2216      	movs	r2, #22
 8001c0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_exit>:

void _exit (int status)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ffe7 	bl	8001bf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c2a:	e7fe      	b.n	8001c2a <_exit+0x12>

08001c2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e00a      	b.n	8001c54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c3e:	f3af 8000 	nop.w
 8001c42:	4601      	mov	r1, r0
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbf0      	blt.n	8001c3e <_read+0x12>
  }

  return len;
 8001c5c:	687b      	ldr	r3, [r7, #4]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e009      	b.n	8001c8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	60ba      	str	r2, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbf1      	blt.n	8001c78 <_write+0x12>
  }
  return len;
 8001c94:	687b      	ldr	r3, [r7, #4]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_close>:

int _close(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc4:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <_isatty>:

int _isatty(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
	...

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f001 fa14 	bl	800315c <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20005000 	.word	0x20005000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	20000290 	.word	0x20000290
 8001d68:	200002a8 	.word	0x200002a8

08001d6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d78:	f7ff fff8 	bl	8001d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480b      	ldr	r0, [pc, #44]	; (8001dac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d7e:	490c      	ldr	r1, [pc, #48]	; (8001db0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d80:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d94:	4c09      	ldr	r4, [pc, #36]	; (8001dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f001 f9e1 	bl	8003168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001da6:	f7ff fc39 	bl	800161c <main>
  bx lr
 8001daa:	4770      	bx	lr
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001db4:	080071e8 	.word	0x080071e8
  ldr r2, =_sbss
 8001db8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001dbc:	200002a8 	.word	0x200002a8

08001dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_2_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x28>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x28>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f92b 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	200f      	movs	r0, #15
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff fe8c 	bl	8001afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f935 	bl	800207e <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f000 f90b 	bl	8002046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x1c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x20>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_IncTick+0x20>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000294 	.word	0x20000294

08001e74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_GetTick+0x10>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	20000294 	.word	0x20000294

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffe0 	bl	8001e74 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ffc:	d301      	bcc.n	8002002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00f      	b.n	8002022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <SysTick_Config+0x40>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200a:	210f      	movs	r1, #15
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f7ff ff90 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <SysTick_Config+0x40>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <SysTick_Config+0x40>)
 800201c:	2207      	movs	r2, #7
 800201e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	e000e010 	.word	0xe000e010

08002030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff49 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff5e 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ff90 	bl	8001f88 <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff5f 	bl	8001f34 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffb0 	bl	8001fec <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b08b      	sub	sp, #44	; 0x2c
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	e169      	b.n	8002380 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020ac:	2201      	movs	r2, #1
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8158 	bne.w	800237a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4a9a      	ldr	r2, [pc, #616]	; (8002338 <HAL_GPIO_Init+0x2a0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d05e      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020d4:	4a98      	ldr	r2, [pc, #608]	; (8002338 <HAL_GPIO_Init+0x2a0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d875      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020da:	4a98      	ldr	r2, [pc, #608]	; (800233c <HAL_GPIO_Init+0x2a4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d058      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020e0:	4a96      	ldr	r2, [pc, #600]	; (800233c <HAL_GPIO_Init+0x2a4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d86f      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020e6:	4a96      	ldr	r2, [pc, #600]	; (8002340 <HAL_GPIO_Init+0x2a8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d052      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020ec:	4a94      	ldr	r2, [pc, #592]	; (8002340 <HAL_GPIO_Init+0x2a8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d869      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020f2:	4a94      	ldr	r2, [pc, #592]	; (8002344 <HAL_GPIO_Init+0x2ac>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04c      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 80020f8:	4a92      	ldr	r2, [pc, #584]	; (8002344 <HAL_GPIO_Init+0x2ac>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d863      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 80020fe:	4a92      	ldr	r2, [pc, #584]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d046      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
 8002104:	4a90      	ldr	r2, [pc, #576]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d85d      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 800210a:	2b12      	cmp	r3, #18
 800210c:	d82a      	bhi.n	8002164 <HAL_GPIO_Init+0xcc>
 800210e:	2b12      	cmp	r3, #18
 8002110:	d859      	bhi.n	80021c6 <HAL_GPIO_Init+0x12e>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_GPIO_Init+0x80>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002193 	.word	0x08002193
 800211c:	0800216d 	.word	0x0800216d
 8002120:	0800217f 	.word	0x0800217f
 8002124:	080021c1 	.word	0x080021c1
 8002128:	080021c7 	.word	0x080021c7
 800212c:	080021c7 	.word	0x080021c7
 8002130:	080021c7 	.word	0x080021c7
 8002134:	080021c7 	.word	0x080021c7
 8002138:	080021c7 	.word	0x080021c7
 800213c:	080021c7 	.word	0x080021c7
 8002140:	080021c7 	.word	0x080021c7
 8002144:	080021c7 	.word	0x080021c7
 8002148:	080021c7 	.word	0x080021c7
 800214c:	080021c7 	.word	0x080021c7
 8002150:	080021c7 	.word	0x080021c7
 8002154:	080021c7 	.word	0x080021c7
 8002158:	080021c7 	.word	0x080021c7
 800215c:	08002175 	.word	0x08002175
 8002160:	08002189 	.word	0x08002189
 8002164:	4a79      	ldr	r2, [pc, #484]	; (800234c <HAL_GPIO_Init+0x2b4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800216a:	e02c      	b.n	80021c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	623b      	str	r3, [r7, #32]
          break;
 8002172:	e029      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	3304      	adds	r3, #4
 800217a:	623b      	str	r3, [r7, #32]
          break;
 800217c:	e024      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	3308      	adds	r3, #8
 8002184:	623b      	str	r3, [r7, #32]
          break;
 8002186:	e01f      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	330c      	adds	r3, #12
 800218e:	623b      	str	r3, [r7, #32]
          break;
 8002190:	e01a      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800219a:	2304      	movs	r3, #4
 800219c:	623b      	str	r3, [r7, #32]
          break;
 800219e:	e013      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a8:	2308      	movs	r3, #8
 80021aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	611a      	str	r2, [r3, #16]
          break;
 80021b2:	e009      	b.n	80021c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b4:	2308      	movs	r3, #8
 80021b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	615a      	str	r2, [r3, #20]
          break;
 80021be:	e003      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
          break;
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x130>
          break;
 80021c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2bff      	cmp	r3, #255	; 0xff
 80021cc:	d801      	bhi.n	80021d2 <HAL_GPIO_Init+0x13a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	e001      	b.n	80021d6 <HAL_GPIO_Init+0x13e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3304      	adds	r3, #4
 80021d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d802      	bhi.n	80021e4 <HAL_GPIO_Init+0x14c>
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	e002      	b.n	80021ea <HAL_GPIO_Init+0x152>
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	3b08      	subs	r3, #8
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	210f      	movs	r1, #15
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	6a39      	ldr	r1, [r7, #32]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	431a      	orrs	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80b1 	beq.w	800237a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002218:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a4c      	ldr	r2, [pc, #304]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_GPIO_Init+0x2b8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002230:	4a48      	ldr	r2, [pc, #288]	; (8002354 <HAL_GPIO_Init+0x2bc>)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a40      	ldr	r2, [pc, #256]	; (8002358 <HAL_GPIO_Init+0x2c0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <HAL_GPIO_Init+0x1ec>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3f      	ldr	r2, [pc, #252]	; (800235c <HAL_GPIO_Init+0x2c4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00d      	beq.n	8002280 <HAL_GPIO_Init+0x1e8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3e      	ldr	r2, [pc, #248]	; (8002360 <HAL_GPIO_Init+0x2c8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d007      	beq.n	800227c <HAL_GPIO_Init+0x1e4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3d      	ldr	r2, [pc, #244]	; (8002364 <HAL_GPIO_Init+0x2cc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_GPIO_Init+0x1e0>
 8002274:	2303      	movs	r3, #3
 8002276:	e006      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002278:	2304      	movs	r3, #4
 800227a:	e004      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 800227c:	2302      	movs	r3, #2
 800227e:	e002      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_GPIO_Init+0x1ee>
 8002284:	2300      	movs	r3, #0
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	f002 0203 	and.w	r2, r2, #3
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	4093      	lsls	r3, r2
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002296:	492f      	ldr	r1, [pc, #188]	; (8002354 <HAL_GPIO_Init+0x2bc>)
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	492c      	ldr	r1, [pc, #176]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	4928      	ldr	r1, [pc, #160]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4922      	ldr	r1, [pc, #136]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60cb      	str	r3, [r1, #12]
 80022e4:	e006      	b.n	80022f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	491e      	ldr	r1, [pc, #120]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4918      	ldr	r1, [pc, #96]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	43db      	mvns	r3, r3
 8002316:	4914      	ldr	r1, [pc, #80]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 8002318:	4013      	ands	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d021      	beq.n	800236c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <HAL_GPIO_Init+0x2d0>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e021      	b.n	800237a <HAL_GPIO_Init+0x2e2>
 8002336:	bf00      	nop
 8002338:	10320000 	.word	0x10320000
 800233c:	10310000 	.word	0x10310000
 8002340:	10220000 	.word	0x10220000
 8002344:	10210000 	.word	0x10210000
 8002348:	10120000 	.word	0x10120000
 800234c:	10110000 	.word	0x10110000
 8002350:	40021000 	.word	0x40021000
 8002354:	40010000 	.word	0x40010000
 8002358:	40010800 	.word	0x40010800
 800235c:	40010c00 	.word	0x40010c00
 8002360:	40011000 	.word	0x40011000
 8002364:	40011400 	.word	0x40011400
 8002368:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_GPIO_Init+0x304>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	43db      	mvns	r3, r3
 8002374:	4909      	ldr	r1, [pc, #36]	; (800239c <HAL_GPIO_Init+0x304>)
 8002376:	4013      	ands	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	3301      	adds	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	f47f ae8e 	bne.w	80020ac <HAL_GPIO_Init+0x14>
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	372c      	adds	r7, #44	; 0x2c
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	e001      	b.n	80023c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	807b      	strh	r3, [r7, #2]
 80023da:	4613      	mov	r3, r2
 80023dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023de:	787b      	ldrb	r3, [r7, #1]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e4:	887a      	ldrh	r2, [r7, #2]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ea:	e003      	b.n	80023f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	041a      	lsls	r2, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	611a      	str	r2, [r3, #16]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002410:	887a      	ldrh	r2, [r7, #2]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4013      	ands	r3, r2
 8002416:	041a      	lsls	r2, r3, #16
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43d9      	mvns	r1, r3
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	400b      	ands	r3, r1
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	611a      	str	r2, [r3, #16]
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e272      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8087 	beq.w	800255e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002450:	4b92      	ldr	r3, [pc, #584]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b04      	cmp	r3, #4
 800245a:	d00c      	beq.n	8002476 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800245c:	4b8f      	ldr	r3, [pc, #572]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b08      	cmp	r3, #8
 8002466:	d112      	bne.n	800248e <HAL_RCC_OscConfig+0x5e>
 8002468:	4b8c      	ldr	r3, [pc, #560]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d10b      	bne.n	800248e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002476:	4b89      	ldr	r3, [pc, #548]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d06c      	beq.n	800255c <HAL_RCC_OscConfig+0x12c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d168      	bne.n	800255c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e24c      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x76>
 8002498:	4b80      	ldr	r3, [pc, #512]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a7f      	ldr	r2, [pc, #508]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 800249e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	e02e      	b.n	8002504 <HAL_RCC_OscConfig+0xd4>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x98>
 80024ae:	4b7b      	ldr	r3, [pc, #492]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7a      	ldr	r2, [pc, #488]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b78      	ldr	r3, [pc, #480]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a77      	ldr	r2, [pc, #476]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xd4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0xbc>
 80024d2:	4b72      	ldr	r3, [pc, #456]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a71      	ldr	r2, [pc, #452]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b6f      	ldr	r3, [pc, #444]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6e      	ldr	r2, [pc, #440]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xd4>
 80024ec:	4b6b      	ldr	r3, [pc, #428]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6a      	ldr	r2, [pc, #424]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b68      	ldr	r3, [pc, #416]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a67      	ldr	r2, [pc, #412]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7ff fcb2 	bl	8001e74 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7ff fcae 	bl	8001e74 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e200      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b5d      	ldr	r3, [pc, #372]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xe4>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff fc9e 	bl	8001e74 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7ff fc9a 	bl	8001e74 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1ec      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x10c>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d063      	beq.n	8002632 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800256a:	4b4c      	ldr	r3, [pc, #304]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002576:	4b49      	ldr	r3, [pc, #292]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x18c>
 8002582:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b43      	ldr	r3, [pc, #268]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x176>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1c0      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b3d      	ldr	r3, [pc, #244]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4939      	ldr	r1, [pc, #228]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e03a      	b.n	8002632 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7ff fc53 	bl	8001e74 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7ff fc4f 	bl	8001e74 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1a1      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4927      	ldr	r1, [pc, #156]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_RCC_OscConfig+0x270>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff fc32 	bl	8001e74 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002614:	f7ff fc2e 	bl	8001e74 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e180      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d03a      	beq.n	80026b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d019      	beq.n	800267a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_RCC_OscConfig+0x274>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7ff fc12 	bl	8001e74 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7ff fc0e 	bl	8001e74 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e160      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_RCC_OscConfig+0x26c>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f000 fa9c 	bl	8002bb0 <RCC_Delay>
 8002678:	e01c      	b.n	80026b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_RCC_OscConfig+0x274>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002680:	f7ff fbf8 	bl	8001e74 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002686:	e00f      	b.n	80026a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002688:	f7ff fbf4 	bl	8001e74 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d908      	bls.n	80026a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e146      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	42420000 	.word	0x42420000
 80026a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	4b92      	ldr	r3, [pc, #584]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e9      	bne.n	8002688 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80a6 	beq.w	800280e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c6:	4b8b      	ldr	r3, [pc, #556]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10d      	bne.n	80026ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	4b88      	ldr	r3, [pc, #544]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4a87      	ldr	r2, [pc, #540]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	61d3      	str	r3, [r2, #28]
 80026de:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b82      	ldr	r3, [pc, #520]	; (80028f8 <HAL_RCC_OscConfig+0x4c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4b7f      	ldr	r3, [pc, #508]	; (80028f8 <HAL_RCC_OscConfig+0x4c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a7e      	ldr	r2, [pc, #504]	; (80028f8 <HAL_RCC_OscConfig+0x4c8>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7ff fbb5 	bl	8001e74 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7ff fbb1 	bl	8001e74 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b64      	cmp	r3, #100	; 0x64
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e103      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	4b75      	ldr	r3, [pc, #468]	; (80028f8 <HAL_RCC_OscConfig+0x4c8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x312>
 8002734:	4b6f      	ldr	r3, [pc, #444]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4a6e      	ldr	r2, [pc, #440]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6213      	str	r3, [r2, #32]
 8002740:	e02d      	b.n	800279e <HAL_RCC_OscConfig+0x36e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x334>
 800274a:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a69      	ldr	r2, [pc, #420]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a66      	ldr	r2, [pc, #408]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6213      	str	r3, [r2, #32]
 8002762:	e01c      	b.n	800279e <HAL_RCC_OscConfig+0x36e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d10c      	bne.n	8002786 <HAL_RCC_OscConfig+0x356>
 800276c:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4a60      	ldr	r2, [pc, #384]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	6213      	str	r3, [r2, #32]
 8002778:	4b5e      	ldr	r3, [pc, #376]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6213      	str	r3, [r2, #32]
 8002784:	e00b      	b.n	800279e <HAL_RCC_OscConfig+0x36e>
 8002786:	4b5b      	ldr	r3, [pc, #364]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4a5a      	ldr	r2, [pc, #360]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	6213      	str	r3, [r2, #32]
 8002792:	4b58      	ldr	r3, [pc, #352]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f023 0304 	bic.w	r3, r3, #4
 800279c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d015      	beq.n	80027d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7ff fb65 	bl	8001e74 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7ff fb61 	bl	8001e74 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e0b1      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c4:	4b4b      	ldr	r3, [pc, #300]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ee      	beq.n	80027ae <HAL_RCC_OscConfig+0x37e>
 80027d0:	e014      	b.n	80027fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7ff fb4f 	bl	8001e74 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7ff fb4b 	bl	8001e74 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e09b      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f0:	4b40      	ldr	r3, [pc, #256]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ee      	bne.n	80027da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d105      	bne.n	800280e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a3b      	ldr	r2, [pc, #236]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8087 	beq.w	8002926 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002818:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d061      	beq.n	80028e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d146      	bne.n	80028ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282c:	4b33      	ldr	r3, [pc, #204]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7ff fb1f 	bl	8001e74 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7ff fb1b 	bl	8001e74 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e06d      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284c:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002860:	d108      	bne.n	8002874 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	4921      	ldr	r1, [pc, #132]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002874:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a19      	ldr	r1, [r3, #32]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	430b      	orrs	r3, r1
 8002886:	491b      	ldr	r1, [pc, #108]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7ff faef 	bl	8001e74 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7ff faeb 	bl	8001e74 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e03d      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x46a>
 80028b8:	e035      	b.n	8002926 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_RCC_OscConfig+0x4cc>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7ff fad8 	bl	8001e74 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7ff fad4 	bl	8001e74 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e026      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x498>
 80028e6:	e01e      	b.n	8002926 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e019      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40007000 	.word	0x40007000
 80028fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_OscConfig+0x500>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	429a      	cmp	r2, r3
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000

08002934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0d0      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b6a      	ldr	r3, [pc, #424]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d910      	bls.n	8002978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b67      	ldr	r3, [pc, #412]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 0207 	bic.w	r2, r3, #7
 800295e:	4965      	ldr	r1, [pc, #404]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0b8      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002990:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800299a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a8:	4b53      	ldr	r3, [pc, #332]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a52      	ldr	r2, [pc, #328]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b4:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	494d      	ldr	r1, [pc, #308]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d040      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d115      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e07f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e073      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06b      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a12:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4936      	ldr	r1, [pc, #216]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a24:	f7ff fa26 	bl	8001e74 <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7ff fa22 	bl	8001e74 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e053      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 020c 	and.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1eb      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a54:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d210      	bcs.n	8002a84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 0207 	bic.w	r2, r3, #7
 8002a6a:	4922      	ldr	r1, [pc, #136]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e032      	b.n	8002aea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4916      	ldr	r1, [pc, #88]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	490e      	ldr	r1, [pc, #56]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ac2:	f000 f821 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	490a      	ldr	r1, [pc, #40]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	5ccb      	ldrb	r3, [r1, r3]
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1cc>)
 8002adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_RCC_ClockConfig+0x1d0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f984 	bl	8001df0 <HAL_InitTick>

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	08006dac 	.word	0x08006dac
 8002b00:	20000000 	.word	0x20000000
 8002b04:	20000004 	.word	0x20000004

08002b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x30>
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x36>
 8002b36:	e027      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3a:	613b      	str	r3, [r7, #16]
      break;
 8002b3c:	e027      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	0c9b      	lsrs	r3, r3, #18
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
 8002b4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	0c5b      	lsrs	r3, r3, #17
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b62:	5cd3      	ldrb	r3, [r2, r3]
 8002b64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b6a:	fb03 f202 	mul.w	r2, r3, r2
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e004      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	613b      	str	r3, [r7, #16]
      break;
 8002b86:	e002      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b8a:	613b      	str	r3, [r7, #16]
      break;
 8002b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8e:	693b      	ldr	r3, [r7, #16]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	007a1200 	.word	0x007a1200
 8002ba4:	08006dbc 	.word	0x08006dbc
 8002ba8:	08006dcc 	.word	0x08006dcc
 8002bac:	003d0900 	.word	0x003d0900

08002bb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <RCC_Delay+0x34>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <RCC_Delay+0x38>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0a5b      	lsrs	r3, r3, #9
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bcc:	bf00      	nop
  }
  while (Delay --);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	60fa      	str	r2, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f9      	bne.n	8002bcc <RCC_Delay+0x1c>
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	20000000 	.word	0x20000000
 8002be8:	10624dd3 	.word	0x10624dd3

08002bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e041      	b.n	8002c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe ffa4 	bl	8001b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f000 f940 	bl	8002eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d001      	beq.n	8002ca4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e032      	b.n	8002d0a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <HAL_TIM_Base_Start+0x88>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00e      	beq.n	8002cd4 <HAL_TIM_Base_Start+0x48>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d009      	beq.n	8002cd4 <HAL_TIM_Base_Start+0x48>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_TIM_Base_Start+0x8c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <HAL_TIM_Base_Start+0x48>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <HAL_TIM_Base_Start+0x90>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d111      	bne.n	8002cf8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d010      	beq.n	8002d08 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf6:	e007      	b.n	8002d08 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40000800 	.word	0x40000800

08002d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_TIM_ConfigClockSource+0x1c>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e0b4      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x186>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d74:	d03e      	beq.n	8002df4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	f200 8087 	bhi.w	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	f000 8086 	beq.w	8002e92 <HAL_TIM_ConfigClockSource+0x172>
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8a:	d87f      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b70      	cmp	r3, #112	; 0x70
 8002d8e:	d01a      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0xa6>
 8002d90:	2b70      	cmp	r3, #112	; 0x70
 8002d92:	d87b      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b60      	cmp	r3, #96	; 0x60
 8002d96:	d050      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x11a>
 8002d98:	2b60      	cmp	r3, #96	; 0x60
 8002d9a:	d877      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b50      	cmp	r3, #80	; 0x50
 8002d9e:	d03c      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0xfa>
 8002da0:	2b50      	cmp	r3, #80	; 0x50
 8002da2:	d873      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d058      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x13a>
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d86f      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b30      	cmp	r3, #48	; 0x30
 8002dae:	d064      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002db0:	2b30      	cmp	r3, #48	; 0x30
 8002db2:	d86b      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d060      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d867      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05c      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d05a      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002dc4:	e062      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6899      	ldr	r1, [r3, #8]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f000 f944 	bl	8003062 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002de8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	609a      	str	r2, [r3, #8]
      break;
 8002df2:	e04f      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f000 f92d 	bl	8003062 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e16:	609a      	str	r2, [r3, #8]
      break;
 8002e18:	e03c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f000 f8a4 	bl	8002f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2150      	movs	r1, #80	; 0x50
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f8fb 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002e38:	e02c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6859      	ldr	r1, [r3, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f000 f8c2 	bl	8002fd0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2160      	movs	r1, #96	; 0x60
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f8eb 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002e58:	e01c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f000 f884 	bl	8002f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2140      	movs	r1, #64	; 0x40
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f8db 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002e78:	e00c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f000 f8d2 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002e8a:	e003      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e90:	e000      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a29      	ldr	r2, [pc, #164]	; (8002f68 <TIM_Base_SetConfig+0xb8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_Base_SetConfig+0x30>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ece:	d007      	beq.n	8002ee0 <TIM_Base_SetConfig+0x30>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <TIM_Base_SetConfig+0xbc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_Base_SetConfig+0x30>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <TIM_Base_SetConfig+0xc0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d108      	bne.n	8002ef2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <TIM_Base_SetConfig+0xb8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00b      	beq.n	8002f12 <TIM_Base_SetConfig+0x62>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d007      	beq.n	8002f12 <TIM_Base_SetConfig+0x62>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <TIM_Base_SetConfig+0xbc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <TIM_Base_SetConfig+0x62>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <TIM_Base_SetConfig+0xc0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d108      	bne.n	8002f24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <TIM_Base_SetConfig+0xb8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d103      	bne.n	8002f58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	615a      	str	r2, [r3, #20]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40000800 	.word	0x40000800

08002f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0201 	bic.w	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 030a 	bic.w	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f023 0210 	bic.w	r2, r3, #16
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	031b      	lsls	r3, r3, #12
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800300c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	621a      	str	r2, [r3, #32]
}
 8003024:	bf00      	nop
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr

0800302e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	f043 0307 	orr.w	r3, r3, #7
 8003050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	609a      	str	r2, [r3, #8]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003062:	b480      	push	{r7}
 8003064:	b087      	sub	sp, #28
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800307c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	021a      	lsls	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	431a      	orrs	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4313      	orrs	r3, r2
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	609a      	str	r2, [r3, #8]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e046      	b.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00e      	beq.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d009      	beq.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a10      	ldr	r2, [pc, #64]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d10c      	bne.n	8003134 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	4313      	orrs	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800

0800315c <__errno>:
 800315c:	4b01      	ldr	r3, [pc, #4]	; (8003164 <__errno+0x8>)
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	2000000c 	.word	0x2000000c

08003168 <__libc_init_array>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	2600      	movs	r6, #0
 800316c:	4d0c      	ldr	r5, [pc, #48]	; (80031a0 <__libc_init_array+0x38>)
 800316e:	4c0d      	ldr	r4, [pc, #52]	; (80031a4 <__libc_init_array+0x3c>)
 8003170:	1b64      	subs	r4, r4, r5
 8003172:	10a4      	asrs	r4, r4, #2
 8003174:	42a6      	cmp	r6, r4
 8003176:	d109      	bne.n	800318c <__libc_init_array+0x24>
 8003178:	f003 fddc 	bl	8006d34 <_init>
 800317c:	2600      	movs	r6, #0
 800317e:	4d0a      	ldr	r5, [pc, #40]	; (80031a8 <__libc_init_array+0x40>)
 8003180:	4c0a      	ldr	r4, [pc, #40]	; (80031ac <__libc_init_array+0x44>)
 8003182:	1b64      	subs	r4, r4, r5
 8003184:	10a4      	asrs	r4, r4, #2
 8003186:	42a6      	cmp	r6, r4
 8003188:	d105      	bne.n	8003196 <__libc_init_array+0x2e>
 800318a:	bd70      	pop	{r4, r5, r6, pc}
 800318c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003190:	4798      	blx	r3
 8003192:	3601      	adds	r6, #1
 8003194:	e7ee      	b.n	8003174 <__libc_init_array+0xc>
 8003196:	f855 3b04 	ldr.w	r3, [r5], #4
 800319a:	4798      	blx	r3
 800319c:	3601      	adds	r6, #1
 800319e:	e7f2      	b.n	8003186 <__libc_init_array+0x1e>
 80031a0:	080071e0 	.word	0x080071e0
 80031a4:	080071e0 	.word	0x080071e0
 80031a8:	080071e0 	.word	0x080071e0
 80031ac:	080071e4 	.word	0x080071e4

080031b0 <memset>:
 80031b0:	4603      	mov	r3, r0
 80031b2:	4402      	add	r2, r0
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d100      	bne.n	80031ba <memset+0xa>
 80031b8:	4770      	bx	lr
 80031ba:	f803 1b01 	strb.w	r1, [r3], #1
 80031be:	e7f9      	b.n	80031b4 <memset+0x4>

080031c0 <__cvt>:
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c6:	461f      	mov	r7, r3
 80031c8:	bfbb      	ittet	lt
 80031ca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80031ce:	461f      	movlt	r7, r3
 80031d0:	2300      	movge	r3, #0
 80031d2:	232d      	movlt	r3, #45	; 0x2d
 80031d4:	b088      	sub	sp, #32
 80031d6:	4614      	mov	r4, r2
 80031d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80031da:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80031dc:	7013      	strb	r3, [r2, #0]
 80031de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80031e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80031e4:	f023 0820 	bic.w	r8, r3, #32
 80031e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031ec:	d005      	beq.n	80031fa <__cvt+0x3a>
 80031ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80031f2:	d100      	bne.n	80031f6 <__cvt+0x36>
 80031f4:	3501      	adds	r5, #1
 80031f6:	2302      	movs	r3, #2
 80031f8:	e000      	b.n	80031fc <__cvt+0x3c>
 80031fa:	2303      	movs	r3, #3
 80031fc:	aa07      	add	r2, sp, #28
 80031fe:	9204      	str	r2, [sp, #16]
 8003200:	aa06      	add	r2, sp, #24
 8003202:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003206:	e9cd 3500 	strd	r3, r5, [sp]
 800320a:	4622      	mov	r2, r4
 800320c:	463b      	mov	r3, r7
 800320e:	f000 fce3 	bl	8003bd8 <_dtoa_r>
 8003212:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003216:	4606      	mov	r6, r0
 8003218:	d102      	bne.n	8003220 <__cvt+0x60>
 800321a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800321c:	07db      	lsls	r3, r3, #31
 800321e:	d522      	bpl.n	8003266 <__cvt+0xa6>
 8003220:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003224:	eb06 0905 	add.w	r9, r6, r5
 8003228:	d110      	bne.n	800324c <__cvt+0x8c>
 800322a:	7833      	ldrb	r3, [r6, #0]
 800322c:	2b30      	cmp	r3, #48	; 0x30
 800322e:	d10a      	bne.n	8003246 <__cvt+0x86>
 8003230:	2200      	movs	r2, #0
 8003232:	2300      	movs	r3, #0
 8003234:	4620      	mov	r0, r4
 8003236:	4639      	mov	r1, r7
 8003238:	f7fd fc6a 	bl	8000b10 <__aeabi_dcmpeq>
 800323c:	b918      	cbnz	r0, 8003246 <__cvt+0x86>
 800323e:	f1c5 0501 	rsb	r5, r5, #1
 8003242:	f8ca 5000 	str.w	r5, [sl]
 8003246:	f8da 3000 	ldr.w	r3, [sl]
 800324a:	4499      	add	r9, r3
 800324c:	2200      	movs	r2, #0
 800324e:	2300      	movs	r3, #0
 8003250:	4620      	mov	r0, r4
 8003252:	4639      	mov	r1, r7
 8003254:	f7fd fc5c 	bl	8000b10 <__aeabi_dcmpeq>
 8003258:	b108      	cbz	r0, 800325e <__cvt+0x9e>
 800325a:	f8cd 901c 	str.w	r9, [sp, #28]
 800325e:	2230      	movs	r2, #48	; 0x30
 8003260:	9b07      	ldr	r3, [sp, #28]
 8003262:	454b      	cmp	r3, r9
 8003264:	d307      	bcc.n	8003276 <__cvt+0xb6>
 8003266:	4630      	mov	r0, r6
 8003268:	9b07      	ldr	r3, [sp, #28]
 800326a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800326c:	1b9b      	subs	r3, r3, r6
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	b008      	add	sp, #32
 8003272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003276:	1c59      	adds	r1, r3, #1
 8003278:	9107      	str	r1, [sp, #28]
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e7f0      	b.n	8003260 <__cvt+0xa0>

0800327e <__exponent>:
 800327e:	4603      	mov	r3, r0
 8003280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003282:	2900      	cmp	r1, #0
 8003284:	f803 2b02 	strb.w	r2, [r3], #2
 8003288:	bfb6      	itet	lt
 800328a:	222d      	movlt	r2, #45	; 0x2d
 800328c:	222b      	movge	r2, #43	; 0x2b
 800328e:	4249      	neglt	r1, r1
 8003290:	2909      	cmp	r1, #9
 8003292:	7042      	strb	r2, [r0, #1]
 8003294:	dd2b      	ble.n	80032ee <__exponent+0x70>
 8003296:	f10d 0407 	add.w	r4, sp, #7
 800329a:	46a4      	mov	ip, r4
 800329c:	270a      	movs	r7, #10
 800329e:	fb91 f6f7 	sdiv	r6, r1, r7
 80032a2:	460a      	mov	r2, r1
 80032a4:	46a6      	mov	lr, r4
 80032a6:	fb07 1516 	mls	r5, r7, r6, r1
 80032aa:	2a63      	cmp	r2, #99	; 0x63
 80032ac:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80032b0:	4631      	mov	r1, r6
 80032b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80032b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80032ba:	dcf0      	bgt.n	800329e <__exponent+0x20>
 80032bc:	3130      	adds	r1, #48	; 0x30
 80032be:	f1ae 0502 	sub.w	r5, lr, #2
 80032c2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80032c6:	4629      	mov	r1, r5
 80032c8:	1c44      	adds	r4, r0, #1
 80032ca:	4561      	cmp	r1, ip
 80032cc:	d30a      	bcc.n	80032e4 <__exponent+0x66>
 80032ce:	f10d 0209 	add.w	r2, sp, #9
 80032d2:	eba2 020e 	sub.w	r2, r2, lr
 80032d6:	4565      	cmp	r5, ip
 80032d8:	bf88      	it	hi
 80032da:	2200      	movhi	r2, #0
 80032dc:	4413      	add	r3, r2
 80032de:	1a18      	subs	r0, r3, r0
 80032e0:	b003      	add	sp, #12
 80032e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032e8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80032ec:	e7ed      	b.n	80032ca <__exponent+0x4c>
 80032ee:	2330      	movs	r3, #48	; 0x30
 80032f0:	3130      	adds	r1, #48	; 0x30
 80032f2:	7083      	strb	r3, [r0, #2]
 80032f4:	70c1      	strb	r1, [r0, #3]
 80032f6:	1d03      	adds	r3, r0, #4
 80032f8:	e7f1      	b.n	80032de <__exponent+0x60>
	...

080032fc <_printf_float>:
 80032fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003300:	b091      	sub	sp, #68	; 0x44
 8003302:	460c      	mov	r4, r1
 8003304:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003308:	4616      	mov	r6, r2
 800330a:	461f      	mov	r7, r3
 800330c:	4605      	mov	r5, r0
 800330e:	f001 fa51 	bl	80047b4 <_localeconv_r>
 8003312:	6803      	ldr	r3, [r0, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	9309      	str	r3, [sp, #36]	; 0x24
 8003318:	f7fc ff1a 	bl	8000150 <strlen>
 800331c:	2300      	movs	r3, #0
 800331e:	930e      	str	r3, [sp, #56]	; 0x38
 8003320:	f8d8 3000 	ldr.w	r3, [r8]
 8003324:	900a      	str	r0, [sp, #40]	; 0x28
 8003326:	3307      	adds	r3, #7
 8003328:	f023 0307 	bic.w	r3, r3, #7
 800332c:	f103 0208 	add.w	r2, r3, #8
 8003330:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003334:	f8d4 b000 	ldr.w	fp, [r4]
 8003338:	f8c8 2000 	str.w	r2, [r8]
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003344:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003348:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800334c:	930b      	str	r3, [sp, #44]	; 0x2c
 800334e:	f04f 32ff 	mov.w	r2, #4294967295
 8003352:	4640      	mov	r0, r8
 8003354:	4b9c      	ldr	r3, [pc, #624]	; (80035c8 <_printf_float+0x2cc>)
 8003356:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003358:	f7fd fc0c 	bl	8000b74 <__aeabi_dcmpun>
 800335c:	bb70      	cbnz	r0, 80033bc <_printf_float+0xc0>
 800335e:	f04f 32ff 	mov.w	r2, #4294967295
 8003362:	4640      	mov	r0, r8
 8003364:	4b98      	ldr	r3, [pc, #608]	; (80035c8 <_printf_float+0x2cc>)
 8003366:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003368:	f7fd fbe6 	bl	8000b38 <__aeabi_dcmple>
 800336c:	bb30      	cbnz	r0, 80033bc <_printf_float+0xc0>
 800336e:	2200      	movs	r2, #0
 8003370:	2300      	movs	r3, #0
 8003372:	4640      	mov	r0, r8
 8003374:	4651      	mov	r1, sl
 8003376:	f7fd fbd5 	bl	8000b24 <__aeabi_dcmplt>
 800337a:	b110      	cbz	r0, 8003382 <_printf_float+0x86>
 800337c:	232d      	movs	r3, #45	; 0x2d
 800337e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003382:	4b92      	ldr	r3, [pc, #584]	; (80035cc <_printf_float+0x2d0>)
 8003384:	4892      	ldr	r0, [pc, #584]	; (80035d0 <_printf_float+0x2d4>)
 8003386:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800338a:	bf94      	ite	ls
 800338c:	4698      	movls	r8, r3
 800338e:	4680      	movhi	r8, r0
 8003390:	2303      	movs	r3, #3
 8003392:	f04f 0a00 	mov.w	sl, #0
 8003396:	6123      	str	r3, [r4, #16]
 8003398:	f02b 0304 	bic.w	r3, fp, #4
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	4633      	mov	r3, r6
 80033a0:	4621      	mov	r1, r4
 80033a2:	4628      	mov	r0, r5
 80033a4:	9700      	str	r7, [sp, #0]
 80033a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80033a8:	f000 f9d4 	bl	8003754 <_printf_common>
 80033ac:	3001      	adds	r0, #1
 80033ae:	f040 8090 	bne.w	80034d2 <_printf_float+0x1d6>
 80033b2:	f04f 30ff 	mov.w	r0, #4294967295
 80033b6:	b011      	add	sp, #68	; 0x44
 80033b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033bc:	4642      	mov	r2, r8
 80033be:	4653      	mov	r3, sl
 80033c0:	4640      	mov	r0, r8
 80033c2:	4651      	mov	r1, sl
 80033c4:	f7fd fbd6 	bl	8000b74 <__aeabi_dcmpun>
 80033c8:	b148      	cbz	r0, 80033de <_printf_float+0xe2>
 80033ca:	f1ba 0f00 	cmp.w	sl, #0
 80033ce:	bfb8      	it	lt
 80033d0:	232d      	movlt	r3, #45	; 0x2d
 80033d2:	4880      	ldr	r0, [pc, #512]	; (80035d4 <_printf_float+0x2d8>)
 80033d4:	bfb8      	it	lt
 80033d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80033da:	4b7f      	ldr	r3, [pc, #508]	; (80035d8 <_printf_float+0x2dc>)
 80033dc:	e7d3      	b.n	8003386 <_printf_float+0x8a>
 80033de:	6863      	ldr	r3, [r4, #4]
 80033e0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	d142      	bne.n	800346e <_printf_float+0x172>
 80033e8:	2306      	movs	r3, #6
 80033ea:	6063      	str	r3, [r4, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	9206      	str	r2, [sp, #24]
 80033f0:	aa0e      	add	r2, sp, #56	; 0x38
 80033f2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80033f6:	aa0d      	add	r2, sp, #52	; 0x34
 80033f8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80033fc:	9203      	str	r2, [sp, #12]
 80033fe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003402:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003406:	6023      	str	r3, [r4, #0]
 8003408:	6863      	ldr	r3, [r4, #4]
 800340a:	4642      	mov	r2, r8
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	4628      	mov	r0, r5
 8003410:	4653      	mov	r3, sl
 8003412:	910b      	str	r1, [sp, #44]	; 0x2c
 8003414:	f7ff fed4 	bl	80031c0 <__cvt>
 8003418:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800341a:	4680      	mov	r8, r0
 800341c:	2947      	cmp	r1, #71	; 0x47
 800341e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003420:	d108      	bne.n	8003434 <_printf_float+0x138>
 8003422:	1cc8      	adds	r0, r1, #3
 8003424:	db02      	blt.n	800342c <_printf_float+0x130>
 8003426:	6863      	ldr	r3, [r4, #4]
 8003428:	4299      	cmp	r1, r3
 800342a:	dd40      	ble.n	80034ae <_printf_float+0x1b2>
 800342c:	f1a9 0902 	sub.w	r9, r9, #2
 8003430:	fa5f f989 	uxtb.w	r9, r9
 8003434:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003438:	d81f      	bhi.n	800347a <_printf_float+0x17e>
 800343a:	464a      	mov	r2, r9
 800343c:	3901      	subs	r1, #1
 800343e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003442:	910d      	str	r1, [sp, #52]	; 0x34
 8003444:	f7ff ff1b 	bl	800327e <__exponent>
 8003448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800344a:	4682      	mov	sl, r0
 800344c:	1813      	adds	r3, r2, r0
 800344e:	2a01      	cmp	r2, #1
 8003450:	6123      	str	r3, [r4, #16]
 8003452:	dc02      	bgt.n	800345a <_printf_float+0x15e>
 8003454:	6822      	ldr	r2, [r4, #0]
 8003456:	07d2      	lsls	r2, r2, #31
 8003458:	d501      	bpl.n	800345e <_printf_float+0x162>
 800345a:	3301      	adds	r3, #1
 800345c:	6123      	str	r3, [r4, #16]
 800345e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003462:	2b00      	cmp	r3, #0
 8003464:	d09b      	beq.n	800339e <_printf_float+0xa2>
 8003466:	232d      	movs	r3, #45	; 0x2d
 8003468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800346c:	e797      	b.n	800339e <_printf_float+0xa2>
 800346e:	2947      	cmp	r1, #71	; 0x47
 8003470:	d1bc      	bne.n	80033ec <_printf_float+0xf0>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1ba      	bne.n	80033ec <_printf_float+0xf0>
 8003476:	2301      	movs	r3, #1
 8003478:	e7b7      	b.n	80033ea <_printf_float+0xee>
 800347a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800347e:	d118      	bne.n	80034b2 <_printf_float+0x1b6>
 8003480:	2900      	cmp	r1, #0
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	dd0b      	ble.n	800349e <_printf_float+0x1a2>
 8003486:	6121      	str	r1, [r4, #16]
 8003488:	b913      	cbnz	r3, 8003490 <_printf_float+0x194>
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	07d0      	lsls	r0, r2, #31
 800348e:	d502      	bpl.n	8003496 <_printf_float+0x19a>
 8003490:	3301      	adds	r3, #1
 8003492:	440b      	add	r3, r1
 8003494:	6123      	str	r3, [r4, #16]
 8003496:	f04f 0a00 	mov.w	sl, #0
 800349a:	65a1      	str	r1, [r4, #88]	; 0x58
 800349c:	e7df      	b.n	800345e <_printf_float+0x162>
 800349e:	b913      	cbnz	r3, 80034a6 <_printf_float+0x1aa>
 80034a0:	6822      	ldr	r2, [r4, #0]
 80034a2:	07d2      	lsls	r2, r2, #31
 80034a4:	d501      	bpl.n	80034aa <_printf_float+0x1ae>
 80034a6:	3302      	adds	r3, #2
 80034a8:	e7f4      	b.n	8003494 <_printf_float+0x198>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e7f2      	b.n	8003494 <_printf_float+0x198>
 80034ae:	f04f 0967 	mov.w	r9, #103	; 0x67
 80034b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034b4:	4299      	cmp	r1, r3
 80034b6:	db05      	blt.n	80034c4 <_printf_float+0x1c8>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	6121      	str	r1, [r4, #16]
 80034bc:	07d8      	lsls	r0, r3, #31
 80034be:	d5ea      	bpl.n	8003496 <_printf_float+0x19a>
 80034c0:	1c4b      	adds	r3, r1, #1
 80034c2:	e7e7      	b.n	8003494 <_printf_float+0x198>
 80034c4:	2900      	cmp	r1, #0
 80034c6:	bfcc      	ite	gt
 80034c8:	2201      	movgt	r2, #1
 80034ca:	f1c1 0202 	rsble	r2, r1, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	e7e0      	b.n	8003494 <_printf_float+0x198>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	055a      	lsls	r2, r3, #21
 80034d6:	d407      	bmi.n	80034e8 <_printf_float+0x1ec>
 80034d8:	6923      	ldr	r3, [r4, #16]
 80034da:	4642      	mov	r2, r8
 80034dc:	4631      	mov	r1, r6
 80034de:	4628      	mov	r0, r5
 80034e0:	47b8      	blx	r7
 80034e2:	3001      	adds	r0, #1
 80034e4:	d12b      	bne.n	800353e <_printf_float+0x242>
 80034e6:	e764      	b.n	80033b2 <_printf_float+0xb6>
 80034e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034ec:	f240 80dd 	bls.w	80036aa <_printf_float+0x3ae>
 80034f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034f4:	2200      	movs	r2, #0
 80034f6:	2300      	movs	r3, #0
 80034f8:	f7fd fb0a 	bl	8000b10 <__aeabi_dcmpeq>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d033      	beq.n	8003568 <_printf_float+0x26c>
 8003500:	2301      	movs	r3, #1
 8003502:	4631      	mov	r1, r6
 8003504:	4628      	mov	r0, r5
 8003506:	4a35      	ldr	r2, [pc, #212]	; (80035dc <_printf_float+0x2e0>)
 8003508:	47b8      	blx	r7
 800350a:	3001      	adds	r0, #1
 800350c:	f43f af51 	beq.w	80033b2 <_printf_float+0xb6>
 8003510:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003514:	429a      	cmp	r2, r3
 8003516:	db02      	blt.n	800351e <_printf_float+0x222>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	07d8      	lsls	r0, r3, #31
 800351c:	d50f      	bpl.n	800353e <_printf_float+0x242>
 800351e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003522:	4631      	mov	r1, r6
 8003524:	4628      	mov	r0, r5
 8003526:	47b8      	blx	r7
 8003528:	3001      	adds	r0, #1
 800352a:	f43f af42 	beq.w	80033b2 <_printf_float+0xb6>
 800352e:	f04f 0800 	mov.w	r8, #0
 8003532:	f104 091a 	add.w	r9, r4, #26
 8003536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003538:	3b01      	subs	r3, #1
 800353a:	4543      	cmp	r3, r8
 800353c:	dc09      	bgt.n	8003552 <_printf_float+0x256>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	079b      	lsls	r3, r3, #30
 8003542:	f100 8102 	bmi.w	800374a <_printf_float+0x44e>
 8003546:	68e0      	ldr	r0, [r4, #12]
 8003548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800354a:	4298      	cmp	r0, r3
 800354c:	bfb8      	it	lt
 800354e:	4618      	movlt	r0, r3
 8003550:	e731      	b.n	80033b6 <_printf_float+0xba>
 8003552:	2301      	movs	r3, #1
 8003554:	464a      	mov	r2, r9
 8003556:	4631      	mov	r1, r6
 8003558:	4628      	mov	r0, r5
 800355a:	47b8      	blx	r7
 800355c:	3001      	adds	r0, #1
 800355e:	f43f af28 	beq.w	80033b2 <_printf_float+0xb6>
 8003562:	f108 0801 	add.w	r8, r8, #1
 8003566:	e7e6      	b.n	8003536 <_printf_float+0x23a>
 8003568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	dc38      	bgt.n	80035e0 <_printf_float+0x2e4>
 800356e:	2301      	movs	r3, #1
 8003570:	4631      	mov	r1, r6
 8003572:	4628      	mov	r0, r5
 8003574:	4a19      	ldr	r2, [pc, #100]	; (80035dc <_printf_float+0x2e0>)
 8003576:	47b8      	blx	r7
 8003578:	3001      	adds	r0, #1
 800357a:	f43f af1a 	beq.w	80033b2 <_printf_float+0xb6>
 800357e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003582:	4313      	orrs	r3, r2
 8003584:	d102      	bne.n	800358c <_printf_float+0x290>
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	07d9      	lsls	r1, r3, #31
 800358a:	d5d8      	bpl.n	800353e <_printf_float+0x242>
 800358c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003590:	4631      	mov	r1, r6
 8003592:	4628      	mov	r0, r5
 8003594:	47b8      	blx	r7
 8003596:	3001      	adds	r0, #1
 8003598:	f43f af0b 	beq.w	80033b2 <_printf_float+0xb6>
 800359c:	f04f 0900 	mov.w	r9, #0
 80035a0:	f104 0a1a 	add.w	sl, r4, #26
 80035a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035a6:	425b      	negs	r3, r3
 80035a8:	454b      	cmp	r3, r9
 80035aa:	dc01      	bgt.n	80035b0 <_printf_float+0x2b4>
 80035ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035ae:	e794      	b.n	80034da <_printf_float+0x1de>
 80035b0:	2301      	movs	r3, #1
 80035b2:	4652      	mov	r2, sl
 80035b4:	4631      	mov	r1, r6
 80035b6:	4628      	mov	r0, r5
 80035b8:	47b8      	blx	r7
 80035ba:	3001      	adds	r0, #1
 80035bc:	f43f aef9 	beq.w	80033b2 <_printf_float+0xb6>
 80035c0:	f109 0901 	add.w	r9, r9, #1
 80035c4:	e7ee      	b.n	80035a4 <_printf_float+0x2a8>
 80035c6:	bf00      	nop
 80035c8:	7fefffff 	.word	0x7fefffff
 80035cc:	08006dd4 	.word	0x08006dd4
 80035d0:	08006dd8 	.word	0x08006dd8
 80035d4:	08006de0 	.word	0x08006de0
 80035d8:	08006ddc 	.word	0x08006ddc
 80035dc:	08006de4 	.word	0x08006de4
 80035e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035e4:	429a      	cmp	r2, r3
 80035e6:	bfa8      	it	ge
 80035e8:	461a      	movge	r2, r3
 80035ea:	2a00      	cmp	r2, #0
 80035ec:	4691      	mov	r9, r2
 80035ee:	dc37      	bgt.n	8003660 <_printf_float+0x364>
 80035f0:	f04f 0b00 	mov.w	fp, #0
 80035f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035f8:	f104 021a 	add.w	r2, r4, #26
 80035fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003600:	ebaa 0309 	sub.w	r3, sl, r9
 8003604:	455b      	cmp	r3, fp
 8003606:	dc33      	bgt.n	8003670 <_printf_float+0x374>
 8003608:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800360c:	429a      	cmp	r2, r3
 800360e:	db3b      	blt.n	8003688 <_printf_float+0x38c>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	07da      	lsls	r2, r3, #31
 8003614:	d438      	bmi.n	8003688 <_printf_float+0x38c>
 8003616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003618:	990d      	ldr	r1, [sp, #52]	; 0x34
 800361a:	eba3 020a 	sub.w	r2, r3, sl
 800361e:	eba3 0901 	sub.w	r9, r3, r1
 8003622:	4591      	cmp	r9, r2
 8003624:	bfa8      	it	ge
 8003626:	4691      	movge	r9, r2
 8003628:	f1b9 0f00 	cmp.w	r9, #0
 800362c:	dc34      	bgt.n	8003698 <_printf_float+0x39c>
 800362e:	f04f 0800 	mov.w	r8, #0
 8003632:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003636:	f104 0a1a 	add.w	sl, r4, #26
 800363a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	eba3 0309 	sub.w	r3, r3, r9
 8003644:	4543      	cmp	r3, r8
 8003646:	f77f af7a 	ble.w	800353e <_printf_float+0x242>
 800364a:	2301      	movs	r3, #1
 800364c:	4652      	mov	r2, sl
 800364e:	4631      	mov	r1, r6
 8003650:	4628      	mov	r0, r5
 8003652:	47b8      	blx	r7
 8003654:	3001      	adds	r0, #1
 8003656:	f43f aeac 	beq.w	80033b2 <_printf_float+0xb6>
 800365a:	f108 0801 	add.w	r8, r8, #1
 800365e:	e7ec      	b.n	800363a <_printf_float+0x33e>
 8003660:	4613      	mov	r3, r2
 8003662:	4631      	mov	r1, r6
 8003664:	4642      	mov	r2, r8
 8003666:	4628      	mov	r0, r5
 8003668:	47b8      	blx	r7
 800366a:	3001      	adds	r0, #1
 800366c:	d1c0      	bne.n	80035f0 <_printf_float+0x2f4>
 800366e:	e6a0      	b.n	80033b2 <_printf_float+0xb6>
 8003670:	2301      	movs	r3, #1
 8003672:	4631      	mov	r1, r6
 8003674:	4628      	mov	r0, r5
 8003676:	920b      	str	r2, [sp, #44]	; 0x2c
 8003678:	47b8      	blx	r7
 800367a:	3001      	adds	r0, #1
 800367c:	f43f ae99 	beq.w	80033b2 <_printf_float+0xb6>
 8003680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003682:	f10b 0b01 	add.w	fp, fp, #1
 8003686:	e7b9      	b.n	80035fc <_printf_float+0x300>
 8003688:	4631      	mov	r1, r6
 800368a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800368e:	4628      	mov	r0, r5
 8003690:	47b8      	blx	r7
 8003692:	3001      	adds	r0, #1
 8003694:	d1bf      	bne.n	8003616 <_printf_float+0x31a>
 8003696:	e68c      	b.n	80033b2 <_printf_float+0xb6>
 8003698:	464b      	mov	r3, r9
 800369a:	4631      	mov	r1, r6
 800369c:	4628      	mov	r0, r5
 800369e:	eb08 020a 	add.w	r2, r8, sl
 80036a2:	47b8      	blx	r7
 80036a4:	3001      	adds	r0, #1
 80036a6:	d1c2      	bne.n	800362e <_printf_float+0x332>
 80036a8:	e683      	b.n	80033b2 <_printf_float+0xb6>
 80036aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036ac:	2a01      	cmp	r2, #1
 80036ae:	dc01      	bgt.n	80036b4 <_printf_float+0x3b8>
 80036b0:	07db      	lsls	r3, r3, #31
 80036b2:	d537      	bpl.n	8003724 <_printf_float+0x428>
 80036b4:	2301      	movs	r3, #1
 80036b6:	4642      	mov	r2, r8
 80036b8:	4631      	mov	r1, r6
 80036ba:	4628      	mov	r0, r5
 80036bc:	47b8      	blx	r7
 80036be:	3001      	adds	r0, #1
 80036c0:	f43f ae77 	beq.w	80033b2 <_printf_float+0xb6>
 80036c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036c8:	4631      	mov	r1, r6
 80036ca:	4628      	mov	r0, r5
 80036cc:	47b8      	blx	r7
 80036ce:	3001      	adds	r0, #1
 80036d0:	f43f ae6f 	beq.w	80033b2 <_printf_float+0xb6>
 80036d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80036d8:	2200      	movs	r2, #0
 80036da:	2300      	movs	r3, #0
 80036dc:	f7fd fa18 	bl	8000b10 <__aeabi_dcmpeq>
 80036e0:	b9d8      	cbnz	r0, 800371a <_printf_float+0x41e>
 80036e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036e4:	f108 0201 	add.w	r2, r8, #1
 80036e8:	3b01      	subs	r3, #1
 80036ea:	4631      	mov	r1, r6
 80036ec:	4628      	mov	r0, r5
 80036ee:	47b8      	blx	r7
 80036f0:	3001      	adds	r0, #1
 80036f2:	d10e      	bne.n	8003712 <_printf_float+0x416>
 80036f4:	e65d      	b.n	80033b2 <_printf_float+0xb6>
 80036f6:	2301      	movs	r3, #1
 80036f8:	464a      	mov	r2, r9
 80036fa:	4631      	mov	r1, r6
 80036fc:	4628      	mov	r0, r5
 80036fe:	47b8      	blx	r7
 8003700:	3001      	adds	r0, #1
 8003702:	f43f ae56 	beq.w	80033b2 <_printf_float+0xb6>
 8003706:	f108 0801 	add.w	r8, r8, #1
 800370a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800370c:	3b01      	subs	r3, #1
 800370e:	4543      	cmp	r3, r8
 8003710:	dcf1      	bgt.n	80036f6 <_printf_float+0x3fa>
 8003712:	4653      	mov	r3, sl
 8003714:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003718:	e6e0      	b.n	80034dc <_printf_float+0x1e0>
 800371a:	f04f 0800 	mov.w	r8, #0
 800371e:	f104 091a 	add.w	r9, r4, #26
 8003722:	e7f2      	b.n	800370a <_printf_float+0x40e>
 8003724:	2301      	movs	r3, #1
 8003726:	4642      	mov	r2, r8
 8003728:	e7df      	b.n	80036ea <_printf_float+0x3ee>
 800372a:	2301      	movs	r3, #1
 800372c:	464a      	mov	r2, r9
 800372e:	4631      	mov	r1, r6
 8003730:	4628      	mov	r0, r5
 8003732:	47b8      	blx	r7
 8003734:	3001      	adds	r0, #1
 8003736:	f43f ae3c 	beq.w	80033b2 <_printf_float+0xb6>
 800373a:	f108 0801 	add.w	r8, r8, #1
 800373e:	68e3      	ldr	r3, [r4, #12]
 8003740:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003742:	1a5b      	subs	r3, r3, r1
 8003744:	4543      	cmp	r3, r8
 8003746:	dcf0      	bgt.n	800372a <_printf_float+0x42e>
 8003748:	e6fd      	b.n	8003546 <_printf_float+0x24a>
 800374a:	f04f 0800 	mov.w	r8, #0
 800374e:	f104 0919 	add.w	r9, r4, #25
 8003752:	e7f4      	b.n	800373e <_printf_float+0x442>

08003754 <_printf_common>:
 8003754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003758:	4616      	mov	r6, r2
 800375a:	4699      	mov	r9, r3
 800375c:	688a      	ldr	r2, [r1, #8]
 800375e:	690b      	ldr	r3, [r1, #16]
 8003760:	4607      	mov	r7, r0
 8003762:	4293      	cmp	r3, r2
 8003764:	bfb8      	it	lt
 8003766:	4613      	movlt	r3, r2
 8003768:	6033      	str	r3, [r6, #0]
 800376a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800376e:	460c      	mov	r4, r1
 8003770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003774:	b10a      	cbz	r2, 800377a <_printf_common+0x26>
 8003776:	3301      	adds	r3, #1
 8003778:	6033      	str	r3, [r6, #0]
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	0699      	lsls	r1, r3, #26
 800377e:	bf42      	ittt	mi
 8003780:	6833      	ldrmi	r3, [r6, #0]
 8003782:	3302      	addmi	r3, #2
 8003784:	6033      	strmi	r3, [r6, #0]
 8003786:	6825      	ldr	r5, [r4, #0]
 8003788:	f015 0506 	ands.w	r5, r5, #6
 800378c:	d106      	bne.n	800379c <_printf_common+0x48>
 800378e:	f104 0a19 	add.w	sl, r4, #25
 8003792:	68e3      	ldr	r3, [r4, #12]
 8003794:	6832      	ldr	r2, [r6, #0]
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	42ab      	cmp	r3, r5
 800379a:	dc28      	bgt.n	80037ee <_printf_common+0x9a>
 800379c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037a0:	1e13      	subs	r3, r2, #0
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	bf18      	it	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	0692      	lsls	r2, r2, #26
 80037aa:	d42d      	bmi.n	8003808 <_printf_common+0xb4>
 80037ac:	4649      	mov	r1, r9
 80037ae:	4638      	mov	r0, r7
 80037b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037b4:	47c0      	blx	r8
 80037b6:	3001      	adds	r0, #1
 80037b8:	d020      	beq.n	80037fc <_printf_common+0xa8>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	68e5      	ldr	r5, [r4, #12]
 80037be:	f003 0306 	and.w	r3, r3, #6
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	bf18      	it	ne
 80037c6:	2500      	movne	r5, #0
 80037c8:	6832      	ldr	r2, [r6, #0]
 80037ca:	f04f 0600 	mov.w	r6, #0
 80037ce:	68a3      	ldr	r3, [r4, #8]
 80037d0:	bf08      	it	eq
 80037d2:	1aad      	subeq	r5, r5, r2
 80037d4:	6922      	ldr	r2, [r4, #16]
 80037d6:	bf08      	it	eq
 80037d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037dc:	4293      	cmp	r3, r2
 80037de:	bfc4      	itt	gt
 80037e0:	1a9b      	subgt	r3, r3, r2
 80037e2:	18ed      	addgt	r5, r5, r3
 80037e4:	341a      	adds	r4, #26
 80037e6:	42b5      	cmp	r5, r6
 80037e8:	d11a      	bne.n	8003820 <_printf_common+0xcc>
 80037ea:	2000      	movs	r0, #0
 80037ec:	e008      	b.n	8003800 <_printf_common+0xac>
 80037ee:	2301      	movs	r3, #1
 80037f0:	4652      	mov	r2, sl
 80037f2:	4649      	mov	r1, r9
 80037f4:	4638      	mov	r0, r7
 80037f6:	47c0      	blx	r8
 80037f8:	3001      	adds	r0, #1
 80037fa:	d103      	bne.n	8003804 <_printf_common+0xb0>
 80037fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003804:	3501      	adds	r5, #1
 8003806:	e7c4      	b.n	8003792 <_printf_common+0x3e>
 8003808:	2030      	movs	r0, #48	; 0x30
 800380a:	18e1      	adds	r1, r4, r3
 800380c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003816:	4422      	add	r2, r4
 8003818:	3302      	adds	r3, #2
 800381a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800381e:	e7c5      	b.n	80037ac <_printf_common+0x58>
 8003820:	2301      	movs	r3, #1
 8003822:	4622      	mov	r2, r4
 8003824:	4649      	mov	r1, r9
 8003826:	4638      	mov	r0, r7
 8003828:	47c0      	blx	r8
 800382a:	3001      	adds	r0, #1
 800382c:	d0e6      	beq.n	80037fc <_printf_common+0xa8>
 800382e:	3601      	adds	r6, #1
 8003830:	e7d9      	b.n	80037e6 <_printf_common+0x92>
	...

08003834 <_printf_i>:
 8003834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	7e0f      	ldrb	r7, [r1, #24]
 800383a:	4691      	mov	r9, r2
 800383c:	2f78      	cmp	r7, #120	; 0x78
 800383e:	4680      	mov	r8, r0
 8003840:	460c      	mov	r4, r1
 8003842:	469a      	mov	sl, r3
 8003844:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003846:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800384a:	d807      	bhi.n	800385c <_printf_i+0x28>
 800384c:	2f62      	cmp	r7, #98	; 0x62
 800384e:	d80a      	bhi.n	8003866 <_printf_i+0x32>
 8003850:	2f00      	cmp	r7, #0
 8003852:	f000 80d9 	beq.w	8003a08 <_printf_i+0x1d4>
 8003856:	2f58      	cmp	r7, #88	; 0x58
 8003858:	f000 80a4 	beq.w	80039a4 <_printf_i+0x170>
 800385c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003864:	e03a      	b.n	80038dc <_printf_i+0xa8>
 8003866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800386a:	2b15      	cmp	r3, #21
 800386c:	d8f6      	bhi.n	800385c <_printf_i+0x28>
 800386e:	a101      	add	r1, pc, #4	; (adr r1, 8003874 <_printf_i+0x40>)
 8003870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003874:	080038cd 	.word	0x080038cd
 8003878:	080038e1 	.word	0x080038e1
 800387c:	0800385d 	.word	0x0800385d
 8003880:	0800385d 	.word	0x0800385d
 8003884:	0800385d 	.word	0x0800385d
 8003888:	0800385d 	.word	0x0800385d
 800388c:	080038e1 	.word	0x080038e1
 8003890:	0800385d 	.word	0x0800385d
 8003894:	0800385d 	.word	0x0800385d
 8003898:	0800385d 	.word	0x0800385d
 800389c:	0800385d 	.word	0x0800385d
 80038a0:	080039ef 	.word	0x080039ef
 80038a4:	08003911 	.word	0x08003911
 80038a8:	080039d1 	.word	0x080039d1
 80038ac:	0800385d 	.word	0x0800385d
 80038b0:	0800385d 	.word	0x0800385d
 80038b4:	08003a11 	.word	0x08003a11
 80038b8:	0800385d 	.word	0x0800385d
 80038bc:	08003911 	.word	0x08003911
 80038c0:	0800385d 	.word	0x0800385d
 80038c4:	0800385d 	.word	0x0800385d
 80038c8:	080039d9 	.word	0x080039d9
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	1d1a      	adds	r2, r3, #4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	602a      	str	r2, [r5, #0]
 80038d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038dc:	2301      	movs	r3, #1
 80038de:	e0a4      	b.n	8003a2a <_printf_i+0x1f6>
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	6829      	ldr	r1, [r5, #0]
 80038e4:	0606      	lsls	r6, r0, #24
 80038e6:	f101 0304 	add.w	r3, r1, #4
 80038ea:	d50a      	bpl.n	8003902 <_printf_i+0xce>
 80038ec:	680e      	ldr	r6, [r1, #0]
 80038ee:	602b      	str	r3, [r5, #0]
 80038f0:	2e00      	cmp	r6, #0
 80038f2:	da03      	bge.n	80038fc <_printf_i+0xc8>
 80038f4:	232d      	movs	r3, #45	; 0x2d
 80038f6:	4276      	negs	r6, r6
 80038f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038fc:	230a      	movs	r3, #10
 80038fe:	485e      	ldr	r0, [pc, #376]	; (8003a78 <_printf_i+0x244>)
 8003900:	e019      	b.n	8003936 <_printf_i+0x102>
 8003902:	680e      	ldr	r6, [r1, #0]
 8003904:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	bf18      	it	ne
 800390c:	b236      	sxthne	r6, r6
 800390e:	e7ef      	b.n	80038f0 <_printf_i+0xbc>
 8003910:	682b      	ldr	r3, [r5, #0]
 8003912:	6820      	ldr	r0, [r4, #0]
 8003914:	1d19      	adds	r1, r3, #4
 8003916:	6029      	str	r1, [r5, #0]
 8003918:	0601      	lsls	r1, r0, #24
 800391a:	d501      	bpl.n	8003920 <_printf_i+0xec>
 800391c:	681e      	ldr	r6, [r3, #0]
 800391e:	e002      	b.n	8003926 <_printf_i+0xf2>
 8003920:	0646      	lsls	r6, r0, #25
 8003922:	d5fb      	bpl.n	800391c <_printf_i+0xe8>
 8003924:	881e      	ldrh	r6, [r3, #0]
 8003926:	2f6f      	cmp	r7, #111	; 0x6f
 8003928:	bf0c      	ite	eq
 800392a:	2308      	moveq	r3, #8
 800392c:	230a      	movne	r3, #10
 800392e:	4852      	ldr	r0, [pc, #328]	; (8003a78 <_printf_i+0x244>)
 8003930:	2100      	movs	r1, #0
 8003932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003936:	6865      	ldr	r5, [r4, #4]
 8003938:	2d00      	cmp	r5, #0
 800393a:	bfa8      	it	ge
 800393c:	6821      	ldrge	r1, [r4, #0]
 800393e:	60a5      	str	r5, [r4, #8]
 8003940:	bfa4      	itt	ge
 8003942:	f021 0104 	bicge.w	r1, r1, #4
 8003946:	6021      	strge	r1, [r4, #0]
 8003948:	b90e      	cbnz	r6, 800394e <_printf_i+0x11a>
 800394a:	2d00      	cmp	r5, #0
 800394c:	d04d      	beq.n	80039ea <_printf_i+0x1b6>
 800394e:	4615      	mov	r5, r2
 8003950:	fbb6 f1f3 	udiv	r1, r6, r3
 8003954:	fb03 6711 	mls	r7, r3, r1, r6
 8003958:	5dc7      	ldrb	r7, [r0, r7]
 800395a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800395e:	4637      	mov	r7, r6
 8003960:	42bb      	cmp	r3, r7
 8003962:	460e      	mov	r6, r1
 8003964:	d9f4      	bls.n	8003950 <_printf_i+0x11c>
 8003966:	2b08      	cmp	r3, #8
 8003968:	d10b      	bne.n	8003982 <_printf_i+0x14e>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	07de      	lsls	r6, r3, #31
 800396e:	d508      	bpl.n	8003982 <_printf_i+0x14e>
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	6861      	ldr	r1, [r4, #4]
 8003974:	4299      	cmp	r1, r3
 8003976:	bfde      	ittt	le
 8003978:	2330      	movle	r3, #48	; 0x30
 800397a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800397e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003982:	1b52      	subs	r2, r2, r5
 8003984:	6122      	str	r2, [r4, #16]
 8003986:	464b      	mov	r3, r9
 8003988:	4621      	mov	r1, r4
 800398a:	4640      	mov	r0, r8
 800398c:	f8cd a000 	str.w	sl, [sp]
 8003990:	aa03      	add	r2, sp, #12
 8003992:	f7ff fedf 	bl	8003754 <_printf_common>
 8003996:	3001      	adds	r0, #1
 8003998:	d14c      	bne.n	8003a34 <_printf_i+0x200>
 800399a:	f04f 30ff 	mov.w	r0, #4294967295
 800399e:	b004      	add	sp, #16
 80039a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a4:	4834      	ldr	r0, [pc, #208]	; (8003a78 <_printf_i+0x244>)
 80039a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039aa:	6829      	ldr	r1, [r5, #0]
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80039b2:	6029      	str	r1, [r5, #0]
 80039b4:	061d      	lsls	r5, r3, #24
 80039b6:	d514      	bpl.n	80039e2 <_printf_i+0x1ae>
 80039b8:	07df      	lsls	r7, r3, #31
 80039ba:	bf44      	itt	mi
 80039bc:	f043 0320 	orrmi.w	r3, r3, #32
 80039c0:	6023      	strmi	r3, [r4, #0]
 80039c2:	b91e      	cbnz	r6, 80039cc <_printf_i+0x198>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	f023 0320 	bic.w	r3, r3, #32
 80039ca:	6023      	str	r3, [r4, #0]
 80039cc:	2310      	movs	r3, #16
 80039ce:	e7af      	b.n	8003930 <_printf_i+0xfc>
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	f043 0320 	orr.w	r3, r3, #32
 80039d6:	6023      	str	r3, [r4, #0]
 80039d8:	2378      	movs	r3, #120	; 0x78
 80039da:	4828      	ldr	r0, [pc, #160]	; (8003a7c <_printf_i+0x248>)
 80039dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039e0:	e7e3      	b.n	80039aa <_printf_i+0x176>
 80039e2:	0659      	lsls	r1, r3, #25
 80039e4:	bf48      	it	mi
 80039e6:	b2b6      	uxthmi	r6, r6
 80039e8:	e7e6      	b.n	80039b8 <_printf_i+0x184>
 80039ea:	4615      	mov	r5, r2
 80039ec:	e7bb      	b.n	8003966 <_printf_i+0x132>
 80039ee:	682b      	ldr	r3, [r5, #0]
 80039f0:	6826      	ldr	r6, [r4, #0]
 80039f2:	1d18      	adds	r0, r3, #4
 80039f4:	6961      	ldr	r1, [r4, #20]
 80039f6:	6028      	str	r0, [r5, #0]
 80039f8:	0635      	lsls	r5, r6, #24
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	d501      	bpl.n	8003a02 <_printf_i+0x1ce>
 80039fe:	6019      	str	r1, [r3, #0]
 8003a00:	e002      	b.n	8003a08 <_printf_i+0x1d4>
 8003a02:	0670      	lsls	r0, r6, #25
 8003a04:	d5fb      	bpl.n	80039fe <_printf_i+0x1ca>
 8003a06:	8019      	strh	r1, [r3, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4615      	mov	r5, r2
 8003a0c:	6123      	str	r3, [r4, #16]
 8003a0e:	e7ba      	b.n	8003986 <_printf_i+0x152>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	2100      	movs	r1, #0
 8003a14:	1d1a      	adds	r2, r3, #4
 8003a16:	602a      	str	r2, [r5, #0]
 8003a18:	681d      	ldr	r5, [r3, #0]
 8003a1a:	6862      	ldr	r2, [r4, #4]
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f000 fed5 	bl	80047cc <memchr>
 8003a22:	b108      	cbz	r0, 8003a28 <_printf_i+0x1f4>
 8003a24:	1b40      	subs	r0, r0, r5
 8003a26:	6060      	str	r0, [r4, #4]
 8003a28:	6863      	ldr	r3, [r4, #4]
 8003a2a:	6123      	str	r3, [r4, #16]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a32:	e7a8      	b.n	8003986 <_printf_i+0x152>
 8003a34:	462a      	mov	r2, r5
 8003a36:	4649      	mov	r1, r9
 8003a38:	4640      	mov	r0, r8
 8003a3a:	6923      	ldr	r3, [r4, #16]
 8003a3c:	47d0      	blx	sl
 8003a3e:	3001      	adds	r0, #1
 8003a40:	d0ab      	beq.n	800399a <_printf_i+0x166>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	079b      	lsls	r3, r3, #30
 8003a46:	d413      	bmi.n	8003a70 <_printf_i+0x23c>
 8003a48:	68e0      	ldr	r0, [r4, #12]
 8003a4a:	9b03      	ldr	r3, [sp, #12]
 8003a4c:	4298      	cmp	r0, r3
 8003a4e:	bfb8      	it	lt
 8003a50:	4618      	movlt	r0, r3
 8003a52:	e7a4      	b.n	800399e <_printf_i+0x16a>
 8003a54:	2301      	movs	r3, #1
 8003a56:	4632      	mov	r2, r6
 8003a58:	4649      	mov	r1, r9
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	47d0      	blx	sl
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d09b      	beq.n	800399a <_printf_i+0x166>
 8003a62:	3501      	adds	r5, #1
 8003a64:	68e3      	ldr	r3, [r4, #12]
 8003a66:	9903      	ldr	r1, [sp, #12]
 8003a68:	1a5b      	subs	r3, r3, r1
 8003a6a:	42ab      	cmp	r3, r5
 8003a6c:	dcf2      	bgt.n	8003a54 <_printf_i+0x220>
 8003a6e:	e7eb      	b.n	8003a48 <_printf_i+0x214>
 8003a70:	2500      	movs	r5, #0
 8003a72:	f104 0619 	add.w	r6, r4, #25
 8003a76:	e7f5      	b.n	8003a64 <_printf_i+0x230>
 8003a78:	08006de6 	.word	0x08006de6
 8003a7c:	08006df7 	.word	0x08006df7

08003a80 <siprintf>:
 8003a80:	b40e      	push	{r1, r2, r3}
 8003a82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a86:	b500      	push	{lr}
 8003a88:	b09c      	sub	sp, #112	; 0x70
 8003a8a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a8c:	9002      	str	r0, [sp, #8]
 8003a8e:	9006      	str	r0, [sp, #24]
 8003a90:	9107      	str	r1, [sp, #28]
 8003a92:	9104      	str	r1, [sp, #16]
 8003a94:	4808      	ldr	r0, [pc, #32]	; (8003ab8 <siprintf+0x38>)
 8003a96:	4909      	ldr	r1, [pc, #36]	; (8003abc <siprintf+0x3c>)
 8003a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a9c:	9105      	str	r1, [sp, #20]
 8003a9e:	6800      	ldr	r0, [r0, #0]
 8003aa0:	a902      	add	r1, sp, #8
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	f001 fb7c 	bl	80051a0 <_svfiprintf_r>
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	9b02      	ldr	r3, [sp, #8]
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	b01c      	add	sp, #112	; 0x70
 8003ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ab4:	b003      	add	sp, #12
 8003ab6:	4770      	bx	lr
 8003ab8:	2000000c 	.word	0x2000000c
 8003abc:	ffff0208 	.word	0xffff0208

08003ac0 <quorem>:
 8003ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac4:	6903      	ldr	r3, [r0, #16]
 8003ac6:	690c      	ldr	r4, [r1, #16]
 8003ac8:	4607      	mov	r7, r0
 8003aca:	42a3      	cmp	r3, r4
 8003acc:	f2c0 8082 	blt.w	8003bd4 <quorem+0x114>
 8003ad0:	3c01      	subs	r4, #1
 8003ad2:	f100 0514 	add.w	r5, r0, #20
 8003ad6:	f101 0814 	add.w	r8, r1, #20
 8003ada:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ae4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	429a      	cmp	r2, r3
 8003aec:	fbb2 f6f3 	udiv	r6, r2, r3
 8003af0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003af4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003af8:	d331      	bcc.n	8003b5e <quorem+0x9e>
 8003afa:	f04f 0e00 	mov.w	lr, #0
 8003afe:	4640      	mov	r0, r8
 8003b00:	46ac      	mov	ip, r5
 8003b02:	46f2      	mov	sl, lr
 8003b04:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b08:	b293      	uxth	r3, r2
 8003b0a:	fb06 e303 	mla	r3, r6, r3, lr
 8003b0e:	0c12      	lsrs	r2, r2, #16
 8003b10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	fb06 e202 	mla	r2, r6, r2, lr
 8003b1a:	ebaa 0303 	sub.w	r3, sl, r3
 8003b1e:	f8dc a000 	ldr.w	sl, [ip]
 8003b22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b26:	fa1f fa8a 	uxth.w	sl, sl
 8003b2a:	4453      	add	r3, sl
 8003b2c:	f8dc a000 	ldr.w	sl, [ip]
 8003b30:	b292      	uxth	r2, r2
 8003b32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003b36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b40:	4581      	cmp	r9, r0
 8003b42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003b46:	f84c 3b04 	str.w	r3, [ip], #4
 8003b4a:	d2db      	bcs.n	8003b04 <quorem+0x44>
 8003b4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003b50:	b92b      	cbnz	r3, 8003b5e <quorem+0x9e>
 8003b52:	9b01      	ldr	r3, [sp, #4]
 8003b54:	3b04      	subs	r3, #4
 8003b56:	429d      	cmp	r5, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	d32f      	bcc.n	8003bbc <quorem+0xfc>
 8003b5c:	613c      	str	r4, [r7, #16]
 8003b5e:	4638      	mov	r0, r7
 8003b60:	f001 f8ce 	bl	8004d00 <__mcmp>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	db25      	blt.n	8003bb4 <quorem+0xf4>
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f04f 0c00 	mov.w	ip, #0
 8003b6e:	3601      	adds	r6, #1
 8003b70:	f858 1b04 	ldr.w	r1, [r8], #4
 8003b74:	f8d0 e000 	ldr.w	lr, [r0]
 8003b78:	b28b      	uxth	r3, r1
 8003b7a:	ebac 0303 	sub.w	r3, ip, r3
 8003b7e:	fa1f f28e 	uxth.w	r2, lr
 8003b82:	4413      	add	r3, r2
 8003b84:	0c0a      	lsrs	r2, r1, #16
 8003b86:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003b8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b94:	45c1      	cmp	r9, r8
 8003b96:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003b9a:	f840 3b04 	str.w	r3, [r0], #4
 8003b9e:	d2e7      	bcs.n	8003b70 <quorem+0xb0>
 8003ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ba8:	b922      	cbnz	r2, 8003bb4 <quorem+0xf4>
 8003baa:	3b04      	subs	r3, #4
 8003bac:	429d      	cmp	r5, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	d30a      	bcc.n	8003bc8 <quorem+0x108>
 8003bb2:	613c      	str	r4, [r7, #16]
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	b003      	add	sp, #12
 8003bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	3b04      	subs	r3, #4
 8003bc0:	2a00      	cmp	r2, #0
 8003bc2:	d1cb      	bne.n	8003b5c <quorem+0x9c>
 8003bc4:	3c01      	subs	r4, #1
 8003bc6:	e7c6      	b.n	8003b56 <quorem+0x96>
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	3b04      	subs	r3, #4
 8003bcc:	2a00      	cmp	r2, #0
 8003bce:	d1f0      	bne.n	8003bb2 <quorem+0xf2>
 8003bd0:	3c01      	subs	r4, #1
 8003bd2:	e7eb      	b.n	8003bac <quorem+0xec>
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	e7ee      	b.n	8003bb6 <quorem+0xf6>

08003bd8 <_dtoa_r>:
 8003bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bdc:	4616      	mov	r6, r2
 8003bde:	461f      	mov	r7, r3
 8003be0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003be2:	b099      	sub	sp, #100	; 0x64
 8003be4:	4605      	mov	r5, r0
 8003be6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003bea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003bee:	b974      	cbnz	r4, 8003c0e <_dtoa_r+0x36>
 8003bf0:	2010      	movs	r0, #16
 8003bf2:	f000 fde3 	bl	80047bc <malloc>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	6268      	str	r0, [r5, #36]	; 0x24
 8003bfa:	b920      	cbnz	r0, 8003c06 <_dtoa_r+0x2e>
 8003bfc:	21ea      	movs	r1, #234	; 0xea
 8003bfe:	4ba8      	ldr	r3, [pc, #672]	; (8003ea0 <_dtoa_r+0x2c8>)
 8003c00:	48a8      	ldr	r0, [pc, #672]	; (8003ea4 <_dtoa_r+0x2cc>)
 8003c02:	f001 fbdd 	bl	80053c0 <__assert_func>
 8003c06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003c0a:	6004      	str	r4, [r0, #0]
 8003c0c:	60c4      	str	r4, [r0, #12]
 8003c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	b151      	cbz	r1, 8003c2a <_dtoa_r+0x52>
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	2301      	movs	r3, #1
 8003c18:	4093      	lsls	r3, r2
 8003c1a:	604a      	str	r2, [r1, #4]
 8003c1c:	608b      	str	r3, [r1, #8]
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f000 fe30 	bl	8004884 <_Bfree>
 8003c24:	2200      	movs	r2, #0
 8003c26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	1e3b      	subs	r3, r7, #0
 8003c2c:	bfaf      	iteee	ge
 8003c2e:	2300      	movge	r3, #0
 8003c30:	2201      	movlt	r2, #1
 8003c32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003c36:	9305      	strlt	r3, [sp, #20]
 8003c38:	bfa8      	it	ge
 8003c3a:	f8c8 3000 	strge.w	r3, [r8]
 8003c3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003c42:	4b99      	ldr	r3, [pc, #612]	; (8003ea8 <_dtoa_r+0x2d0>)
 8003c44:	bfb8      	it	lt
 8003c46:	f8c8 2000 	strlt.w	r2, [r8]
 8003c4a:	ea33 0309 	bics.w	r3, r3, r9
 8003c4e:	d119      	bne.n	8003c84 <_dtoa_r+0xac>
 8003c50:	f242 730f 	movw	r3, #9999	; 0x270f
 8003c54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003c5c:	4333      	orrs	r3, r6
 8003c5e:	f000 857f 	beq.w	8004760 <_dtoa_r+0xb88>
 8003c62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c64:	b953      	cbnz	r3, 8003c7c <_dtoa_r+0xa4>
 8003c66:	4b91      	ldr	r3, [pc, #580]	; (8003eac <_dtoa_r+0x2d4>)
 8003c68:	e022      	b.n	8003cb0 <_dtoa_r+0xd8>
 8003c6a:	4b91      	ldr	r3, [pc, #580]	; (8003eb0 <_dtoa_r+0x2d8>)
 8003c6c:	9303      	str	r3, [sp, #12]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	9803      	ldr	r0, [sp, #12]
 8003c76:	b019      	add	sp, #100	; 0x64
 8003c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7c:	4b8b      	ldr	r3, [pc, #556]	; (8003eac <_dtoa_r+0x2d4>)
 8003c7e:	9303      	str	r3, [sp, #12]
 8003c80:	3303      	adds	r3, #3
 8003c82:	e7f5      	b.n	8003c70 <_dtoa_r+0x98>
 8003c84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003c88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003c8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c90:	2200      	movs	r2, #0
 8003c92:	2300      	movs	r3, #0
 8003c94:	f7fc ff3c 	bl	8000b10 <__aeabi_dcmpeq>
 8003c98:	4680      	mov	r8, r0
 8003c9a:	b158      	cbz	r0, 8003cb4 <_dtoa_r+0xdc>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8558 	beq.w	800475a <_dtoa_r+0xb82>
 8003caa:	4882      	ldr	r0, [pc, #520]	; (8003eb4 <_dtoa_r+0x2dc>)
 8003cac:	6018      	str	r0, [r3, #0]
 8003cae:	1e43      	subs	r3, r0, #1
 8003cb0:	9303      	str	r3, [sp, #12]
 8003cb2:	e7df      	b.n	8003c74 <_dtoa_r+0x9c>
 8003cb4:	ab16      	add	r3, sp, #88	; 0x58
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	ab17      	add	r3, sp, #92	; 0x5c
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003cc2:	f001 f8c5 	bl	8004e50 <__d2b>
 8003cc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003cca:	4683      	mov	fp, r0
 8003ccc:	2c00      	cmp	r4, #0
 8003cce:	d07f      	beq.n	8003dd0 <_dtoa_r+0x1f8>
 8003cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003cda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003ce2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003ce6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003cea:	2200      	movs	r2, #0
 8003cec:	4b72      	ldr	r3, [pc, #456]	; (8003eb8 <_dtoa_r+0x2e0>)
 8003cee:	f7fc faef 	bl	80002d0 <__aeabi_dsub>
 8003cf2:	a365      	add	r3, pc, #404	; (adr r3, 8003e88 <_dtoa_r+0x2b0>)
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f7fc fca2 	bl	8000640 <__aeabi_dmul>
 8003cfc:	a364      	add	r3, pc, #400	; (adr r3, 8003e90 <_dtoa_r+0x2b8>)
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f7fc fae7 	bl	80002d4 <__adddf3>
 8003d06:	4606      	mov	r6, r0
 8003d08:	4620      	mov	r0, r4
 8003d0a:	460f      	mov	r7, r1
 8003d0c:	f7fc fc2e 	bl	800056c <__aeabi_i2d>
 8003d10:	a361      	add	r3, pc, #388	; (adr r3, 8003e98 <_dtoa_r+0x2c0>)
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f7fc fc93 	bl	8000640 <__aeabi_dmul>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4630      	mov	r0, r6
 8003d20:	4639      	mov	r1, r7
 8003d22:	f7fc fad7 	bl	80002d4 <__adddf3>
 8003d26:	4606      	mov	r6, r0
 8003d28:	460f      	mov	r7, r1
 8003d2a:	f7fc ff39 	bl	8000ba0 <__aeabi_d2iz>
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4682      	mov	sl, r0
 8003d32:	2300      	movs	r3, #0
 8003d34:	4630      	mov	r0, r6
 8003d36:	4639      	mov	r1, r7
 8003d38:	f7fc fef4 	bl	8000b24 <__aeabi_dcmplt>
 8003d3c:	b148      	cbz	r0, 8003d52 <_dtoa_r+0x17a>
 8003d3e:	4650      	mov	r0, sl
 8003d40:	f7fc fc14 	bl	800056c <__aeabi_i2d>
 8003d44:	4632      	mov	r2, r6
 8003d46:	463b      	mov	r3, r7
 8003d48:	f7fc fee2 	bl	8000b10 <__aeabi_dcmpeq>
 8003d4c:	b908      	cbnz	r0, 8003d52 <_dtoa_r+0x17a>
 8003d4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d52:	f1ba 0f16 	cmp.w	sl, #22
 8003d56:	d858      	bhi.n	8003e0a <_dtoa_r+0x232>
 8003d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d5c:	4b57      	ldr	r3, [pc, #348]	; (8003ebc <_dtoa_r+0x2e4>)
 8003d5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc fedd 	bl	8000b24 <__aeabi_dcmplt>
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d04f      	beq.n	8003e0e <_dtoa_r+0x236>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d74:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003d78:	1b1c      	subs	r4, r3, r4
 8003d7a:	1e63      	subs	r3, r4, #1
 8003d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d7e:	bf49      	itett	mi
 8003d80:	f1c4 0301 	rsbmi	r3, r4, #1
 8003d84:	2300      	movpl	r3, #0
 8003d86:	9306      	strmi	r3, [sp, #24]
 8003d88:	2300      	movmi	r3, #0
 8003d8a:	bf54      	ite	pl
 8003d8c:	9306      	strpl	r3, [sp, #24]
 8003d8e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003d90:	f1ba 0f00 	cmp.w	sl, #0
 8003d94:	db3d      	blt.n	8003e12 <_dtoa_r+0x23a>
 8003d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d98:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003d9c:	4453      	add	r3, sl
 8003d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003da0:	2300      	movs	r3, #0
 8003da2:	930a      	str	r3, [sp, #40]	; 0x28
 8003da4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	f200 808c 	bhi.w	8003ec4 <_dtoa_r+0x2ec>
 8003dac:	2b05      	cmp	r3, #5
 8003dae:	bfc4      	itt	gt
 8003db0:	3b04      	subgt	r3, #4
 8003db2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003db6:	bfc8      	it	gt
 8003db8:	2400      	movgt	r4, #0
 8003dba:	f1a3 0302 	sub.w	r3, r3, #2
 8003dbe:	bfd8      	it	le
 8003dc0:	2401      	movle	r4, #1
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	f200 808a 	bhi.w	8003edc <_dtoa_r+0x304>
 8003dc8:	e8df f003 	tbb	[pc, r3]
 8003dcc:	5b4d4f2d 	.word	0x5b4d4f2d
 8003dd0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003dd4:	441c      	add	r4, r3
 8003dd6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	bfc3      	ittte	gt
 8003dde:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003de2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003de6:	fa09 f303 	lslgt.w	r3, r9, r3
 8003dea:	f1c3 0320 	rsble	r3, r3, #32
 8003dee:	bfc6      	itte	gt
 8003df0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003df4:	4318      	orrgt	r0, r3
 8003df6:	fa06 f003 	lslle.w	r0, r6, r3
 8003dfa:	f7fc fba7 	bl	800054c <__aeabi_ui2d>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003e04:	3c01      	subs	r4, #1
 8003e06:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e08:	e76f      	b.n	8003cea <_dtoa_r+0x112>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e7b2      	b.n	8003d74 <_dtoa_r+0x19c>
 8003e0e:	900f      	str	r0, [sp, #60]	; 0x3c
 8003e10:	e7b1      	b.n	8003d76 <_dtoa_r+0x19e>
 8003e12:	9b06      	ldr	r3, [sp, #24]
 8003e14:	eba3 030a 	sub.w	r3, r3, sl
 8003e18:	9306      	str	r3, [sp, #24]
 8003e1a:	f1ca 0300 	rsb	r3, sl, #0
 8003e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e20:	2300      	movs	r3, #0
 8003e22:	930e      	str	r3, [sp, #56]	; 0x38
 8003e24:	e7be      	b.n	8003da4 <_dtoa_r+0x1cc>
 8003e26:	2300      	movs	r3, #0
 8003e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	dc58      	bgt.n	8003ee2 <_dtoa_r+0x30a>
 8003e30:	f04f 0901 	mov.w	r9, #1
 8003e34:	464b      	mov	r3, r9
 8003e36:	f8cd 9020 	str.w	r9, [sp, #32]
 8003e3a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003e3e:	2200      	movs	r2, #0
 8003e40:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003e42:	6042      	str	r2, [r0, #4]
 8003e44:	2204      	movs	r2, #4
 8003e46:	f102 0614 	add.w	r6, r2, #20
 8003e4a:	429e      	cmp	r6, r3
 8003e4c:	6841      	ldr	r1, [r0, #4]
 8003e4e:	d94e      	bls.n	8003eee <_dtoa_r+0x316>
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 fcd7 	bl	8004804 <_Balloc>
 8003e56:	9003      	str	r0, [sp, #12]
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d14c      	bne.n	8003ef6 <_dtoa_r+0x31e>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003e62:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <_dtoa_r+0x2e8>)
 8003e64:	e6cc      	b.n	8003c00 <_dtoa_r+0x28>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e7de      	b.n	8003e28 <_dtoa_r+0x250>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e70:	eb0a 0903 	add.w	r9, sl, r3
 8003e74:	f109 0301 	add.w	r3, r9, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	9308      	str	r3, [sp, #32]
 8003e7c:	bfb8      	it	lt
 8003e7e:	2301      	movlt	r3, #1
 8003e80:	e7dd      	b.n	8003e3e <_dtoa_r+0x266>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e7f2      	b.n	8003e6c <_dtoa_r+0x294>
 8003e86:	bf00      	nop
 8003e88:	636f4361 	.word	0x636f4361
 8003e8c:	3fd287a7 	.word	0x3fd287a7
 8003e90:	8b60c8b3 	.word	0x8b60c8b3
 8003e94:	3fc68a28 	.word	0x3fc68a28
 8003e98:	509f79fb 	.word	0x509f79fb
 8003e9c:	3fd34413 	.word	0x3fd34413
 8003ea0:	08006e15 	.word	0x08006e15
 8003ea4:	08006e2c 	.word	0x08006e2c
 8003ea8:	7ff00000 	.word	0x7ff00000
 8003eac:	08006e11 	.word	0x08006e11
 8003eb0:	08006e08 	.word	0x08006e08
 8003eb4:	08006de5 	.word	0x08006de5
 8003eb8:	3ff80000 	.word	0x3ff80000
 8003ebc:	08006f20 	.word	0x08006f20
 8003ec0:	08006e87 	.word	0x08006e87
 8003ec4:	2401      	movs	r4, #1
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	940b      	str	r4, [sp, #44]	; 0x2c
 8003eca:	9322      	str	r3, [sp, #136]	; 0x88
 8003ecc:	f04f 39ff 	mov.w	r9, #4294967295
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2312      	movs	r3, #18
 8003ed4:	f8cd 9020 	str.w	r9, [sp, #32]
 8003ed8:	9223      	str	r2, [sp, #140]	; 0x8c
 8003eda:	e7b0      	b.n	8003e3e <_dtoa_r+0x266>
 8003edc:	2301      	movs	r3, #1
 8003ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ee0:	e7f4      	b.n	8003ecc <_dtoa_r+0x2f4>
 8003ee2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	f8cd 9020 	str.w	r9, [sp, #32]
 8003eec:	e7a7      	b.n	8003e3e <_dtoa_r+0x266>
 8003eee:	3101      	adds	r1, #1
 8003ef0:	6041      	str	r1, [r0, #4]
 8003ef2:	0052      	lsls	r2, r2, #1
 8003ef4:	e7a7      	b.n	8003e46 <_dtoa_r+0x26e>
 8003ef6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ef8:	9a03      	ldr	r2, [sp, #12]
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	9b08      	ldr	r3, [sp, #32]
 8003efe:	2b0e      	cmp	r3, #14
 8003f00:	f200 80a8 	bhi.w	8004054 <_dtoa_r+0x47c>
 8003f04:	2c00      	cmp	r4, #0
 8003f06:	f000 80a5 	beq.w	8004054 <_dtoa_r+0x47c>
 8003f0a:	f1ba 0f00 	cmp.w	sl, #0
 8003f0e:	dd34      	ble.n	8003f7a <_dtoa_r+0x3a2>
 8003f10:	4a9a      	ldr	r2, [pc, #616]	; (800417c <_dtoa_r+0x5a4>)
 8003f12:	f00a 030f 	and.w	r3, sl, #15
 8003f16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f1a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003f1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003f26:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003f2a:	d016      	beq.n	8003f5a <_dtoa_r+0x382>
 8003f2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f30:	4b93      	ldr	r3, [pc, #588]	; (8004180 <_dtoa_r+0x5a8>)
 8003f32:	2703      	movs	r7, #3
 8003f34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f38:	f7fc fcac 	bl	8000894 <__aeabi_ddiv>
 8003f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f40:	f004 040f 	and.w	r4, r4, #15
 8003f44:	4e8e      	ldr	r6, [pc, #568]	; (8004180 <_dtoa_r+0x5a8>)
 8003f46:	b954      	cbnz	r4, 8003f5e <_dtoa_r+0x386>
 8003f48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f50:	f7fc fca0 	bl	8000894 <__aeabi_ddiv>
 8003f54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f58:	e029      	b.n	8003fae <_dtoa_r+0x3d6>
 8003f5a:	2702      	movs	r7, #2
 8003f5c:	e7f2      	b.n	8003f44 <_dtoa_r+0x36c>
 8003f5e:	07e1      	lsls	r1, r4, #31
 8003f60:	d508      	bpl.n	8003f74 <_dtoa_r+0x39c>
 8003f62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003f6a:	f7fc fb69 	bl	8000640 <__aeabi_dmul>
 8003f6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f72:	3701      	adds	r7, #1
 8003f74:	1064      	asrs	r4, r4, #1
 8003f76:	3608      	adds	r6, #8
 8003f78:	e7e5      	b.n	8003f46 <_dtoa_r+0x36e>
 8003f7a:	f000 80a5 	beq.w	80040c8 <_dtoa_r+0x4f0>
 8003f7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f82:	f1ca 0400 	rsb	r4, sl, #0
 8003f86:	4b7d      	ldr	r3, [pc, #500]	; (800417c <_dtoa_r+0x5a4>)
 8003f88:	f004 020f 	and.w	r2, r4, #15
 8003f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f7fc fb54 	bl	8000640 <__aeabi_dmul>
 8003f98:	2702      	movs	r7, #2
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fa0:	4e77      	ldr	r6, [pc, #476]	; (8004180 <_dtoa_r+0x5a8>)
 8003fa2:	1124      	asrs	r4, r4, #4
 8003fa4:	2c00      	cmp	r4, #0
 8003fa6:	f040 8084 	bne.w	80040b2 <_dtoa_r+0x4da>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1d2      	bne.n	8003f54 <_dtoa_r+0x37c>
 8003fae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 808b 	beq.w	80040cc <_dtoa_r+0x4f4>
 8003fb6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003fba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003fbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <_dtoa_r+0x5ac>)
 8003fc6:	f7fc fdad 	bl	8000b24 <__aeabi_dcmplt>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d07e      	beq.n	80040cc <_dtoa_r+0x4f4>
 8003fce:	9b08      	ldr	r3, [sp, #32]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d07b      	beq.n	80040cc <_dtoa_r+0x4f4>
 8003fd4:	f1b9 0f00 	cmp.w	r9, #0
 8003fd8:	dd38      	ble.n	800404c <_dtoa_r+0x474>
 8003fda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003fde:	2200      	movs	r2, #0
 8003fe0:	4b69      	ldr	r3, [pc, #420]	; (8004188 <_dtoa_r+0x5b0>)
 8003fe2:	f7fc fb2d 	bl	8000640 <__aeabi_dmul>
 8003fe6:	464c      	mov	r4, r9
 8003fe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fec:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003ff0:	3701      	adds	r7, #1
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	f7fc faba 	bl	800056c <__aeabi_i2d>
 8003ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ffc:	f7fc fb20 	bl	8000640 <__aeabi_dmul>
 8004000:	2200      	movs	r2, #0
 8004002:	4b62      	ldr	r3, [pc, #392]	; (800418c <_dtoa_r+0x5b4>)
 8004004:	f7fc f966 	bl	80002d4 <__adddf3>
 8004008:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800400c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004010:	9611      	str	r6, [sp, #68]	; 0x44
 8004012:	2c00      	cmp	r4, #0
 8004014:	d15d      	bne.n	80040d2 <_dtoa_r+0x4fa>
 8004016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800401a:	2200      	movs	r2, #0
 800401c:	4b5c      	ldr	r3, [pc, #368]	; (8004190 <_dtoa_r+0x5b8>)
 800401e:	f7fc f957 	bl	80002d0 <__aeabi_dsub>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800402a:	4633      	mov	r3, r6
 800402c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800402e:	f7fc fd97 	bl	8000b60 <__aeabi_dcmpgt>
 8004032:	2800      	cmp	r0, #0
 8004034:	f040 829c 	bne.w	8004570 <_dtoa_r+0x998>
 8004038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800403c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800403e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004042:	f7fc fd6f 	bl	8000b24 <__aeabi_dcmplt>
 8004046:	2800      	cmp	r0, #0
 8004048:	f040 8290 	bne.w	800456c <_dtoa_r+0x994>
 800404c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004050:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004056:	2b00      	cmp	r3, #0
 8004058:	f2c0 8152 	blt.w	8004300 <_dtoa_r+0x728>
 800405c:	f1ba 0f0e 	cmp.w	sl, #14
 8004060:	f300 814e 	bgt.w	8004300 <_dtoa_r+0x728>
 8004064:	4b45      	ldr	r3, [pc, #276]	; (800417c <_dtoa_r+0x5a4>)
 8004066:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800406a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800406e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004072:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004074:	2b00      	cmp	r3, #0
 8004076:	f280 80db 	bge.w	8004230 <_dtoa_r+0x658>
 800407a:	9b08      	ldr	r3, [sp, #32]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f300 80d7 	bgt.w	8004230 <_dtoa_r+0x658>
 8004082:	f040 8272 	bne.w	800456a <_dtoa_r+0x992>
 8004086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800408a:	2200      	movs	r2, #0
 800408c:	4b40      	ldr	r3, [pc, #256]	; (8004190 <_dtoa_r+0x5b8>)
 800408e:	f7fc fad7 	bl	8000640 <__aeabi_dmul>
 8004092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004096:	f7fc fd59 	bl	8000b4c <__aeabi_dcmpge>
 800409a:	9c08      	ldr	r4, [sp, #32]
 800409c:	4626      	mov	r6, r4
 800409e:	2800      	cmp	r0, #0
 80040a0:	f040 8248 	bne.w	8004534 <_dtoa_r+0x95c>
 80040a4:	2331      	movs	r3, #49	; 0x31
 80040a6:	9f03      	ldr	r7, [sp, #12]
 80040a8:	f10a 0a01 	add.w	sl, sl, #1
 80040ac:	f807 3b01 	strb.w	r3, [r7], #1
 80040b0:	e244      	b.n	800453c <_dtoa_r+0x964>
 80040b2:	07e2      	lsls	r2, r4, #31
 80040b4:	d505      	bpl.n	80040c2 <_dtoa_r+0x4ea>
 80040b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80040ba:	f7fc fac1 	bl	8000640 <__aeabi_dmul>
 80040be:	2301      	movs	r3, #1
 80040c0:	3701      	adds	r7, #1
 80040c2:	1064      	asrs	r4, r4, #1
 80040c4:	3608      	adds	r6, #8
 80040c6:	e76d      	b.n	8003fa4 <_dtoa_r+0x3cc>
 80040c8:	2702      	movs	r7, #2
 80040ca:	e770      	b.n	8003fae <_dtoa_r+0x3d6>
 80040cc:	46d0      	mov	r8, sl
 80040ce:	9c08      	ldr	r4, [sp, #32]
 80040d0:	e78f      	b.n	8003ff2 <_dtoa_r+0x41a>
 80040d2:	9903      	ldr	r1, [sp, #12]
 80040d4:	4b29      	ldr	r3, [pc, #164]	; (800417c <_dtoa_r+0x5a4>)
 80040d6:	4421      	add	r1, r4
 80040d8:	9112      	str	r1, [sp, #72]	; 0x48
 80040da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80040e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80040e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80040e8:	2900      	cmp	r1, #0
 80040ea:	d055      	beq.n	8004198 <_dtoa_r+0x5c0>
 80040ec:	2000      	movs	r0, #0
 80040ee:	4929      	ldr	r1, [pc, #164]	; (8004194 <_dtoa_r+0x5bc>)
 80040f0:	f7fc fbd0 	bl	8000894 <__aeabi_ddiv>
 80040f4:	463b      	mov	r3, r7
 80040f6:	4632      	mov	r2, r6
 80040f8:	f7fc f8ea 	bl	80002d0 <__aeabi_dsub>
 80040fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004100:	9f03      	ldr	r7, [sp, #12]
 8004102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004106:	f7fc fd4b 	bl	8000ba0 <__aeabi_d2iz>
 800410a:	4604      	mov	r4, r0
 800410c:	f7fc fa2e 	bl	800056c <__aeabi_i2d>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004118:	f7fc f8da 	bl	80002d0 <__aeabi_dsub>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	3430      	adds	r4, #48	; 0x30
 8004122:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800412a:	f807 4b01 	strb.w	r4, [r7], #1
 800412e:	f7fc fcf9 	bl	8000b24 <__aeabi_dcmplt>
 8004132:	2800      	cmp	r0, #0
 8004134:	d174      	bne.n	8004220 <_dtoa_r+0x648>
 8004136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800413a:	2000      	movs	r0, #0
 800413c:	4911      	ldr	r1, [pc, #68]	; (8004184 <_dtoa_r+0x5ac>)
 800413e:	f7fc f8c7 	bl	80002d0 <__aeabi_dsub>
 8004142:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004146:	f7fc fced 	bl	8000b24 <__aeabi_dcmplt>
 800414a:	2800      	cmp	r0, #0
 800414c:	f040 80b7 	bne.w	80042be <_dtoa_r+0x6e6>
 8004150:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004152:	429f      	cmp	r7, r3
 8004154:	f43f af7a 	beq.w	800404c <_dtoa_r+0x474>
 8004158:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800415c:	2200      	movs	r2, #0
 800415e:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <_dtoa_r+0x5b0>)
 8004160:	f7fc fa6e 	bl	8000640 <__aeabi_dmul>
 8004164:	2200      	movs	r2, #0
 8004166:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800416a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <_dtoa_r+0x5b0>)
 8004170:	f7fc fa66 	bl	8000640 <__aeabi_dmul>
 8004174:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004178:	e7c3      	b.n	8004102 <_dtoa_r+0x52a>
 800417a:	bf00      	nop
 800417c:	08006f20 	.word	0x08006f20
 8004180:	08006ef8 	.word	0x08006ef8
 8004184:	3ff00000 	.word	0x3ff00000
 8004188:	40240000 	.word	0x40240000
 800418c:	401c0000 	.word	0x401c0000
 8004190:	40140000 	.word	0x40140000
 8004194:	3fe00000 	.word	0x3fe00000
 8004198:	4630      	mov	r0, r6
 800419a:	4639      	mov	r1, r7
 800419c:	f7fc fa50 	bl	8000640 <__aeabi_dmul>
 80041a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041a6:	9c03      	ldr	r4, [sp, #12]
 80041a8:	9314      	str	r3, [sp, #80]	; 0x50
 80041aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041ae:	f7fc fcf7 	bl	8000ba0 <__aeabi_d2iz>
 80041b2:	9015      	str	r0, [sp, #84]	; 0x54
 80041b4:	f7fc f9da 	bl	800056c <__aeabi_i2d>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041c0:	f7fc f886 	bl	80002d0 <__aeabi_dsub>
 80041c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041c6:	4606      	mov	r6, r0
 80041c8:	3330      	adds	r3, #48	; 0x30
 80041ca:	f804 3b01 	strb.w	r3, [r4], #1
 80041ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041d0:	460f      	mov	r7, r1
 80041d2:	429c      	cmp	r4, r3
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	d124      	bne.n	8004224 <_dtoa_r+0x64c>
 80041da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041de:	4bb0      	ldr	r3, [pc, #704]	; (80044a0 <_dtoa_r+0x8c8>)
 80041e0:	f7fc f878 	bl	80002d4 <__adddf3>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4630      	mov	r0, r6
 80041ea:	4639      	mov	r1, r7
 80041ec:	f7fc fcb8 	bl	8000b60 <__aeabi_dcmpgt>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d163      	bne.n	80042bc <_dtoa_r+0x6e4>
 80041f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041f8:	2000      	movs	r0, #0
 80041fa:	49a9      	ldr	r1, [pc, #676]	; (80044a0 <_dtoa_r+0x8c8>)
 80041fc:	f7fc f868 	bl	80002d0 <__aeabi_dsub>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4630      	mov	r0, r6
 8004206:	4639      	mov	r1, r7
 8004208:	f7fc fc8c 	bl	8000b24 <__aeabi_dcmplt>
 800420c:	2800      	cmp	r0, #0
 800420e:	f43f af1d 	beq.w	800404c <_dtoa_r+0x474>
 8004212:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004214:	1e7b      	subs	r3, r7, #1
 8004216:	9314      	str	r3, [sp, #80]	; 0x50
 8004218:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800421c:	2b30      	cmp	r3, #48	; 0x30
 800421e:	d0f8      	beq.n	8004212 <_dtoa_r+0x63a>
 8004220:	46c2      	mov	sl, r8
 8004222:	e03b      	b.n	800429c <_dtoa_r+0x6c4>
 8004224:	4b9f      	ldr	r3, [pc, #636]	; (80044a4 <_dtoa_r+0x8cc>)
 8004226:	f7fc fa0b 	bl	8000640 <__aeabi_dmul>
 800422a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800422e:	e7bc      	b.n	80041aa <_dtoa_r+0x5d2>
 8004230:	9f03      	ldr	r7, [sp, #12]
 8004232:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800423a:	4640      	mov	r0, r8
 800423c:	4649      	mov	r1, r9
 800423e:	f7fc fb29 	bl	8000894 <__aeabi_ddiv>
 8004242:	f7fc fcad 	bl	8000ba0 <__aeabi_d2iz>
 8004246:	4604      	mov	r4, r0
 8004248:	f7fc f990 	bl	800056c <__aeabi_i2d>
 800424c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004250:	f7fc f9f6 	bl	8000640 <__aeabi_dmul>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4640      	mov	r0, r8
 800425a:	4649      	mov	r1, r9
 800425c:	f7fc f838 	bl	80002d0 <__aeabi_dsub>
 8004260:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004264:	f807 6b01 	strb.w	r6, [r7], #1
 8004268:	9e03      	ldr	r6, [sp, #12]
 800426a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800426e:	1bbe      	subs	r6, r7, r6
 8004270:	45b4      	cmp	ip, r6
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	d136      	bne.n	80042e6 <_dtoa_r+0x70e>
 8004278:	f7fc f82c 	bl	80002d4 <__adddf3>
 800427c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004280:	4680      	mov	r8, r0
 8004282:	4689      	mov	r9, r1
 8004284:	f7fc fc6c 	bl	8000b60 <__aeabi_dcmpgt>
 8004288:	bb58      	cbnz	r0, 80042e2 <_dtoa_r+0x70a>
 800428a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800428e:	4640      	mov	r0, r8
 8004290:	4649      	mov	r1, r9
 8004292:	f7fc fc3d 	bl	8000b10 <__aeabi_dcmpeq>
 8004296:	b108      	cbz	r0, 800429c <_dtoa_r+0x6c4>
 8004298:	07e1      	lsls	r1, r4, #31
 800429a:	d422      	bmi.n	80042e2 <_dtoa_r+0x70a>
 800429c:	4628      	mov	r0, r5
 800429e:	4659      	mov	r1, fp
 80042a0:	f000 faf0 	bl	8004884 <_Bfree>
 80042a4:	2300      	movs	r3, #0
 80042a6:	703b      	strb	r3, [r7, #0]
 80042a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80042aa:	f10a 0001 	add.w	r0, sl, #1
 80042ae:	6018      	str	r0, [r3, #0]
 80042b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f43f acde 	beq.w	8003c74 <_dtoa_r+0x9c>
 80042b8:	601f      	str	r7, [r3, #0]
 80042ba:	e4db      	b.n	8003c74 <_dtoa_r+0x9c>
 80042bc:	4627      	mov	r7, r4
 80042be:	463b      	mov	r3, r7
 80042c0:	461f      	mov	r7, r3
 80042c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80042c6:	2a39      	cmp	r2, #57	; 0x39
 80042c8:	d107      	bne.n	80042da <_dtoa_r+0x702>
 80042ca:	9a03      	ldr	r2, [sp, #12]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d1f7      	bne.n	80042c0 <_dtoa_r+0x6e8>
 80042d0:	2230      	movs	r2, #48	; 0x30
 80042d2:	9903      	ldr	r1, [sp, #12]
 80042d4:	f108 0801 	add.w	r8, r8, #1
 80042d8:	700a      	strb	r2, [r1, #0]
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	3201      	adds	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
 80042e0:	e79e      	b.n	8004220 <_dtoa_r+0x648>
 80042e2:	46d0      	mov	r8, sl
 80042e4:	e7eb      	b.n	80042be <_dtoa_r+0x6e6>
 80042e6:	2200      	movs	r2, #0
 80042e8:	4b6e      	ldr	r3, [pc, #440]	; (80044a4 <_dtoa_r+0x8cc>)
 80042ea:	f7fc f9a9 	bl	8000640 <__aeabi_dmul>
 80042ee:	2200      	movs	r2, #0
 80042f0:	2300      	movs	r3, #0
 80042f2:	4680      	mov	r8, r0
 80042f4:	4689      	mov	r9, r1
 80042f6:	f7fc fc0b 	bl	8000b10 <__aeabi_dcmpeq>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d09b      	beq.n	8004236 <_dtoa_r+0x65e>
 80042fe:	e7cd      	b.n	800429c <_dtoa_r+0x6c4>
 8004300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004302:	2a00      	cmp	r2, #0
 8004304:	f000 80d0 	beq.w	80044a8 <_dtoa_r+0x8d0>
 8004308:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800430a:	2a01      	cmp	r2, #1
 800430c:	f300 80ae 	bgt.w	800446c <_dtoa_r+0x894>
 8004310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004312:	2a00      	cmp	r2, #0
 8004314:	f000 80a6 	beq.w	8004464 <_dtoa_r+0x88c>
 8004318:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800431c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800431e:	9f06      	ldr	r7, [sp, #24]
 8004320:	9a06      	ldr	r2, [sp, #24]
 8004322:	2101      	movs	r1, #1
 8004324:	441a      	add	r2, r3
 8004326:	9206      	str	r2, [sp, #24]
 8004328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800432a:	4628      	mov	r0, r5
 800432c:	441a      	add	r2, r3
 800432e:	9209      	str	r2, [sp, #36]	; 0x24
 8004330:	f000 fb5e 	bl	80049f0 <__i2b>
 8004334:	4606      	mov	r6, r0
 8004336:	2f00      	cmp	r7, #0
 8004338:	dd0c      	ble.n	8004354 <_dtoa_r+0x77c>
 800433a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433c:	2b00      	cmp	r3, #0
 800433e:	dd09      	ble.n	8004354 <_dtoa_r+0x77c>
 8004340:	42bb      	cmp	r3, r7
 8004342:	bfa8      	it	ge
 8004344:	463b      	movge	r3, r7
 8004346:	9a06      	ldr	r2, [sp, #24]
 8004348:	1aff      	subs	r7, r7, r3
 800434a:	1ad2      	subs	r2, r2, r3
 800434c:	9206      	str	r2, [sp, #24]
 800434e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	9309      	str	r3, [sp, #36]	; 0x24
 8004354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004356:	b1f3      	cbz	r3, 8004396 <_dtoa_r+0x7be>
 8004358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80a8 	beq.w	80044b0 <_dtoa_r+0x8d8>
 8004360:	2c00      	cmp	r4, #0
 8004362:	dd10      	ble.n	8004386 <_dtoa_r+0x7ae>
 8004364:	4631      	mov	r1, r6
 8004366:	4622      	mov	r2, r4
 8004368:	4628      	mov	r0, r5
 800436a:	f000 fbff 	bl	8004b6c <__pow5mult>
 800436e:	465a      	mov	r2, fp
 8004370:	4601      	mov	r1, r0
 8004372:	4606      	mov	r6, r0
 8004374:	4628      	mov	r0, r5
 8004376:	f000 fb51 	bl	8004a1c <__multiply>
 800437a:	4680      	mov	r8, r0
 800437c:	4659      	mov	r1, fp
 800437e:	4628      	mov	r0, r5
 8004380:	f000 fa80 	bl	8004884 <_Bfree>
 8004384:	46c3      	mov	fp, r8
 8004386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004388:	1b1a      	subs	r2, r3, r4
 800438a:	d004      	beq.n	8004396 <_dtoa_r+0x7be>
 800438c:	4659      	mov	r1, fp
 800438e:	4628      	mov	r0, r5
 8004390:	f000 fbec 	bl	8004b6c <__pow5mult>
 8004394:	4683      	mov	fp, r0
 8004396:	2101      	movs	r1, #1
 8004398:	4628      	mov	r0, r5
 800439a:	f000 fb29 	bl	80049f0 <__i2b>
 800439e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043a0:	4604      	mov	r4, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f340 8086 	ble.w	80044b4 <_dtoa_r+0x8dc>
 80043a8:	461a      	mov	r2, r3
 80043aa:	4601      	mov	r1, r0
 80043ac:	4628      	mov	r0, r5
 80043ae:	f000 fbdd 	bl	8004b6c <__pow5mult>
 80043b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043b4:	4604      	mov	r4, r0
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	dd7f      	ble.n	80044ba <_dtoa_r+0x8e2>
 80043ba:	f04f 0800 	mov.w	r8, #0
 80043be:	6923      	ldr	r3, [r4, #16]
 80043c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80043c4:	6918      	ldr	r0, [r3, #16]
 80043c6:	f000 fac5 	bl	8004954 <__hi0bits>
 80043ca:	f1c0 0020 	rsb	r0, r0, #32
 80043ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d0:	4418      	add	r0, r3
 80043d2:	f010 001f 	ands.w	r0, r0, #31
 80043d6:	f000 8092 	beq.w	80044fe <_dtoa_r+0x926>
 80043da:	f1c0 0320 	rsb	r3, r0, #32
 80043de:	2b04      	cmp	r3, #4
 80043e0:	f340 808a 	ble.w	80044f8 <_dtoa_r+0x920>
 80043e4:	f1c0 001c 	rsb	r0, r0, #28
 80043e8:	9b06      	ldr	r3, [sp, #24]
 80043ea:	4407      	add	r7, r0
 80043ec:	4403      	add	r3, r0
 80043ee:	9306      	str	r3, [sp, #24]
 80043f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f2:	4403      	add	r3, r0
 80043f4:	9309      	str	r3, [sp, #36]	; 0x24
 80043f6:	9b06      	ldr	r3, [sp, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	dd05      	ble.n	8004408 <_dtoa_r+0x830>
 80043fc:	4659      	mov	r1, fp
 80043fe:	461a      	mov	r2, r3
 8004400:	4628      	mov	r0, r5
 8004402:	f000 fc0d 	bl	8004c20 <__lshift>
 8004406:	4683      	mov	fp, r0
 8004408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800440a:	2b00      	cmp	r3, #0
 800440c:	dd05      	ble.n	800441a <_dtoa_r+0x842>
 800440e:	4621      	mov	r1, r4
 8004410:	461a      	mov	r2, r3
 8004412:	4628      	mov	r0, r5
 8004414:	f000 fc04 	bl	8004c20 <__lshift>
 8004418:	4604      	mov	r4, r0
 800441a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d070      	beq.n	8004502 <_dtoa_r+0x92a>
 8004420:	4621      	mov	r1, r4
 8004422:	4658      	mov	r0, fp
 8004424:	f000 fc6c 	bl	8004d00 <__mcmp>
 8004428:	2800      	cmp	r0, #0
 800442a:	da6a      	bge.n	8004502 <_dtoa_r+0x92a>
 800442c:	2300      	movs	r3, #0
 800442e:	4659      	mov	r1, fp
 8004430:	220a      	movs	r2, #10
 8004432:	4628      	mov	r0, r5
 8004434:	f000 fa48 	bl	80048c8 <__multadd>
 8004438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800443a:	4683      	mov	fp, r0
 800443c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8194 	beq.w	800476e <_dtoa_r+0xb96>
 8004446:	4631      	mov	r1, r6
 8004448:	2300      	movs	r3, #0
 800444a:	220a      	movs	r2, #10
 800444c:	4628      	mov	r0, r5
 800444e:	f000 fa3b 	bl	80048c8 <__multadd>
 8004452:	f1b9 0f00 	cmp.w	r9, #0
 8004456:	4606      	mov	r6, r0
 8004458:	f300 8093 	bgt.w	8004582 <_dtoa_r+0x9aa>
 800445c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800445e:	2b02      	cmp	r3, #2
 8004460:	dc57      	bgt.n	8004512 <_dtoa_r+0x93a>
 8004462:	e08e      	b.n	8004582 <_dtoa_r+0x9aa>
 8004464:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800446a:	e757      	b.n	800431c <_dtoa_r+0x744>
 800446c:	9b08      	ldr	r3, [sp, #32]
 800446e:	1e5c      	subs	r4, r3, #1
 8004470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004472:	42a3      	cmp	r3, r4
 8004474:	bfb7      	itett	lt
 8004476:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004478:	1b1c      	subge	r4, r3, r4
 800447a:	1ae2      	sublt	r2, r4, r3
 800447c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800447e:	bfbe      	ittt	lt
 8004480:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004482:	189b      	addlt	r3, r3, r2
 8004484:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004486:	9b08      	ldr	r3, [sp, #32]
 8004488:	bfb8      	it	lt
 800448a:	2400      	movlt	r4, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	bfbb      	ittet	lt
 8004490:	9b06      	ldrlt	r3, [sp, #24]
 8004492:	9a08      	ldrlt	r2, [sp, #32]
 8004494:	9f06      	ldrge	r7, [sp, #24]
 8004496:	1a9f      	sublt	r7, r3, r2
 8004498:	bfac      	ite	ge
 800449a:	9b08      	ldrge	r3, [sp, #32]
 800449c:	2300      	movlt	r3, #0
 800449e:	e73f      	b.n	8004320 <_dtoa_r+0x748>
 80044a0:	3fe00000 	.word	0x3fe00000
 80044a4:	40240000 	.word	0x40240000
 80044a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80044aa:	9f06      	ldr	r7, [sp, #24]
 80044ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80044ae:	e742      	b.n	8004336 <_dtoa_r+0x75e>
 80044b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044b2:	e76b      	b.n	800438c <_dtoa_r+0x7b4>
 80044b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	dc19      	bgt.n	80044ee <_dtoa_r+0x916>
 80044ba:	9b04      	ldr	r3, [sp, #16]
 80044bc:	b9bb      	cbnz	r3, 80044ee <_dtoa_r+0x916>
 80044be:	9b05      	ldr	r3, [sp, #20]
 80044c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044c4:	b99b      	cbnz	r3, 80044ee <_dtoa_r+0x916>
 80044c6:	9b05      	ldr	r3, [sp, #20]
 80044c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044cc:	0d1b      	lsrs	r3, r3, #20
 80044ce:	051b      	lsls	r3, r3, #20
 80044d0:	b183      	cbz	r3, 80044f4 <_dtoa_r+0x91c>
 80044d2:	f04f 0801 	mov.w	r8, #1
 80044d6:	9b06      	ldr	r3, [sp, #24]
 80044d8:	3301      	adds	r3, #1
 80044da:	9306      	str	r3, [sp, #24]
 80044dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044de:	3301      	adds	r3, #1
 80044e0:	9309      	str	r3, [sp, #36]	; 0x24
 80044e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f47f af6a 	bne.w	80043be <_dtoa_r+0x7e6>
 80044ea:	2001      	movs	r0, #1
 80044ec:	e76f      	b.n	80043ce <_dtoa_r+0x7f6>
 80044ee:	f04f 0800 	mov.w	r8, #0
 80044f2:	e7f6      	b.n	80044e2 <_dtoa_r+0x90a>
 80044f4:	4698      	mov	r8, r3
 80044f6:	e7f4      	b.n	80044e2 <_dtoa_r+0x90a>
 80044f8:	f43f af7d 	beq.w	80043f6 <_dtoa_r+0x81e>
 80044fc:	4618      	mov	r0, r3
 80044fe:	301c      	adds	r0, #28
 8004500:	e772      	b.n	80043e8 <_dtoa_r+0x810>
 8004502:	9b08      	ldr	r3, [sp, #32]
 8004504:	2b00      	cmp	r3, #0
 8004506:	dc36      	bgt.n	8004576 <_dtoa_r+0x99e>
 8004508:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800450a:	2b02      	cmp	r3, #2
 800450c:	dd33      	ble.n	8004576 <_dtoa_r+0x99e>
 800450e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004512:	f1b9 0f00 	cmp.w	r9, #0
 8004516:	d10d      	bne.n	8004534 <_dtoa_r+0x95c>
 8004518:	4621      	mov	r1, r4
 800451a:	464b      	mov	r3, r9
 800451c:	2205      	movs	r2, #5
 800451e:	4628      	mov	r0, r5
 8004520:	f000 f9d2 	bl	80048c8 <__multadd>
 8004524:	4601      	mov	r1, r0
 8004526:	4604      	mov	r4, r0
 8004528:	4658      	mov	r0, fp
 800452a:	f000 fbe9 	bl	8004d00 <__mcmp>
 800452e:	2800      	cmp	r0, #0
 8004530:	f73f adb8 	bgt.w	80040a4 <_dtoa_r+0x4cc>
 8004534:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004536:	9f03      	ldr	r7, [sp, #12]
 8004538:	ea6f 0a03 	mvn.w	sl, r3
 800453c:	f04f 0800 	mov.w	r8, #0
 8004540:	4621      	mov	r1, r4
 8004542:	4628      	mov	r0, r5
 8004544:	f000 f99e 	bl	8004884 <_Bfree>
 8004548:	2e00      	cmp	r6, #0
 800454a:	f43f aea7 	beq.w	800429c <_dtoa_r+0x6c4>
 800454e:	f1b8 0f00 	cmp.w	r8, #0
 8004552:	d005      	beq.n	8004560 <_dtoa_r+0x988>
 8004554:	45b0      	cmp	r8, r6
 8004556:	d003      	beq.n	8004560 <_dtoa_r+0x988>
 8004558:	4641      	mov	r1, r8
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f992 	bl	8004884 <_Bfree>
 8004560:	4631      	mov	r1, r6
 8004562:	4628      	mov	r0, r5
 8004564:	f000 f98e 	bl	8004884 <_Bfree>
 8004568:	e698      	b.n	800429c <_dtoa_r+0x6c4>
 800456a:	2400      	movs	r4, #0
 800456c:	4626      	mov	r6, r4
 800456e:	e7e1      	b.n	8004534 <_dtoa_r+0x95c>
 8004570:	46c2      	mov	sl, r8
 8004572:	4626      	mov	r6, r4
 8004574:	e596      	b.n	80040a4 <_dtoa_r+0x4cc>
 8004576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80fd 	beq.w	800477c <_dtoa_r+0xba4>
 8004582:	2f00      	cmp	r7, #0
 8004584:	dd05      	ble.n	8004592 <_dtoa_r+0x9ba>
 8004586:	4631      	mov	r1, r6
 8004588:	463a      	mov	r2, r7
 800458a:	4628      	mov	r0, r5
 800458c:	f000 fb48 	bl	8004c20 <__lshift>
 8004590:	4606      	mov	r6, r0
 8004592:	f1b8 0f00 	cmp.w	r8, #0
 8004596:	d05c      	beq.n	8004652 <_dtoa_r+0xa7a>
 8004598:	4628      	mov	r0, r5
 800459a:	6871      	ldr	r1, [r6, #4]
 800459c:	f000 f932 	bl	8004804 <_Balloc>
 80045a0:	4607      	mov	r7, r0
 80045a2:	b928      	cbnz	r0, 80045b0 <_dtoa_r+0x9d8>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80045aa:	4b7f      	ldr	r3, [pc, #508]	; (80047a8 <_dtoa_r+0xbd0>)
 80045ac:	f7ff bb28 	b.w	8003c00 <_dtoa_r+0x28>
 80045b0:	6932      	ldr	r2, [r6, #16]
 80045b2:	f106 010c 	add.w	r1, r6, #12
 80045b6:	3202      	adds	r2, #2
 80045b8:	0092      	lsls	r2, r2, #2
 80045ba:	300c      	adds	r0, #12
 80045bc:	f000 f914 	bl	80047e8 <memcpy>
 80045c0:	2201      	movs	r2, #1
 80045c2:	4639      	mov	r1, r7
 80045c4:	4628      	mov	r0, r5
 80045c6:	f000 fb2b 	bl	8004c20 <__lshift>
 80045ca:	46b0      	mov	r8, r6
 80045cc:	4606      	mov	r6, r0
 80045ce:	9b03      	ldr	r3, [sp, #12]
 80045d0:	3301      	adds	r3, #1
 80045d2:	9308      	str	r3, [sp, #32]
 80045d4:	9b03      	ldr	r3, [sp, #12]
 80045d6:	444b      	add	r3, r9
 80045d8:	930a      	str	r3, [sp, #40]	; 0x28
 80045da:	9b04      	ldr	r3, [sp, #16]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	9309      	str	r3, [sp, #36]	; 0x24
 80045e2:	9b08      	ldr	r3, [sp, #32]
 80045e4:	4621      	mov	r1, r4
 80045e6:	3b01      	subs	r3, #1
 80045e8:	4658      	mov	r0, fp
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	f7ff fa68 	bl	8003ac0 <quorem>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4641      	mov	r1, r8
 80045f4:	3330      	adds	r3, #48	; 0x30
 80045f6:	9006      	str	r0, [sp, #24]
 80045f8:	4658      	mov	r0, fp
 80045fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80045fc:	f000 fb80 	bl	8004d00 <__mcmp>
 8004600:	4632      	mov	r2, r6
 8004602:	4681      	mov	r9, r0
 8004604:	4621      	mov	r1, r4
 8004606:	4628      	mov	r0, r5
 8004608:	f000 fb96 	bl	8004d38 <__mdiff>
 800460c:	68c2      	ldr	r2, [r0, #12]
 800460e:	4607      	mov	r7, r0
 8004610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004612:	bb02      	cbnz	r2, 8004656 <_dtoa_r+0xa7e>
 8004614:	4601      	mov	r1, r0
 8004616:	4658      	mov	r0, fp
 8004618:	f000 fb72 	bl	8004d00 <__mcmp>
 800461c:	4602      	mov	r2, r0
 800461e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004620:	4639      	mov	r1, r7
 8004622:	4628      	mov	r0, r5
 8004624:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004628:	f000 f92c 	bl	8004884 <_Bfree>
 800462c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800462e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004630:	9f08      	ldr	r7, [sp, #32]
 8004632:	ea43 0102 	orr.w	r1, r3, r2
 8004636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004638:	430b      	orrs	r3, r1
 800463a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800463c:	d10d      	bne.n	800465a <_dtoa_r+0xa82>
 800463e:	2b39      	cmp	r3, #57	; 0x39
 8004640:	d029      	beq.n	8004696 <_dtoa_r+0xabe>
 8004642:	f1b9 0f00 	cmp.w	r9, #0
 8004646:	dd01      	ble.n	800464c <_dtoa_r+0xa74>
 8004648:	9b06      	ldr	r3, [sp, #24]
 800464a:	3331      	adds	r3, #49	; 0x31
 800464c:	9a04      	ldr	r2, [sp, #16]
 800464e:	7013      	strb	r3, [r2, #0]
 8004650:	e776      	b.n	8004540 <_dtoa_r+0x968>
 8004652:	4630      	mov	r0, r6
 8004654:	e7b9      	b.n	80045ca <_dtoa_r+0x9f2>
 8004656:	2201      	movs	r2, #1
 8004658:	e7e2      	b.n	8004620 <_dtoa_r+0xa48>
 800465a:	f1b9 0f00 	cmp.w	r9, #0
 800465e:	db06      	blt.n	800466e <_dtoa_r+0xa96>
 8004660:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004662:	ea41 0909 	orr.w	r9, r1, r9
 8004666:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004668:	ea59 0101 	orrs.w	r1, r9, r1
 800466c:	d120      	bne.n	80046b0 <_dtoa_r+0xad8>
 800466e:	2a00      	cmp	r2, #0
 8004670:	ddec      	ble.n	800464c <_dtoa_r+0xa74>
 8004672:	4659      	mov	r1, fp
 8004674:	2201      	movs	r2, #1
 8004676:	4628      	mov	r0, r5
 8004678:	9308      	str	r3, [sp, #32]
 800467a:	f000 fad1 	bl	8004c20 <__lshift>
 800467e:	4621      	mov	r1, r4
 8004680:	4683      	mov	fp, r0
 8004682:	f000 fb3d 	bl	8004d00 <__mcmp>
 8004686:	2800      	cmp	r0, #0
 8004688:	9b08      	ldr	r3, [sp, #32]
 800468a:	dc02      	bgt.n	8004692 <_dtoa_r+0xaba>
 800468c:	d1de      	bne.n	800464c <_dtoa_r+0xa74>
 800468e:	07da      	lsls	r2, r3, #31
 8004690:	d5dc      	bpl.n	800464c <_dtoa_r+0xa74>
 8004692:	2b39      	cmp	r3, #57	; 0x39
 8004694:	d1d8      	bne.n	8004648 <_dtoa_r+0xa70>
 8004696:	2339      	movs	r3, #57	; 0x39
 8004698:	9a04      	ldr	r2, [sp, #16]
 800469a:	7013      	strb	r3, [r2, #0]
 800469c:	463b      	mov	r3, r7
 800469e:	461f      	mov	r7, r3
 80046a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	2a39      	cmp	r2, #57	; 0x39
 80046a8:	d050      	beq.n	800474c <_dtoa_r+0xb74>
 80046aa:	3201      	adds	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e747      	b.n	8004540 <_dtoa_r+0x968>
 80046b0:	2a00      	cmp	r2, #0
 80046b2:	dd03      	ble.n	80046bc <_dtoa_r+0xae4>
 80046b4:	2b39      	cmp	r3, #57	; 0x39
 80046b6:	d0ee      	beq.n	8004696 <_dtoa_r+0xabe>
 80046b8:	3301      	adds	r3, #1
 80046ba:	e7c7      	b.n	800464c <_dtoa_r+0xa74>
 80046bc:	9a08      	ldr	r2, [sp, #32]
 80046be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80046c4:	428a      	cmp	r2, r1
 80046c6:	d02a      	beq.n	800471e <_dtoa_r+0xb46>
 80046c8:	4659      	mov	r1, fp
 80046ca:	2300      	movs	r3, #0
 80046cc:	220a      	movs	r2, #10
 80046ce:	4628      	mov	r0, r5
 80046d0:	f000 f8fa 	bl	80048c8 <__multadd>
 80046d4:	45b0      	cmp	r8, r6
 80046d6:	4683      	mov	fp, r0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	f04f 020a 	mov.w	r2, #10
 80046e0:	4641      	mov	r1, r8
 80046e2:	4628      	mov	r0, r5
 80046e4:	d107      	bne.n	80046f6 <_dtoa_r+0xb1e>
 80046e6:	f000 f8ef 	bl	80048c8 <__multadd>
 80046ea:	4680      	mov	r8, r0
 80046ec:	4606      	mov	r6, r0
 80046ee:	9b08      	ldr	r3, [sp, #32]
 80046f0:	3301      	adds	r3, #1
 80046f2:	9308      	str	r3, [sp, #32]
 80046f4:	e775      	b.n	80045e2 <_dtoa_r+0xa0a>
 80046f6:	f000 f8e7 	bl	80048c8 <__multadd>
 80046fa:	4631      	mov	r1, r6
 80046fc:	4680      	mov	r8, r0
 80046fe:	2300      	movs	r3, #0
 8004700:	220a      	movs	r2, #10
 8004702:	4628      	mov	r0, r5
 8004704:	f000 f8e0 	bl	80048c8 <__multadd>
 8004708:	4606      	mov	r6, r0
 800470a:	e7f0      	b.n	80046ee <_dtoa_r+0xb16>
 800470c:	f1b9 0f00 	cmp.w	r9, #0
 8004710:	bfcc      	ite	gt
 8004712:	464f      	movgt	r7, r9
 8004714:	2701      	movle	r7, #1
 8004716:	f04f 0800 	mov.w	r8, #0
 800471a:	9a03      	ldr	r2, [sp, #12]
 800471c:	4417      	add	r7, r2
 800471e:	4659      	mov	r1, fp
 8004720:	2201      	movs	r2, #1
 8004722:	4628      	mov	r0, r5
 8004724:	9308      	str	r3, [sp, #32]
 8004726:	f000 fa7b 	bl	8004c20 <__lshift>
 800472a:	4621      	mov	r1, r4
 800472c:	4683      	mov	fp, r0
 800472e:	f000 fae7 	bl	8004d00 <__mcmp>
 8004732:	2800      	cmp	r0, #0
 8004734:	dcb2      	bgt.n	800469c <_dtoa_r+0xac4>
 8004736:	d102      	bne.n	800473e <_dtoa_r+0xb66>
 8004738:	9b08      	ldr	r3, [sp, #32]
 800473a:	07db      	lsls	r3, r3, #31
 800473c:	d4ae      	bmi.n	800469c <_dtoa_r+0xac4>
 800473e:	463b      	mov	r3, r7
 8004740:	461f      	mov	r7, r3
 8004742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004746:	2a30      	cmp	r2, #48	; 0x30
 8004748:	d0fa      	beq.n	8004740 <_dtoa_r+0xb68>
 800474a:	e6f9      	b.n	8004540 <_dtoa_r+0x968>
 800474c:	9a03      	ldr	r2, [sp, #12]
 800474e:	429a      	cmp	r2, r3
 8004750:	d1a5      	bne.n	800469e <_dtoa_r+0xac6>
 8004752:	2331      	movs	r3, #49	; 0x31
 8004754:	f10a 0a01 	add.w	sl, sl, #1
 8004758:	e779      	b.n	800464e <_dtoa_r+0xa76>
 800475a:	4b14      	ldr	r3, [pc, #80]	; (80047ac <_dtoa_r+0xbd4>)
 800475c:	f7ff baa8 	b.w	8003cb0 <_dtoa_r+0xd8>
 8004760:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004762:	2b00      	cmp	r3, #0
 8004764:	f47f aa81 	bne.w	8003c6a <_dtoa_r+0x92>
 8004768:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <_dtoa_r+0xbd8>)
 800476a:	f7ff baa1 	b.w	8003cb0 <_dtoa_r+0xd8>
 800476e:	f1b9 0f00 	cmp.w	r9, #0
 8004772:	dc03      	bgt.n	800477c <_dtoa_r+0xba4>
 8004774:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004776:	2b02      	cmp	r3, #2
 8004778:	f73f aecb 	bgt.w	8004512 <_dtoa_r+0x93a>
 800477c:	9f03      	ldr	r7, [sp, #12]
 800477e:	4621      	mov	r1, r4
 8004780:	4658      	mov	r0, fp
 8004782:	f7ff f99d 	bl	8003ac0 <quorem>
 8004786:	9a03      	ldr	r2, [sp, #12]
 8004788:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800478c:	f807 3b01 	strb.w	r3, [r7], #1
 8004790:	1aba      	subs	r2, r7, r2
 8004792:	4591      	cmp	r9, r2
 8004794:	ddba      	ble.n	800470c <_dtoa_r+0xb34>
 8004796:	4659      	mov	r1, fp
 8004798:	2300      	movs	r3, #0
 800479a:	220a      	movs	r2, #10
 800479c:	4628      	mov	r0, r5
 800479e:	f000 f893 	bl	80048c8 <__multadd>
 80047a2:	4683      	mov	fp, r0
 80047a4:	e7eb      	b.n	800477e <_dtoa_r+0xba6>
 80047a6:	bf00      	nop
 80047a8:	08006e87 	.word	0x08006e87
 80047ac:	08006de4 	.word	0x08006de4
 80047b0:	08006e08 	.word	0x08006e08

080047b4 <_localeconv_r>:
 80047b4:	4800      	ldr	r0, [pc, #0]	; (80047b8 <_localeconv_r+0x4>)
 80047b6:	4770      	bx	lr
 80047b8:	20000160 	.word	0x20000160

080047bc <malloc>:
 80047bc:	4b02      	ldr	r3, [pc, #8]	; (80047c8 <malloc+0xc>)
 80047be:	4601      	mov	r1, r0
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	f000 bc1d 	b.w	8005000 <_malloc_r>
 80047c6:	bf00      	nop
 80047c8:	2000000c 	.word	0x2000000c

080047cc <memchr>:
 80047cc:	4603      	mov	r3, r0
 80047ce:	b510      	push	{r4, lr}
 80047d0:	b2c9      	uxtb	r1, r1
 80047d2:	4402      	add	r2, r0
 80047d4:	4293      	cmp	r3, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	d101      	bne.n	80047de <memchr+0x12>
 80047da:	2000      	movs	r0, #0
 80047dc:	e003      	b.n	80047e6 <memchr+0x1a>
 80047de:	7804      	ldrb	r4, [r0, #0]
 80047e0:	3301      	adds	r3, #1
 80047e2:	428c      	cmp	r4, r1
 80047e4:	d1f6      	bne.n	80047d4 <memchr+0x8>
 80047e6:	bd10      	pop	{r4, pc}

080047e8 <memcpy>:
 80047e8:	440a      	add	r2, r1
 80047ea:	4291      	cmp	r1, r2
 80047ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80047f0:	d100      	bne.n	80047f4 <memcpy+0xc>
 80047f2:	4770      	bx	lr
 80047f4:	b510      	push	{r4, lr}
 80047f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047fa:	4291      	cmp	r1, r2
 80047fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004800:	d1f9      	bne.n	80047f6 <memcpy+0xe>
 8004802:	bd10      	pop	{r4, pc}

08004804 <_Balloc>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004808:	4604      	mov	r4, r0
 800480a:	460d      	mov	r5, r1
 800480c:	b976      	cbnz	r6, 800482c <_Balloc+0x28>
 800480e:	2010      	movs	r0, #16
 8004810:	f7ff ffd4 	bl	80047bc <malloc>
 8004814:	4602      	mov	r2, r0
 8004816:	6260      	str	r0, [r4, #36]	; 0x24
 8004818:	b920      	cbnz	r0, 8004824 <_Balloc+0x20>
 800481a:	2166      	movs	r1, #102	; 0x66
 800481c:	4b17      	ldr	r3, [pc, #92]	; (800487c <_Balloc+0x78>)
 800481e:	4818      	ldr	r0, [pc, #96]	; (8004880 <_Balloc+0x7c>)
 8004820:	f000 fdce 	bl	80053c0 <__assert_func>
 8004824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004828:	6006      	str	r6, [r0, #0]
 800482a:	60c6      	str	r6, [r0, #12]
 800482c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800482e:	68f3      	ldr	r3, [r6, #12]
 8004830:	b183      	cbz	r3, 8004854 <_Balloc+0x50>
 8004832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800483a:	b9b8      	cbnz	r0, 800486c <_Balloc+0x68>
 800483c:	2101      	movs	r1, #1
 800483e:	fa01 f605 	lsl.w	r6, r1, r5
 8004842:	1d72      	adds	r2, r6, #5
 8004844:	4620      	mov	r0, r4
 8004846:	0092      	lsls	r2, r2, #2
 8004848:	f000 fb5e 	bl	8004f08 <_calloc_r>
 800484c:	b160      	cbz	r0, 8004868 <_Balloc+0x64>
 800484e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004852:	e00e      	b.n	8004872 <_Balloc+0x6e>
 8004854:	2221      	movs	r2, #33	; 0x21
 8004856:	2104      	movs	r1, #4
 8004858:	4620      	mov	r0, r4
 800485a:	f000 fb55 	bl	8004f08 <_calloc_r>
 800485e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004860:	60f0      	str	r0, [r6, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e4      	bne.n	8004832 <_Balloc+0x2e>
 8004868:	2000      	movs	r0, #0
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	6802      	ldr	r2, [r0, #0]
 800486e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004872:	2300      	movs	r3, #0
 8004874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004878:	e7f7      	b.n	800486a <_Balloc+0x66>
 800487a:	bf00      	nop
 800487c:	08006e15 	.word	0x08006e15
 8004880:	08006e98 	.word	0x08006e98

08004884 <_Bfree>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004888:	4605      	mov	r5, r0
 800488a:	460c      	mov	r4, r1
 800488c:	b976      	cbnz	r6, 80048ac <_Bfree+0x28>
 800488e:	2010      	movs	r0, #16
 8004890:	f7ff ff94 	bl	80047bc <malloc>
 8004894:	4602      	mov	r2, r0
 8004896:	6268      	str	r0, [r5, #36]	; 0x24
 8004898:	b920      	cbnz	r0, 80048a4 <_Bfree+0x20>
 800489a:	218a      	movs	r1, #138	; 0x8a
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <_Bfree+0x3c>)
 800489e:	4809      	ldr	r0, [pc, #36]	; (80048c4 <_Bfree+0x40>)
 80048a0:	f000 fd8e 	bl	80053c0 <__assert_func>
 80048a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048a8:	6006      	str	r6, [r0, #0]
 80048aa:	60c6      	str	r6, [r0, #12]
 80048ac:	b13c      	cbz	r4, 80048be <_Bfree+0x3a>
 80048ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048b0:	6862      	ldr	r2, [r4, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048b8:	6021      	str	r1, [r4, #0]
 80048ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	08006e15 	.word	0x08006e15
 80048c4:	08006e98 	.word	0x08006e98

080048c8 <__multadd>:
 80048c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	4607      	mov	r7, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	461e      	mov	r6, r3
 80048d2:	2000      	movs	r0, #0
 80048d4:	690d      	ldr	r5, [r1, #16]
 80048d6:	f101 0c14 	add.w	ip, r1, #20
 80048da:	f8dc 3000 	ldr.w	r3, [ip]
 80048de:	3001      	adds	r0, #1
 80048e0:	b299      	uxth	r1, r3
 80048e2:	fb02 6101 	mla	r1, r2, r1, r6
 80048e6:	0c1e      	lsrs	r6, r3, #16
 80048e8:	0c0b      	lsrs	r3, r1, #16
 80048ea:	fb02 3306 	mla	r3, r2, r6, r3
 80048ee:	b289      	uxth	r1, r1
 80048f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80048f4:	4285      	cmp	r5, r0
 80048f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80048fa:	f84c 1b04 	str.w	r1, [ip], #4
 80048fe:	dcec      	bgt.n	80048da <__multadd+0x12>
 8004900:	b30e      	cbz	r6, 8004946 <__multadd+0x7e>
 8004902:	68a3      	ldr	r3, [r4, #8]
 8004904:	42ab      	cmp	r3, r5
 8004906:	dc19      	bgt.n	800493c <__multadd+0x74>
 8004908:	6861      	ldr	r1, [r4, #4]
 800490a:	4638      	mov	r0, r7
 800490c:	3101      	adds	r1, #1
 800490e:	f7ff ff79 	bl	8004804 <_Balloc>
 8004912:	4680      	mov	r8, r0
 8004914:	b928      	cbnz	r0, 8004922 <__multadd+0x5a>
 8004916:	4602      	mov	r2, r0
 8004918:	21b5      	movs	r1, #181	; 0xb5
 800491a:	4b0c      	ldr	r3, [pc, #48]	; (800494c <__multadd+0x84>)
 800491c:	480c      	ldr	r0, [pc, #48]	; (8004950 <__multadd+0x88>)
 800491e:	f000 fd4f 	bl	80053c0 <__assert_func>
 8004922:	6922      	ldr	r2, [r4, #16]
 8004924:	f104 010c 	add.w	r1, r4, #12
 8004928:	3202      	adds	r2, #2
 800492a:	0092      	lsls	r2, r2, #2
 800492c:	300c      	adds	r0, #12
 800492e:	f7ff ff5b 	bl	80047e8 <memcpy>
 8004932:	4621      	mov	r1, r4
 8004934:	4638      	mov	r0, r7
 8004936:	f7ff ffa5 	bl	8004884 <_Bfree>
 800493a:	4644      	mov	r4, r8
 800493c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004940:	3501      	adds	r5, #1
 8004942:	615e      	str	r6, [r3, #20]
 8004944:	6125      	str	r5, [r4, #16]
 8004946:	4620      	mov	r0, r4
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800494c:	08006e87 	.word	0x08006e87
 8004950:	08006e98 	.word	0x08006e98

08004954 <__hi0bits>:
 8004954:	0c02      	lsrs	r2, r0, #16
 8004956:	0412      	lsls	r2, r2, #16
 8004958:	4603      	mov	r3, r0
 800495a:	b9ca      	cbnz	r2, 8004990 <__hi0bits+0x3c>
 800495c:	0403      	lsls	r3, r0, #16
 800495e:	2010      	movs	r0, #16
 8004960:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004964:	bf04      	itt	eq
 8004966:	021b      	lsleq	r3, r3, #8
 8004968:	3008      	addeq	r0, #8
 800496a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800496e:	bf04      	itt	eq
 8004970:	011b      	lsleq	r3, r3, #4
 8004972:	3004      	addeq	r0, #4
 8004974:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004978:	bf04      	itt	eq
 800497a:	009b      	lsleq	r3, r3, #2
 800497c:	3002      	addeq	r0, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	db05      	blt.n	800498e <__hi0bits+0x3a>
 8004982:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004986:	f100 0001 	add.w	r0, r0, #1
 800498a:	bf08      	it	eq
 800498c:	2020      	moveq	r0, #32
 800498e:	4770      	bx	lr
 8004990:	2000      	movs	r0, #0
 8004992:	e7e5      	b.n	8004960 <__hi0bits+0xc>

08004994 <__lo0bits>:
 8004994:	6803      	ldr	r3, [r0, #0]
 8004996:	4602      	mov	r2, r0
 8004998:	f013 0007 	ands.w	r0, r3, #7
 800499c:	d00b      	beq.n	80049b6 <__lo0bits+0x22>
 800499e:	07d9      	lsls	r1, r3, #31
 80049a0:	d421      	bmi.n	80049e6 <__lo0bits+0x52>
 80049a2:	0798      	lsls	r0, r3, #30
 80049a4:	bf49      	itett	mi
 80049a6:	085b      	lsrmi	r3, r3, #1
 80049a8:	089b      	lsrpl	r3, r3, #2
 80049aa:	2001      	movmi	r0, #1
 80049ac:	6013      	strmi	r3, [r2, #0]
 80049ae:	bf5c      	itt	pl
 80049b0:	2002      	movpl	r0, #2
 80049b2:	6013      	strpl	r3, [r2, #0]
 80049b4:	4770      	bx	lr
 80049b6:	b299      	uxth	r1, r3
 80049b8:	b909      	cbnz	r1, 80049be <__lo0bits+0x2a>
 80049ba:	2010      	movs	r0, #16
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	b2d9      	uxtb	r1, r3
 80049c0:	b909      	cbnz	r1, 80049c6 <__lo0bits+0x32>
 80049c2:	3008      	adds	r0, #8
 80049c4:	0a1b      	lsrs	r3, r3, #8
 80049c6:	0719      	lsls	r1, r3, #28
 80049c8:	bf04      	itt	eq
 80049ca:	091b      	lsreq	r3, r3, #4
 80049cc:	3004      	addeq	r0, #4
 80049ce:	0799      	lsls	r1, r3, #30
 80049d0:	bf04      	itt	eq
 80049d2:	089b      	lsreq	r3, r3, #2
 80049d4:	3002      	addeq	r0, #2
 80049d6:	07d9      	lsls	r1, r3, #31
 80049d8:	d403      	bmi.n	80049e2 <__lo0bits+0x4e>
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	f100 0001 	add.w	r0, r0, #1
 80049e0:	d003      	beq.n	80049ea <__lo0bits+0x56>
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	4770      	bx	lr
 80049e6:	2000      	movs	r0, #0
 80049e8:	4770      	bx	lr
 80049ea:	2020      	movs	r0, #32
 80049ec:	4770      	bx	lr
	...

080049f0 <__i2b>:
 80049f0:	b510      	push	{r4, lr}
 80049f2:	460c      	mov	r4, r1
 80049f4:	2101      	movs	r1, #1
 80049f6:	f7ff ff05 	bl	8004804 <_Balloc>
 80049fa:	4602      	mov	r2, r0
 80049fc:	b928      	cbnz	r0, 8004a0a <__i2b+0x1a>
 80049fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004a02:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <__i2b+0x24>)
 8004a04:	4804      	ldr	r0, [pc, #16]	; (8004a18 <__i2b+0x28>)
 8004a06:	f000 fcdb 	bl	80053c0 <__assert_func>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	6144      	str	r4, [r0, #20]
 8004a0e:	6103      	str	r3, [r0, #16]
 8004a10:	bd10      	pop	{r4, pc}
 8004a12:	bf00      	nop
 8004a14:	08006e87 	.word	0x08006e87
 8004a18:	08006e98 	.word	0x08006e98

08004a1c <__multiply>:
 8004a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	4691      	mov	r9, r2
 8004a22:	690a      	ldr	r2, [r1, #16]
 8004a24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004a28:	460c      	mov	r4, r1
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	bfbe      	ittt	lt
 8004a2e:	460b      	movlt	r3, r1
 8004a30:	464c      	movlt	r4, r9
 8004a32:	4699      	movlt	r9, r3
 8004a34:	6927      	ldr	r7, [r4, #16]
 8004a36:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004a3a:	68a3      	ldr	r3, [r4, #8]
 8004a3c:	6861      	ldr	r1, [r4, #4]
 8004a3e:	eb07 060a 	add.w	r6, r7, sl
 8004a42:	42b3      	cmp	r3, r6
 8004a44:	b085      	sub	sp, #20
 8004a46:	bfb8      	it	lt
 8004a48:	3101      	addlt	r1, #1
 8004a4a:	f7ff fedb 	bl	8004804 <_Balloc>
 8004a4e:	b930      	cbnz	r0, 8004a5e <__multiply+0x42>
 8004a50:	4602      	mov	r2, r0
 8004a52:	f240 115d 	movw	r1, #349	; 0x15d
 8004a56:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <__multiply+0x148>)
 8004a58:	4843      	ldr	r0, [pc, #268]	; (8004b68 <__multiply+0x14c>)
 8004a5a:	f000 fcb1 	bl	80053c0 <__assert_func>
 8004a5e:	f100 0514 	add.w	r5, r0, #20
 8004a62:	462b      	mov	r3, r5
 8004a64:	2200      	movs	r2, #0
 8004a66:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004a6a:	4543      	cmp	r3, r8
 8004a6c:	d321      	bcc.n	8004ab2 <__multiply+0x96>
 8004a6e:	f104 0314 	add.w	r3, r4, #20
 8004a72:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004a76:	f109 0314 	add.w	r3, r9, #20
 8004a7a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004a7e:	9202      	str	r2, [sp, #8]
 8004a80:	1b3a      	subs	r2, r7, r4
 8004a82:	3a15      	subs	r2, #21
 8004a84:	f022 0203 	bic.w	r2, r2, #3
 8004a88:	3204      	adds	r2, #4
 8004a8a:	f104 0115 	add.w	r1, r4, #21
 8004a8e:	428f      	cmp	r7, r1
 8004a90:	bf38      	it	cc
 8004a92:	2204      	movcc	r2, #4
 8004a94:	9201      	str	r2, [sp, #4]
 8004a96:	9a02      	ldr	r2, [sp, #8]
 8004a98:	9303      	str	r3, [sp, #12]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d80c      	bhi.n	8004ab8 <__multiply+0x9c>
 8004a9e:	2e00      	cmp	r6, #0
 8004aa0:	dd03      	ble.n	8004aaa <__multiply+0x8e>
 8004aa2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d059      	beq.n	8004b5e <__multiply+0x142>
 8004aaa:	6106      	str	r6, [r0, #16]
 8004aac:	b005      	add	sp, #20
 8004aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab2:	f843 2b04 	str.w	r2, [r3], #4
 8004ab6:	e7d8      	b.n	8004a6a <__multiply+0x4e>
 8004ab8:	f8b3 a000 	ldrh.w	sl, [r3]
 8004abc:	f1ba 0f00 	cmp.w	sl, #0
 8004ac0:	d023      	beq.n	8004b0a <__multiply+0xee>
 8004ac2:	46a9      	mov	r9, r5
 8004ac4:	f04f 0c00 	mov.w	ip, #0
 8004ac8:	f104 0e14 	add.w	lr, r4, #20
 8004acc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004ad0:	f8d9 1000 	ldr.w	r1, [r9]
 8004ad4:	fa1f fb82 	uxth.w	fp, r2
 8004ad8:	b289      	uxth	r1, r1
 8004ada:	fb0a 110b 	mla	r1, sl, fp, r1
 8004ade:	4461      	add	r1, ip
 8004ae0:	f8d9 c000 	ldr.w	ip, [r9]
 8004ae4:	0c12      	lsrs	r2, r2, #16
 8004ae6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004aea:	fb0a c202 	mla	r2, sl, r2, ip
 8004aee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004af2:	b289      	uxth	r1, r1
 8004af4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004af8:	4577      	cmp	r7, lr
 8004afa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004afe:	f849 1b04 	str.w	r1, [r9], #4
 8004b02:	d8e3      	bhi.n	8004acc <__multiply+0xb0>
 8004b04:	9a01      	ldr	r2, [sp, #4]
 8004b06:	f845 c002 	str.w	ip, [r5, r2]
 8004b0a:	9a03      	ldr	r2, [sp, #12]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004b12:	f1b9 0f00 	cmp.w	r9, #0
 8004b16:	d020      	beq.n	8004b5a <__multiply+0x13e>
 8004b18:	46ae      	mov	lr, r5
 8004b1a:	f04f 0a00 	mov.w	sl, #0
 8004b1e:	6829      	ldr	r1, [r5, #0]
 8004b20:	f104 0c14 	add.w	ip, r4, #20
 8004b24:	f8bc b000 	ldrh.w	fp, [ip]
 8004b28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004b2c:	b289      	uxth	r1, r1
 8004b2e:	fb09 220b 	mla	r2, r9, fp, r2
 8004b32:	4492      	add	sl, r2
 8004b34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004b38:	f84e 1b04 	str.w	r1, [lr], #4
 8004b3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004b40:	f8be 1000 	ldrh.w	r1, [lr]
 8004b44:	0c12      	lsrs	r2, r2, #16
 8004b46:	fb09 1102 	mla	r1, r9, r2, r1
 8004b4a:	4567      	cmp	r7, ip
 8004b4c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004b50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004b54:	d8e6      	bhi.n	8004b24 <__multiply+0x108>
 8004b56:	9a01      	ldr	r2, [sp, #4]
 8004b58:	50a9      	str	r1, [r5, r2]
 8004b5a:	3504      	adds	r5, #4
 8004b5c:	e79b      	b.n	8004a96 <__multiply+0x7a>
 8004b5e:	3e01      	subs	r6, #1
 8004b60:	e79d      	b.n	8004a9e <__multiply+0x82>
 8004b62:	bf00      	nop
 8004b64:	08006e87 	.word	0x08006e87
 8004b68:	08006e98 	.word	0x08006e98

08004b6c <__pow5mult>:
 8004b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b70:	4615      	mov	r5, r2
 8004b72:	f012 0203 	ands.w	r2, r2, #3
 8004b76:	4606      	mov	r6, r0
 8004b78:	460f      	mov	r7, r1
 8004b7a:	d007      	beq.n	8004b8c <__pow5mult+0x20>
 8004b7c:	4c25      	ldr	r4, [pc, #148]	; (8004c14 <__pow5mult+0xa8>)
 8004b7e:	3a01      	subs	r2, #1
 8004b80:	2300      	movs	r3, #0
 8004b82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b86:	f7ff fe9f 	bl	80048c8 <__multadd>
 8004b8a:	4607      	mov	r7, r0
 8004b8c:	10ad      	asrs	r5, r5, #2
 8004b8e:	d03d      	beq.n	8004c0c <__pow5mult+0xa0>
 8004b90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004b92:	b97c      	cbnz	r4, 8004bb4 <__pow5mult+0x48>
 8004b94:	2010      	movs	r0, #16
 8004b96:	f7ff fe11 	bl	80047bc <malloc>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6270      	str	r0, [r6, #36]	; 0x24
 8004b9e:	b928      	cbnz	r0, 8004bac <__pow5mult+0x40>
 8004ba0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004ba4:	4b1c      	ldr	r3, [pc, #112]	; (8004c18 <__pow5mult+0xac>)
 8004ba6:	481d      	ldr	r0, [pc, #116]	; (8004c1c <__pow5mult+0xb0>)
 8004ba8:	f000 fc0a 	bl	80053c0 <__assert_func>
 8004bac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004bb0:	6004      	str	r4, [r0, #0]
 8004bb2:	60c4      	str	r4, [r0, #12]
 8004bb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004bb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004bbc:	b94c      	cbnz	r4, 8004bd2 <__pow5mult+0x66>
 8004bbe:	f240 2171 	movw	r1, #625	; 0x271
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f7ff ff14 	bl	80049f0 <__i2b>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4604      	mov	r4, r0
 8004bcc:	f8c8 0008 	str.w	r0, [r8, #8]
 8004bd0:	6003      	str	r3, [r0, #0]
 8004bd2:	f04f 0900 	mov.w	r9, #0
 8004bd6:	07eb      	lsls	r3, r5, #31
 8004bd8:	d50a      	bpl.n	8004bf0 <__pow5mult+0x84>
 8004bda:	4639      	mov	r1, r7
 8004bdc:	4622      	mov	r2, r4
 8004bde:	4630      	mov	r0, r6
 8004be0:	f7ff ff1c 	bl	8004a1c <__multiply>
 8004be4:	4680      	mov	r8, r0
 8004be6:	4639      	mov	r1, r7
 8004be8:	4630      	mov	r0, r6
 8004bea:	f7ff fe4b 	bl	8004884 <_Bfree>
 8004bee:	4647      	mov	r7, r8
 8004bf0:	106d      	asrs	r5, r5, #1
 8004bf2:	d00b      	beq.n	8004c0c <__pow5mult+0xa0>
 8004bf4:	6820      	ldr	r0, [r4, #0]
 8004bf6:	b938      	cbnz	r0, 8004c08 <__pow5mult+0x9c>
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f7ff ff0d 	bl	8004a1c <__multiply>
 8004c02:	6020      	str	r0, [r4, #0]
 8004c04:	f8c0 9000 	str.w	r9, [r0]
 8004c08:	4604      	mov	r4, r0
 8004c0a:	e7e4      	b.n	8004bd6 <__pow5mult+0x6a>
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c12:	bf00      	nop
 8004c14:	08006fe8 	.word	0x08006fe8
 8004c18:	08006e15 	.word	0x08006e15
 8004c1c:	08006e98 	.word	0x08006e98

08004c20 <__lshift>:
 8004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	460c      	mov	r4, r1
 8004c26:	4607      	mov	r7, r0
 8004c28:	4691      	mov	r9, r2
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	6849      	ldr	r1, [r1, #4]
 8004c2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004c32:	68a3      	ldr	r3, [r4, #8]
 8004c34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c38:	f108 0601 	add.w	r6, r8, #1
 8004c3c:	42b3      	cmp	r3, r6
 8004c3e:	db0b      	blt.n	8004c58 <__lshift+0x38>
 8004c40:	4638      	mov	r0, r7
 8004c42:	f7ff fddf 	bl	8004804 <_Balloc>
 8004c46:	4605      	mov	r5, r0
 8004c48:	b948      	cbnz	r0, 8004c5e <__lshift+0x3e>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004c50:	4b29      	ldr	r3, [pc, #164]	; (8004cf8 <__lshift+0xd8>)
 8004c52:	482a      	ldr	r0, [pc, #168]	; (8004cfc <__lshift+0xdc>)
 8004c54:	f000 fbb4 	bl	80053c0 <__assert_func>
 8004c58:	3101      	adds	r1, #1
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	e7ee      	b.n	8004c3c <__lshift+0x1c>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f100 0114 	add.w	r1, r0, #20
 8004c64:	f100 0210 	add.w	r2, r0, #16
 8004c68:	4618      	mov	r0, r3
 8004c6a:	4553      	cmp	r3, sl
 8004c6c:	db37      	blt.n	8004cde <__lshift+0xbe>
 8004c6e:	6920      	ldr	r0, [r4, #16]
 8004c70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c74:	f104 0314 	add.w	r3, r4, #20
 8004c78:	f019 091f 	ands.w	r9, r9, #31
 8004c7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004c84:	d02f      	beq.n	8004ce6 <__lshift+0xc6>
 8004c86:	468a      	mov	sl, r1
 8004c88:	f04f 0c00 	mov.w	ip, #0
 8004c8c:	f1c9 0e20 	rsb	lr, r9, #32
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	fa02 f209 	lsl.w	r2, r2, r9
 8004c96:	ea42 020c 	orr.w	r2, r2, ip
 8004c9a:	f84a 2b04 	str.w	r2, [sl], #4
 8004c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ca2:	4298      	cmp	r0, r3
 8004ca4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004ca8:	d8f2      	bhi.n	8004c90 <__lshift+0x70>
 8004caa:	1b03      	subs	r3, r0, r4
 8004cac:	3b15      	subs	r3, #21
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	f104 0215 	add.w	r2, r4, #21
 8004cb8:	4290      	cmp	r0, r2
 8004cba:	bf38      	it	cc
 8004cbc:	2304      	movcc	r3, #4
 8004cbe:	f841 c003 	str.w	ip, [r1, r3]
 8004cc2:	f1bc 0f00 	cmp.w	ip, #0
 8004cc6:	d001      	beq.n	8004ccc <__lshift+0xac>
 8004cc8:	f108 0602 	add.w	r6, r8, #2
 8004ccc:	3e01      	subs	r6, #1
 8004cce:	4638      	mov	r0, r7
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	612e      	str	r6, [r5, #16]
 8004cd4:	f7ff fdd6 	bl	8004884 <_Bfree>
 8004cd8:	4628      	mov	r0, r5
 8004cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cde:	f842 0f04 	str.w	r0, [r2, #4]!
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	e7c1      	b.n	8004c6a <__lshift+0x4a>
 8004ce6:	3904      	subs	r1, #4
 8004ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cec:	4298      	cmp	r0, r3
 8004cee:	f841 2f04 	str.w	r2, [r1, #4]!
 8004cf2:	d8f9      	bhi.n	8004ce8 <__lshift+0xc8>
 8004cf4:	e7ea      	b.n	8004ccc <__lshift+0xac>
 8004cf6:	bf00      	nop
 8004cf8:	08006e87 	.word	0x08006e87
 8004cfc:	08006e98 	.word	0x08006e98

08004d00 <__mcmp>:
 8004d00:	4603      	mov	r3, r0
 8004d02:	690a      	ldr	r2, [r1, #16]
 8004d04:	6900      	ldr	r0, [r0, #16]
 8004d06:	b530      	push	{r4, r5, lr}
 8004d08:	1a80      	subs	r0, r0, r2
 8004d0a:	d10d      	bne.n	8004d28 <__mcmp+0x28>
 8004d0c:	3314      	adds	r3, #20
 8004d0e:	3114      	adds	r1, #20
 8004d10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004d14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004d18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004d1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004d20:	4295      	cmp	r5, r2
 8004d22:	d002      	beq.n	8004d2a <__mcmp+0x2a>
 8004d24:	d304      	bcc.n	8004d30 <__mcmp+0x30>
 8004d26:	2001      	movs	r0, #1
 8004d28:	bd30      	pop	{r4, r5, pc}
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	d3f4      	bcc.n	8004d18 <__mcmp+0x18>
 8004d2e:	e7fb      	b.n	8004d28 <__mcmp+0x28>
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	e7f8      	b.n	8004d28 <__mcmp+0x28>
	...

08004d38 <__mdiff>:
 8004d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	460d      	mov	r5, r1
 8004d3e:	4607      	mov	r7, r0
 8004d40:	4611      	mov	r1, r2
 8004d42:	4628      	mov	r0, r5
 8004d44:	4614      	mov	r4, r2
 8004d46:	f7ff ffdb 	bl	8004d00 <__mcmp>
 8004d4a:	1e06      	subs	r6, r0, #0
 8004d4c:	d111      	bne.n	8004d72 <__mdiff+0x3a>
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7ff fd57 	bl	8004804 <_Balloc>
 8004d56:	4602      	mov	r2, r0
 8004d58:	b928      	cbnz	r0, 8004d66 <__mdiff+0x2e>
 8004d5a:	f240 2132 	movw	r1, #562	; 0x232
 8004d5e:	4b3a      	ldr	r3, [pc, #232]	; (8004e48 <__mdiff+0x110>)
 8004d60:	483a      	ldr	r0, [pc, #232]	; (8004e4c <__mdiff+0x114>)
 8004d62:	f000 fb2d 	bl	80053c0 <__assert_func>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d72:	bfa4      	itt	ge
 8004d74:	4623      	movge	r3, r4
 8004d76:	462c      	movge	r4, r5
 8004d78:	4638      	mov	r0, r7
 8004d7a:	6861      	ldr	r1, [r4, #4]
 8004d7c:	bfa6      	itte	ge
 8004d7e:	461d      	movge	r5, r3
 8004d80:	2600      	movge	r6, #0
 8004d82:	2601      	movlt	r6, #1
 8004d84:	f7ff fd3e 	bl	8004804 <_Balloc>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	b918      	cbnz	r0, 8004d94 <__mdiff+0x5c>
 8004d8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004d90:	4b2d      	ldr	r3, [pc, #180]	; (8004e48 <__mdiff+0x110>)
 8004d92:	e7e5      	b.n	8004d60 <__mdiff+0x28>
 8004d94:	f102 0814 	add.w	r8, r2, #20
 8004d98:	46c2      	mov	sl, r8
 8004d9a:	f04f 0c00 	mov.w	ip, #0
 8004d9e:	6927      	ldr	r7, [r4, #16]
 8004da0:	60c6      	str	r6, [r0, #12]
 8004da2:	692e      	ldr	r6, [r5, #16]
 8004da4:	f104 0014 	add.w	r0, r4, #20
 8004da8:	f105 0914 	add.w	r9, r5, #20
 8004dac:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004db0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004db4:	3410      	adds	r4, #16
 8004db6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004dba:	f859 3b04 	ldr.w	r3, [r9], #4
 8004dbe:	fa1f f18b 	uxth.w	r1, fp
 8004dc2:	448c      	add	ip, r1
 8004dc4:	b299      	uxth	r1, r3
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	ebac 0101 	sub.w	r1, ip, r1
 8004dcc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004dd0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004dd4:	b289      	uxth	r1, r1
 8004dd6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004dda:	454e      	cmp	r6, r9
 8004ddc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004de0:	f84a 3b04 	str.w	r3, [sl], #4
 8004de4:	d8e7      	bhi.n	8004db6 <__mdiff+0x7e>
 8004de6:	1b73      	subs	r3, r6, r5
 8004de8:	3b15      	subs	r3, #21
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	3515      	adds	r5, #21
 8004df0:	3304      	adds	r3, #4
 8004df2:	42ae      	cmp	r6, r5
 8004df4:	bf38      	it	cc
 8004df6:	2304      	movcc	r3, #4
 8004df8:	4418      	add	r0, r3
 8004dfa:	4443      	add	r3, r8
 8004dfc:	461e      	mov	r6, r3
 8004dfe:	4605      	mov	r5, r0
 8004e00:	4575      	cmp	r5, lr
 8004e02:	d30e      	bcc.n	8004e22 <__mdiff+0xea>
 8004e04:	f10e 0103 	add.w	r1, lr, #3
 8004e08:	1a09      	subs	r1, r1, r0
 8004e0a:	f021 0103 	bic.w	r1, r1, #3
 8004e0e:	3803      	subs	r0, #3
 8004e10:	4586      	cmp	lr, r0
 8004e12:	bf38      	it	cc
 8004e14:	2100      	movcc	r1, #0
 8004e16:	4419      	add	r1, r3
 8004e18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004e1c:	b18b      	cbz	r3, 8004e42 <__mdiff+0x10a>
 8004e1e:	6117      	str	r7, [r2, #16]
 8004e20:	e7a4      	b.n	8004d6c <__mdiff+0x34>
 8004e22:	f855 8b04 	ldr.w	r8, [r5], #4
 8004e26:	fa1f f188 	uxth.w	r1, r8
 8004e2a:	4461      	add	r1, ip
 8004e2c:	140c      	asrs	r4, r1, #16
 8004e2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004e32:	b289      	uxth	r1, r1
 8004e34:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004e38:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004e3c:	f846 1b04 	str.w	r1, [r6], #4
 8004e40:	e7de      	b.n	8004e00 <__mdiff+0xc8>
 8004e42:	3f01      	subs	r7, #1
 8004e44:	e7e8      	b.n	8004e18 <__mdiff+0xe0>
 8004e46:	bf00      	nop
 8004e48:	08006e87 	.word	0x08006e87
 8004e4c:	08006e98 	.word	0x08006e98

08004e50 <__d2b>:
 8004e50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e54:	2101      	movs	r1, #1
 8004e56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004e5a:	4690      	mov	r8, r2
 8004e5c:	461d      	mov	r5, r3
 8004e5e:	f7ff fcd1 	bl	8004804 <_Balloc>
 8004e62:	4604      	mov	r4, r0
 8004e64:	b930      	cbnz	r0, 8004e74 <__d2b+0x24>
 8004e66:	4602      	mov	r2, r0
 8004e68:	f240 310a 	movw	r1, #778	; 0x30a
 8004e6c:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <__d2b+0xb0>)
 8004e6e:	4825      	ldr	r0, [pc, #148]	; (8004f04 <__d2b+0xb4>)
 8004e70:	f000 faa6 	bl	80053c0 <__assert_func>
 8004e74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004e78:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004e7c:	bb2d      	cbnz	r5, 8004eca <__d2b+0x7a>
 8004e7e:	9301      	str	r3, [sp, #4]
 8004e80:	f1b8 0300 	subs.w	r3, r8, #0
 8004e84:	d026      	beq.n	8004ed4 <__d2b+0x84>
 8004e86:	4668      	mov	r0, sp
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	f7ff fd83 	bl	8004994 <__lo0bits>
 8004e8e:	9900      	ldr	r1, [sp, #0]
 8004e90:	b1f0      	cbz	r0, 8004ed0 <__d2b+0x80>
 8004e92:	9a01      	ldr	r2, [sp, #4]
 8004e94:	f1c0 0320 	rsb	r3, r0, #32
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	40c2      	lsrs	r2, r0
 8004ea0:	6163      	str	r3, [r4, #20]
 8004ea2:	9201      	str	r2, [sp, #4]
 8004ea4:	9b01      	ldr	r3, [sp, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2102      	movne	r1, #2
 8004eac:	2101      	moveq	r1, #1
 8004eae:	61a3      	str	r3, [r4, #24]
 8004eb0:	6121      	str	r1, [r4, #16]
 8004eb2:	b1c5      	cbz	r5, 8004ee6 <__d2b+0x96>
 8004eb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004eb8:	4405      	add	r5, r0
 8004eba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004ebe:	603d      	str	r5, [r7, #0]
 8004ec0:	6030      	str	r0, [r6, #0]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	b002      	add	sp, #8
 8004ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ece:	e7d6      	b.n	8004e7e <__d2b+0x2e>
 8004ed0:	6161      	str	r1, [r4, #20]
 8004ed2:	e7e7      	b.n	8004ea4 <__d2b+0x54>
 8004ed4:	a801      	add	r0, sp, #4
 8004ed6:	f7ff fd5d 	bl	8004994 <__lo0bits>
 8004eda:	2101      	movs	r1, #1
 8004edc:	9b01      	ldr	r3, [sp, #4]
 8004ede:	6121      	str	r1, [r4, #16]
 8004ee0:	6163      	str	r3, [r4, #20]
 8004ee2:	3020      	adds	r0, #32
 8004ee4:	e7e5      	b.n	8004eb2 <__d2b+0x62>
 8004ee6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004eea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004eee:	6038      	str	r0, [r7, #0]
 8004ef0:	6918      	ldr	r0, [r3, #16]
 8004ef2:	f7ff fd2f 	bl	8004954 <__hi0bits>
 8004ef6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004efa:	6031      	str	r1, [r6, #0]
 8004efc:	e7e1      	b.n	8004ec2 <__d2b+0x72>
 8004efe:	bf00      	nop
 8004f00:	08006e87 	.word	0x08006e87
 8004f04:	08006e98 	.word	0x08006e98

08004f08 <_calloc_r>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	fba1 5402 	umull	r5, r4, r1, r2
 8004f0e:	b934      	cbnz	r4, 8004f1e <_calloc_r+0x16>
 8004f10:	4629      	mov	r1, r5
 8004f12:	f000 f875 	bl	8005000 <_malloc_r>
 8004f16:	4606      	mov	r6, r0
 8004f18:	b928      	cbnz	r0, 8004f26 <_calloc_r+0x1e>
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	bd70      	pop	{r4, r5, r6, pc}
 8004f1e:	220c      	movs	r2, #12
 8004f20:	2600      	movs	r6, #0
 8004f22:	6002      	str	r2, [r0, #0]
 8004f24:	e7f9      	b.n	8004f1a <_calloc_r+0x12>
 8004f26:	462a      	mov	r2, r5
 8004f28:	4621      	mov	r1, r4
 8004f2a:	f7fe f941 	bl	80031b0 <memset>
 8004f2e:	e7f4      	b.n	8004f1a <_calloc_r+0x12>

08004f30 <_free_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4605      	mov	r5, r0
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d040      	beq.n	8004fba <_free_r+0x8a>
 8004f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f3c:	1f0c      	subs	r4, r1, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bfb8      	it	lt
 8004f42:	18e4      	addlt	r4, r4, r3
 8004f44:	f000 fa98 	bl	8005478 <__malloc_lock>
 8004f48:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <_free_r+0x8c>)
 8004f4a:	6813      	ldr	r3, [r2, #0]
 8004f4c:	b933      	cbnz	r3, 8004f5c <_free_r+0x2c>
 8004f4e:	6063      	str	r3, [r4, #4]
 8004f50:	6014      	str	r4, [r2, #0]
 8004f52:	4628      	mov	r0, r5
 8004f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f58:	f000 ba94 	b.w	8005484 <__malloc_unlock>
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	d908      	bls.n	8004f72 <_free_r+0x42>
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	1821      	adds	r1, r4, r0
 8004f64:	428b      	cmp	r3, r1
 8004f66:	bf01      	itttt	eq
 8004f68:	6819      	ldreq	r1, [r3, #0]
 8004f6a:	685b      	ldreq	r3, [r3, #4]
 8004f6c:	1809      	addeq	r1, r1, r0
 8004f6e:	6021      	streq	r1, [r4, #0]
 8004f70:	e7ed      	b.n	8004f4e <_free_r+0x1e>
 8004f72:	461a      	mov	r2, r3
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	b10b      	cbz	r3, 8004f7c <_free_r+0x4c>
 8004f78:	42a3      	cmp	r3, r4
 8004f7a:	d9fa      	bls.n	8004f72 <_free_r+0x42>
 8004f7c:	6811      	ldr	r1, [r2, #0]
 8004f7e:	1850      	adds	r0, r2, r1
 8004f80:	42a0      	cmp	r0, r4
 8004f82:	d10b      	bne.n	8004f9c <_free_r+0x6c>
 8004f84:	6820      	ldr	r0, [r4, #0]
 8004f86:	4401      	add	r1, r0
 8004f88:	1850      	adds	r0, r2, r1
 8004f8a:	4283      	cmp	r3, r0
 8004f8c:	6011      	str	r1, [r2, #0]
 8004f8e:	d1e0      	bne.n	8004f52 <_free_r+0x22>
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4401      	add	r1, r0
 8004f96:	6011      	str	r1, [r2, #0]
 8004f98:	6053      	str	r3, [r2, #4]
 8004f9a:	e7da      	b.n	8004f52 <_free_r+0x22>
 8004f9c:	d902      	bls.n	8004fa4 <_free_r+0x74>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	602b      	str	r3, [r5, #0]
 8004fa2:	e7d6      	b.n	8004f52 <_free_r+0x22>
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	1821      	adds	r1, r4, r0
 8004fa8:	428b      	cmp	r3, r1
 8004faa:	bf01      	itttt	eq
 8004fac:	6819      	ldreq	r1, [r3, #0]
 8004fae:	685b      	ldreq	r3, [r3, #4]
 8004fb0:	1809      	addeq	r1, r1, r0
 8004fb2:	6021      	streq	r1, [r4, #0]
 8004fb4:	6063      	str	r3, [r4, #4]
 8004fb6:	6054      	str	r4, [r2, #4]
 8004fb8:	e7cb      	b.n	8004f52 <_free_r+0x22>
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	20000298 	.word	0x20000298

08004fc0 <sbrk_aligned>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	4e0e      	ldr	r6, [pc, #56]	; (8004ffc <sbrk_aligned+0x3c>)
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	6831      	ldr	r1, [r6, #0]
 8004fc8:	4605      	mov	r5, r0
 8004fca:	b911      	cbnz	r1, 8004fd2 <sbrk_aligned+0x12>
 8004fcc:	f000 f9e8 	bl	80053a0 <_sbrk_r>
 8004fd0:	6030      	str	r0, [r6, #0]
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f000 f9e3 	bl	80053a0 <_sbrk_r>
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	d00a      	beq.n	8004ff4 <sbrk_aligned+0x34>
 8004fde:	1cc4      	adds	r4, r0, #3
 8004fe0:	f024 0403 	bic.w	r4, r4, #3
 8004fe4:	42a0      	cmp	r0, r4
 8004fe6:	d007      	beq.n	8004ff8 <sbrk_aligned+0x38>
 8004fe8:	1a21      	subs	r1, r4, r0
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 f9d8 	bl	80053a0 <_sbrk_r>
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d101      	bne.n	8004ff8 <sbrk_aligned+0x38>
 8004ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	2000029c 	.word	0x2000029c

08005000 <_malloc_r>:
 8005000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005004:	1ccd      	adds	r5, r1, #3
 8005006:	f025 0503 	bic.w	r5, r5, #3
 800500a:	3508      	adds	r5, #8
 800500c:	2d0c      	cmp	r5, #12
 800500e:	bf38      	it	cc
 8005010:	250c      	movcc	r5, #12
 8005012:	2d00      	cmp	r5, #0
 8005014:	4607      	mov	r7, r0
 8005016:	db01      	blt.n	800501c <_malloc_r+0x1c>
 8005018:	42a9      	cmp	r1, r5
 800501a:	d905      	bls.n	8005028 <_malloc_r+0x28>
 800501c:	230c      	movs	r3, #12
 800501e:	2600      	movs	r6, #0
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	4630      	mov	r0, r6
 8005024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005028:	4e2e      	ldr	r6, [pc, #184]	; (80050e4 <_malloc_r+0xe4>)
 800502a:	f000 fa25 	bl	8005478 <__malloc_lock>
 800502e:	6833      	ldr	r3, [r6, #0]
 8005030:	461c      	mov	r4, r3
 8005032:	bb34      	cbnz	r4, 8005082 <_malloc_r+0x82>
 8005034:	4629      	mov	r1, r5
 8005036:	4638      	mov	r0, r7
 8005038:	f7ff ffc2 	bl	8004fc0 <sbrk_aligned>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	4604      	mov	r4, r0
 8005040:	d14d      	bne.n	80050de <_malloc_r+0xde>
 8005042:	6834      	ldr	r4, [r6, #0]
 8005044:	4626      	mov	r6, r4
 8005046:	2e00      	cmp	r6, #0
 8005048:	d140      	bne.n	80050cc <_malloc_r+0xcc>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	4631      	mov	r1, r6
 800504e:	4638      	mov	r0, r7
 8005050:	eb04 0803 	add.w	r8, r4, r3
 8005054:	f000 f9a4 	bl	80053a0 <_sbrk_r>
 8005058:	4580      	cmp	r8, r0
 800505a:	d13a      	bne.n	80050d2 <_malloc_r+0xd2>
 800505c:	6821      	ldr	r1, [r4, #0]
 800505e:	3503      	adds	r5, #3
 8005060:	1a6d      	subs	r5, r5, r1
 8005062:	f025 0503 	bic.w	r5, r5, #3
 8005066:	3508      	adds	r5, #8
 8005068:	2d0c      	cmp	r5, #12
 800506a:	bf38      	it	cc
 800506c:	250c      	movcc	r5, #12
 800506e:	4638      	mov	r0, r7
 8005070:	4629      	mov	r1, r5
 8005072:	f7ff ffa5 	bl	8004fc0 <sbrk_aligned>
 8005076:	3001      	adds	r0, #1
 8005078:	d02b      	beq.n	80050d2 <_malloc_r+0xd2>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	442b      	add	r3, r5
 800507e:	6023      	str	r3, [r4, #0]
 8005080:	e00e      	b.n	80050a0 <_malloc_r+0xa0>
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	1b52      	subs	r2, r2, r5
 8005086:	d41e      	bmi.n	80050c6 <_malloc_r+0xc6>
 8005088:	2a0b      	cmp	r2, #11
 800508a:	d916      	bls.n	80050ba <_malloc_r+0xba>
 800508c:	1961      	adds	r1, r4, r5
 800508e:	42a3      	cmp	r3, r4
 8005090:	6025      	str	r5, [r4, #0]
 8005092:	bf18      	it	ne
 8005094:	6059      	strne	r1, [r3, #4]
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	bf08      	it	eq
 800509a:	6031      	streq	r1, [r6, #0]
 800509c:	5162      	str	r2, [r4, r5]
 800509e:	604b      	str	r3, [r1, #4]
 80050a0:	4638      	mov	r0, r7
 80050a2:	f104 060b 	add.w	r6, r4, #11
 80050a6:	f000 f9ed 	bl	8005484 <__malloc_unlock>
 80050aa:	f026 0607 	bic.w	r6, r6, #7
 80050ae:	1d23      	adds	r3, r4, #4
 80050b0:	1af2      	subs	r2, r6, r3
 80050b2:	d0b6      	beq.n	8005022 <_malloc_r+0x22>
 80050b4:	1b9b      	subs	r3, r3, r6
 80050b6:	50a3      	str	r3, [r4, r2]
 80050b8:	e7b3      	b.n	8005022 <_malloc_r+0x22>
 80050ba:	6862      	ldr	r2, [r4, #4]
 80050bc:	42a3      	cmp	r3, r4
 80050be:	bf0c      	ite	eq
 80050c0:	6032      	streq	r2, [r6, #0]
 80050c2:	605a      	strne	r2, [r3, #4]
 80050c4:	e7ec      	b.n	80050a0 <_malloc_r+0xa0>
 80050c6:	4623      	mov	r3, r4
 80050c8:	6864      	ldr	r4, [r4, #4]
 80050ca:	e7b2      	b.n	8005032 <_malloc_r+0x32>
 80050cc:	4634      	mov	r4, r6
 80050ce:	6876      	ldr	r6, [r6, #4]
 80050d0:	e7b9      	b.n	8005046 <_malloc_r+0x46>
 80050d2:	230c      	movs	r3, #12
 80050d4:	4638      	mov	r0, r7
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	f000 f9d4 	bl	8005484 <__malloc_unlock>
 80050dc:	e7a1      	b.n	8005022 <_malloc_r+0x22>
 80050de:	6025      	str	r5, [r4, #0]
 80050e0:	e7de      	b.n	80050a0 <_malloc_r+0xa0>
 80050e2:	bf00      	nop
 80050e4:	20000298 	.word	0x20000298

080050e8 <__ssputs_r>:
 80050e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	688e      	ldr	r6, [r1, #8]
 80050ee:	4682      	mov	sl, r0
 80050f0:	429e      	cmp	r6, r3
 80050f2:	460c      	mov	r4, r1
 80050f4:	4690      	mov	r8, r2
 80050f6:	461f      	mov	r7, r3
 80050f8:	d838      	bhi.n	800516c <__ssputs_r+0x84>
 80050fa:	898a      	ldrh	r2, [r1, #12]
 80050fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005100:	d032      	beq.n	8005168 <__ssputs_r+0x80>
 8005102:	6825      	ldr	r5, [r4, #0]
 8005104:	6909      	ldr	r1, [r1, #16]
 8005106:	3301      	adds	r3, #1
 8005108:	eba5 0901 	sub.w	r9, r5, r1
 800510c:	6965      	ldr	r5, [r4, #20]
 800510e:	444b      	add	r3, r9
 8005110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005118:	106d      	asrs	r5, r5, #1
 800511a:	429d      	cmp	r5, r3
 800511c:	bf38      	it	cc
 800511e:	461d      	movcc	r5, r3
 8005120:	0553      	lsls	r3, r2, #21
 8005122:	d531      	bpl.n	8005188 <__ssputs_r+0xa0>
 8005124:	4629      	mov	r1, r5
 8005126:	f7ff ff6b 	bl	8005000 <_malloc_r>
 800512a:	4606      	mov	r6, r0
 800512c:	b950      	cbnz	r0, 8005144 <__ssputs_r+0x5c>
 800512e:	230c      	movs	r3, #12
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	f8ca 3000 	str.w	r3, [sl]
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005144:	464a      	mov	r2, r9
 8005146:	6921      	ldr	r1, [r4, #16]
 8005148:	f7ff fb4e 	bl	80047e8 <memcpy>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	6126      	str	r6, [r4, #16]
 800515a:	444e      	add	r6, r9
 800515c:	6026      	str	r6, [r4, #0]
 800515e:	463e      	mov	r6, r7
 8005160:	6165      	str	r5, [r4, #20]
 8005162:	eba5 0509 	sub.w	r5, r5, r9
 8005166:	60a5      	str	r5, [r4, #8]
 8005168:	42be      	cmp	r6, r7
 800516a:	d900      	bls.n	800516e <__ssputs_r+0x86>
 800516c:	463e      	mov	r6, r7
 800516e:	4632      	mov	r2, r6
 8005170:	4641      	mov	r1, r8
 8005172:	6820      	ldr	r0, [r4, #0]
 8005174:	f000 f966 	bl	8005444 <memmove>
 8005178:	68a3      	ldr	r3, [r4, #8]
 800517a:	2000      	movs	r0, #0
 800517c:	1b9b      	subs	r3, r3, r6
 800517e:	60a3      	str	r3, [r4, #8]
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	4433      	add	r3, r6
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	e7db      	b.n	8005140 <__ssputs_r+0x58>
 8005188:	462a      	mov	r2, r5
 800518a:	f000 f981 	bl	8005490 <_realloc_r>
 800518e:	4606      	mov	r6, r0
 8005190:	2800      	cmp	r0, #0
 8005192:	d1e1      	bne.n	8005158 <__ssputs_r+0x70>
 8005194:	4650      	mov	r0, sl
 8005196:	6921      	ldr	r1, [r4, #16]
 8005198:	f7ff feca 	bl	8004f30 <_free_r>
 800519c:	e7c7      	b.n	800512e <__ssputs_r+0x46>
	...

080051a0 <_svfiprintf_r>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	4698      	mov	r8, r3
 80051a6:	898b      	ldrh	r3, [r1, #12]
 80051a8:	4607      	mov	r7, r0
 80051aa:	061b      	lsls	r3, r3, #24
 80051ac:	460d      	mov	r5, r1
 80051ae:	4614      	mov	r4, r2
 80051b0:	b09d      	sub	sp, #116	; 0x74
 80051b2:	d50e      	bpl.n	80051d2 <_svfiprintf_r+0x32>
 80051b4:	690b      	ldr	r3, [r1, #16]
 80051b6:	b963      	cbnz	r3, 80051d2 <_svfiprintf_r+0x32>
 80051b8:	2140      	movs	r1, #64	; 0x40
 80051ba:	f7ff ff21 	bl	8005000 <_malloc_r>
 80051be:	6028      	str	r0, [r5, #0]
 80051c0:	6128      	str	r0, [r5, #16]
 80051c2:	b920      	cbnz	r0, 80051ce <_svfiprintf_r+0x2e>
 80051c4:	230c      	movs	r3, #12
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	e0d1      	b.n	8005372 <_svfiprintf_r+0x1d2>
 80051ce:	2340      	movs	r3, #64	; 0x40
 80051d0:	616b      	str	r3, [r5, #20]
 80051d2:	2300      	movs	r3, #0
 80051d4:	9309      	str	r3, [sp, #36]	; 0x24
 80051d6:	2320      	movs	r3, #32
 80051d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051dc:	2330      	movs	r3, #48	; 0x30
 80051de:	f04f 0901 	mov.w	r9, #1
 80051e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800538c <_svfiprintf_r+0x1ec>
 80051ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051ee:	4623      	mov	r3, r4
 80051f0:	469a      	mov	sl, r3
 80051f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051f6:	b10a      	cbz	r2, 80051fc <_svfiprintf_r+0x5c>
 80051f8:	2a25      	cmp	r2, #37	; 0x25
 80051fa:	d1f9      	bne.n	80051f0 <_svfiprintf_r+0x50>
 80051fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005200:	d00b      	beq.n	800521a <_svfiprintf_r+0x7a>
 8005202:	465b      	mov	r3, fp
 8005204:	4622      	mov	r2, r4
 8005206:	4629      	mov	r1, r5
 8005208:	4638      	mov	r0, r7
 800520a:	f7ff ff6d 	bl	80050e8 <__ssputs_r>
 800520e:	3001      	adds	r0, #1
 8005210:	f000 80aa 	beq.w	8005368 <_svfiprintf_r+0x1c8>
 8005214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005216:	445a      	add	r2, fp
 8005218:	9209      	str	r2, [sp, #36]	; 0x24
 800521a:	f89a 3000 	ldrb.w	r3, [sl]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80a2 	beq.w	8005368 <_svfiprintf_r+0x1c8>
 8005224:	2300      	movs	r3, #0
 8005226:	f04f 32ff 	mov.w	r2, #4294967295
 800522a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800522e:	f10a 0a01 	add.w	sl, sl, #1
 8005232:	9304      	str	r3, [sp, #16]
 8005234:	9307      	str	r3, [sp, #28]
 8005236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800523a:	931a      	str	r3, [sp, #104]	; 0x68
 800523c:	4654      	mov	r4, sl
 800523e:	2205      	movs	r2, #5
 8005240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005244:	4851      	ldr	r0, [pc, #324]	; (800538c <_svfiprintf_r+0x1ec>)
 8005246:	f7ff fac1 	bl	80047cc <memchr>
 800524a:	9a04      	ldr	r2, [sp, #16]
 800524c:	b9d8      	cbnz	r0, 8005286 <_svfiprintf_r+0xe6>
 800524e:	06d0      	lsls	r0, r2, #27
 8005250:	bf44      	itt	mi
 8005252:	2320      	movmi	r3, #32
 8005254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005258:	0711      	lsls	r1, r2, #28
 800525a:	bf44      	itt	mi
 800525c:	232b      	movmi	r3, #43	; 0x2b
 800525e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005262:	f89a 3000 	ldrb.w	r3, [sl]
 8005266:	2b2a      	cmp	r3, #42	; 0x2a
 8005268:	d015      	beq.n	8005296 <_svfiprintf_r+0xf6>
 800526a:	4654      	mov	r4, sl
 800526c:	2000      	movs	r0, #0
 800526e:	f04f 0c0a 	mov.w	ip, #10
 8005272:	9a07      	ldr	r2, [sp, #28]
 8005274:	4621      	mov	r1, r4
 8005276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800527a:	3b30      	subs	r3, #48	; 0x30
 800527c:	2b09      	cmp	r3, #9
 800527e:	d94e      	bls.n	800531e <_svfiprintf_r+0x17e>
 8005280:	b1b0      	cbz	r0, 80052b0 <_svfiprintf_r+0x110>
 8005282:	9207      	str	r2, [sp, #28]
 8005284:	e014      	b.n	80052b0 <_svfiprintf_r+0x110>
 8005286:	eba0 0308 	sub.w	r3, r0, r8
 800528a:	fa09 f303 	lsl.w	r3, r9, r3
 800528e:	4313      	orrs	r3, r2
 8005290:	46a2      	mov	sl, r4
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	e7d2      	b.n	800523c <_svfiprintf_r+0x9c>
 8005296:	9b03      	ldr	r3, [sp, #12]
 8005298:	1d19      	adds	r1, r3, #4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	9103      	str	r1, [sp, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bfbb      	ittet	lt
 80052a2:	425b      	neglt	r3, r3
 80052a4:	f042 0202 	orrlt.w	r2, r2, #2
 80052a8:	9307      	strge	r3, [sp, #28]
 80052aa:	9307      	strlt	r3, [sp, #28]
 80052ac:	bfb8      	it	lt
 80052ae:	9204      	strlt	r2, [sp, #16]
 80052b0:	7823      	ldrb	r3, [r4, #0]
 80052b2:	2b2e      	cmp	r3, #46	; 0x2e
 80052b4:	d10c      	bne.n	80052d0 <_svfiprintf_r+0x130>
 80052b6:	7863      	ldrb	r3, [r4, #1]
 80052b8:	2b2a      	cmp	r3, #42	; 0x2a
 80052ba:	d135      	bne.n	8005328 <_svfiprintf_r+0x188>
 80052bc:	9b03      	ldr	r3, [sp, #12]
 80052be:	3402      	adds	r4, #2
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	9203      	str	r2, [sp, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bfb8      	it	lt
 80052ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80052ce:	9305      	str	r3, [sp, #20]
 80052d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005390 <_svfiprintf_r+0x1f0>
 80052d4:	2203      	movs	r2, #3
 80052d6:	4650      	mov	r0, sl
 80052d8:	7821      	ldrb	r1, [r4, #0]
 80052da:	f7ff fa77 	bl	80047cc <memchr>
 80052de:	b140      	cbz	r0, 80052f2 <_svfiprintf_r+0x152>
 80052e0:	2340      	movs	r3, #64	; 0x40
 80052e2:	eba0 000a 	sub.w	r0, r0, sl
 80052e6:	fa03 f000 	lsl.w	r0, r3, r0
 80052ea:	9b04      	ldr	r3, [sp, #16]
 80052ec:	3401      	adds	r4, #1
 80052ee:	4303      	orrs	r3, r0
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f6:	2206      	movs	r2, #6
 80052f8:	4826      	ldr	r0, [pc, #152]	; (8005394 <_svfiprintf_r+0x1f4>)
 80052fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052fe:	f7ff fa65 	bl	80047cc <memchr>
 8005302:	2800      	cmp	r0, #0
 8005304:	d038      	beq.n	8005378 <_svfiprintf_r+0x1d8>
 8005306:	4b24      	ldr	r3, [pc, #144]	; (8005398 <_svfiprintf_r+0x1f8>)
 8005308:	bb1b      	cbnz	r3, 8005352 <_svfiprintf_r+0x1b2>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	3307      	adds	r3, #7
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	3308      	adds	r3, #8
 8005314:	9303      	str	r3, [sp, #12]
 8005316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005318:	4433      	add	r3, r6
 800531a:	9309      	str	r3, [sp, #36]	; 0x24
 800531c:	e767      	b.n	80051ee <_svfiprintf_r+0x4e>
 800531e:	460c      	mov	r4, r1
 8005320:	2001      	movs	r0, #1
 8005322:	fb0c 3202 	mla	r2, ip, r2, r3
 8005326:	e7a5      	b.n	8005274 <_svfiprintf_r+0xd4>
 8005328:	2300      	movs	r3, #0
 800532a:	f04f 0c0a 	mov.w	ip, #10
 800532e:	4619      	mov	r1, r3
 8005330:	3401      	adds	r4, #1
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	4620      	mov	r0, r4
 8005336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800533a:	3a30      	subs	r2, #48	; 0x30
 800533c:	2a09      	cmp	r2, #9
 800533e:	d903      	bls.n	8005348 <_svfiprintf_r+0x1a8>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0c5      	beq.n	80052d0 <_svfiprintf_r+0x130>
 8005344:	9105      	str	r1, [sp, #20]
 8005346:	e7c3      	b.n	80052d0 <_svfiprintf_r+0x130>
 8005348:	4604      	mov	r4, r0
 800534a:	2301      	movs	r3, #1
 800534c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005350:	e7f0      	b.n	8005334 <_svfiprintf_r+0x194>
 8005352:	ab03      	add	r3, sp, #12
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	462a      	mov	r2, r5
 8005358:	4638      	mov	r0, r7
 800535a:	4b10      	ldr	r3, [pc, #64]	; (800539c <_svfiprintf_r+0x1fc>)
 800535c:	a904      	add	r1, sp, #16
 800535e:	f7fd ffcd 	bl	80032fc <_printf_float>
 8005362:	1c42      	adds	r2, r0, #1
 8005364:	4606      	mov	r6, r0
 8005366:	d1d6      	bne.n	8005316 <_svfiprintf_r+0x176>
 8005368:	89ab      	ldrh	r3, [r5, #12]
 800536a:	065b      	lsls	r3, r3, #25
 800536c:	f53f af2c 	bmi.w	80051c8 <_svfiprintf_r+0x28>
 8005370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005372:	b01d      	add	sp, #116	; 0x74
 8005374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005378:	ab03      	add	r3, sp, #12
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	462a      	mov	r2, r5
 800537e:	4638      	mov	r0, r7
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <_svfiprintf_r+0x1fc>)
 8005382:	a904      	add	r1, sp, #16
 8005384:	f7fe fa56 	bl	8003834 <_printf_i>
 8005388:	e7eb      	b.n	8005362 <_svfiprintf_r+0x1c2>
 800538a:	bf00      	nop
 800538c:	08006ff4 	.word	0x08006ff4
 8005390:	08006ffa 	.word	0x08006ffa
 8005394:	08006ffe 	.word	0x08006ffe
 8005398:	080032fd 	.word	0x080032fd
 800539c:	080050e9 	.word	0x080050e9

080053a0 <_sbrk_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	2300      	movs	r3, #0
 80053a4:	4d05      	ldr	r5, [pc, #20]	; (80053bc <_sbrk_r+0x1c>)
 80053a6:	4604      	mov	r4, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	602b      	str	r3, [r5, #0]
 80053ac:	f7fc fca8 	bl	8001d00 <_sbrk>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_sbrk_r+0x1a>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_sbrk_r+0x1a>
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	200002a0 	.word	0x200002a0

080053c0 <__assert_func>:
 80053c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053c2:	4614      	mov	r4, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	4b09      	ldr	r3, [pc, #36]	; (80053ec <__assert_func+0x2c>)
 80053c8:	4605      	mov	r5, r0
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68d8      	ldr	r0, [r3, #12]
 80053ce:	b14c      	cbz	r4, 80053e4 <__assert_func+0x24>
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <__assert_func+0x30>)
 80053d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053d6:	9100      	str	r1, [sp, #0]
 80053d8:	462b      	mov	r3, r5
 80053da:	4906      	ldr	r1, [pc, #24]	; (80053f4 <__assert_func+0x34>)
 80053dc:	f000 f80e 	bl	80053fc <fiprintf>
 80053e0:	f000 faaa 	bl	8005938 <abort>
 80053e4:	4b04      	ldr	r3, [pc, #16]	; (80053f8 <__assert_func+0x38>)
 80053e6:	461c      	mov	r4, r3
 80053e8:	e7f3      	b.n	80053d2 <__assert_func+0x12>
 80053ea:	bf00      	nop
 80053ec:	2000000c 	.word	0x2000000c
 80053f0:	08007005 	.word	0x08007005
 80053f4:	08007012 	.word	0x08007012
 80053f8:	08007040 	.word	0x08007040

080053fc <fiprintf>:
 80053fc:	b40e      	push	{r1, r2, r3}
 80053fe:	b503      	push	{r0, r1, lr}
 8005400:	4601      	mov	r1, r0
 8005402:	ab03      	add	r3, sp, #12
 8005404:	4805      	ldr	r0, [pc, #20]	; (800541c <fiprintf+0x20>)
 8005406:	f853 2b04 	ldr.w	r2, [r3], #4
 800540a:	6800      	ldr	r0, [r0, #0]
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	f000 f895 	bl	800553c <_vfiprintf_r>
 8005412:	b002      	add	sp, #8
 8005414:	f85d eb04 	ldr.w	lr, [sp], #4
 8005418:	b003      	add	sp, #12
 800541a:	4770      	bx	lr
 800541c:	2000000c 	.word	0x2000000c

08005420 <__ascii_mbtowc>:
 8005420:	b082      	sub	sp, #8
 8005422:	b901      	cbnz	r1, 8005426 <__ascii_mbtowc+0x6>
 8005424:	a901      	add	r1, sp, #4
 8005426:	b142      	cbz	r2, 800543a <__ascii_mbtowc+0x1a>
 8005428:	b14b      	cbz	r3, 800543e <__ascii_mbtowc+0x1e>
 800542a:	7813      	ldrb	r3, [r2, #0]
 800542c:	600b      	str	r3, [r1, #0]
 800542e:	7812      	ldrb	r2, [r2, #0]
 8005430:	1e10      	subs	r0, r2, #0
 8005432:	bf18      	it	ne
 8005434:	2001      	movne	r0, #1
 8005436:	b002      	add	sp, #8
 8005438:	4770      	bx	lr
 800543a:	4610      	mov	r0, r2
 800543c:	e7fb      	b.n	8005436 <__ascii_mbtowc+0x16>
 800543e:	f06f 0001 	mvn.w	r0, #1
 8005442:	e7f8      	b.n	8005436 <__ascii_mbtowc+0x16>

08005444 <memmove>:
 8005444:	4288      	cmp	r0, r1
 8005446:	b510      	push	{r4, lr}
 8005448:	eb01 0402 	add.w	r4, r1, r2
 800544c:	d902      	bls.n	8005454 <memmove+0x10>
 800544e:	4284      	cmp	r4, r0
 8005450:	4623      	mov	r3, r4
 8005452:	d807      	bhi.n	8005464 <memmove+0x20>
 8005454:	1e43      	subs	r3, r0, #1
 8005456:	42a1      	cmp	r1, r4
 8005458:	d008      	beq.n	800546c <memmove+0x28>
 800545a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800545e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005462:	e7f8      	b.n	8005456 <memmove+0x12>
 8005464:	4601      	mov	r1, r0
 8005466:	4402      	add	r2, r0
 8005468:	428a      	cmp	r2, r1
 800546a:	d100      	bne.n	800546e <memmove+0x2a>
 800546c:	bd10      	pop	{r4, pc}
 800546e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005476:	e7f7      	b.n	8005468 <memmove+0x24>

08005478 <__malloc_lock>:
 8005478:	4801      	ldr	r0, [pc, #4]	; (8005480 <__malloc_lock+0x8>)
 800547a:	f000 bc19 	b.w	8005cb0 <__retarget_lock_acquire_recursive>
 800547e:	bf00      	nop
 8005480:	200002a4 	.word	0x200002a4

08005484 <__malloc_unlock>:
 8005484:	4801      	ldr	r0, [pc, #4]	; (800548c <__malloc_unlock+0x8>)
 8005486:	f000 bc14 	b.w	8005cb2 <__retarget_lock_release_recursive>
 800548a:	bf00      	nop
 800548c:	200002a4 	.word	0x200002a4

08005490 <_realloc_r>:
 8005490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005494:	4680      	mov	r8, r0
 8005496:	4614      	mov	r4, r2
 8005498:	460e      	mov	r6, r1
 800549a:	b921      	cbnz	r1, 80054a6 <_realloc_r+0x16>
 800549c:	4611      	mov	r1, r2
 800549e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a2:	f7ff bdad 	b.w	8005000 <_malloc_r>
 80054a6:	b92a      	cbnz	r2, 80054b4 <_realloc_r+0x24>
 80054a8:	f7ff fd42 	bl	8004f30 <_free_r>
 80054ac:	4625      	mov	r5, r4
 80054ae:	4628      	mov	r0, r5
 80054b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b4:	f000 fc64 	bl	8005d80 <_malloc_usable_size_r>
 80054b8:	4284      	cmp	r4, r0
 80054ba:	4607      	mov	r7, r0
 80054bc:	d802      	bhi.n	80054c4 <_realloc_r+0x34>
 80054be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054c2:	d812      	bhi.n	80054ea <_realloc_r+0x5a>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4640      	mov	r0, r8
 80054c8:	f7ff fd9a 	bl	8005000 <_malloc_r>
 80054cc:	4605      	mov	r5, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d0ed      	beq.n	80054ae <_realloc_r+0x1e>
 80054d2:	42bc      	cmp	r4, r7
 80054d4:	4622      	mov	r2, r4
 80054d6:	4631      	mov	r1, r6
 80054d8:	bf28      	it	cs
 80054da:	463a      	movcs	r2, r7
 80054dc:	f7ff f984 	bl	80047e8 <memcpy>
 80054e0:	4631      	mov	r1, r6
 80054e2:	4640      	mov	r0, r8
 80054e4:	f7ff fd24 	bl	8004f30 <_free_r>
 80054e8:	e7e1      	b.n	80054ae <_realloc_r+0x1e>
 80054ea:	4635      	mov	r5, r6
 80054ec:	e7df      	b.n	80054ae <_realloc_r+0x1e>

080054ee <__sfputc_r>:
 80054ee:	6893      	ldr	r3, [r2, #8]
 80054f0:	b410      	push	{r4}
 80054f2:	3b01      	subs	r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	6093      	str	r3, [r2, #8]
 80054f8:	da07      	bge.n	800550a <__sfputc_r+0x1c>
 80054fa:	6994      	ldr	r4, [r2, #24]
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	db01      	blt.n	8005504 <__sfputc_r+0x16>
 8005500:	290a      	cmp	r1, #10
 8005502:	d102      	bne.n	800550a <__sfputc_r+0x1c>
 8005504:	bc10      	pop	{r4}
 8005506:	f000 b949 	b.w	800579c <__swbuf_r>
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	1c58      	adds	r0, r3, #1
 800550e:	6010      	str	r0, [r2, #0]
 8005510:	7019      	strb	r1, [r3, #0]
 8005512:	4608      	mov	r0, r1
 8005514:	bc10      	pop	{r4}
 8005516:	4770      	bx	lr

08005518 <__sfputs_r>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	4606      	mov	r6, r0
 800551c:	460f      	mov	r7, r1
 800551e:	4614      	mov	r4, r2
 8005520:	18d5      	adds	r5, r2, r3
 8005522:	42ac      	cmp	r4, r5
 8005524:	d101      	bne.n	800552a <__sfputs_r+0x12>
 8005526:	2000      	movs	r0, #0
 8005528:	e007      	b.n	800553a <__sfputs_r+0x22>
 800552a:	463a      	mov	r2, r7
 800552c:	4630      	mov	r0, r6
 800552e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005532:	f7ff ffdc 	bl	80054ee <__sfputc_r>
 8005536:	1c43      	adds	r3, r0, #1
 8005538:	d1f3      	bne.n	8005522 <__sfputs_r+0xa>
 800553a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800553c <_vfiprintf_r>:
 800553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005540:	460d      	mov	r5, r1
 8005542:	4614      	mov	r4, r2
 8005544:	4698      	mov	r8, r3
 8005546:	4606      	mov	r6, r0
 8005548:	b09d      	sub	sp, #116	; 0x74
 800554a:	b118      	cbz	r0, 8005554 <_vfiprintf_r+0x18>
 800554c:	6983      	ldr	r3, [r0, #24]
 800554e:	b90b      	cbnz	r3, 8005554 <_vfiprintf_r+0x18>
 8005550:	f000 fb10 	bl	8005b74 <__sinit>
 8005554:	4b89      	ldr	r3, [pc, #548]	; (800577c <_vfiprintf_r+0x240>)
 8005556:	429d      	cmp	r5, r3
 8005558:	d11b      	bne.n	8005592 <_vfiprintf_r+0x56>
 800555a:	6875      	ldr	r5, [r6, #4]
 800555c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800555e:	07d9      	lsls	r1, r3, #31
 8005560:	d405      	bmi.n	800556e <_vfiprintf_r+0x32>
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	059a      	lsls	r2, r3, #22
 8005566:	d402      	bmi.n	800556e <_vfiprintf_r+0x32>
 8005568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800556a:	f000 fba1 	bl	8005cb0 <__retarget_lock_acquire_recursive>
 800556e:	89ab      	ldrh	r3, [r5, #12]
 8005570:	071b      	lsls	r3, r3, #28
 8005572:	d501      	bpl.n	8005578 <_vfiprintf_r+0x3c>
 8005574:	692b      	ldr	r3, [r5, #16]
 8005576:	b9eb      	cbnz	r3, 80055b4 <_vfiprintf_r+0x78>
 8005578:	4629      	mov	r1, r5
 800557a:	4630      	mov	r0, r6
 800557c:	f000 f96e 	bl	800585c <__swsetup_r>
 8005580:	b1c0      	cbz	r0, 80055b4 <_vfiprintf_r+0x78>
 8005582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005584:	07dc      	lsls	r4, r3, #31
 8005586:	d50e      	bpl.n	80055a6 <_vfiprintf_r+0x6a>
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	b01d      	add	sp, #116	; 0x74
 800558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005592:	4b7b      	ldr	r3, [pc, #492]	; (8005780 <_vfiprintf_r+0x244>)
 8005594:	429d      	cmp	r5, r3
 8005596:	d101      	bne.n	800559c <_vfiprintf_r+0x60>
 8005598:	68b5      	ldr	r5, [r6, #8]
 800559a:	e7df      	b.n	800555c <_vfiprintf_r+0x20>
 800559c:	4b79      	ldr	r3, [pc, #484]	; (8005784 <_vfiprintf_r+0x248>)
 800559e:	429d      	cmp	r5, r3
 80055a0:	bf08      	it	eq
 80055a2:	68f5      	ldreq	r5, [r6, #12]
 80055a4:	e7da      	b.n	800555c <_vfiprintf_r+0x20>
 80055a6:	89ab      	ldrh	r3, [r5, #12]
 80055a8:	0598      	lsls	r0, r3, #22
 80055aa:	d4ed      	bmi.n	8005588 <_vfiprintf_r+0x4c>
 80055ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ae:	f000 fb80 	bl	8005cb2 <__retarget_lock_release_recursive>
 80055b2:	e7e9      	b.n	8005588 <_vfiprintf_r+0x4c>
 80055b4:	2300      	movs	r3, #0
 80055b6:	9309      	str	r3, [sp, #36]	; 0x24
 80055b8:	2320      	movs	r3, #32
 80055ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055be:	2330      	movs	r3, #48	; 0x30
 80055c0:	f04f 0901 	mov.w	r9, #1
 80055c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80055c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005788 <_vfiprintf_r+0x24c>
 80055cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055d0:	4623      	mov	r3, r4
 80055d2:	469a      	mov	sl, r3
 80055d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055d8:	b10a      	cbz	r2, 80055de <_vfiprintf_r+0xa2>
 80055da:	2a25      	cmp	r2, #37	; 0x25
 80055dc:	d1f9      	bne.n	80055d2 <_vfiprintf_r+0x96>
 80055de:	ebba 0b04 	subs.w	fp, sl, r4
 80055e2:	d00b      	beq.n	80055fc <_vfiprintf_r+0xc0>
 80055e4:	465b      	mov	r3, fp
 80055e6:	4622      	mov	r2, r4
 80055e8:	4629      	mov	r1, r5
 80055ea:	4630      	mov	r0, r6
 80055ec:	f7ff ff94 	bl	8005518 <__sfputs_r>
 80055f0:	3001      	adds	r0, #1
 80055f2:	f000 80aa 	beq.w	800574a <_vfiprintf_r+0x20e>
 80055f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055f8:	445a      	add	r2, fp
 80055fa:	9209      	str	r2, [sp, #36]	; 0x24
 80055fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80a2 	beq.w	800574a <_vfiprintf_r+0x20e>
 8005606:	2300      	movs	r3, #0
 8005608:	f04f 32ff 	mov.w	r2, #4294967295
 800560c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005610:	f10a 0a01 	add.w	sl, sl, #1
 8005614:	9304      	str	r3, [sp, #16]
 8005616:	9307      	str	r3, [sp, #28]
 8005618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800561c:	931a      	str	r3, [sp, #104]	; 0x68
 800561e:	4654      	mov	r4, sl
 8005620:	2205      	movs	r2, #5
 8005622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005626:	4858      	ldr	r0, [pc, #352]	; (8005788 <_vfiprintf_r+0x24c>)
 8005628:	f7ff f8d0 	bl	80047cc <memchr>
 800562c:	9a04      	ldr	r2, [sp, #16]
 800562e:	b9d8      	cbnz	r0, 8005668 <_vfiprintf_r+0x12c>
 8005630:	06d1      	lsls	r1, r2, #27
 8005632:	bf44      	itt	mi
 8005634:	2320      	movmi	r3, #32
 8005636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800563a:	0713      	lsls	r3, r2, #28
 800563c:	bf44      	itt	mi
 800563e:	232b      	movmi	r3, #43	; 0x2b
 8005640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005644:	f89a 3000 	ldrb.w	r3, [sl]
 8005648:	2b2a      	cmp	r3, #42	; 0x2a
 800564a:	d015      	beq.n	8005678 <_vfiprintf_r+0x13c>
 800564c:	4654      	mov	r4, sl
 800564e:	2000      	movs	r0, #0
 8005650:	f04f 0c0a 	mov.w	ip, #10
 8005654:	9a07      	ldr	r2, [sp, #28]
 8005656:	4621      	mov	r1, r4
 8005658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800565c:	3b30      	subs	r3, #48	; 0x30
 800565e:	2b09      	cmp	r3, #9
 8005660:	d94e      	bls.n	8005700 <_vfiprintf_r+0x1c4>
 8005662:	b1b0      	cbz	r0, 8005692 <_vfiprintf_r+0x156>
 8005664:	9207      	str	r2, [sp, #28]
 8005666:	e014      	b.n	8005692 <_vfiprintf_r+0x156>
 8005668:	eba0 0308 	sub.w	r3, r0, r8
 800566c:	fa09 f303 	lsl.w	r3, r9, r3
 8005670:	4313      	orrs	r3, r2
 8005672:	46a2      	mov	sl, r4
 8005674:	9304      	str	r3, [sp, #16]
 8005676:	e7d2      	b.n	800561e <_vfiprintf_r+0xe2>
 8005678:	9b03      	ldr	r3, [sp, #12]
 800567a:	1d19      	adds	r1, r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	9103      	str	r1, [sp, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	bfbb      	ittet	lt
 8005684:	425b      	neglt	r3, r3
 8005686:	f042 0202 	orrlt.w	r2, r2, #2
 800568a:	9307      	strge	r3, [sp, #28]
 800568c:	9307      	strlt	r3, [sp, #28]
 800568e:	bfb8      	it	lt
 8005690:	9204      	strlt	r2, [sp, #16]
 8005692:	7823      	ldrb	r3, [r4, #0]
 8005694:	2b2e      	cmp	r3, #46	; 0x2e
 8005696:	d10c      	bne.n	80056b2 <_vfiprintf_r+0x176>
 8005698:	7863      	ldrb	r3, [r4, #1]
 800569a:	2b2a      	cmp	r3, #42	; 0x2a
 800569c:	d135      	bne.n	800570a <_vfiprintf_r+0x1ce>
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	3402      	adds	r4, #2
 80056a2:	1d1a      	adds	r2, r3, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	9203      	str	r2, [sp, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bfb8      	it	lt
 80056ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80056b0:	9305      	str	r3, [sp, #20]
 80056b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800578c <_vfiprintf_r+0x250>
 80056b6:	2203      	movs	r2, #3
 80056b8:	4650      	mov	r0, sl
 80056ba:	7821      	ldrb	r1, [r4, #0]
 80056bc:	f7ff f886 	bl	80047cc <memchr>
 80056c0:	b140      	cbz	r0, 80056d4 <_vfiprintf_r+0x198>
 80056c2:	2340      	movs	r3, #64	; 0x40
 80056c4:	eba0 000a 	sub.w	r0, r0, sl
 80056c8:	fa03 f000 	lsl.w	r0, r3, r0
 80056cc:	9b04      	ldr	r3, [sp, #16]
 80056ce:	3401      	adds	r4, #1
 80056d0:	4303      	orrs	r3, r0
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d8:	2206      	movs	r2, #6
 80056da:	482d      	ldr	r0, [pc, #180]	; (8005790 <_vfiprintf_r+0x254>)
 80056dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056e0:	f7ff f874 	bl	80047cc <memchr>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d03f      	beq.n	8005768 <_vfiprintf_r+0x22c>
 80056e8:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <_vfiprintf_r+0x258>)
 80056ea:	bb1b      	cbnz	r3, 8005734 <_vfiprintf_r+0x1f8>
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	3307      	adds	r3, #7
 80056f0:	f023 0307 	bic.w	r3, r3, #7
 80056f4:	3308      	adds	r3, #8
 80056f6:	9303      	str	r3, [sp, #12]
 80056f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fa:	443b      	add	r3, r7
 80056fc:	9309      	str	r3, [sp, #36]	; 0x24
 80056fe:	e767      	b.n	80055d0 <_vfiprintf_r+0x94>
 8005700:	460c      	mov	r4, r1
 8005702:	2001      	movs	r0, #1
 8005704:	fb0c 3202 	mla	r2, ip, r2, r3
 8005708:	e7a5      	b.n	8005656 <_vfiprintf_r+0x11a>
 800570a:	2300      	movs	r3, #0
 800570c:	f04f 0c0a 	mov.w	ip, #10
 8005710:	4619      	mov	r1, r3
 8005712:	3401      	adds	r4, #1
 8005714:	9305      	str	r3, [sp, #20]
 8005716:	4620      	mov	r0, r4
 8005718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800571c:	3a30      	subs	r2, #48	; 0x30
 800571e:	2a09      	cmp	r2, #9
 8005720:	d903      	bls.n	800572a <_vfiprintf_r+0x1ee>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0c5      	beq.n	80056b2 <_vfiprintf_r+0x176>
 8005726:	9105      	str	r1, [sp, #20]
 8005728:	e7c3      	b.n	80056b2 <_vfiprintf_r+0x176>
 800572a:	4604      	mov	r4, r0
 800572c:	2301      	movs	r3, #1
 800572e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005732:	e7f0      	b.n	8005716 <_vfiprintf_r+0x1da>
 8005734:	ab03      	add	r3, sp, #12
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	462a      	mov	r2, r5
 800573a:	4630      	mov	r0, r6
 800573c:	4b16      	ldr	r3, [pc, #88]	; (8005798 <_vfiprintf_r+0x25c>)
 800573e:	a904      	add	r1, sp, #16
 8005740:	f7fd fddc 	bl	80032fc <_printf_float>
 8005744:	4607      	mov	r7, r0
 8005746:	1c78      	adds	r0, r7, #1
 8005748:	d1d6      	bne.n	80056f8 <_vfiprintf_r+0x1bc>
 800574a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800574c:	07d9      	lsls	r1, r3, #31
 800574e:	d405      	bmi.n	800575c <_vfiprintf_r+0x220>
 8005750:	89ab      	ldrh	r3, [r5, #12]
 8005752:	059a      	lsls	r2, r3, #22
 8005754:	d402      	bmi.n	800575c <_vfiprintf_r+0x220>
 8005756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005758:	f000 faab 	bl	8005cb2 <__retarget_lock_release_recursive>
 800575c:	89ab      	ldrh	r3, [r5, #12]
 800575e:	065b      	lsls	r3, r3, #25
 8005760:	f53f af12 	bmi.w	8005588 <_vfiprintf_r+0x4c>
 8005764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005766:	e711      	b.n	800558c <_vfiprintf_r+0x50>
 8005768:	ab03      	add	r3, sp, #12
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	462a      	mov	r2, r5
 800576e:	4630      	mov	r0, r6
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <_vfiprintf_r+0x25c>)
 8005772:	a904      	add	r1, sp, #16
 8005774:	f7fe f85e 	bl	8003834 <_printf_i>
 8005778:	e7e4      	b.n	8005744 <_vfiprintf_r+0x208>
 800577a:	bf00      	nop
 800577c:	0800716c 	.word	0x0800716c
 8005780:	0800718c 	.word	0x0800718c
 8005784:	0800714c 	.word	0x0800714c
 8005788:	08006ff4 	.word	0x08006ff4
 800578c:	08006ffa 	.word	0x08006ffa
 8005790:	08006ffe 	.word	0x08006ffe
 8005794:	080032fd 	.word	0x080032fd
 8005798:	08005519 	.word	0x08005519

0800579c <__swbuf_r>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	460e      	mov	r6, r1
 80057a0:	4614      	mov	r4, r2
 80057a2:	4605      	mov	r5, r0
 80057a4:	b118      	cbz	r0, 80057ae <__swbuf_r+0x12>
 80057a6:	6983      	ldr	r3, [r0, #24]
 80057a8:	b90b      	cbnz	r3, 80057ae <__swbuf_r+0x12>
 80057aa:	f000 f9e3 	bl	8005b74 <__sinit>
 80057ae:	4b21      	ldr	r3, [pc, #132]	; (8005834 <__swbuf_r+0x98>)
 80057b0:	429c      	cmp	r4, r3
 80057b2:	d12b      	bne.n	800580c <__swbuf_r+0x70>
 80057b4:	686c      	ldr	r4, [r5, #4]
 80057b6:	69a3      	ldr	r3, [r4, #24]
 80057b8:	60a3      	str	r3, [r4, #8]
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	071a      	lsls	r2, r3, #28
 80057be:	d52f      	bpl.n	8005820 <__swbuf_r+0x84>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	b36b      	cbz	r3, 8005820 <__swbuf_r+0x84>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	b2f6      	uxtb	r6, r6
 80057ca:	1ac0      	subs	r0, r0, r3
 80057cc:	6963      	ldr	r3, [r4, #20]
 80057ce:	4637      	mov	r7, r6
 80057d0:	4283      	cmp	r3, r0
 80057d2:	dc04      	bgt.n	80057de <__swbuf_r+0x42>
 80057d4:	4621      	mov	r1, r4
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 f938 	bl	8005a4c <_fflush_r>
 80057dc:	bb30      	cbnz	r0, 800582c <__swbuf_r+0x90>
 80057de:	68a3      	ldr	r3, [r4, #8]
 80057e0:	3001      	adds	r0, #1
 80057e2:	3b01      	subs	r3, #1
 80057e4:	60a3      	str	r3, [r4, #8]
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	6022      	str	r2, [r4, #0]
 80057ec:	701e      	strb	r6, [r3, #0]
 80057ee:	6963      	ldr	r3, [r4, #20]
 80057f0:	4283      	cmp	r3, r0
 80057f2:	d004      	beq.n	80057fe <__swbuf_r+0x62>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	07db      	lsls	r3, r3, #31
 80057f8:	d506      	bpl.n	8005808 <__swbuf_r+0x6c>
 80057fa:	2e0a      	cmp	r6, #10
 80057fc:	d104      	bne.n	8005808 <__swbuf_r+0x6c>
 80057fe:	4621      	mov	r1, r4
 8005800:	4628      	mov	r0, r5
 8005802:	f000 f923 	bl	8005a4c <_fflush_r>
 8005806:	b988      	cbnz	r0, 800582c <__swbuf_r+0x90>
 8005808:	4638      	mov	r0, r7
 800580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <__swbuf_r+0x9c>)
 800580e:	429c      	cmp	r4, r3
 8005810:	d101      	bne.n	8005816 <__swbuf_r+0x7a>
 8005812:	68ac      	ldr	r4, [r5, #8]
 8005814:	e7cf      	b.n	80057b6 <__swbuf_r+0x1a>
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <__swbuf_r+0xa0>)
 8005818:	429c      	cmp	r4, r3
 800581a:	bf08      	it	eq
 800581c:	68ec      	ldreq	r4, [r5, #12]
 800581e:	e7ca      	b.n	80057b6 <__swbuf_r+0x1a>
 8005820:	4621      	mov	r1, r4
 8005822:	4628      	mov	r0, r5
 8005824:	f000 f81a 	bl	800585c <__swsetup_r>
 8005828:	2800      	cmp	r0, #0
 800582a:	d0cb      	beq.n	80057c4 <__swbuf_r+0x28>
 800582c:	f04f 37ff 	mov.w	r7, #4294967295
 8005830:	e7ea      	b.n	8005808 <__swbuf_r+0x6c>
 8005832:	bf00      	nop
 8005834:	0800716c 	.word	0x0800716c
 8005838:	0800718c 	.word	0x0800718c
 800583c:	0800714c 	.word	0x0800714c

08005840 <__ascii_wctomb>:
 8005840:	4603      	mov	r3, r0
 8005842:	4608      	mov	r0, r1
 8005844:	b141      	cbz	r1, 8005858 <__ascii_wctomb+0x18>
 8005846:	2aff      	cmp	r2, #255	; 0xff
 8005848:	d904      	bls.n	8005854 <__ascii_wctomb+0x14>
 800584a:	228a      	movs	r2, #138	; 0x8a
 800584c:	f04f 30ff 	mov.w	r0, #4294967295
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	4770      	bx	lr
 8005854:	2001      	movs	r0, #1
 8005856:	700a      	strb	r2, [r1, #0]
 8005858:	4770      	bx	lr
	...

0800585c <__swsetup_r>:
 800585c:	4b32      	ldr	r3, [pc, #200]	; (8005928 <__swsetup_r+0xcc>)
 800585e:	b570      	push	{r4, r5, r6, lr}
 8005860:	681d      	ldr	r5, [r3, #0]
 8005862:	4606      	mov	r6, r0
 8005864:	460c      	mov	r4, r1
 8005866:	b125      	cbz	r5, 8005872 <__swsetup_r+0x16>
 8005868:	69ab      	ldr	r3, [r5, #24]
 800586a:	b913      	cbnz	r3, 8005872 <__swsetup_r+0x16>
 800586c:	4628      	mov	r0, r5
 800586e:	f000 f981 	bl	8005b74 <__sinit>
 8005872:	4b2e      	ldr	r3, [pc, #184]	; (800592c <__swsetup_r+0xd0>)
 8005874:	429c      	cmp	r4, r3
 8005876:	d10f      	bne.n	8005898 <__swsetup_r+0x3c>
 8005878:	686c      	ldr	r4, [r5, #4]
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005880:	0719      	lsls	r1, r3, #28
 8005882:	d42c      	bmi.n	80058de <__swsetup_r+0x82>
 8005884:	06dd      	lsls	r5, r3, #27
 8005886:	d411      	bmi.n	80058ac <__swsetup_r+0x50>
 8005888:	2309      	movs	r3, #9
 800588a:	6033      	str	r3, [r6, #0]
 800588c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	81a3      	strh	r3, [r4, #12]
 8005896:	e03e      	b.n	8005916 <__swsetup_r+0xba>
 8005898:	4b25      	ldr	r3, [pc, #148]	; (8005930 <__swsetup_r+0xd4>)
 800589a:	429c      	cmp	r4, r3
 800589c:	d101      	bne.n	80058a2 <__swsetup_r+0x46>
 800589e:	68ac      	ldr	r4, [r5, #8]
 80058a0:	e7eb      	b.n	800587a <__swsetup_r+0x1e>
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <__swsetup_r+0xd8>)
 80058a4:	429c      	cmp	r4, r3
 80058a6:	bf08      	it	eq
 80058a8:	68ec      	ldreq	r4, [r5, #12]
 80058aa:	e7e6      	b.n	800587a <__swsetup_r+0x1e>
 80058ac:	0758      	lsls	r0, r3, #29
 80058ae:	d512      	bpl.n	80058d6 <__swsetup_r+0x7a>
 80058b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058b2:	b141      	cbz	r1, 80058c6 <__swsetup_r+0x6a>
 80058b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b8:	4299      	cmp	r1, r3
 80058ba:	d002      	beq.n	80058c2 <__swsetup_r+0x66>
 80058bc:	4630      	mov	r0, r6
 80058be:	f7ff fb37 	bl	8004f30 <_free_r>
 80058c2:	2300      	movs	r3, #0
 80058c4:	6363      	str	r3, [r4, #52]	; 0x34
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	2300      	movs	r3, #0
 80058d0:	6063      	str	r3, [r4, #4]
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	89a3      	ldrh	r3, [r4, #12]
 80058d8:	f043 0308 	orr.w	r3, r3, #8
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	b94b      	cbnz	r3, 80058f6 <__swsetup_r+0x9a>
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ec:	d003      	beq.n	80058f6 <__swsetup_r+0x9a>
 80058ee:	4621      	mov	r1, r4
 80058f0:	4630      	mov	r0, r6
 80058f2:	f000 fa05 	bl	8005d00 <__smakebuf_r>
 80058f6:	89a0      	ldrh	r0, [r4, #12]
 80058f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058fc:	f010 0301 	ands.w	r3, r0, #1
 8005900:	d00a      	beq.n	8005918 <__swsetup_r+0xbc>
 8005902:	2300      	movs	r3, #0
 8005904:	60a3      	str	r3, [r4, #8]
 8005906:	6963      	ldr	r3, [r4, #20]
 8005908:	425b      	negs	r3, r3
 800590a:	61a3      	str	r3, [r4, #24]
 800590c:	6923      	ldr	r3, [r4, #16]
 800590e:	b943      	cbnz	r3, 8005922 <__swsetup_r+0xc6>
 8005910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005914:	d1ba      	bne.n	800588c <__swsetup_r+0x30>
 8005916:	bd70      	pop	{r4, r5, r6, pc}
 8005918:	0781      	lsls	r1, r0, #30
 800591a:	bf58      	it	pl
 800591c:	6963      	ldrpl	r3, [r4, #20]
 800591e:	60a3      	str	r3, [r4, #8]
 8005920:	e7f4      	b.n	800590c <__swsetup_r+0xb0>
 8005922:	2000      	movs	r0, #0
 8005924:	e7f7      	b.n	8005916 <__swsetup_r+0xba>
 8005926:	bf00      	nop
 8005928:	2000000c 	.word	0x2000000c
 800592c:	0800716c 	.word	0x0800716c
 8005930:	0800718c 	.word	0x0800718c
 8005934:	0800714c 	.word	0x0800714c

08005938 <abort>:
 8005938:	2006      	movs	r0, #6
 800593a:	b508      	push	{r3, lr}
 800593c:	f000 fa50 	bl	8005de0 <raise>
 8005940:	2001      	movs	r0, #1
 8005942:	f7fc f969 	bl	8001c18 <_exit>
	...

08005948 <__sflush_r>:
 8005948:	898a      	ldrh	r2, [r1, #12]
 800594a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594c:	4605      	mov	r5, r0
 800594e:	0710      	lsls	r0, r2, #28
 8005950:	460c      	mov	r4, r1
 8005952:	d457      	bmi.n	8005a04 <__sflush_r+0xbc>
 8005954:	684b      	ldr	r3, [r1, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	dc04      	bgt.n	8005964 <__sflush_r+0x1c>
 800595a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	dc01      	bgt.n	8005964 <__sflush_r+0x1c>
 8005960:	2000      	movs	r0, #0
 8005962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005966:	2e00      	cmp	r6, #0
 8005968:	d0fa      	beq.n	8005960 <__sflush_r+0x18>
 800596a:	2300      	movs	r3, #0
 800596c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005970:	682f      	ldr	r7, [r5, #0]
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	d032      	beq.n	80059dc <__sflush_r+0x94>
 8005976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	075a      	lsls	r2, r3, #29
 800597c:	d505      	bpl.n	800598a <__sflush_r+0x42>
 800597e:	6863      	ldr	r3, [r4, #4]
 8005980:	1ac0      	subs	r0, r0, r3
 8005982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005984:	b10b      	cbz	r3, 800598a <__sflush_r+0x42>
 8005986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005988:	1ac0      	subs	r0, r0, r3
 800598a:	2300      	movs	r3, #0
 800598c:	4602      	mov	r2, r0
 800598e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005990:	4628      	mov	r0, r5
 8005992:	6a21      	ldr	r1, [r4, #32]
 8005994:	47b0      	blx	r6
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	d106      	bne.n	80059aa <__sflush_r+0x62>
 800599c:	6829      	ldr	r1, [r5, #0]
 800599e:	291d      	cmp	r1, #29
 80059a0:	d82c      	bhi.n	80059fc <__sflush_r+0xb4>
 80059a2:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <__sflush_r+0x100>)
 80059a4:	40ca      	lsrs	r2, r1
 80059a6:	07d6      	lsls	r6, r2, #31
 80059a8:	d528      	bpl.n	80059fc <__sflush_r+0xb4>
 80059aa:	2200      	movs	r2, #0
 80059ac:	6062      	str	r2, [r4, #4]
 80059ae:	6922      	ldr	r2, [r4, #16]
 80059b0:	04d9      	lsls	r1, r3, #19
 80059b2:	6022      	str	r2, [r4, #0]
 80059b4:	d504      	bpl.n	80059c0 <__sflush_r+0x78>
 80059b6:	1c42      	adds	r2, r0, #1
 80059b8:	d101      	bne.n	80059be <__sflush_r+0x76>
 80059ba:	682b      	ldr	r3, [r5, #0]
 80059bc:	b903      	cbnz	r3, 80059c0 <__sflush_r+0x78>
 80059be:	6560      	str	r0, [r4, #84]	; 0x54
 80059c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059c2:	602f      	str	r7, [r5, #0]
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d0cb      	beq.n	8005960 <__sflush_r+0x18>
 80059c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059cc:	4299      	cmp	r1, r3
 80059ce:	d002      	beq.n	80059d6 <__sflush_r+0x8e>
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff faad 	bl	8004f30 <_free_r>
 80059d6:	2000      	movs	r0, #0
 80059d8:	6360      	str	r0, [r4, #52]	; 0x34
 80059da:	e7c2      	b.n	8005962 <__sflush_r+0x1a>
 80059dc:	6a21      	ldr	r1, [r4, #32]
 80059de:	2301      	movs	r3, #1
 80059e0:	4628      	mov	r0, r5
 80059e2:	47b0      	blx	r6
 80059e4:	1c41      	adds	r1, r0, #1
 80059e6:	d1c7      	bne.n	8005978 <__sflush_r+0x30>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0c4      	beq.n	8005978 <__sflush_r+0x30>
 80059ee:	2b1d      	cmp	r3, #29
 80059f0:	d001      	beq.n	80059f6 <__sflush_r+0xae>
 80059f2:	2b16      	cmp	r3, #22
 80059f4:	d101      	bne.n	80059fa <__sflush_r+0xb2>
 80059f6:	602f      	str	r7, [r5, #0]
 80059f8:	e7b2      	b.n	8005960 <__sflush_r+0x18>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	e7ae      	b.n	8005962 <__sflush_r+0x1a>
 8005a04:	690f      	ldr	r7, [r1, #16]
 8005a06:	2f00      	cmp	r7, #0
 8005a08:	d0aa      	beq.n	8005960 <__sflush_r+0x18>
 8005a0a:	0793      	lsls	r3, r2, #30
 8005a0c:	bf18      	it	ne
 8005a0e:	2300      	movne	r3, #0
 8005a10:	680e      	ldr	r6, [r1, #0]
 8005a12:	bf08      	it	eq
 8005a14:	694b      	ldreq	r3, [r1, #20]
 8005a16:	1bf6      	subs	r6, r6, r7
 8005a18:	600f      	str	r7, [r1, #0]
 8005a1a:	608b      	str	r3, [r1, #8]
 8005a1c:	2e00      	cmp	r6, #0
 8005a1e:	dd9f      	ble.n	8005960 <__sflush_r+0x18>
 8005a20:	4633      	mov	r3, r6
 8005a22:	463a      	mov	r2, r7
 8005a24:	4628      	mov	r0, r5
 8005a26:	6a21      	ldr	r1, [r4, #32]
 8005a28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005a2c:	47e0      	blx	ip
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	dc06      	bgt.n	8005a40 <__sflush_r+0xf8>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a3c:	81a3      	strh	r3, [r4, #12]
 8005a3e:	e790      	b.n	8005962 <__sflush_r+0x1a>
 8005a40:	4407      	add	r7, r0
 8005a42:	1a36      	subs	r6, r6, r0
 8005a44:	e7ea      	b.n	8005a1c <__sflush_r+0xd4>
 8005a46:	bf00      	nop
 8005a48:	20400001 	.word	0x20400001

08005a4c <_fflush_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	690b      	ldr	r3, [r1, #16]
 8005a50:	4605      	mov	r5, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	b913      	cbnz	r3, 8005a5c <_fflush_r+0x10>
 8005a56:	2500      	movs	r5, #0
 8005a58:	4628      	mov	r0, r5
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	b118      	cbz	r0, 8005a66 <_fflush_r+0x1a>
 8005a5e:	6983      	ldr	r3, [r0, #24]
 8005a60:	b90b      	cbnz	r3, 8005a66 <_fflush_r+0x1a>
 8005a62:	f000 f887 	bl	8005b74 <__sinit>
 8005a66:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <_fflush_r+0x6c>)
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	d11b      	bne.n	8005aa4 <_fflush_r+0x58>
 8005a6c:	686c      	ldr	r4, [r5, #4]
 8005a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0ef      	beq.n	8005a56 <_fflush_r+0xa>
 8005a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a78:	07d0      	lsls	r0, r2, #31
 8005a7a:	d404      	bmi.n	8005a86 <_fflush_r+0x3a>
 8005a7c:	0599      	lsls	r1, r3, #22
 8005a7e:	d402      	bmi.n	8005a86 <_fflush_r+0x3a>
 8005a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a82:	f000 f915 	bl	8005cb0 <__retarget_lock_acquire_recursive>
 8005a86:	4628      	mov	r0, r5
 8005a88:	4621      	mov	r1, r4
 8005a8a:	f7ff ff5d 	bl	8005948 <__sflush_r>
 8005a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a90:	4605      	mov	r5, r0
 8005a92:	07da      	lsls	r2, r3, #31
 8005a94:	d4e0      	bmi.n	8005a58 <_fflush_r+0xc>
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	059b      	lsls	r3, r3, #22
 8005a9a:	d4dd      	bmi.n	8005a58 <_fflush_r+0xc>
 8005a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a9e:	f000 f908 	bl	8005cb2 <__retarget_lock_release_recursive>
 8005aa2:	e7d9      	b.n	8005a58 <_fflush_r+0xc>
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <_fflush_r+0x70>)
 8005aa6:	429c      	cmp	r4, r3
 8005aa8:	d101      	bne.n	8005aae <_fflush_r+0x62>
 8005aaa:	68ac      	ldr	r4, [r5, #8]
 8005aac:	e7df      	b.n	8005a6e <_fflush_r+0x22>
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <_fflush_r+0x74>)
 8005ab0:	429c      	cmp	r4, r3
 8005ab2:	bf08      	it	eq
 8005ab4:	68ec      	ldreq	r4, [r5, #12]
 8005ab6:	e7da      	b.n	8005a6e <_fflush_r+0x22>
 8005ab8:	0800716c 	.word	0x0800716c
 8005abc:	0800718c 	.word	0x0800718c
 8005ac0:	0800714c 	.word	0x0800714c

08005ac4 <std>:
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	b510      	push	{r4, lr}
 8005ac8:	4604      	mov	r4, r0
 8005aca:	e9c0 3300 	strd	r3, r3, [r0]
 8005ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ad2:	6083      	str	r3, [r0, #8]
 8005ad4:	8181      	strh	r1, [r0, #12]
 8005ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ad8:	81c2      	strh	r2, [r0, #14]
 8005ada:	6183      	str	r3, [r0, #24]
 8005adc:	4619      	mov	r1, r3
 8005ade:	2208      	movs	r2, #8
 8005ae0:	305c      	adds	r0, #92	; 0x5c
 8005ae2:	f7fd fb65 	bl	80031b0 <memset>
 8005ae6:	4b05      	ldr	r3, [pc, #20]	; (8005afc <std+0x38>)
 8005ae8:	6224      	str	r4, [r4, #32]
 8005aea:	6263      	str	r3, [r4, #36]	; 0x24
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <std+0x3c>)
 8005aee:	62a3      	str	r3, [r4, #40]	; 0x28
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <std+0x40>)
 8005af2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <std+0x44>)
 8005af6:	6323      	str	r3, [r4, #48]	; 0x30
 8005af8:	bd10      	pop	{r4, pc}
 8005afa:	bf00      	nop
 8005afc:	08005e19 	.word	0x08005e19
 8005b00:	08005e3b 	.word	0x08005e3b
 8005b04:	08005e73 	.word	0x08005e73
 8005b08:	08005e97 	.word	0x08005e97

08005b0c <_cleanup_r>:
 8005b0c:	4901      	ldr	r1, [pc, #4]	; (8005b14 <_cleanup_r+0x8>)
 8005b0e:	f000 b8af 	b.w	8005c70 <_fwalk_reent>
 8005b12:	bf00      	nop
 8005b14:	08005a4d 	.word	0x08005a4d

08005b18 <__sfmoreglue>:
 8005b18:	2268      	movs	r2, #104	; 0x68
 8005b1a:	b570      	push	{r4, r5, r6, lr}
 8005b1c:	1e4d      	subs	r5, r1, #1
 8005b1e:	4355      	muls	r5, r2
 8005b20:	460e      	mov	r6, r1
 8005b22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b26:	f7ff fa6b 	bl	8005000 <_malloc_r>
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	b140      	cbz	r0, 8005b40 <__sfmoreglue+0x28>
 8005b2e:	2100      	movs	r1, #0
 8005b30:	e9c0 1600 	strd	r1, r6, [r0]
 8005b34:	300c      	adds	r0, #12
 8005b36:	60a0      	str	r0, [r4, #8]
 8005b38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b3c:	f7fd fb38 	bl	80031b0 <memset>
 8005b40:	4620      	mov	r0, r4
 8005b42:	bd70      	pop	{r4, r5, r6, pc}

08005b44 <__sfp_lock_acquire>:
 8005b44:	4801      	ldr	r0, [pc, #4]	; (8005b4c <__sfp_lock_acquire+0x8>)
 8005b46:	f000 b8b3 	b.w	8005cb0 <__retarget_lock_acquire_recursive>
 8005b4a:	bf00      	nop
 8005b4c:	200002a5 	.word	0x200002a5

08005b50 <__sfp_lock_release>:
 8005b50:	4801      	ldr	r0, [pc, #4]	; (8005b58 <__sfp_lock_release+0x8>)
 8005b52:	f000 b8ae 	b.w	8005cb2 <__retarget_lock_release_recursive>
 8005b56:	bf00      	nop
 8005b58:	200002a5 	.word	0x200002a5

08005b5c <__sinit_lock_acquire>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	; (8005b64 <__sinit_lock_acquire+0x8>)
 8005b5e:	f000 b8a7 	b.w	8005cb0 <__retarget_lock_acquire_recursive>
 8005b62:	bf00      	nop
 8005b64:	200002a6 	.word	0x200002a6

08005b68 <__sinit_lock_release>:
 8005b68:	4801      	ldr	r0, [pc, #4]	; (8005b70 <__sinit_lock_release+0x8>)
 8005b6a:	f000 b8a2 	b.w	8005cb2 <__retarget_lock_release_recursive>
 8005b6e:	bf00      	nop
 8005b70:	200002a6 	.word	0x200002a6

08005b74 <__sinit>:
 8005b74:	b510      	push	{r4, lr}
 8005b76:	4604      	mov	r4, r0
 8005b78:	f7ff fff0 	bl	8005b5c <__sinit_lock_acquire>
 8005b7c:	69a3      	ldr	r3, [r4, #24]
 8005b7e:	b11b      	cbz	r3, 8005b88 <__sinit+0x14>
 8005b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b84:	f7ff bff0 	b.w	8005b68 <__sinit_lock_release>
 8005b88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b8c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b8e:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <__sinit+0x68>)
 8005b90:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <__sinit+0x6c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b96:	42a3      	cmp	r3, r4
 8005b98:	bf08      	it	eq
 8005b9a:	2301      	moveq	r3, #1
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	bf08      	it	eq
 8005ba0:	61a3      	streq	r3, [r4, #24]
 8005ba2:	f000 f81f 	bl	8005be4 <__sfp>
 8005ba6:	6060      	str	r0, [r4, #4]
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f000 f81b 	bl	8005be4 <__sfp>
 8005bae:	60a0      	str	r0, [r4, #8]
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 f817 	bl	8005be4 <__sfp>
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2104      	movs	r1, #4
 8005bba:	60e0      	str	r0, [r4, #12]
 8005bbc:	6860      	ldr	r0, [r4, #4]
 8005bbe:	f7ff ff81 	bl	8005ac4 <std>
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	2109      	movs	r1, #9
 8005bc6:	68a0      	ldr	r0, [r4, #8]
 8005bc8:	f7ff ff7c 	bl	8005ac4 <std>
 8005bcc:	2202      	movs	r2, #2
 8005bce:	2112      	movs	r1, #18
 8005bd0:	68e0      	ldr	r0, [r4, #12]
 8005bd2:	f7ff ff77 	bl	8005ac4 <std>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	61a3      	str	r3, [r4, #24]
 8005bda:	e7d1      	b.n	8005b80 <__sinit+0xc>
 8005bdc:	08006dd0 	.word	0x08006dd0
 8005be0:	08005b0d 	.word	0x08005b0d

08005be4 <__sfp>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	4607      	mov	r7, r0
 8005be8:	f7ff ffac 	bl	8005b44 <__sfp_lock_acquire>
 8005bec:	4b1e      	ldr	r3, [pc, #120]	; (8005c68 <__sfp+0x84>)
 8005bee:	681e      	ldr	r6, [r3, #0]
 8005bf0:	69b3      	ldr	r3, [r6, #24]
 8005bf2:	b913      	cbnz	r3, 8005bfa <__sfp+0x16>
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f7ff ffbd 	bl	8005b74 <__sinit>
 8005bfa:	3648      	adds	r6, #72	; 0x48
 8005bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	d503      	bpl.n	8005c0c <__sfp+0x28>
 8005c04:	6833      	ldr	r3, [r6, #0]
 8005c06:	b30b      	cbz	r3, 8005c4c <__sfp+0x68>
 8005c08:	6836      	ldr	r6, [r6, #0]
 8005c0a:	e7f7      	b.n	8005bfc <__sfp+0x18>
 8005c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c10:	b9d5      	cbnz	r5, 8005c48 <__sfp+0x64>
 8005c12:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <__sfp+0x88>)
 8005c14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c18:	60e3      	str	r3, [r4, #12]
 8005c1a:	6665      	str	r5, [r4, #100]	; 0x64
 8005c1c:	f000 f847 	bl	8005cae <__retarget_lock_init_recursive>
 8005c20:	f7ff ff96 	bl	8005b50 <__sfp_lock_release>
 8005c24:	2208      	movs	r2, #8
 8005c26:	4629      	mov	r1, r5
 8005c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c30:	6025      	str	r5, [r4, #0]
 8005c32:	61a5      	str	r5, [r4, #24]
 8005c34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c38:	f7fd faba 	bl	80031b0 <memset>
 8005c3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c44:	4620      	mov	r0, r4
 8005c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c48:	3468      	adds	r4, #104	; 0x68
 8005c4a:	e7d9      	b.n	8005c00 <__sfp+0x1c>
 8005c4c:	2104      	movs	r1, #4
 8005c4e:	4638      	mov	r0, r7
 8005c50:	f7ff ff62 	bl	8005b18 <__sfmoreglue>
 8005c54:	4604      	mov	r4, r0
 8005c56:	6030      	str	r0, [r6, #0]
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d1d5      	bne.n	8005c08 <__sfp+0x24>
 8005c5c:	f7ff ff78 	bl	8005b50 <__sfp_lock_release>
 8005c60:	230c      	movs	r3, #12
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	e7ee      	b.n	8005c44 <__sfp+0x60>
 8005c66:	bf00      	nop
 8005c68:	08006dd0 	.word	0x08006dd0
 8005c6c:	ffff0001 	.word	0xffff0001

08005c70 <_fwalk_reent>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	4606      	mov	r6, r0
 8005c76:	4688      	mov	r8, r1
 8005c78:	2700      	movs	r7, #0
 8005c7a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c82:	f1b9 0901 	subs.w	r9, r9, #1
 8005c86:	d505      	bpl.n	8005c94 <_fwalk_reent+0x24>
 8005c88:	6824      	ldr	r4, [r4, #0]
 8005c8a:	2c00      	cmp	r4, #0
 8005c8c:	d1f7      	bne.n	8005c7e <_fwalk_reent+0xe>
 8005c8e:	4638      	mov	r0, r7
 8005c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c94:	89ab      	ldrh	r3, [r5, #12]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d907      	bls.n	8005caa <_fwalk_reent+0x3a>
 8005c9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	d003      	beq.n	8005caa <_fwalk_reent+0x3a>
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	47c0      	blx	r8
 8005ca8:	4307      	orrs	r7, r0
 8005caa:	3568      	adds	r5, #104	; 0x68
 8005cac:	e7e9      	b.n	8005c82 <_fwalk_reent+0x12>

08005cae <__retarget_lock_init_recursive>:
 8005cae:	4770      	bx	lr

08005cb0 <__retarget_lock_acquire_recursive>:
 8005cb0:	4770      	bx	lr

08005cb2 <__retarget_lock_release_recursive>:
 8005cb2:	4770      	bx	lr

08005cb4 <__swhatbuf_r>:
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	460e      	mov	r6, r1
 8005cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	2900      	cmp	r1, #0
 8005cc0:	461d      	mov	r5, r3
 8005cc2:	b096      	sub	sp, #88	; 0x58
 8005cc4:	da08      	bge.n	8005cd8 <__swhatbuf_r+0x24>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ccc:	602a      	str	r2, [r5, #0]
 8005cce:	061a      	lsls	r2, r3, #24
 8005cd0:	d410      	bmi.n	8005cf4 <__swhatbuf_r+0x40>
 8005cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd6:	e00e      	b.n	8005cf6 <__swhatbuf_r+0x42>
 8005cd8:	466a      	mov	r2, sp
 8005cda:	f000 f903 	bl	8005ee4 <_fstat_r>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	dbf1      	blt.n	8005cc6 <__swhatbuf_r+0x12>
 8005ce2:	9a01      	ldr	r2, [sp, #4]
 8005ce4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ce8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cec:	425a      	negs	r2, r3
 8005cee:	415a      	adcs	r2, r3
 8005cf0:	602a      	str	r2, [r5, #0]
 8005cf2:	e7ee      	b.n	8005cd2 <__swhatbuf_r+0x1e>
 8005cf4:	2340      	movs	r3, #64	; 0x40
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	b016      	add	sp, #88	; 0x58
 8005cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d00 <__smakebuf_r>:
 8005d00:	898b      	ldrh	r3, [r1, #12]
 8005d02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d04:	079d      	lsls	r5, r3, #30
 8005d06:	4606      	mov	r6, r0
 8005d08:	460c      	mov	r4, r1
 8005d0a:	d507      	bpl.n	8005d1c <__smakebuf_r+0x1c>
 8005d0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	6123      	str	r3, [r4, #16]
 8005d14:	2301      	movs	r3, #1
 8005d16:	6163      	str	r3, [r4, #20]
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	466a      	mov	r2, sp
 8005d1e:	ab01      	add	r3, sp, #4
 8005d20:	f7ff ffc8 	bl	8005cb4 <__swhatbuf_r>
 8005d24:	9900      	ldr	r1, [sp, #0]
 8005d26:	4605      	mov	r5, r0
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f7ff f969 	bl	8005000 <_malloc_r>
 8005d2e:	b948      	cbnz	r0, 8005d44 <__smakebuf_r+0x44>
 8005d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d34:	059a      	lsls	r2, r3, #22
 8005d36:	d4ef      	bmi.n	8005d18 <__smakebuf_r+0x18>
 8005d38:	f023 0303 	bic.w	r3, r3, #3
 8005d3c:	f043 0302 	orr.w	r3, r3, #2
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	e7e3      	b.n	8005d0c <__smakebuf_r+0xc>
 8005d44:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <__smakebuf_r+0x7c>)
 8005d46:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	6020      	str	r0, [r4, #0]
 8005d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	9b00      	ldr	r3, [sp, #0]
 8005d54:	6120      	str	r0, [r4, #16]
 8005d56:	6163      	str	r3, [r4, #20]
 8005d58:	9b01      	ldr	r3, [sp, #4]
 8005d5a:	b15b      	cbz	r3, 8005d74 <__smakebuf_r+0x74>
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d62:	f000 f8d1 	bl	8005f08 <_isatty_r>
 8005d66:	b128      	cbz	r0, 8005d74 <__smakebuf_r+0x74>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	89a0      	ldrh	r0, [r4, #12]
 8005d76:	4305      	orrs	r5, r0
 8005d78:	81a5      	strh	r5, [r4, #12]
 8005d7a:	e7cd      	b.n	8005d18 <__smakebuf_r+0x18>
 8005d7c:	08005b0d 	.word	0x08005b0d

08005d80 <_malloc_usable_size_r>:
 8005d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d84:	1f18      	subs	r0, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	bfbc      	itt	lt
 8005d8a:	580b      	ldrlt	r3, [r1, r0]
 8005d8c:	18c0      	addlt	r0, r0, r3
 8005d8e:	4770      	bx	lr

08005d90 <_raise_r>:
 8005d90:	291f      	cmp	r1, #31
 8005d92:	b538      	push	{r3, r4, r5, lr}
 8005d94:	4604      	mov	r4, r0
 8005d96:	460d      	mov	r5, r1
 8005d98:	d904      	bls.n	8005da4 <_raise_r+0x14>
 8005d9a:	2316      	movs	r3, #22
 8005d9c:	6003      	str	r3, [r0, #0]
 8005d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005da6:	b112      	cbz	r2, 8005dae <_raise_r+0x1e>
 8005da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dac:	b94b      	cbnz	r3, 8005dc2 <_raise_r+0x32>
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 f830 	bl	8005e14 <_getpid_r>
 8005db4:	462a      	mov	r2, r5
 8005db6:	4601      	mov	r1, r0
 8005db8:	4620      	mov	r0, r4
 8005dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dbe:	f000 b817 	b.w	8005df0 <_kill_r>
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d00a      	beq.n	8005ddc <_raise_r+0x4c>
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	d103      	bne.n	8005dd2 <_raise_r+0x42>
 8005dca:	2316      	movs	r3, #22
 8005dcc:	6003      	str	r3, [r0, #0]
 8005dce:	2001      	movs	r0, #1
 8005dd0:	e7e7      	b.n	8005da2 <_raise_r+0x12>
 8005dd2:	2400      	movs	r4, #0
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005dda:	4798      	blx	r3
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e7e0      	b.n	8005da2 <_raise_r+0x12>

08005de0 <raise>:
 8005de0:	4b02      	ldr	r3, [pc, #8]	; (8005dec <raise+0xc>)
 8005de2:	4601      	mov	r1, r0
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	f7ff bfd3 	b.w	8005d90 <_raise_r>
 8005dea:	bf00      	nop
 8005dec:	2000000c 	.word	0x2000000c

08005df0 <_kill_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	2300      	movs	r3, #0
 8005df4:	4d06      	ldr	r5, [pc, #24]	; (8005e10 <_kill_r+0x20>)
 8005df6:	4604      	mov	r4, r0
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	f7fb fefb 	bl	8001bf8 <_kill>
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	d102      	bne.n	8005e0c <_kill_r+0x1c>
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	b103      	cbz	r3, 8005e0c <_kill_r+0x1c>
 8005e0a:	6023      	str	r3, [r4, #0]
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
 8005e0e:	bf00      	nop
 8005e10:	200002a0 	.word	0x200002a0

08005e14 <_getpid_r>:
 8005e14:	f7fb bee9 	b.w	8001bea <_getpid>

08005e18 <__sread>:
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e20:	f000 f894 	bl	8005f4c <_read_r>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	bfab      	itete	ge
 8005e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e2c:	181b      	addge	r3, r3, r0
 8005e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e32:	bfac      	ite	ge
 8005e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e36:	81a3      	strhlt	r3, [r4, #12]
 8005e38:	bd10      	pop	{r4, pc}

08005e3a <__swrite>:
 8005e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3e:	461f      	mov	r7, r3
 8005e40:	898b      	ldrh	r3, [r1, #12]
 8005e42:	4605      	mov	r5, r0
 8005e44:	05db      	lsls	r3, r3, #23
 8005e46:	460c      	mov	r4, r1
 8005e48:	4616      	mov	r6, r2
 8005e4a:	d505      	bpl.n	8005e58 <__swrite+0x1e>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e54:	f000 f868 	bl	8005f28 <_lseek_r>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	4632      	mov	r2, r6
 8005e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	4628      	mov	r0, r5
 8005e64:	463b      	mov	r3, r7
 8005e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6e:	f000 b817 	b.w	8005ea0 <_write_r>

08005e72 <__sseek>:
 8005e72:	b510      	push	{r4, lr}
 8005e74:	460c      	mov	r4, r1
 8005e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7a:	f000 f855 	bl	8005f28 <_lseek_r>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	bf15      	itete	ne
 8005e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e8e:	81a3      	strheq	r3, [r4, #12]
 8005e90:	bf18      	it	ne
 8005e92:	81a3      	strhne	r3, [r4, #12]
 8005e94:	bd10      	pop	{r4, pc}

08005e96 <__sclose>:
 8005e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9a:	f000 b813 	b.w	8005ec4 <_close_r>
	...

08005ea0 <_write_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4d05      	ldr	r5, [pc, #20]	; (8005ec0 <_write_r+0x20>)
 8005eac:	602a      	str	r2, [r5, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f7fb fed9 	bl	8001c66 <_write>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d102      	bne.n	8005ebe <_write_r+0x1e>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	b103      	cbz	r3, 8005ebe <_write_r+0x1e>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	200002a0 	.word	0x200002a0

08005ec4 <_close_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4d05      	ldr	r5, [pc, #20]	; (8005ee0 <_close_r+0x1c>)
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	f7fb fee5 	bl	8001c9e <_close>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_close_r+0x1a>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_close_r+0x1a>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	200002a0 	.word	0x200002a0

08005ee4 <_fstat_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	4d06      	ldr	r5, [pc, #24]	; (8005f04 <_fstat_r+0x20>)
 8005eea:	4604      	mov	r4, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	4611      	mov	r1, r2
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	f7fb fedf 	bl	8001cb4 <_fstat>
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	d102      	bne.n	8005f00 <_fstat_r+0x1c>
 8005efa:	682b      	ldr	r3, [r5, #0]
 8005efc:	b103      	cbz	r3, 8005f00 <_fstat_r+0x1c>
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	bd38      	pop	{r3, r4, r5, pc}
 8005f02:	bf00      	nop
 8005f04:	200002a0 	.word	0x200002a0

08005f08 <_isatty_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4d05      	ldr	r5, [pc, #20]	; (8005f24 <_isatty_r+0x1c>)
 8005f0e:	4604      	mov	r4, r0
 8005f10:	4608      	mov	r0, r1
 8005f12:	602b      	str	r3, [r5, #0]
 8005f14:	f7fb fedd 	bl	8001cd2 <_isatty>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d102      	bne.n	8005f22 <_isatty_r+0x1a>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	b103      	cbz	r3, 8005f22 <_isatty_r+0x1a>
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	200002a0 	.word	0x200002a0

08005f28 <_lseek_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	4611      	mov	r1, r2
 8005f30:	2200      	movs	r2, #0
 8005f32:	4d05      	ldr	r5, [pc, #20]	; (8005f48 <_lseek_r+0x20>)
 8005f34:	602a      	str	r2, [r5, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f7fb fed5 	bl	8001ce6 <_lseek>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_lseek_r+0x1e>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_lseek_r+0x1e>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	200002a0 	.word	0x200002a0

08005f4c <_read_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	4611      	mov	r1, r2
 8005f54:	2200      	movs	r2, #0
 8005f56:	4d05      	ldr	r5, [pc, #20]	; (8005f6c <_read_r+0x20>)
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7fb fe66 	bl	8001c2c <_read>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_read_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_read_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	200002a0 	.word	0x200002a0

08005f70 <pow>:
 8005f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f74:	4614      	mov	r4, r2
 8005f76:	461d      	mov	r5, r3
 8005f78:	4680      	mov	r8, r0
 8005f7a:	4689      	mov	r9, r1
 8005f7c:	f000 f860 	bl	8006040 <__ieee754_pow>
 8005f80:	4622      	mov	r2, r4
 8005f82:	4606      	mov	r6, r0
 8005f84:	460f      	mov	r7, r1
 8005f86:	462b      	mov	r3, r5
 8005f88:	4620      	mov	r0, r4
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	f7fa fdf2 	bl	8000b74 <__aeabi_dcmpun>
 8005f90:	bbc8      	cbnz	r0, 8006006 <pow+0x96>
 8005f92:	2200      	movs	r2, #0
 8005f94:	2300      	movs	r3, #0
 8005f96:	4640      	mov	r0, r8
 8005f98:	4649      	mov	r1, r9
 8005f9a:	f7fa fdb9 	bl	8000b10 <__aeabi_dcmpeq>
 8005f9e:	b1b8      	cbz	r0, 8005fd0 <pow+0x60>
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	f7fa fdb2 	bl	8000b10 <__aeabi_dcmpeq>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d141      	bne.n	8006034 <pow+0xc4>
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	f000 fe39 	bl	8006c2a <finite>
 8005fb8:	b328      	cbz	r0, 8006006 <pow+0x96>
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	f7fa fdaf 	bl	8000b24 <__aeabi_dcmplt>
 8005fc6:	b1f0      	cbz	r0, 8006006 <pow+0x96>
 8005fc8:	f7fd f8c8 	bl	800315c <__errno>
 8005fcc:	2322      	movs	r3, #34	; 0x22
 8005fce:	e019      	b.n	8006004 <pow+0x94>
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f000 fe29 	bl	8006c2a <finite>
 8005fd8:	b9c8      	cbnz	r0, 800600e <pow+0x9e>
 8005fda:	4640      	mov	r0, r8
 8005fdc:	4649      	mov	r1, r9
 8005fde:	f000 fe24 	bl	8006c2a <finite>
 8005fe2:	b1a0      	cbz	r0, 800600e <pow+0x9e>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f000 fe1f 	bl	8006c2a <finite>
 8005fec:	b178      	cbz	r0, 800600e <pow+0x9e>
 8005fee:	4632      	mov	r2, r6
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	f7fa fdbd 	bl	8000b74 <__aeabi_dcmpun>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d0e4      	beq.n	8005fc8 <pow+0x58>
 8005ffe:	f7fd f8ad 	bl	800315c <__errno>
 8006002:	2321      	movs	r3, #33	; 0x21
 8006004:	6003      	str	r3, [r0, #0]
 8006006:	4630      	mov	r0, r6
 8006008:	4639      	mov	r1, r7
 800600a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	4630      	mov	r0, r6
 8006014:	4639      	mov	r1, r7
 8006016:	f7fa fd7b 	bl	8000b10 <__aeabi_dcmpeq>
 800601a:	2800      	cmp	r0, #0
 800601c:	d0f3      	beq.n	8006006 <pow+0x96>
 800601e:	4640      	mov	r0, r8
 8006020:	4649      	mov	r1, r9
 8006022:	f000 fe02 	bl	8006c2a <finite>
 8006026:	2800      	cmp	r0, #0
 8006028:	d0ed      	beq.n	8006006 <pow+0x96>
 800602a:	4620      	mov	r0, r4
 800602c:	4629      	mov	r1, r5
 800602e:	f000 fdfc 	bl	8006c2a <finite>
 8006032:	e7c8      	b.n	8005fc6 <pow+0x56>
 8006034:	2600      	movs	r6, #0
 8006036:	4f01      	ldr	r7, [pc, #4]	; (800603c <pow+0xcc>)
 8006038:	e7e5      	b.n	8006006 <pow+0x96>
 800603a:	bf00      	nop
 800603c:	3ff00000 	.word	0x3ff00000

08006040 <__ieee754_pow>:
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	b093      	sub	sp, #76	; 0x4c
 8006046:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800604a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800604e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006052:	4689      	mov	r9, r1
 8006054:	ea56 0102 	orrs.w	r1, r6, r2
 8006058:	4680      	mov	r8, r0
 800605a:	d111      	bne.n	8006080 <__ieee754_pow+0x40>
 800605c:	1803      	adds	r3, r0, r0
 800605e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006062:	4152      	adcs	r2, r2
 8006064:	4299      	cmp	r1, r3
 8006066:	4b82      	ldr	r3, [pc, #520]	; (8006270 <__ieee754_pow+0x230>)
 8006068:	4193      	sbcs	r3, r2
 800606a:	f080 84b9 	bcs.w	80069e0 <__ieee754_pow+0x9a0>
 800606e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006072:	4640      	mov	r0, r8
 8006074:	4649      	mov	r1, r9
 8006076:	f7fa f92d 	bl	80002d4 <__adddf3>
 800607a:	4683      	mov	fp, r0
 800607c:	468c      	mov	ip, r1
 800607e:	e06f      	b.n	8006160 <__ieee754_pow+0x120>
 8006080:	4b7c      	ldr	r3, [pc, #496]	; (8006274 <__ieee754_pow+0x234>)
 8006082:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006086:	429c      	cmp	r4, r3
 8006088:	464d      	mov	r5, r9
 800608a:	4682      	mov	sl, r0
 800608c:	dc06      	bgt.n	800609c <__ieee754_pow+0x5c>
 800608e:	d101      	bne.n	8006094 <__ieee754_pow+0x54>
 8006090:	2800      	cmp	r0, #0
 8006092:	d1ec      	bne.n	800606e <__ieee754_pow+0x2e>
 8006094:	429e      	cmp	r6, r3
 8006096:	dc01      	bgt.n	800609c <__ieee754_pow+0x5c>
 8006098:	d10f      	bne.n	80060ba <__ieee754_pow+0x7a>
 800609a:	b172      	cbz	r2, 80060ba <__ieee754_pow+0x7a>
 800609c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80060a0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80060a4:	ea55 050a 	orrs.w	r5, r5, sl
 80060a8:	d1e1      	bne.n	800606e <__ieee754_pow+0x2e>
 80060aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80060ae:	18db      	adds	r3, r3, r3
 80060b0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80060b4:	4152      	adcs	r2, r2
 80060b6:	429d      	cmp	r5, r3
 80060b8:	e7d5      	b.n	8006066 <__ieee754_pow+0x26>
 80060ba:	2d00      	cmp	r5, #0
 80060bc:	da39      	bge.n	8006132 <__ieee754_pow+0xf2>
 80060be:	4b6e      	ldr	r3, [pc, #440]	; (8006278 <__ieee754_pow+0x238>)
 80060c0:	429e      	cmp	r6, r3
 80060c2:	dc52      	bgt.n	800616a <__ieee754_pow+0x12a>
 80060c4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80060c8:	429e      	cmp	r6, r3
 80060ca:	f340 849c 	ble.w	8006a06 <__ieee754_pow+0x9c6>
 80060ce:	1533      	asrs	r3, r6, #20
 80060d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80060d4:	2b14      	cmp	r3, #20
 80060d6:	dd0f      	ble.n	80060f8 <__ieee754_pow+0xb8>
 80060d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80060dc:	fa22 f103 	lsr.w	r1, r2, r3
 80060e0:	fa01 f303 	lsl.w	r3, r1, r3
 80060e4:	4293      	cmp	r3, r2
 80060e6:	f040 848e 	bne.w	8006a06 <__ieee754_pow+0x9c6>
 80060ea:	f001 0101 	and.w	r1, r1, #1
 80060ee:	f1c1 0302 	rsb	r3, r1, #2
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	b182      	cbz	r2, 8006118 <__ieee754_pow+0xd8>
 80060f6:	e05d      	b.n	80061b4 <__ieee754_pow+0x174>
 80060f8:	2a00      	cmp	r2, #0
 80060fa:	d159      	bne.n	80061b0 <__ieee754_pow+0x170>
 80060fc:	f1c3 0314 	rsb	r3, r3, #20
 8006100:	fa46 f103 	asr.w	r1, r6, r3
 8006104:	fa01 f303 	lsl.w	r3, r1, r3
 8006108:	42b3      	cmp	r3, r6
 800610a:	f040 8479 	bne.w	8006a00 <__ieee754_pow+0x9c0>
 800610e:	f001 0101 	and.w	r1, r1, #1
 8006112:	f1c1 0302 	rsb	r3, r1, #2
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	4b58      	ldr	r3, [pc, #352]	; (800627c <__ieee754_pow+0x23c>)
 800611a:	429e      	cmp	r6, r3
 800611c:	d132      	bne.n	8006184 <__ieee754_pow+0x144>
 800611e:	2f00      	cmp	r7, #0
 8006120:	f280 846a 	bge.w	80069f8 <__ieee754_pow+0x9b8>
 8006124:	4642      	mov	r2, r8
 8006126:	464b      	mov	r3, r9
 8006128:	2000      	movs	r0, #0
 800612a:	4954      	ldr	r1, [pc, #336]	; (800627c <__ieee754_pow+0x23c>)
 800612c:	f7fa fbb2 	bl	8000894 <__aeabi_ddiv>
 8006130:	e7a3      	b.n	800607a <__ieee754_pow+0x3a>
 8006132:	2300      	movs	r3, #0
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	2a00      	cmp	r2, #0
 8006138:	d13c      	bne.n	80061b4 <__ieee754_pow+0x174>
 800613a:	4b4e      	ldr	r3, [pc, #312]	; (8006274 <__ieee754_pow+0x234>)
 800613c:	429e      	cmp	r6, r3
 800613e:	d1eb      	bne.n	8006118 <__ieee754_pow+0xd8>
 8006140:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006144:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006148:	ea53 030a 	orrs.w	r3, r3, sl
 800614c:	f000 8448 	beq.w	80069e0 <__ieee754_pow+0x9a0>
 8006150:	4b4b      	ldr	r3, [pc, #300]	; (8006280 <__ieee754_pow+0x240>)
 8006152:	429c      	cmp	r4, r3
 8006154:	dd0b      	ble.n	800616e <__ieee754_pow+0x12e>
 8006156:	2f00      	cmp	r7, #0
 8006158:	f2c0 8448 	blt.w	80069ec <__ieee754_pow+0x9ac>
 800615c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006160:	4658      	mov	r0, fp
 8006162:	4661      	mov	r1, ip
 8006164:	b013      	add	sp, #76	; 0x4c
 8006166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616a:	2302      	movs	r3, #2
 800616c:	e7e2      	b.n	8006134 <__ieee754_pow+0xf4>
 800616e:	2f00      	cmp	r7, #0
 8006170:	f04f 0b00 	mov.w	fp, #0
 8006174:	f04f 0c00 	mov.w	ip, #0
 8006178:	daf2      	bge.n	8006160 <__ieee754_pow+0x120>
 800617a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800617e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006182:	e7ed      	b.n	8006160 <__ieee754_pow+0x120>
 8006184:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006188:	d106      	bne.n	8006198 <__ieee754_pow+0x158>
 800618a:	4642      	mov	r2, r8
 800618c:	464b      	mov	r3, r9
 800618e:	4640      	mov	r0, r8
 8006190:	4649      	mov	r1, r9
 8006192:	f7fa fa55 	bl	8000640 <__aeabi_dmul>
 8006196:	e770      	b.n	800607a <__ieee754_pow+0x3a>
 8006198:	4b3a      	ldr	r3, [pc, #232]	; (8006284 <__ieee754_pow+0x244>)
 800619a:	429f      	cmp	r7, r3
 800619c:	d10a      	bne.n	80061b4 <__ieee754_pow+0x174>
 800619e:	2d00      	cmp	r5, #0
 80061a0:	db08      	blt.n	80061b4 <__ieee754_pow+0x174>
 80061a2:	4640      	mov	r0, r8
 80061a4:	4649      	mov	r1, r9
 80061a6:	b013      	add	sp, #76	; 0x4c
 80061a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	f000 bc5e 	b.w	8006a6c <__ieee754_sqrt>
 80061b0:	2300      	movs	r3, #0
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	4640      	mov	r0, r8
 80061b6:	4649      	mov	r1, r9
 80061b8:	f000 fd34 	bl	8006c24 <fabs>
 80061bc:	4683      	mov	fp, r0
 80061be:	468c      	mov	ip, r1
 80061c0:	f1ba 0f00 	cmp.w	sl, #0
 80061c4:	d128      	bne.n	8006218 <__ieee754_pow+0x1d8>
 80061c6:	b124      	cbz	r4, 80061d2 <__ieee754_pow+0x192>
 80061c8:	4b2c      	ldr	r3, [pc, #176]	; (800627c <__ieee754_pow+0x23c>)
 80061ca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d122      	bne.n	8006218 <__ieee754_pow+0x1d8>
 80061d2:	2f00      	cmp	r7, #0
 80061d4:	da07      	bge.n	80061e6 <__ieee754_pow+0x1a6>
 80061d6:	465a      	mov	r2, fp
 80061d8:	4663      	mov	r3, ip
 80061da:	2000      	movs	r0, #0
 80061dc:	4927      	ldr	r1, [pc, #156]	; (800627c <__ieee754_pow+0x23c>)
 80061de:	f7fa fb59 	bl	8000894 <__aeabi_ddiv>
 80061e2:	4683      	mov	fp, r0
 80061e4:	468c      	mov	ip, r1
 80061e6:	2d00      	cmp	r5, #0
 80061e8:	daba      	bge.n	8006160 <__ieee754_pow+0x120>
 80061ea:	9b00      	ldr	r3, [sp, #0]
 80061ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80061f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80061f4:	4323      	orrs	r3, r4
 80061f6:	d108      	bne.n	800620a <__ieee754_pow+0x1ca>
 80061f8:	465a      	mov	r2, fp
 80061fa:	4663      	mov	r3, ip
 80061fc:	4658      	mov	r0, fp
 80061fe:	4661      	mov	r1, ip
 8006200:	f7fa f866 	bl	80002d0 <__aeabi_dsub>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	e790      	b.n	800612c <__ieee754_pow+0xec>
 800620a:	9b00      	ldr	r3, [sp, #0]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d1a7      	bne.n	8006160 <__ieee754_pow+0x120>
 8006210:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006214:	469c      	mov	ip, r3
 8006216:	e7a3      	b.n	8006160 <__ieee754_pow+0x120>
 8006218:	0feb      	lsrs	r3, r5, #31
 800621a:	3b01      	subs	r3, #1
 800621c:	930c      	str	r3, [sp, #48]	; 0x30
 800621e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006220:	9b00      	ldr	r3, [sp, #0]
 8006222:	4313      	orrs	r3, r2
 8006224:	d104      	bne.n	8006230 <__ieee754_pow+0x1f0>
 8006226:	4642      	mov	r2, r8
 8006228:	464b      	mov	r3, r9
 800622a:	4640      	mov	r0, r8
 800622c:	4649      	mov	r1, r9
 800622e:	e7e7      	b.n	8006200 <__ieee754_pow+0x1c0>
 8006230:	4b15      	ldr	r3, [pc, #84]	; (8006288 <__ieee754_pow+0x248>)
 8006232:	429e      	cmp	r6, r3
 8006234:	f340 80f6 	ble.w	8006424 <__ieee754_pow+0x3e4>
 8006238:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800623c:	429e      	cmp	r6, r3
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <__ieee754_pow+0x240>)
 8006240:	dd09      	ble.n	8006256 <__ieee754_pow+0x216>
 8006242:	429c      	cmp	r4, r3
 8006244:	dc0c      	bgt.n	8006260 <__ieee754_pow+0x220>
 8006246:	2f00      	cmp	r7, #0
 8006248:	da0c      	bge.n	8006264 <__ieee754_pow+0x224>
 800624a:	2000      	movs	r0, #0
 800624c:	b013      	add	sp, #76	; 0x4c
 800624e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006252:	f000 bce2 	b.w	8006c1a <__math_oflow>
 8006256:	429c      	cmp	r4, r3
 8006258:	dbf5      	blt.n	8006246 <__ieee754_pow+0x206>
 800625a:	4b08      	ldr	r3, [pc, #32]	; (800627c <__ieee754_pow+0x23c>)
 800625c:	429c      	cmp	r4, r3
 800625e:	dd15      	ble.n	800628c <__ieee754_pow+0x24c>
 8006260:	2f00      	cmp	r7, #0
 8006262:	dcf2      	bgt.n	800624a <__ieee754_pow+0x20a>
 8006264:	2000      	movs	r0, #0
 8006266:	b013      	add	sp, #76	; 0x4c
 8006268:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	f000 bcd0 	b.w	8006c10 <__math_uflow>
 8006270:	fff00000 	.word	0xfff00000
 8006274:	7ff00000 	.word	0x7ff00000
 8006278:	433fffff 	.word	0x433fffff
 800627c:	3ff00000 	.word	0x3ff00000
 8006280:	3fefffff 	.word	0x3fefffff
 8006284:	3fe00000 	.word	0x3fe00000
 8006288:	41e00000 	.word	0x41e00000
 800628c:	4661      	mov	r1, ip
 800628e:	2200      	movs	r2, #0
 8006290:	4658      	mov	r0, fp
 8006292:	4b5f      	ldr	r3, [pc, #380]	; (8006410 <__ieee754_pow+0x3d0>)
 8006294:	f7fa f81c 	bl	80002d0 <__aeabi_dsub>
 8006298:	a355      	add	r3, pc, #340	; (adr r3, 80063f0 <__ieee754_pow+0x3b0>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	4604      	mov	r4, r0
 80062a0:	460d      	mov	r5, r1
 80062a2:	f7fa f9cd 	bl	8000640 <__aeabi_dmul>
 80062a6:	a354      	add	r3, pc, #336	; (adr r3, 80063f8 <__ieee754_pow+0x3b8>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	4606      	mov	r6, r0
 80062ae:	460f      	mov	r7, r1
 80062b0:	4620      	mov	r0, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	f7fa f9c4 	bl	8000640 <__aeabi_dmul>
 80062b8:	2200      	movs	r2, #0
 80062ba:	4682      	mov	sl, r0
 80062bc:	468b      	mov	fp, r1
 80062be:	4620      	mov	r0, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	4b54      	ldr	r3, [pc, #336]	; (8006414 <__ieee754_pow+0x3d4>)
 80062c4:	f7fa f9bc 	bl	8000640 <__aeabi_dmul>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	a14c      	add	r1, pc, #304	; (adr r1, 8006400 <__ieee754_pow+0x3c0>)
 80062ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062d2:	f7f9 fffd 	bl	80002d0 <__aeabi_dsub>
 80062d6:	4622      	mov	r2, r4
 80062d8:	462b      	mov	r3, r5
 80062da:	f7fa f9b1 	bl	8000640 <__aeabi_dmul>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	2000      	movs	r0, #0
 80062e4:	494c      	ldr	r1, [pc, #304]	; (8006418 <__ieee754_pow+0x3d8>)
 80062e6:	f7f9 fff3 	bl	80002d0 <__aeabi_dsub>
 80062ea:	4622      	mov	r2, r4
 80062ec:	462b      	mov	r3, r5
 80062ee:	4680      	mov	r8, r0
 80062f0:	4689      	mov	r9, r1
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	f7fa f9a3 	bl	8000640 <__aeabi_dmul>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4640      	mov	r0, r8
 8006300:	4649      	mov	r1, r9
 8006302:	f7fa f99d 	bl	8000640 <__aeabi_dmul>
 8006306:	a340      	add	r3, pc, #256	; (adr r3, 8006408 <__ieee754_pow+0x3c8>)
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f7fa f998 	bl	8000640 <__aeabi_dmul>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4650      	mov	r0, sl
 8006316:	4659      	mov	r1, fp
 8006318:	f7f9 ffda 	bl	80002d0 <__aeabi_dsub>
 800631c:	f04f 0a00 	mov.w	sl, #0
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4604      	mov	r4, r0
 8006326:	460d      	mov	r5, r1
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	f7f9 ffd2 	bl	80002d4 <__adddf3>
 8006330:	4632      	mov	r2, r6
 8006332:	463b      	mov	r3, r7
 8006334:	4650      	mov	r0, sl
 8006336:	468b      	mov	fp, r1
 8006338:	f7f9 ffca 	bl	80002d0 <__aeabi_dsub>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4620      	mov	r0, r4
 8006342:	4629      	mov	r1, r5
 8006344:	f7f9 ffc4 	bl	80002d0 <__aeabi_dsub>
 8006348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800634c:	9b00      	ldr	r3, [sp, #0]
 800634e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006350:	3b01      	subs	r3, #1
 8006352:	4313      	orrs	r3, r2
 8006354:	f04f 0600 	mov.w	r6, #0
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	bf0c      	ite	eq
 800635e:	4b2f      	ldreq	r3, [pc, #188]	; (800641c <__ieee754_pow+0x3dc>)
 8006360:	4b2b      	ldrne	r3, [pc, #172]	; (8006410 <__ieee754_pow+0x3d0>)
 8006362:	4604      	mov	r4, r0
 8006364:	460d      	mov	r5, r1
 8006366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800636a:	e9cd 2300 	strd	r2, r3, [sp]
 800636e:	4632      	mov	r2, r6
 8006370:	463b      	mov	r3, r7
 8006372:	f7f9 ffad 	bl	80002d0 <__aeabi_dsub>
 8006376:	4652      	mov	r2, sl
 8006378:	465b      	mov	r3, fp
 800637a:	f7fa f961 	bl	8000640 <__aeabi_dmul>
 800637e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006382:	4680      	mov	r8, r0
 8006384:	4689      	mov	r9, r1
 8006386:	4620      	mov	r0, r4
 8006388:	4629      	mov	r1, r5
 800638a:	f7fa f959 	bl	8000640 <__aeabi_dmul>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4640      	mov	r0, r8
 8006394:	4649      	mov	r1, r9
 8006396:	f7f9 ff9d 	bl	80002d4 <__adddf3>
 800639a:	4632      	mov	r2, r6
 800639c:	463b      	mov	r3, r7
 800639e:	4680      	mov	r8, r0
 80063a0:	4689      	mov	r9, r1
 80063a2:	4650      	mov	r0, sl
 80063a4:	4659      	mov	r1, fp
 80063a6:	f7fa f94b 	bl	8000640 <__aeabi_dmul>
 80063aa:	4604      	mov	r4, r0
 80063ac:	460d      	mov	r5, r1
 80063ae:	460b      	mov	r3, r1
 80063b0:	4602      	mov	r2, r0
 80063b2:	4649      	mov	r1, r9
 80063b4:	4640      	mov	r0, r8
 80063b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80063ba:	f7f9 ff8b 	bl	80002d4 <__adddf3>
 80063be:	4b18      	ldr	r3, [pc, #96]	; (8006420 <__ieee754_pow+0x3e0>)
 80063c0:	4682      	mov	sl, r0
 80063c2:	4299      	cmp	r1, r3
 80063c4:	460f      	mov	r7, r1
 80063c6:	460e      	mov	r6, r1
 80063c8:	f340 82e5 	ble.w	8006996 <__ieee754_pow+0x956>
 80063cc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80063d0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80063d4:	4303      	orrs	r3, r0
 80063d6:	f000 81df 	beq.w	8006798 <__ieee754_pow+0x758>
 80063da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063de:	2200      	movs	r2, #0
 80063e0:	2300      	movs	r3, #0
 80063e2:	f7fa fb9f 	bl	8000b24 <__aeabi_dcmplt>
 80063e6:	3800      	subs	r0, #0
 80063e8:	bf18      	it	ne
 80063ea:	2001      	movne	r0, #1
 80063ec:	e72e      	b.n	800624c <__ieee754_pow+0x20c>
 80063ee:	bf00      	nop
 80063f0:	60000000 	.word	0x60000000
 80063f4:	3ff71547 	.word	0x3ff71547
 80063f8:	f85ddf44 	.word	0xf85ddf44
 80063fc:	3e54ae0b 	.word	0x3e54ae0b
 8006400:	55555555 	.word	0x55555555
 8006404:	3fd55555 	.word	0x3fd55555
 8006408:	652b82fe 	.word	0x652b82fe
 800640c:	3ff71547 	.word	0x3ff71547
 8006410:	3ff00000 	.word	0x3ff00000
 8006414:	3fd00000 	.word	0x3fd00000
 8006418:	3fe00000 	.word	0x3fe00000
 800641c:	bff00000 	.word	0xbff00000
 8006420:	408fffff 	.word	0x408fffff
 8006424:	4bd2      	ldr	r3, [pc, #840]	; (8006770 <__ieee754_pow+0x730>)
 8006426:	2200      	movs	r2, #0
 8006428:	402b      	ands	r3, r5
 800642a:	b943      	cbnz	r3, 800643e <__ieee754_pow+0x3fe>
 800642c:	4658      	mov	r0, fp
 800642e:	4661      	mov	r1, ip
 8006430:	4bd0      	ldr	r3, [pc, #832]	; (8006774 <__ieee754_pow+0x734>)
 8006432:	f7fa f905 	bl	8000640 <__aeabi_dmul>
 8006436:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800643a:	4683      	mov	fp, r0
 800643c:	460c      	mov	r4, r1
 800643e:	1523      	asrs	r3, r4, #20
 8006440:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006444:	4413      	add	r3, r2
 8006446:	930b      	str	r3, [sp, #44]	; 0x2c
 8006448:	4bcb      	ldr	r3, [pc, #812]	; (8006778 <__ieee754_pow+0x738>)
 800644a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800644e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006452:	429c      	cmp	r4, r3
 8006454:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006458:	dd08      	ble.n	800646c <__ieee754_pow+0x42c>
 800645a:	4bc8      	ldr	r3, [pc, #800]	; (800677c <__ieee754_pow+0x73c>)
 800645c:	429c      	cmp	r4, r3
 800645e:	f340 8199 	ble.w	8006794 <__ieee754_pow+0x754>
 8006462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006464:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006468:	3301      	adds	r3, #1
 800646a:	930b      	str	r3, [sp, #44]	; 0x2c
 800646c:	2600      	movs	r6, #0
 800646e:	00f3      	lsls	r3, r6, #3
 8006470:	930d      	str	r3, [sp, #52]	; 0x34
 8006472:	4bc3      	ldr	r3, [pc, #780]	; (8006780 <__ieee754_pow+0x740>)
 8006474:	4658      	mov	r0, fp
 8006476:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800647a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800647e:	4629      	mov	r1, r5
 8006480:	461a      	mov	r2, r3
 8006482:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006486:	4623      	mov	r3, r4
 8006488:	f7f9 ff22 	bl	80002d0 <__aeabi_dsub>
 800648c:	46da      	mov	sl, fp
 800648e:	462b      	mov	r3, r5
 8006490:	4652      	mov	r2, sl
 8006492:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006496:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800649a:	f7f9 ff1b 	bl	80002d4 <__adddf3>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	2000      	movs	r0, #0
 80064a4:	49b7      	ldr	r1, [pc, #732]	; (8006784 <__ieee754_pow+0x744>)
 80064a6:	f7fa f9f5 	bl	8000894 <__aeabi_ddiv>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80064b6:	f7fa f8c3 	bl	8000640 <__aeabi_dmul>
 80064ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80064c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064c6:	2300      	movs	r3, #0
 80064c8:	2200      	movs	r2, #0
 80064ca:	46ab      	mov	fp, r5
 80064cc:	106d      	asrs	r5, r5, #1
 80064ce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80064d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80064dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	4614      	mov	r4, r2
 80064e6:	461d      	mov	r5, r3
 80064e8:	f7fa f8aa 	bl	8000640 <__aeabi_dmul>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80064f4:	f7f9 feec 	bl	80002d0 <__aeabi_dsub>
 80064f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064fc:	4606      	mov	r6, r0
 80064fe:	460f      	mov	r7, r1
 8006500:	4620      	mov	r0, r4
 8006502:	4629      	mov	r1, r5
 8006504:	f7f9 fee4 	bl	80002d0 <__aeabi_dsub>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4650      	mov	r0, sl
 800650e:	4659      	mov	r1, fp
 8006510:	f7f9 fede 	bl	80002d0 <__aeabi_dsub>
 8006514:	4642      	mov	r2, r8
 8006516:	464b      	mov	r3, r9
 8006518:	f7fa f892 	bl	8000640 <__aeabi_dmul>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7f9 fed4 	bl	80002d0 <__aeabi_dsub>
 8006528:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800652c:	f7fa f888 	bl	8000640 <__aeabi_dmul>
 8006530:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006534:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006538:	4610      	mov	r0, r2
 800653a:	4619      	mov	r1, r3
 800653c:	f7fa f880 	bl	8000640 <__aeabi_dmul>
 8006540:	a379      	add	r3, pc, #484	; (adr r3, 8006728 <__ieee754_pow+0x6e8>)
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	4604      	mov	r4, r0
 8006548:	460d      	mov	r5, r1
 800654a:	f7fa f879 	bl	8000640 <__aeabi_dmul>
 800654e:	a378      	add	r3, pc, #480	; (adr r3, 8006730 <__ieee754_pow+0x6f0>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 febe 	bl	80002d4 <__adddf3>
 8006558:	4622      	mov	r2, r4
 800655a:	462b      	mov	r3, r5
 800655c:	f7fa f870 	bl	8000640 <__aeabi_dmul>
 8006560:	a375      	add	r3, pc, #468	; (adr r3, 8006738 <__ieee754_pow+0x6f8>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7f9 feb5 	bl	80002d4 <__adddf3>
 800656a:	4622      	mov	r2, r4
 800656c:	462b      	mov	r3, r5
 800656e:	f7fa f867 	bl	8000640 <__aeabi_dmul>
 8006572:	a373      	add	r3, pc, #460	; (adr r3, 8006740 <__ieee754_pow+0x700>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7f9 feac 	bl	80002d4 <__adddf3>
 800657c:	4622      	mov	r2, r4
 800657e:	462b      	mov	r3, r5
 8006580:	f7fa f85e 	bl	8000640 <__aeabi_dmul>
 8006584:	a370      	add	r3, pc, #448	; (adr r3, 8006748 <__ieee754_pow+0x708>)
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	f7f9 fea3 	bl	80002d4 <__adddf3>
 800658e:	4622      	mov	r2, r4
 8006590:	462b      	mov	r3, r5
 8006592:	f7fa f855 	bl	8000640 <__aeabi_dmul>
 8006596:	a36e      	add	r3, pc, #440	; (adr r3, 8006750 <__ieee754_pow+0x710>)
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f7f9 fe9a 	bl	80002d4 <__adddf3>
 80065a0:	4622      	mov	r2, r4
 80065a2:	4606      	mov	r6, r0
 80065a4:	460f      	mov	r7, r1
 80065a6:	462b      	mov	r3, r5
 80065a8:	4620      	mov	r0, r4
 80065aa:	4629      	mov	r1, r5
 80065ac:	f7fa f848 	bl	8000640 <__aeabi_dmul>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7fa f842 	bl	8000640 <__aeabi_dmul>
 80065bc:	4604      	mov	r4, r0
 80065be:	460d      	mov	r5, r1
 80065c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c4:	4642      	mov	r2, r8
 80065c6:	464b      	mov	r3, r9
 80065c8:	f7f9 fe84 	bl	80002d4 <__adddf3>
 80065cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065d0:	f7fa f836 	bl	8000640 <__aeabi_dmul>
 80065d4:	4622      	mov	r2, r4
 80065d6:	462b      	mov	r3, r5
 80065d8:	f7f9 fe7c 	bl	80002d4 <__adddf3>
 80065dc:	4642      	mov	r2, r8
 80065de:	4606      	mov	r6, r0
 80065e0:	460f      	mov	r7, r1
 80065e2:	464b      	mov	r3, r9
 80065e4:	4640      	mov	r0, r8
 80065e6:	4649      	mov	r1, r9
 80065e8:	f7fa f82a 	bl	8000640 <__aeabi_dmul>
 80065ec:	2200      	movs	r2, #0
 80065ee:	4b66      	ldr	r3, [pc, #408]	; (8006788 <__ieee754_pow+0x748>)
 80065f0:	4682      	mov	sl, r0
 80065f2:	468b      	mov	fp, r1
 80065f4:	f7f9 fe6e 	bl	80002d4 <__adddf3>
 80065f8:	4632      	mov	r2, r6
 80065fa:	463b      	mov	r3, r7
 80065fc:	f7f9 fe6a 	bl	80002d4 <__adddf3>
 8006600:	2400      	movs	r4, #0
 8006602:	460d      	mov	r5, r1
 8006604:	4622      	mov	r2, r4
 8006606:	460b      	mov	r3, r1
 8006608:	4640      	mov	r0, r8
 800660a:	4649      	mov	r1, r9
 800660c:	f7fa f818 	bl	8000640 <__aeabi_dmul>
 8006610:	2200      	movs	r2, #0
 8006612:	4680      	mov	r8, r0
 8006614:	4689      	mov	r9, r1
 8006616:	4620      	mov	r0, r4
 8006618:	4629      	mov	r1, r5
 800661a:	4b5b      	ldr	r3, [pc, #364]	; (8006788 <__ieee754_pow+0x748>)
 800661c:	f7f9 fe58 	bl	80002d0 <__aeabi_dsub>
 8006620:	4652      	mov	r2, sl
 8006622:	465b      	mov	r3, fp
 8006624:	f7f9 fe54 	bl	80002d0 <__aeabi_dsub>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4630      	mov	r0, r6
 800662e:	4639      	mov	r1, r7
 8006630:	f7f9 fe4e 	bl	80002d0 <__aeabi_dsub>
 8006634:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006638:	f7fa f802 	bl	8000640 <__aeabi_dmul>
 800663c:	4622      	mov	r2, r4
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006646:	462b      	mov	r3, r5
 8006648:	f7f9 fffa 	bl	8000640 <__aeabi_dmul>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4630      	mov	r0, r6
 8006652:	4639      	mov	r1, r7
 8006654:	f7f9 fe3e 	bl	80002d4 <__adddf3>
 8006658:	2400      	movs	r4, #0
 800665a:	4606      	mov	r6, r0
 800665c:	460f      	mov	r7, r1
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7f9 fe35 	bl	80002d4 <__adddf3>
 800666a:	a33b      	add	r3, pc, #236	; (adr r3, 8006758 <__ieee754_pow+0x718>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	4620      	mov	r0, r4
 8006672:	460d      	mov	r5, r1
 8006674:	f7f9 ffe4 	bl	8000640 <__aeabi_dmul>
 8006678:	4642      	mov	r2, r8
 800667a:	464b      	mov	r3, r9
 800667c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006680:	4620      	mov	r0, r4
 8006682:	4629      	mov	r1, r5
 8006684:	f7f9 fe24 	bl	80002d0 <__aeabi_dsub>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4630      	mov	r0, r6
 800668e:	4639      	mov	r1, r7
 8006690:	f7f9 fe1e 	bl	80002d0 <__aeabi_dsub>
 8006694:	a332      	add	r3, pc, #200	; (adr r3, 8006760 <__ieee754_pow+0x720>)
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	f7f9 ffd1 	bl	8000640 <__aeabi_dmul>
 800669e:	a332      	add	r3, pc, #200	; (adr r3, 8006768 <__ieee754_pow+0x728>)
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	4606      	mov	r6, r0
 80066a6:	460f      	mov	r7, r1
 80066a8:	4620      	mov	r0, r4
 80066aa:	4629      	mov	r1, r5
 80066ac:	f7f9 ffc8 	bl	8000640 <__aeabi_dmul>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f7f9 fe0c 	bl	80002d4 <__adddf3>
 80066bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066be:	4b33      	ldr	r3, [pc, #204]	; (800678c <__ieee754_pow+0x74c>)
 80066c0:	f04f 0a00 	mov.w	sl, #0
 80066c4:	4413      	add	r3, r2
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f7f9 fe03 	bl	80002d4 <__adddf3>
 80066ce:	4680      	mov	r8, r0
 80066d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066d2:	4689      	mov	r9, r1
 80066d4:	f7f9 ff4a 	bl	800056c <__aeabi_i2d>
 80066d8:	4604      	mov	r4, r0
 80066da:	460d      	mov	r5, r1
 80066dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066de:	4b2c      	ldr	r3, [pc, #176]	; (8006790 <__ieee754_pow+0x750>)
 80066e0:	4413      	add	r3, r2
 80066e2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80066e6:	4642      	mov	r2, r8
 80066e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ec:	464b      	mov	r3, r9
 80066ee:	f7f9 fdf1 	bl	80002d4 <__adddf3>
 80066f2:	4632      	mov	r2, r6
 80066f4:	463b      	mov	r3, r7
 80066f6:	f7f9 fded 	bl	80002d4 <__adddf3>
 80066fa:	4622      	mov	r2, r4
 80066fc:	462b      	mov	r3, r5
 80066fe:	f7f9 fde9 	bl	80002d4 <__adddf3>
 8006702:	4622      	mov	r2, r4
 8006704:	462b      	mov	r3, r5
 8006706:	4650      	mov	r0, sl
 8006708:	468b      	mov	fp, r1
 800670a:	f7f9 fde1 	bl	80002d0 <__aeabi_dsub>
 800670e:	4632      	mov	r2, r6
 8006710:	463b      	mov	r3, r7
 8006712:	f7f9 fddd 	bl	80002d0 <__aeabi_dsub>
 8006716:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800671a:	f7f9 fdd9 	bl	80002d0 <__aeabi_dsub>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4640      	mov	r0, r8
 8006724:	4649      	mov	r1, r9
 8006726:	e60d      	b.n	8006344 <__ieee754_pow+0x304>
 8006728:	4a454eef 	.word	0x4a454eef
 800672c:	3fca7e28 	.word	0x3fca7e28
 8006730:	93c9db65 	.word	0x93c9db65
 8006734:	3fcd864a 	.word	0x3fcd864a
 8006738:	a91d4101 	.word	0xa91d4101
 800673c:	3fd17460 	.word	0x3fd17460
 8006740:	518f264d 	.word	0x518f264d
 8006744:	3fd55555 	.word	0x3fd55555
 8006748:	db6fabff 	.word	0xdb6fabff
 800674c:	3fdb6db6 	.word	0x3fdb6db6
 8006750:	33333303 	.word	0x33333303
 8006754:	3fe33333 	.word	0x3fe33333
 8006758:	e0000000 	.word	0xe0000000
 800675c:	3feec709 	.word	0x3feec709
 8006760:	dc3a03fd 	.word	0xdc3a03fd
 8006764:	3feec709 	.word	0x3feec709
 8006768:	145b01f5 	.word	0x145b01f5
 800676c:	be3e2fe0 	.word	0xbe3e2fe0
 8006770:	7ff00000 	.word	0x7ff00000
 8006774:	43400000 	.word	0x43400000
 8006778:	0003988e 	.word	0x0003988e
 800677c:	000bb679 	.word	0x000bb679
 8006780:	080071b0 	.word	0x080071b0
 8006784:	3ff00000 	.word	0x3ff00000
 8006788:	40080000 	.word	0x40080000
 800678c:	080071d0 	.word	0x080071d0
 8006790:	080071c0 	.word	0x080071c0
 8006794:	2601      	movs	r6, #1
 8006796:	e66a      	b.n	800646e <__ieee754_pow+0x42e>
 8006798:	a39d      	add	r3, pc, #628	; (adr r3, 8006a10 <__ieee754_pow+0x9d0>)
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f7f9 fd97 	bl	80002d4 <__adddf3>
 80067a6:	4622      	mov	r2, r4
 80067a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067ac:	462b      	mov	r3, r5
 80067ae:	4650      	mov	r0, sl
 80067b0:	4639      	mov	r1, r7
 80067b2:	f7f9 fd8d 	bl	80002d0 <__aeabi_dsub>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067be:	f7fa f9cf 	bl	8000b60 <__aeabi_dcmpgt>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f47f ae09 	bne.w	80063da <__ieee754_pow+0x39a>
 80067c8:	4aa3      	ldr	r2, [pc, #652]	; (8006a58 <__ieee754_pow+0xa18>)
 80067ca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80067ce:	4293      	cmp	r3, r2
 80067d0:	f340 8101 	ble.w	80069d6 <__ieee754_pow+0x996>
 80067d4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80067d8:	2000      	movs	r0, #0
 80067da:	151b      	asrs	r3, r3, #20
 80067dc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80067e0:	fa4a f303 	asr.w	r3, sl, r3
 80067e4:	4433      	add	r3, r6
 80067e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80067ea:	4f9c      	ldr	r7, [pc, #624]	; (8006a5c <__ieee754_pow+0xa1c>)
 80067ec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80067f0:	4117      	asrs	r7, r2
 80067f2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80067f6:	ea23 0107 	bic.w	r1, r3, r7
 80067fa:	f1c2 0214 	rsb	r2, r2, #20
 80067fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006802:	460b      	mov	r3, r1
 8006804:	fa4a fa02 	asr.w	sl, sl, r2
 8006808:	2e00      	cmp	r6, #0
 800680a:	4602      	mov	r2, r0
 800680c:	4629      	mov	r1, r5
 800680e:	4620      	mov	r0, r4
 8006810:	bfb8      	it	lt
 8006812:	f1ca 0a00 	rsblt	sl, sl, #0
 8006816:	f7f9 fd5b 	bl	80002d0 <__aeabi_dsub>
 800681a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800681e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006822:	2400      	movs	r4, #0
 8006824:	4642      	mov	r2, r8
 8006826:	464b      	mov	r3, r9
 8006828:	f7f9 fd54 	bl	80002d4 <__adddf3>
 800682c:	a37a      	add	r3, pc, #488	; (adr r3, 8006a18 <__ieee754_pow+0x9d8>)
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	4620      	mov	r0, r4
 8006834:	460d      	mov	r5, r1
 8006836:	f7f9 ff03 	bl	8000640 <__aeabi_dmul>
 800683a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800683e:	4606      	mov	r6, r0
 8006840:	460f      	mov	r7, r1
 8006842:	4620      	mov	r0, r4
 8006844:	4629      	mov	r1, r5
 8006846:	f7f9 fd43 	bl	80002d0 <__aeabi_dsub>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7f9 fd3d 	bl	80002d0 <__aeabi_dsub>
 8006856:	a372      	add	r3, pc, #456	; (adr r3, 8006a20 <__ieee754_pow+0x9e0>)
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f7f9 fef0 	bl	8000640 <__aeabi_dmul>
 8006860:	a371      	add	r3, pc, #452	; (adr r3, 8006a28 <__ieee754_pow+0x9e8>)
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	4680      	mov	r8, r0
 8006868:	4689      	mov	r9, r1
 800686a:	4620      	mov	r0, r4
 800686c:	4629      	mov	r1, r5
 800686e:	f7f9 fee7 	bl	8000640 <__aeabi_dmul>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4640      	mov	r0, r8
 8006878:	4649      	mov	r1, r9
 800687a:	f7f9 fd2b 	bl	80002d4 <__adddf3>
 800687e:	4604      	mov	r4, r0
 8006880:	460d      	mov	r5, r1
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4630      	mov	r0, r6
 8006888:	4639      	mov	r1, r7
 800688a:	f7f9 fd23 	bl	80002d4 <__adddf3>
 800688e:	4632      	mov	r2, r6
 8006890:	463b      	mov	r3, r7
 8006892:	4680      	mov	r8, r0
 8006894:	4689      	mov	r9, r1
 8006896:	f7f9 fd1b 	bl	80002d0 <__aeabi_dsub>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7f9 fd15 	bl	80002d0 <__aeabi_dsub>
 80068a6:	4642      	mov	r2, r8
 80068a8:	4606      	mov	r6, r0
 80068aa:	460f      	mov	r7, r1
 80068ac:	464b      	mov	r3, r9
 80068ae:	4640      	mov	r0, r8
 80068b0:	4649      	mov	r1, r9
 80068b2:	f7f9 fec5 	bl	8000640 <__aeabi_dmul>
 80068b6:	a35e      	add	r3, pc, #376	; (adr r3, 8006a30 <__ieee754_pow+0x9f0>)
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	4604      	mov	r4, r0
 80068be:	460d      	mov	r5, r1
 80068c0:	f7f9 febe 	bl	8000640 <__aeabi_dmul>
 80068c4:	a35c      	add	r3, pc, #368	; (adr r3, 8006a38 <__ieee754_pow+0x9f8>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f7f9 fd01 	bl	80002d0 <__aeabi_dsub>
 80068ce:	4622      	mov	r2, r4
 80068d0:	462b      	mov	r3, r5
 80068d2:	f7f9 feb5 	bl	8000640 <__aeabi_dmul>
 80068d6:	a35a      	add	r3, pc, #360	; (adr r3, 8006a40 <__ieee754_pow+0xa00>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fcfa 	bl	80002d4 <__adddf3>
 80068e0:	4622      	mov	r2, r4
 80068e2:	462b      	mov	r3, r5
 80068e4:	f7f9 feac 	bl	8000640 <__aeabi_dmul>
 80068e8:	a357      	add	r3, pc, #348	; (adr r3, 8006a48 <__ieee754_pow+0xa08>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7f9 fcef 	bl	80002d0 <__aeabi_dsub>
 80068f2:	4622      	mov	r2, r4
 80068f4:	462b      	mov	r3, r5
 80068f6:	f7f9 fea3 	bl	8000640 <__aeabi_dmul>
 80068fa:	a355      	add	r3, pc, #340	; (adr r3, 8006a50 <__ieee754_pow+0xa10>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f7f9 fce8 	bl	80002d4 <__adddf3>
 8006904:	4622      	mov	r2, r4
 8006906:	462b      	mov	r3, r5
 8006908:	f7f9 fe9a 	bl	8000640 <__aeabi_dmul>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4640      	mov	r0, r8
 8006912:	4649      	mov	r1, r9
 8006914:	f7f9 fcdc 	bl	80002d0 <__aeabi_dsub>
 8006918:	4604      	mov	r4, r0
 800691a:	460d      	mov	r5, r1
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4640      	mov	r0, r8
 8006922:	4649      	mov	r1, r9
 8006924:	f7f9 fe8c 	bl	8000640 <__aeabi_dmul>
 8006928:	2200      	movs	r2, #0
 800692a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800692e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f7f9 fccb 	bl	80002d0 <__aeabi_dsub>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006942:	f7f9 ffa7 	bl	8000894 <__aeabi_ddiv>
 8006946:	4632      	mov	r2, r6
 8006948:	4604      	mov	r4, r0
 800694a:	460d      	mov	r5, r1
 800694c:	463b      	mov	r3, r7
 800694e:	4640      	mov	r0, r8
 8006950:	4649      	mov	r1, r9
 8006952:	f7f9 fe75 	bl	8000640 <__aeabi_dmul>
 8006956:	4632      	mov	r2, r6
 8006958:	463b      	mov	r3, r7
 800695a:	f7f9 fcbb 	bl	80002d4 <__adddf3>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4620      	mov	r0, r4
 8006964:	4629      	mov	r1, r5
 8006966:	f7f9 fcb3 	bl	80002d0 <__aeabi_dsub>
 800696a:	4642      	mov	r2, r8
 800696c:	464b      	mov	r3, r9
 800696e:	f7f9 fcaf 	bl	80002d0 <__aeabi_dsub>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	2000      	movs	r0, #0
 8006978:	4939      	ldr	r1, [pc, #228]	; (8006a60 <__ieee754_pow+0xa20>)
 800697a:	f7f9 fca9 	bl	80002d0 <__aeabi_dsub>
 800697e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006982:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006986:	da29      	bge.n	80069dc <__ieee754_pow+0x99c>
 8006988:	4652      	mov	r2, sl
 800698a:	f000 f955 	bl	8006c38 <scalbn>
 800698e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006992:	f7ff bbfe 	b.w	8006192 <__ieee754_pow+0x152>
 8006996:	4b33      	ldr	r3, [pc, #204]	; (8006a64 <__ieee754_pow+0xa24>)
 8006998:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800699c:	429f      	cmp	r7, r3
 800699e:	f77f af13 	ble.w	80067c8 <__ieee754_pow+0x788>
 80069a2:	4b31      	ldr	r3, [pc, #196]	; (8006a68 <__ieee754_pow+0xa28>)
 80069a4:	440b      	add	r3, r1
 80069a6:	4303      	orrs	r3, r0
 80069a8:	d009      	beq.n	80069be <__ieee754_pow+0x97e>
 80069aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069ae:	2200      	movs	r2, #0
 80069b0:	2300      	movs	r3, #0
 80069b2:	f7fa f8b7 	bl	8000b24 <__aeabi_dcmplt>
 80069b6:	3800      	subs	r0, #0
 80069b8:	bf18      	it	ne
 80069ba:	2001      	movne	r0, #1
 80069bc:	e453      	b.n	8006266 <__ieee754_pow+0x226>
 80069be:	4622      	mov	r2, r4
 80069c0:	462b      	mov	r3, r5
 80069c2:	f7f9 fc85 	bl	80002d0 <__aeabi_dsub>
 80069c6:	4642      	mov	r2, r8
 80069c8:	464b      	mov	r3, r9
 80069ca:	f7fa f8bf 	bl	8000b4c <__aeabi_dcmpge>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f43f aefa 	beq.w	80067c8 <__ieee754_pow+0x788>
 80069d4:	e7e9      	b.n	80069aa <__ieee754_pow+0x96a>
 80069d6:	f04f 0a00 	mov.w	sl, #0
 80069da:	e720      	b.n	800681e <__ieee754_pow+0x7de>
 80069dc:	4621      	mov	r1, r4
 80069de:	e7d6      	b.n	800698e <__ieee754_pow+0x94e>
 80069e0:	f04f 0b00 	mov.w	fp, #0
 80069e4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006a60 <__ieee754_pow+0xa20>
 80069e8:	f7ff bbba 	b.w	8006160 <__ieee754_pow+0x120>
 80069ec:	f04f 0b00 	mov.w	fp, #0
 80069f0:	f04f 0c00 	mov.w	ip, #0
 80069f4:	f7ff bbb4 	b.w	8006160 <__ieee754_pow+0x120>
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	f7ff bb3d 	b.w	800607a <__ieee754_pow+0x3a>
 8006a00:	9200      	str	r2, [sp, #0]
 8006a02:	f7ff bb89 	b.w	8006118 <__ieee754_pow+0xd8>
 8006a06:	2300      	movs	r3, #0
 8006a08:	f7ff bb73 	b.w	80060f2 <__ieee754_pow+0xb2>
 8006a0c:	f3af 8000 	nop.w
 8006a10:	652b82fe 	.word	0x652b82fe
 8006a14:	3c971547 	.word	0x3c971547
 8006a18:	00000000 	.word	0x00000000
 8006a1c:	3fe62e43 	.word	0x3fe62e43
 8006a20:	fefa39ef 	.word	0xfefa39ef
 8006a24:	3fe62e42 	.word	0x3fe62e42
 8006a28:	0ca86c39 	.word	0x0ca86c39
 8006a2c:	be205c61 	.word	0xbe205c61
 8006a30:	72bea4d0 	.word	0x72bea4d0
 8006a34:	3e663769 	.word	0x3e663769
 8006a38:	c5d26bf1 	.word	0xc5d26bf1
 8006a3c:	3ebbbd41 	.word	0x3ebbbd41
 8006a40:	af25de2c 	.word	0xaf25de2c
 8006a44:	3f11566a 	.word	0x3f11566a
 8006a48:	16bebd93 	.word	0x16bebd93
 8006a4c:	3f66c16c 	.word	0x3f66c16c
 8006a50:	5555553e 	.word	0x5555553e
 8006a54:	3fc55555 	.word	0x3fc55555
 8006a58:	3fe00000 	.word	0x3fe00000
 8006a5c:	000fffff 	.word	0x000fffff
 8006a60:	3ff00000 	.word	0x3ff00000
 8006a64:	4090cbff 	.word	0x4090cbff
 8006a68:	3f6f3400 	.word	0x3f6f3400

08006a6c <__ieee754_sqrt>:
 8006a6c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006bc8 <__ieee754_sqrt+0x15c>
 8006a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a74:	ea3c 0c01 	bics.w	ip, ip, r1
 8006a78:	4606      	mov	r6, r0
 8006a7a:	460d      	mov	r5, r1
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	460a      	mov	r2, r1
 8006a80:	4607      	mov	r7, r0
 8006a82:	4603      	mov	r3, r0
 8006a84:	d10f      	bne.n	8006aa6 <__ieee754_sqrt+0x3a>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	f7f9 fdd9 	bl	8000640 <__aeabi_dmul>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4630      	mov	r0, r6
 8006a94:	4629      	mov	r1, r5
 8006a96:	f7f9 fc1d 	bl	80002d4 <__adddf3>
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460d      	mov	r5, r1
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa6:	2900      	cmp	r1, #0
 8006aa8:	dc0e      	bgt.n	8006ac8 <__ieee754_sqrt+0x5c>
 8006aaa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006aae:	ea5c 0707 	orrs.w	r7, ip, r7
 8006ab2:	d0f4      	beq.n	8006a9e <__ieee754_sqrt+0x32>
 8006ab4:	b141      	cbz	r1, 8006ac8 <__ieee754_sqrt+0x5c>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	f7f9 fc09 	bl	80002d0 <__aeabi_dsub>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	f7f9 fee7 	bl	8000894 <__aeabi_ddiv>
 8006ac6:	e7e8      	b.n	8006a9a <__ieee754_sqrt+0x2e>
 8006ac8:	1521      	asrs	r1, r4, #20
 8006aca:	d075      	beq.n	8006bb8 <__ieee754_sqrt+0x14c>
 8006acc:	07cc      	lsls	r4, r1, #31
 8006ace:	f04f 0400 	mov.w	r4, #0
 8006ad2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006ad6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8006ada:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ade:	bf5e      	ittt	pl
 8006ae0:	0fd9      	lsrpl	r1, r3, #31
 8006ae2:	005b      	lslpl	r3, r3, #1
 8006ae4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006ae8:	0fd9      	lsrs	r1, r3, #31
 8006aea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006aee:	2516      	movs	r5, #22
 8006af0:	4620      	mov	r0, r4
 8006af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006af6:	107f      	asrs	r7, r7, #1
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	1846      	adds	r6, r0, r1
 8006afc:	4296      	cmp	r6, r2
 8006afe:	bfde      	ittt	le
 8006b00:	1b92      	suble	r2, r2, r6
 8006b02:	1870      	addle	r0, r6, r1
 8006b04:	1864      	addle	r4, r4, r1
 8006b06:	0052      	lsls	r2, r2, #1
 8006b08:	3d01      	subs	r5, #1
 8006b0a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006b0e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006b12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b16:	d1f0      	bne.n	8006afa <__ieee754_sqrt+0x8e>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f04f 0e20 	mov.w	lr, #32
 8006b1e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006b22:	4282      	cmp	r2, r0
 8006b24:	eb06 0c05 	add.w	ip, r6, r5
 8006b28:	dc02      	bgt.n	8006b30 <__ieee754_sqrt+0xc4>
 8006b2a:	d113      	bne.n	8006b54 <__ieee754_sqrt+0xe8>
 8006b2c:	459c      	cmp	ip, r3
 8006b2e:	d811      	bhi.n	8006b54 <__ieee754_sqrt+0xe8>
 8006b30:	f1bc 0f00 	cmp.w	ip, #0
 8006b34:	eb0c 0506 	add.w	r5, ip, r6
 8006b38:	da43      	bge.n	8006bc2 <__ieee754_sqrt+0x156>
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	db41      	blt.n	8006bc2 <__ieee754_sqrt+0x156>
 8006b3e:	f100 0801 	add.w	r8, r0, #1
 8006b42:	1a12      	subs	r2, r2, r0
 8006b44:	4640      	mov	r0, r8
 8006b46:	459c      	cmp	ip, r3
 8006b48:	bf88      	it	hi
 8006b4a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006b4e:	eba3 030c 	sub.w	r3, r3, ip
 8006b52:	4431      	add	r1, r6
 8006b54:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006b58:	f1be 0e01 	subs.w	lr, lr, #1
 8006b5c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b64:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006b68:	d1db      	bne.n	8006b22 <__ieee754_sqrt+0xb6>
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	d006      	beq.n	8006b7c <__ieee754_sqrt+0x110>
 8006b6e:	1c48      	adds	r0, r1, #1
 8006b70:	bf0b      	itete	eq
 8006b72:	4671      	moveq	r1, lr
 8006b74:	3101      	addne	r1, #1
 8006b76:	3401      	addeq	r4, #1
 8006b78:	f021 0101 	bicne.w	r1, r1, #1
 8006b7c:	1063      	asrs	r3, r4, #1
 8006b7e:	0849      	lsrs	r1, r1, #1
 8006b80:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006b84:	07e2      	lsls	r2, r4, #31
 8006b86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006b8a:	bf48      	it	mi
 8006b8c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006b90:	460e      	mov	r6, r1
 8006b92:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006b96:	e782      	b.n	8006a9e <__ieee754_sqrt+0x32>
 8006b98:	0ada      	lsrs	r2, r3, #11
 8006b9a:	3815      	subs	r0, #21
 8006b9c:	055b      	lsls	r3, r3, #21
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	d0fa      	beq.n	8006b98 <__ieee754_sqrt+0x12c>
 8006ba2:	02d5      	lsls	r5, r2, #11
 8006ba4:	d50a      	bpl.n	8006bbc <__ieee754_sqrt+0x150>
 8006ba6:	f1c1 0420 	rsb	r4, r1, #32
 8006baa:	fa23 f404 	lsr.w	r4, r3, r4
 8006bae:	1e4d      	subs	r5, r1, #1
 8006bb0:	408b      	lsls	r3, r1
 8006bb2:	4322      	orrs	r2, r4
 8006bb4:	1b41      	subs	r1, r0, r5
 8006bb6:	e789      	b.n	8006acc <__ieee754_sqrt+0x60>
 8006bb8:	4608      	mov	r0, r1
 8006bba:	e7f0      	b.n	8006b9e <__ieee754_sqrt+0x132>
 8006bbc:	0052      	lsls	r2, r2, #1
 8006bbe:	3101      	adds	r1, #1
 8006bc0:	e7ef      	b.n	8006ba2 <__ieee754_sqrt+0x136>
 8006bc2:	4680      	mov	r8, r0
 8006bc4:	e7bd      	b.n	8006b42 <__ieee754_sqrt+0xd6>
 8006bc6:	bf00      	nop
 8006bc8:	7ff00000 	.word	0x7ff00000

08006bcc <with_errno>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	4604      	mov	r4, r0
 8006bd0:	460d      	mov	r5, r1
 8006bd2:	4616      	mov	r6, r2
 8006bd4:	f7fc fac2 	bl	800315c <__errno>
 8006bd8:	4629      	mov	r1, r5
 8006bda:	6006      	str	r6, [r0, #0]
 8006bdc:	4620      	mov	r0, r4
 8006bde:	bd70      	pop	{r4, r5, r6, pc}

08006be0 <xflow>:
 8006be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006be2:	4615      	mov	r5, r2
 8006be4:	461c      	mov	r4, r3
 8006be6:	b180      	cbz	r0, 8006c0a <xflow+0x2a>
 8006be8:	4610      	mov	r0, r2
 8006bea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006bee:	e9cd 0100 	strd	r0, r1, [sp]
 8006bf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	f7f9 fd21 	bl	8000640 <__aeabi_dmul>
 8006bfe:	2222      	movs	r2, #34	; 0x22
 8006c00:	b003      	add	sp, #12
 8006c02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c06:	f7ff bfe1 	b.w	8006bcc <with_errno>
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	e7ee      	b.n	8006bee <xflow+0xe>

08006c10 <__math_uflow>:
 8006c10:	2200      	movs	r2, #0
 8006c12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c16:	f7ff bfe3 	b.w	8006be0 <xflow>

08006c1a <__math_oflow>:
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006c20:	f7ff bfde 	b.w	8006be0 <xflow>

08006c24 <fabs>:
 8006c24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006c28:	4770      	bx	lr

08006c2a <finite>:
 8006c2a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006c2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006c32:	0fc0      	lsrs	r0, r0, #31
 8006c34:	4770      	bx	lr
	...

08006c38 <scalbn>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006c3e:	4604      	mov	r4, r0
 8006c40:	460d      	mov	r5, r1
 8006c42:	4617      	mov	r7, r2
 8006c44:	460b      	mov	r3, r1
 8006c46:	b996      	cbnz	r6, 8006c6e <scalbn+0x36>
 8006c48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c4c:	4303      	orrs	r3, r0
 8006c4e:	d039      	beq.n	8006cc4 <scalbn+0x8c>
 8006c50:	4b33      	ldr	r3, [pc, #204]	; (8006d20 <scalbn+0xe8>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	f7f9 fcf4 	bl	8000640 <__aeabi_dmul>
 8006c58:	4b32      	ldr	r3, [pc, #200]	; (8006d24 <scalbn+0xec>)
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	429f      	cmp	r7, r3
 8006c5e:	460d      	mov	r5, r1
 8006c60:	da0f      	bge.n	8006c82 <scalbn+0x4a>
 8006c62:	a32b      	add	r3, pc, #172	; (adr r3, 8006d10 <scalbn+0xd8>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f7f9 fcea 	bl	8000640 <__aeabi_dmul>
 8006c6c:	e006      	b.n	8006c7c <scalbn+0x44>
 8006c6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006c72:	4296      	cmp	r6, r2
 8006c74:	d10a      	bne.n	8006c8c <scalbn+0x54>
 8006c76:	4602      	mov	r2, r0
 8006c78:	f7f9 fb2c 	bl	80002d4 <__adddf3>
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	460d      	mov	r5, r1
 8006c80:	e020      	b.n	8006cc4 <scalbn+0x8c>
 8006c82:	460b      	mov	r3, r1
 8006c84:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c88:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006c8c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006c90:	19b9      	adds	r1, r7, r6
 8006c92:	4291      	cmp	r1, r2
 8006c94:	dd0e      	ble.n	8006cb4 <scalbn+0x7c>
 8006c96:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006c9a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006c9e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006ca2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006ca6:	4820      	ldr	r0, [pc, #128]	; (8006d28 <scalbn+0xf0>)
 8006ca8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006cac:	a31a      	add	r3, pc, #104	; (adr r3, 8006d18 <scalbn+0xe0>)
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	e7d9      	b.n	8006c68 <scalbn+0x30>
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	dd08      	ble.n	8006cca <scalbn+0x92>
 8006cb8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006cce:	da12      	bge.n	8006cf6 <scalbn+0xbe>
 8006cd0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006cd4:	429f      	cmp	r7, r3
 8006cd6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006cda:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006cde:	dcdc      	bgt.n	8006c9a <scalbn+0x62>
 8006ce0:	a30b      	add	r3, pc, #44	; (adr r3, 8006d10 <scalbn+0xd8>)
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006cea:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006cee:	480f      	ldr	r0, [pc, #60]	; (8006d2c <scalbn+0xf4>)
 8006cf0:	f041 011f 	orr.w	r1, r1, #31
 8006cf4:	e7b8      	b.n	8006c68 <scalbn+0x30>
 8006cf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cfa:	3136      	adds	r1, #54	; 0x36
 8006cfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d00:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006d04:	4620      	mov	r0, r4
 8006d06:	4629      	mov	r1, r5
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <scalbn+0xf8>)
 8006d0c:	e7ac      	b.n	8006c68 <scalbn+0x30>
 8006d0e:	bf00      	nop
 8006d10:	c2f8f359 	.word	0xc2f8f359
 8006d14:	01a56e1f 	.word	0x01a56e1f
 8006d18:	8800759c 	.word	0x8800759c
 8006d1c:	7e37e43c 	.word	0x7e37e43c
 8006d20:	43500000 	.word	0x43500000
 8006d24:	ffff3cb0 	.word	0xffff3cb0
 8006d28:	8800759c 	.word	0x8800759c
 8006d2c:	c2f8f359 	.word	0xc2f8f359
 8006d30:	3c900000 	.word	0x3c900000

08006d34 <_init>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	bf00      	nop
 8006d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3a:	bc08      	pop	{r3}
 8006d3c:	469e      	mov	lr, r3
 8006d3e:	4770      	bx	lr

08006d40 <_fini>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	bf00      	nop
 8006d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d46:	bc08      	pop	{r3}
 8006d48:	469e      	mov	lr, r3
 8006d4a:	4770      	bx	lr
